{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "140069d6-57bd-46c5-b3c0-f55af4ebfacf",
        "name": "Clear Cache",
        "item": [
          {
            "id": "89c57e44-a4ed-42fe-9ccf-ad7bc5b7fb19",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f17e09db-16cf-4cf4-ae18-2ce14de5fb90",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4b5c3c9b-f52a-4a47-a202-3563aa89ccb9"
                }
              }
            ]
          },
          {
            "id": "c7c257b9-ef24-4988-bef4-1a536d0a24f8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3ccaca3d-3c59-4104-a5bd-99b7d24fb109",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "16f2d87e-6a21-440d-b37a-604f8b7a4666"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0e181edf-6377-4338-825d-603bec745fb1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9848bccc-f5bf-4d62-a1a4-7b07a6e7db81",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a02876a5-25c1-441e-9686-27f04109f596",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09fb7dc9-5ec2-4a75-b066-7113cd7d7b03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0c72cc4c-c6f4-4138-9743-71759c33248e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "06d7d685-66a0-48c2-b6df-9760f6cbf1a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "491a4ab3-ee46-48fe-914c-d0a644dfcf35"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "84e0c16f-cd93-4ca9-9fce-3d280ab08770",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a80a908a-ef7b-403b-b3c6-867c6f483036"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2db5b87-bdbe-4515-962b-f3ca44d36487",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9e5fbf4b-9315-437a-b185-c18d48a5816d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "09c8d4c5-cab7-4ace-b677-4759ab250461",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea4e64ad-783a-486a-94f2-657a49773b81"
            }
          }
        ]
      },
      {
        "id": "c51ffb1d-2843-423d-8a1a-ddd7b7ff0e6a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f3de65aa-1b05-4422-9b6c-18f705b8d25d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3733eb4c-6b1e-4608-bc03-7c82f0e67c73",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "64f6ff38-f79f-4754-9469-c2610e7bd27c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ac570d-4b33-4cde-9a15-e2d5f4515390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5866468-0f08-4a05-a215-6454299ac5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "757467b3-c4de-47f0-8ffe-6ad1fa70f7f9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d4751e7-e952-42c5-9b1a-a001b411af5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e0032f9-b009-4836-920a-cdc73ad35f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8620de3c-a44d-4b8f-914d-e0639745b4db",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692220a1-c906-4772-b19c-84304e635149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c9497e7-eee9-4bf4-8cf3-962aff051700"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a8ec5031-e103-4b79-b92c-4275cff23f2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "999a4175-07f8-4d4b-8f60-e9bea9ac6cee",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1f3233-55ee-43a2-9b27-71cb2195e244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3ef6fbb-8bab-4999-bb5c-98a14e4d72b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53576d8e-6415-4049-85ec-90dea80e421d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1117bab-fb0e-4037-a915-cdfadca70b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd76b4b-c831-4bb1-841a-f5d18fce67f7",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47742cd3-53ce-4ae3-b541-eb1bbf3123ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c45ce6c6-523b-48df-b5f9-36c2968b1a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe4c73b-36b9-4d05-9d91-c4441e6096a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "37eda93b-6058-4295-925c-9cedc8ad0658"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "46f8ce54-7b57-434d-b877-089e81e9d2a7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7c2ac504-784e-4fa1-96d2-b2942c03ff72",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cc2e897-7287-48f3-94a7-4b32fc0d944c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e0c68ab1-b1bf-4001-85d5-f38fa8a78cf5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2808f164-c76d-4230-bb29-4ea5080bda47",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "a11ab11c-539e-4668-80b7-5c050f14a39e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d20b76c3-6932-4cdb-8b1c-1d9dfde96b0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac5bdcbc-be72-487f-ba85-527e4f791638"
            }
          }
        ]
      },
      {
        "id": "24f3168d-4fb0-4d5f-a488-7263b9cf19e8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c518c168-499a-43f9-b8e8-c2674221b08a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "171788ea-633c-40ce-8c83-17084e10cf34",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dea1a351-6758-48d8-a581-88afd9a49aaf",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a85912-2492-480e-9310-1886aa5186c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0d1250c-4c5a-4035-bfaa-81dcb68e945e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b246763-77b8-4ca5-80de-bbfe45eb4e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec044bb0-8480-486f-ac0c-175b48528380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381cbf82-f558-4a4f-a75d-25e5305c380c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8cdd80-881d-4c8a-9ed0-389578034400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555da718-0b1b-4c35-9db8-51e6a336ec76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17677d33-b8d2-48e5-a766-251291bac250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e196dec-5112-49f9-b3c0-e4fa96c9c077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d40d03e-7436-4382-bda2-6738a58f2220",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97876035-c71c-4795-ae19-a6ce957ade5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fb8b37-403f-4cd5-b640-06c45f7ceafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9050d40-1cf0-48cb-b086-b1d95e993d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09061b4b-69b2-4af9-9b11-98309556a38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05335752-f4c8-4e2c-b21d-82cf7567b41d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bdc500d-06e1-46b9-a9ec-90050a45bde1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1794c9f-0e29-44e6-8754-816d8e26a5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe2e02b-e442-40e6-a2b7-f0f32a2b52d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8977ccc4-3cb0-4156-9115-5a6ccadccc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1a164f-452a-4255-9b3d-ee7139af3554",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6832b2a-d5b4-49a1-a0ed-a1babb0e76c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3705e94e-09f9-4fe5-a55a-c49e4e1abc87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a017000-ab8e-423d-9b9d-809f64aa48a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a621cfbd-1d0e-4173-81ab-1762ed3c8403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f76c03-8c99-40b5-b489-84a6c437fd53",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5ab6b8-ebd9-4225-ab6a-1e9e6d35be0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046dd4b5-9c91-46b2-a5c3-e423e505dd07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10cfe46a-e681-48eb-8a66-be16815f9bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae92cb2b-c685-4899-bc9f-9aa0ca771c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6114be5-44b4-4386-b8e1-28c9458a83ff",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3daa557e-dd5f-4e75-af5f-a537fe2b3d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98574c26-d98e-4a7c-96fc-0bf4c90f21fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab920b2b-350f-4e02-9452-1c48064f2b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98662ec0-d4f3-44b8-a73f-f7b99ded4066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f368068-7113-43df-8940-c82c93a226df",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64b3e21-20ff-4940-a65c-937f1ace4ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ae00f0-ced8-4b1d-963e-88b6b62db09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fac733-843d-452c-aa27-d6f2f9433c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eba12cdc-f5cb-42b7-a582-87b58273770e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e48e5c-5e5c-4ea6-b9b1-2e81d70c0012",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f069ce56-1d2a-4a13-9da0-f9adb3fca2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4045e7af-f99d-40de-a1bc-afaec5445ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56326377-bbfd-4ee6-929d-6021379824d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eaa1613b-515f-4c2a-9f43-cfae90744b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2a006b-586d-4927-901e-cd5cb06cb8d7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44dc835-8a8a-4174-aaeb-f0d52a52ad6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe7f2ea4-09b4-4bfe-b6d1-6edddb27040c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98be2c54-10c6-4fb2-85ee-367795ca279e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "218454da-49ae-4820-9d4f-2faab8639f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d0ab27-4a4c-4e2c-8c6a-676fabca5306",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e01e8cd-f18f-4520-8f00-5628beff0e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa9af5a1-1d6b-498f-bc46-d38332c8e20c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221d7d99-0242-48c5-9256-bee77f2e2446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef0503f8-e3ed-41b3-b657-21af8a71f8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f63fd2-70be-4dd4-8cff-8a3cad332f76",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ff8012-7442-483f-9314-57491850674d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651a9bcb-58bc-44b0-b66e-d66ba2360afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04aac65-9801-478b-927f-349f41062fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbc4ffdf-ed9c-4408-9344-5e296f0de961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9783a1e4-517c-4006-800a-66d86616658c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61babec8-f17e-4747-b426-e2825f2f63ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ee448c0-1080-410b-a286-adff5d6b6eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9acb7c11-54a4-46ce-b869-a00d85ae43f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7535c78-3642-4318-bf65-cde7ef761480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a4f766-1332-49e5-a615-8d954430a56b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fb5fbf-7793-464c-8472-6dada64a7309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4eed314-d988-410d-bc53-1fbe3d4342ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94e52c3-b92c-4a6f-a0c8-690065615a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1fb3c17f-1218-46e9-aae3-e5e07a3f885e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7eea803-2936-47ef-9120-8d22bf09e618",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f43821-bce8-4d8f-aca2-fd6c30bb4aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2015082-cf60-4dfd-97e3-fee9a396e1e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841eea47-a84e-4a7d-9e13-0fa73f1bdd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4844391f-8738-4aa1-8c55-3bd2313be42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1367cab-4cf5-4ebd-b94c-3f37088ad1bd",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be6827a-1ab1-42f9-b257-8f3b6b07f2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc68e88-6ed2-4685-b403-4feec78de135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da812cb0-516d-4d03-857a-a98b1d897fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b74bea73-8205-43da-b8d9-e410bd94905d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fad06d-b083-4be1-994e-5d1573ee331b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b3e539-4ec0-46bc-8a5f-018306a394fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd0ea256-8173-4b48-a46a-e497452098dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab177f9-8de1-4838-bba8-6bf2abda1e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cdbed28-b97d-443a-b7e5-1b2aa9b01d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a8d613-280d-4e9e-9f5f-ea53e09f34cc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d947a7-32ab-4679-a7f8-0eb3ed09231f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cda4e031-d7e8-446e-92b5-48a7389ba573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45498caa-9e2b-48c0-a4f5-88396f135b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a06b8506-b0ea-41dd-8b75-6a6234aaaa67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb6d3b7-0ca8-4a86-9c77-9b8ef09419f9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7235388-ab03-4f9d-8935-897737e0c852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0342d6-b8d9-40cb-83ea-ba9fd3cc6216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b389349-9ceb-4919-a441-b0f2319a64df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3659bfe4-e3ce-4994-bb5f-e3dc40b51571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162d1dd4-9ef3-4f4d-82e4-143992edc6de",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f36c63d-76c6-4bea-940f-493fedaee463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbdc0638-2387-4903-8033-6e46d1e4548e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c5e945-18c8-46ad-bf4a-63a21bff8346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "681903f7-214a-4a05-a7f3-70afb8280b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee417d1-1f00-441e-aff3-6114fd992f38",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a433d6-baa6-4817-a43c-b08f2d2c16a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7e0a31-35b7-4349-a4ef-c5b350f9e15a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de577a8-2b67-4640-bed4-779f2deac27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea8f424-b189-4dac-8370-0e0f6768f00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14831de0-8244-4d17-8a0f-04b67888016d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b06776-1706-4129-9e0e-e069c196966e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bbee8f9-feea-4d80-8653-1f2f8929f907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d494dd08-b630-479b-b9d3-30e4b5616528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "21a86e32-5edc-4c9b-b19e-9f3e7cbd66eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208fd6e3-0512-4365-914b-6fbc16e73742",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f1ca8b-c779-4cb3-a7aa-f0344a77f821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdecaf99-78b3-487d-a5df-2002f1a408c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f616b8f5-e4bd-4e6b-86ae-4c51e8ffb2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb8aed2-b88f-4e67-9209-ac13aef8579d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd39bf86-d700-4868-a016-163a38b634dd",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2ec8c0-5a59-48cb-8fef-edc42a745e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9abec3b9-0f90-4fbe-b75a-896621a85c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa1a885-4be7-4697-8c71-654a9836491f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "23ec7945-0d02-40bd-808e-ca6dbabce605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed62dca-bfd0-4a71-b154-e8ebecdb0840",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08344567-dd3a-4744-bbdd-881ba2dbd23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a96e5e9-8ce3-4b7f-a1f3-99a3df5e958a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02cc0ed-825b-41c7-900c-862a28a12ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3da6cdbb-3a1a-4662-86a0-e553bdd940fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9df04c9-827b-42d9-ba8e-4362e9e0f9d9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9a56bd-386c-4049-aea4-b989f8f62745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9fd6e4-abdf-44f4-b8b9-87b742fd2884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29661b2e-f2e2-49b4-b7b2-9a997309e801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21e91a3a-5711-4c81-a74c-011b2ee92117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a626b32-fad8-4168-aada-e3bccafd4084",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e161985-3eae-4d14-a912-f3d6ff5373b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e0490b-8524-47ed-84bf-4daec2af610d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1408ab75-fa25-49da-9f43-ac64096b5739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "22961997-7d2f-4954-b7b4-8cbb4794e2c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0377952-bb3a-4797-815f-e4c776586721",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c579ad2e-0675-4925-a801-706d57757fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc2bc01-8c58-42e3-8934-c50be926013e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2735f079-e347-4a03-979b-e6efb34855f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f825789d-d0fc-494c-a14a-b1fe2391edfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a3bd21-5e8d-4352-b10a-cc5d645e22f1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f2a561-3064-40da-9a65-3e7191235b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8fb868c-648a-4697-a673-e4560b343568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd925085-c677-45f1-ad8f-15544d60ce07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdef47f2-6ffd-483f-b544-404ddeeec16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b5214e-9116-460b-8f6e-c9bf7acc1f80",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1f3634-98b3-4a29-87c4-f6370e601e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410700d4-4221-45a2-bc48-140723bdc862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07fd039-3f51-49e4-8eae-25f7faad0641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee13fdb7-e7e7-44b2-95e4-9e432a5951ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65c0e10-9297-45a0-aa5b-c50a68e6cf80",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02f6a40-1449-4c8d-8f8a-2648be53003c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a48cfead-d8d8-4804-9355-22e13ed0f50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a32d452-434f-4772-945b-29f06461a5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1301d145-0bc5-4ef6-8a79-08adec3e6b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d1ca00-0872-4096-981d-73508c308893",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c1f121-ab67-412b-8bdc-d97fc63597f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "538c31c3-8ee4-4e93-bd3f-4514b6d6e606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0499303-173f-437c-a982-671ec883a4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4973ff7a-1608-4f21-b780-61afe3d9fd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d7f7700-863b-48d3-b791-e0ca0eda9ef5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc021405-fada-45c7-80c1-989d2c1e8fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc92544-3358-4e5a-95f1-dc343e02e54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879f701e-4aba-4862-aa94-51c208e05fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37c9e15c-10cb-406b-bfe6-26251bfd6637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7d887b-a937-4d2b-9f71-8f9539b8ae5a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ed83f8-32fb-40b7-9724-1a0cef6fb7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "655f929c-f9a8-4a74-85ff-79568ac6abd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6620985b-842a-44a7-a053-45a70800f52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31e6e0f5-7989-4e63-a82e-e634f2cf4344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2f6030-d1ce-4709-807b-50645170d9d9",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17ea3ea-1033-4663-a561-31e87b5d127c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc8f023-9e15-4087-aae1-622bd8bcbec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e240073c-6314-42b2-90c5-dc2d0c7399a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5d6b09ac-26dc-4741-81e9-2df0779fa133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4bab830-3560-4545-9377-98bf833d87dd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97458813-dfda-4179-ad77-90f3bea04946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3ed2d3e-d703-4ec5-a9be-d90f74be491f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc0d1de-6c05-4ec9-a01f-d29c9f45b1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0c8fcd-6ee0-4f02-bb58-925a39971846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337670d2-4f2d-431a-9949-ac833ac6d1b7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90c7d95-5009-4fc2-86b2-4f670a31b43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85802b29-4979-48ef-b8ea-ac018a219b1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd97b9e0-8a47-4529-808b-418fbb843f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf467308-a237-4abc-bdc0-88a7dda9ec4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6606d9-4fad-4c3b-9cb5-3d3d834fc7b2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95cf7659-258d-4ebb-9214-7e4c0fff5dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2401cedd-0fe7-48e9-b751-ad562aeb66e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb9ccbf-3381-4be1-8f8b-9f3c15c5c5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "21b10dd4-4a88-44c8-9e38-b79816ffbe77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357dd898-1c9a-4c5c-8078-dc2c555cb550",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e063aba-1ae6-478e-add2-7cea7fcc0435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aec47e4-ab80-4f5e-9a99-9ccaddaab0ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa87f27-3b9a-49e8-ac50-951c6ce0a3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b113dbb-ff14-417c-9142-816547844ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc926735-72dd-4bfe-8dc7-80ae71a2f36e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18c66e6-2b8d-4562-8ac9-109b3f78be8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c651ad-d0ac-4dbe-a645-45c4536d432d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2287cba-6776-4628-80ee-c538c451bd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b22e65f-305d-45d2-bafd-bf8535a97471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7bf391-1abb-4bd7-a488-ff1894acdc92",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d82156-75fb-4ec7-a5a3-290a70c623ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1be0585-a78b-44a1-a393-d80715ccd3a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907e1282-22d5-4548-8597-1a270016b5c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae9f042a-10b8-4cc6-a943-46f64f19e850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06925dd3-32f1-4189-8536-3a3e0409f8dd",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e9cb72-78ae-4b9e-b067-af23fa2775c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0fec9e9-581d-4287-b611-4591a23ecef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7d5b8e-46b4-4c88-bbde-273485c1b2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5b41fe8e-7fd5-4f7e-9f5e-c500d1e8ce1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e512b4-dd5c-470a-8d8a-5b4865f57e3e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae3a77ec-4911-429c-b6db-53523989626c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca0514e2-32cc-44cd-b972-1914467d5e53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae22871-de49-474c-bc38-4c2e933a5682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba2e7da-ef05-4102-b7d8-befecc5aab8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba9148b-77cb-47be-9fd7-d6525873a0ca",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2ef3b5-4a23-46de-ab04-92f8b86e98f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "372cf69d-b4ed-4f8b-a902-7db0b85f32d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771a31a4-1861-4bb5-b794-205e0de0db86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3569d13-4495-4740-9fbc-cbb4590b10d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db3da60-672b-42b2-b276-8b6028412986",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2856db3e-896f-49c6-b733-f6c152d58e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b4bec68-81ea-4833-91b1-682d5e27e75d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3730400a-8238-457a-95fb-d5d33f960918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab7d1f5c-9c8e-462c-8f64-ac59c84e2696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0e85d7-8fb3-4298-bf03-c066d8647330",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b453cd-c036-493f-9bae-471e019c361f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83171c3-57ae-4911-8917-8463da5ba27c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55f3993-6c95-47a1-b0ef-469efb8a4122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bad26087-0837-4c97-9fcf-4effb44bbae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc9d2a7-b3b1-40c0-ba8e-a8d755f3f7e3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1f71de-91f4-4623-944e-4679a500323f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37afdcb7-0b44-49c2-bc75-038f5e574567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4751721-6587-4c22-a6b7-4c71833ade16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbacb92e-a91e-47ab-9f98-a6978e6ee3b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef17c82-79ad-42b8-951e-c4465c0f80af",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5e4271-dfa1-4225-8f9a-b4d010c57404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b2a685f-4c1a-4425-b954-6dee5f849668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f81c13-bf54-4771-b1f3-1c092e039763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbe64c5-d3b7-4473-9c2a-a222427dfd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cd08c7-98fd-4af2-b628-4e61e1e55afe",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c351b9a2-72d5-41d7-832e-fd9cc38f344c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40afef01-3db0-4fa3-9e93-f0e7573f80c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4368a3f7-df83-449f-94f0-e3d33d64c2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9cd5cef-d74e-4507-9b42-6e9531104055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2aec219-37d5-4c3d-8c88-5af7ef9b79f2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ca567d-8440-472b-85de-7eef1f32a968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c6845ca-711f-4822-9df2-12ca6b93393d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0d1983-95eb-44e3-908d-17ba0234ca94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "873478e6-aea1-4bd1-96d3-c019cd8351c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dac4b22-72b7-45fd-b2b8-59f969dfae83",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3005e6-6300-48c0-8102-6166cf5b9aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ba0335-4eb9-43de-bbf6-69ba3c939031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616acc0a-8128-4d20-88d9-5027c88eff93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "76d3aec7-5c41-458f-9c67-1c595dcf7af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54b0840-72e9-444a-a887-163d41c16e37",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a26cfd3-6814-4c36-95ee-972fe2a218f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70aaa136-ce24-4844-b243-aaf7aaaa2829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66b5ff3-7473-44d8-a756-4c6a84fe0b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "199446f9-7070-4416-a59c-0e0fa8b72324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a57b49a-aec4-4fff-b4a2-4b91ab8e7232",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2663618e-ee88-4c7d-a331-00c713d1095b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72f051b6-99b2-443a-896f-0e61676f6ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a086a8-f8e2-4e25-a95d-8fd2b0913c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75c0a301-2d7c-4913-9334-2e1aef5df44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a042fe1-abca-4396-9084-6143e6b7ccf9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a705db01-3fec-474a-963c-3bcb504b0acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8bccc7-1d46-4af2-9173-ebc2708d6482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf4948d-46eb-42fb-a14d-4be0165acc02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76b03981-2e7c-4c23-89ad-c6fab39f52bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5863da-5095-4674-94e7-a46cb6ee738c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4673e21f-3a36-48f0-9f00-d9bff1637e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e584bc77-8504-45ed-90cf-356641f6911e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7156bf2-d468-42f7-be75-59f9fc39c10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2dc0a7-0530-47f5-8cdf-7b15913a2089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94428986-d826-4fc9-8202-b90426febb0a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a2de53-78a2-408e-b753-52347b229b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716c1e2f-bb18-4c6a-8509-86207562ed74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b7f757-8129-4b32-9a20-81b764dfa2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "10f006b0-aadf-4d39-85dd-82708ff8b74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f70e37-c3b1-4817-a1b2-03d0d2b4315e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f958100-0d6f-4b47-bf1d-1effb1fd2106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc4acda2-2903-45d2-a5fc-31685ead3ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ffd975-7461-4f3e-92b0-8b830591c543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff3edd3-239a-4bc8-a849-37b07f51f538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b35a66e-1af0-45bf-8af7-ea24ebe62937",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d4e823-6a8d-4157-80bd-3ba304db82cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c9d341-8546-432e-b220-c563df4cde74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e7732b-df1b-4c7a-b853-3a0de759edfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b72e9b9d-df6b-45df-851a-509fa0d9dc6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9d3307-506d-45a9-a935-a4c931582734",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76da2878-f6b0-438f-b18e-d0e28f78411f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb91fbf-42b3-4254-bfd7-5eb53ebf6e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cac7015-5ee2-430d-bd20-0ba2d77eddb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b84c793e-bbc6-480c-9e93-20d2986dafe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1131eba1-814b-4a3b-9a12-1bd7cf62a34c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdde48e2-bf49-4026-afad-e1cec1121f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eed13984-79f5-4bb5-9fe4-61559ff53102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e7b62d-6525-4e16-a171-7f9ab7f99393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb73a1b3-58c1-4426-9a15-2046226eca49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e47bc4-cdc0-4f42-81c8-35f7c5fc8eb1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2832f1ed-c03e-4f60-ae39-6d81de72e0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4936a56-b3c2-408f-a0f4-eb97de29b57c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64558fdb-f5c9-4b6b-8162-b74bf5422220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd602f9c-4263-4872-81bd-0f3bb9a8516a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c0b485-a44a-418b-bea0-4071fa027b2b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95822c2-2335-47b0-b9ef-14f2358aa075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53882ca5-89cd-49c9-86af-2d8cc743354f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe440502-8675-48c1-ba9f-f37d626dd936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0aea40b-367f-4bba-8ebd-16a4330acfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652d7e5e-8c19-4ca9-b3ed-438c62f73ff0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43086ba4-16b5-4b01-bdf3-79e70201f120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75acec2-f305-448c-852c-1489783c3825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ef85e7-5832-49f8-acac-2d1d3b7e32d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4425a3d9-19e1-4e8d-9379-72ad8ada8b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee19473-f7c2-4898-b8bd-658c16805da4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d42d949-f884-4d62-94f5-5068226b72cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64abe605-1a33-4f50-ace4-3079192b9b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae25830-cdfc-4d3a-a9e6-d24138ba1147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b91509c-9e3e-49e1-b5f7-d5d258c11692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165d8134-9f4c-4b1a-8ea4-10c4ddc2f882",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecfbca0-9944-465f-99db-703a845636ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9324dae-0166-461b-bbae-ebfcc97d7363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5207ef93-56b4-4074-959d-43630b2ec097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04f35ea1-8ab7-494a-af47-457be4f19d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19366409-61b2-40e9-b18d-c4f8822a2026",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423959a4-3976-48f5-baa4-bd82fec8869d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbdb10a8-1ca3-4d8f-ab6f-f1e7df3b034b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a17f23d-7ce9-4f62-9395-7dc552c6a03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dafb8009-2ee5-41e1-b8ca-b4ba4e9a047f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426b0aec-9073-4bac-8d41-40f4a9340613",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa08bad9-8863-4f26-bf66-d1c97367c2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e37a40-5562-4aaf-98d9-4698fa49d226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbac779-86f0-4219-a5a0-521d6923ff39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b233e644-f61c-4da1-89b2-8bcfa867050b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff835857-eaf3-4801-ba83-9452b5bea8c8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ae7a53-52e4-4d17-a1ab-3f9b4dd18ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36bdd8d1-8ec1-4564-85fe-751352c51e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed3ae91-598c-44cd-9242-4ec822172d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "82e05a1a-ad90-4ef2-bd63-8ce49be89124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5264a77-c0d2-4634-95dd-43709ecb6907",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b438090-a5d9-410f-b1f5-ede9f05ad84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8427346c-c17e-474a-a190-a6394e676d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c761dc-6344-47fb-b43a-ba04d38c2258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "26dffcf4-5db0-4f07-be9d-8a39f374e01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38fa43f4-48a4-4b9d-ac23-e832ff309aad",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208515d5-7b08-44d1-9952-68792e6d5778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37adaa6-ff1d-40a6-b1c6-9954911f8eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafe4d4f-5242-48c3-82a1-e9144976fafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0961bd1c-0fb6-4a82-af17-252058ffb644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133da46b-a94a-449a-be58-7e77b8788825",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b99ded7-6e96-4b27-b4d8-b1e1df6ab3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f798bb73-57a7-45f5-8339-2399474e6187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4ded05-430c-4129-9bce-f5945b5be582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e5d8a2-0427-4e6b-a7e9-f1f048b74ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc2d8b6-47af-4d98-a1d7-2edc6cafc56e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da633fd-7704-4d97-b797-a50f92402ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d3a804-843b-4832-a10b-c2ed059e7cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9378ec-864e-4a7a-b4b2-eeab414d4575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c33e7b7-70b9-456e-8c8f-ac4d9f54d1c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32393b76-76b4-4dc9-92a6-a50677248c48",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77f5f373-1cc3-47a8-a519-4ffd0dfde094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2264624-dea6-4fb3-b732-497a22458051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557f0e15-11d0-408a-a76a-a3b0a3c4ba70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "43ac0f9c-56ca-4ab7-a425-8a3c7b3680a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ea2ea2-826b-49e6-b069-8ad27e18ad8f",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f38b47-838a-4002-a2c1-70b636990d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d123af-6144-4fc9-ab60-9328c2ccd645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "127a1acb-120d-4c02-9629-c659c2f4c1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa442d8-6375-4375-9994-42b4db5e90ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d99efd9-bc40-4866-80c8-becf5f814ea0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8d5598-86c0-436f-a08b-bfa6ad9342ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a54b96-ef75-4798-a1b8-319670244012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0bf0d2-0182-44ed-8f0e-1d6bbc20b366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "06d96013-ba7d-4061-bbc9-c5c85035cf82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679723a4-d6d2-4bba-9c83-cab1112b68dc",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4c982c-5496-4f18-b109-392729bc7694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2128930-7ae9-4688-baaf-e9e9823ba677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c77709a4-73a1-4c29-b2b8-75a2b2efaa41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da7cfdd8-699b-4523-8c8d-c3257323ad4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cf7dfa-9663-4477-9ce0-181d29c71055",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3c8367-cb6c-4a35-994e-dd327555c148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c35905-9861-4340-a813-a9bc0ff6c4e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e03137-c602-4eb4-9464-4c32f29fca3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e3d488-052d-4ad4-b963-8d9fcb75c503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5ede59-1dff-4de4-8d33-9431cd96706b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a5ab34-5832-4b32-b714-e48e7df94edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327e8ec0-0b97-4b09-b4fe-427e5d221e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5161d066-dc48-4024-a59e-52dfd005652f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "902e6474-78a6-46dc-887a-5fb93480592f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcafdd4a-1d76-46c9-b3de-281940582cbb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdb5635-ec95-4c31-952b-b24386734d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5589f02-1eb5-4714-8ceb-77bad7f25c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "792a63e0-1315-4827-a905-a5a85ad916a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aea741c7-3805-49a8-8e99-c18f19473178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a3ebb0-b259-49bb-9a70-25a02c22a328",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4252bc8-d5d3-410e-bb8f-eaed8ac625c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6a9993-6ba0-4dab-8005-5887fd3c3196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4a9912-aa86-40d6-91c8-7bd97c9e7d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e72a2b53-a4f1-4c28-b7f3-ae31ce829ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a96405e-7799-4aa9-a838-b410b9f68503",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674c3377-d398-4c18-9390-fe571e334777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e47e72-ce74-4a5b-b915-a3aee272f3a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1581db0a-8df4-4e64-aab5-b8f9285dc7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aadcd678-e0e9-47ac-b54e-cdf4d1ebdb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee6e59b-3ffc-41ec-9ce9-fb1299017759",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2652e1b-7096-4bbd-bb0d-a998e98d6353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f14c728-ff7e-40c9-80c2-8367316953e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c52dec-a29a-48c2-b022-dd09a2cffbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83624757-3aa9-4352-a7d9-7c0b53f8189a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5109057c-7397-4a22-8c31-f46da56b811f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059fc202-9f06-4f4c-bab8-8dd3b54afa4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72418b76-cb4d-45e5-94cf-aa94b67ad083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f8e32d-1975-4297-a06a-b4257ecd3f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56fe5d2f-2ded-4fbd-b1c1-f4e153c4fbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80485ed-f36a-4c97-9e1c-a8a637bdb9aa",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bfd8a5-f198-4fc2-8b3f-121afa52f0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff5cf39-509d-4ecf-9716-f9d08f75a980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e17ae2-a7bf-4874-a70a-dbcc793d21e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2aff6b8a-843e-459f-b2df-edc002e84c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0da62c1-03d3-4637-aefb-9376ce6dac75",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa515355-d0a9-44c3-8d93-cecfc08c5aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a77d9b-b532-42d6-af9e-ed816d8eab5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5006237-7928-497b-9f29-0ab6f1543fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "06bb15b8-7b40-4913-88e9-8844611db738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fe69a4-4561-450e-887a-bbb799133038",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab5544c-ddbd-4b31-850c-42bc108ec985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d4061e5-7597-4d47-8369-c7f44a9661d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c56ab90-6f4d-44bc-ac76-21b3ef6b3ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5b4827e-f298-4882-adca-10c2340f1a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b23abb-8138-4484-af0e-17139ff0684d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28478c01-d098-4e5c-a181-d46ddd4edf38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a5e1d0-3b82-48ec-9c40-7de00f77094a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bc1058-580b-413c-afe6-ed96702c028e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1ecb02b-c2e4-4a0d-b75b-b5c0eeb93f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7aa3d52-b3ba-4593-8484-f4fb72d27e47",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4b17e8-1dc8-48bd-81ab-af539412116a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c24b78e-3c15-4774-9757-c499dd0f72f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31d9d76-cfc6-4712-8c1d-b34ff6ec6102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bca679ae-0aa4-4eb7-88b3-42823ac590f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3ad044-bc09-49f4-b9da-6086153bcab8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbabc34-6c36-49df-aaed-996209feec16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e9b14f-02f2-49cf-99af-a62bc257ac81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b4719b-c8f0-489b-af95-e9cbc00d8f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1064ae-8d84-4d67-9e85-edabfd701eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645d67e7-409f-45bf-9c26-bb65c86e1a7b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d8757f-2813-4089-afff-2a52a5b17812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bfb806e-106c-4564-bf56-f515fec8ef79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04d359f-1cfc-45ac-a79d-ceb4adf91535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc9ff3a-ca4b-4fc4-80c9-9a51db7a4bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed0b8c8-4d62-4b15-aaf0-1db100b314d1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fea105-cc06-4e2e-a3d7-5034eaf6376b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "296d6cf3-f275-459b-94bc-3ab74c41ec61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16344369-0218-4833-ab3a-9a8dcbdc6bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c5cd46c-1b4a-442b-82e1-39ea154655a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988f820f-b52b-400f-aa59-e2dd9c2d06f7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0301a88e-6791-4be2-9e58-d8f13d5a6861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a6013ab4-948e-46c2-bac6-de4e24ee5bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8ad722-e745-44e0-8e11-2938d500314d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea39d863-139b-4fea-a492-1812f5cf5f21"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f5daf23d-86b0-4a32-a3e5-8fd1956edcfd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4aed4f43-4a8c-41bf-8711-519f90b84b36",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac32392f-1c00-4851-8c5e-218f148f542e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb920e08-2e11-4bf4-a384-224e7c0915ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a675861-5bce-41e3-bbb6-fbc6eab32c5e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "264559a0-a622-4448-a3b8-975288800c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a5a72c-30d9-4723-9105-059c073a02c4",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "421c8378-fbbe-4b10-97f5-9732c39e1755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3247073-4bd6-497c-83a3-eeed014ca407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c720d859-f710-4757-b2d0-0e2ceb05fff6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3f64f91-7477-4302-80b3-2dee5f1252b7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3da3b44e-b87e-40a8-a940-7cbebaa80a8b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d440364e-fd34-433f-a709-4f11156283db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22251837-02cc-4081-8d5c-a05c1ab6fad2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c1c16f0-aa45-4c84-b8e7-45eaf5c75a4e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "82a149b7-cc9a-4a23-8bc4-08d21c9cdaff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd6c1635-930d-4b91-9be1-4cca71eef26d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3d77fbe5-4a4a-4da8-b6b1-14f396b4dadc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af628e64-a1d8-415a-b7b9-e473d2ce96ad"
                }
              }
            ]
          },
          {
            "id": "8dd8427b-f9a2-47b7-beb9-ebaa6eda720e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "91d22c5b-a6ae-4a36-b23c-fda6db97126e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "941cf0e8-da49-4696-87b0-2c0e26bfc269",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8016afb8-f133-49ca-84d1-2794e0950d1a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da2926da-53ff-4148-955b-8f10e5e74710",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "63824304-a073-4658-bb5d-e377e8aad46c"
                    }
                  }
                ]
              },
              {
                "id": "0ea95a8b-0f2c-465d-9566-8beac4eb6da3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c7955a5-df9a-40d5-beb1-2f80820e7bca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "69816ff6-80ef-4462-871f-3861035d3dc4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55a5783b-5b1e-4073-a1ef-64f81d03be14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "feb079e5-e157-4710-b0e0-1dfdbe035631"
                    }
                  }
                ]
              },
              {
                "id": "cc8aebff-dcf6-4619-8854-dcd69fcd1a13",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b17bdd7-86c1-4e5d-a640-762b63e17329",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e583fd55-310b-4884-8664-1401be0e7d5c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bdf6730-b912-4074-a6d5-e95d63218b8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "760e753e-5c93-41a7-ac1d-cc18a78f362b"
                    }
                  }
                ]
              },
              {
                "id": "bf7dc05a-3038-416d-b25a-5b812cd0ab34",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6985bbf1-02c7-4e2e-832f-37ce9cc4b256",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1fd141aa-cb03-4535-a9f1-2b419876c793"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83ccba0b-ed03-4fe4-af8c-ea611185e163",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "49016403-6aa3-4010-aa07-694e707a90c1"
                    }
                  }
                ]
              },
              {
                "id": "a6567494-a360-4330-a680-3a19f9b3b1fb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "848489a6-bed6-4f3a-a45f-4d7f55bf67b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f94c8c7-e46d-42de-b862-f7c7b8612592"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4963323-90bd-4fd9-ad7d-4f9eaaf9a73d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8315418e-2fc8-4189-8759-6bd758afb3f9"
                    }
                  }
                ]
              },
              {
                "id": "6404d626-67a9-4476-a8d4-afd327f0ab84",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae87bacc-bcc6-4ef5-8d98-d9964e2e3978",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "73a89934-9fdc-4727-a5ba-72b31b19c7c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29f5aa68-6bb3-4bd7-b18e-d37ad72dcd46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "520c717d-4e15-48f7-a5be-e73c5494cfa6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "899fcd34-be2d-4e42-9a2b-dc52f31e6cca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af94c0cc-22de-42f6-bb8f-f9cdc8a1039f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f2e75079-4739-4f63-a3d3-11c96e96ed13",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d2e0cbd6-ac92-4176-b492-26b38079c103"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b3cd4a9-ed13-45cd-8466-c2bfe2d13d1a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c2eda0c1-c426-44e2-843a-0bea5dd19725"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ee67c9c8-5c43-4f0e-afe0-07f72dbec619",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ec68b77-605d-42c5-9326-c27f5aa8e473"
            }
          }
        ]
      },
      {
        "id": "61409b59-7cca-4a1f-b99a-1f046d7d5666",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3b96867a-4493-4830-b2bf-4f5ff0165b36",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32ef568a-bf71-4f3b-a667-fa540b313e38",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b256ff3b-121c-4a04-b026-730ca019f1bd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa6fb9f-87f2-4646-bcfa-592bc8ab1e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6835a5c2-5abf-4fd6-ae28-d95dc7f6dbbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d222e321-9384-4361-98a0-502a22a515a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "99b70722-4d56-48c6-9154-acf56dc9aaf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf71a1d-875b-47dd-a976-5c9dd143aab9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf9e566-36a4-4023-8416-112815c54575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9069b65-b254-4e88-88fc-2707e0e29b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac65577d-81c7-484a-afe7-a38e896882cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1480cba-8941-490f-abf1-70bb8cfbf489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825dbc0a-1087-45cf-a9be-af3c7a6810a7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec82438d-8f8d-451a-8718-7908b81614e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b86d0f3d-b688-452e-941b-364758948bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda1279f-0526-47e1-b5e2-5da66a41bdad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90858dd7-55cf-4aab-b0e6-3078701d9e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274e848d-eb5a-4f65-9761-e6cc8605a9ac",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c8133a-f03f-4921-97b7-88a5b864f9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d261ceef-dbf9-4e45-a76c-8dcf9aee5e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3427bfb2-183a-41e1-a106-f0b2e0b1b789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dda48e09-5683-483a-8adc-70141bd91e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c619f073-50dd-4372-97f8-4b999a07a96f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5e7770-e4aa-48cd-85c0-686a5117f45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05048049-b6a2-4056-8684-b398f7f03860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb53194-5b99-4b78-9ccd-46fd69063afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b533768c-29f0-454a-a4a8-42c96c89dc7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec3bc60-38d7-4680-aae4-63e125af6e52",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b59c09-b0f5-4d0c-9f85-8966727cf1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8637759e-b4cb-4465-ae38-215fc46c74ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad29177-7d64-46c9-b169-dee819d9a5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "59ffd6a5-2f01-462b-b540-5d599305a048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac51932-6b65-43d4-b61d-499ca3c62be9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e8e565-cb21-4826-bf62-e91728eeaf2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b78ffda-74b7-4ae4-aae5-7bad266a6380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018c7ca8-9005-4296-9f59-725eb14cd4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d10b40fa-25bf-4fd0-8e01-9d3ce4a341a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b592e1-5490-4d22-867a-61405b2b65a6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ab70e9-bf52-423c-872d-fa79d235737b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6e595a7-2717-4d51-883d-f7248e4b5e7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505a95c3-2af8-47a7-9be8-99dcef830cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca810a88-4b02-4bfb-9399-685246f1cc72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d19d808-8aeb-4306-84be-98d9bb8430b4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95f6b3a-b9be-4189-ba44-747842a27bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8b1f92-482f-48b4-ba37-f36c52ecdf15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c76c07b-d5b4-4293-b9c9-97ecce70fcf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0c7440-46be-4f02-bd82-6f0d59a89e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75690d07-0661-4563-bc53-13497e45766d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35855299-05f6-450f-ac59-e201b1ffa2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c99b47a-c4eb-42ab-befa-8afa4e3c9e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7150df11-217b-49b4-aa25-f2d68d4d47c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd376b1-b882-4dd0-885a-dbd3f8629518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8053b002-0082-41d3-9f8c-5c824b1fcd15",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f84ff1d-887a-4068-b499-e55df024b134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b55ca5-82d6-4158-86b7-207b54cdc79a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528bfc67-aa63-4bc8-b423-26550796d6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "20e39e47-d0c3-473c-ae9f-4721a33c2659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f30b88d-54eb-4116-8ae9-5c2a89dc8491",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0d2ce1-50bc-4b22-aa37-734f8874046f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41af9da7-8a2b-42ec-bd6b-bc8fc9dcc6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5549833c-3faf-442c-9755-d50ec779e869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7265c302-0baa-4d2e-b48a-3d0d6fd8fdfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32bd2856-13cb-471b-82a7-d3d0b217d139",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247ad057-b059-4e77-9f8b-e8278bc2dc02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b58f3070-7cdb-4abc-901c-d3959337fe36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1a4568-0fb3-4232-9576-11a85ff6d71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4e9fdd-9167-4ce4-a5b8-89eef321f4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f02b339-8417-4a22-af40-4749f5eb2bd4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "999903cd-5799-4182-931a-91f332c8e964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816c1ea6-e6bb-4393-86f6-af63296c4ac1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d50a8a-7cea-4d34-b6b1-1373490a77e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b782c7b-aa7c-472d-be65-1ed1c8a82192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f760de9-7fd5-47ab-bf35-ff926ee1d2e6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6771ffd0-1e37-4255-991d-83857f98d6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e061aa-e96c-42ae-8202-1bb7d80fe36c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6e4007-7424-4013-b105-0145595c4a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f964b20e-7584-44b5-a82d-28e0708e6aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e422124-4fa8-4711-8696-e4c7ee2b7c94",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7299e6e-2ee8-4838-ada5-716a0ec6ea6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3296e9-ec6f-4dcc-b718-62e42df1f186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c22c34-89f3-4bda-9c00-6e7115555466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc5f3945-a1d9-4a73-a137-23c59309dfc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd4e0f7-0936-44e8-9af3-e40e94f4876e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d3f081-7a01-4fb3-b974-8bf89ec07b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5834f46-83f2-4323-9975-00a2c99ff128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4348660-ea47-45d4-894e-ec9dea7dd07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6913a9af-3dd3-41a0-b30b-8915895232e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4936f412-0c59-4c35-9e86-d318ba02fe1e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b22bf8-eb78-4530-873b-da4598361a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd66ea8a-5bb5-49da-838c-5024bfe70a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0547a9d-7e2b-4725-b641-f04c5f1d9645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7eccc123-a49e-45f5-b639-2031f516513b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ab4698-f3cf-4e99-b4e7-301f83b91a8f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2a50f2-f20f-4bcb-950e-af62dbed3a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e815a5a8-f53c-4768-9ee0-cbe0ddb60fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00fd0ef1-ba4a-4e9a-8478-392897a311c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a4f4904-8946-409a-bb52-2411d8ad626e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a73e8c-e3a4-40bf-8e2c-09c20fc23d0d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38132b0e-e1fb-441a-9757-fee66a6e19b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c3b6dbd-16ff-4b61-8213-1c2844af173c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d8c5f7-6d01-422c-87c8-412d57fedee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "333de042-f643-423d-bf76-cdee2f4c488b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004764b5-b111-435b-b5fd-207d272059ad",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8d2ffd-7c3d-45e3-9376-c5e301805296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde2a2bc-bcd3-4766-bae7-dfad8a2191c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53421af7-b80c-407e-a7db-92c8f34300d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba2e5e8-5203-4e7e-90db-bfe66145d3ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c422e1-b8fd-409d-935f-d5bde5d60797",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f959d061-b040-418c-b60e-e5d3916f4a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a1f389d-5b60-44aa-9a57-c30c94d7c3a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7bf2af-3e8e-4861-b114-0255eb48eff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e34ed1d-8355-42ff-aa58-3e79b8a07891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119876ae-2e37-4814-a6ba-138ec6e39e0d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2925ad6-9eeb-4034-b543-55efc4ad2048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ef9a8c-1dc8-47ff-9253-411f6847178e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43b867d-b016-4957-9d7b-ad0ef99469fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03ca12ba-646b-4800-87ac-8fba6c8498ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642ad62b-7d50-4e7a-905d-15220967f465",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0cdffc-e675-4b87-bdae-25295ef45de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b806f4-77a6-4427-b9af-9e9859d28771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78bcbdf-57d9-4965-9a15-890e24e1e347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13d52df4-d60e-4717-ab13-d32c4d8d143d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a214d97-9179-4e13-8486-de9fdc4056a9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d546a4-8d84-4c5c-b07a-b60025b44fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae78dcf-00f4-4ee0-8f4c-14eda13c75c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950621cb-2dc0-4ce4-bf4d-00882cdff466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be72c6dc-24ab-4854-93a2-3fa22c37a667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004f915b-dbde-4e8b-b3da-d76ad4e6e241",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81d46b2-b5df-451e-b33a-f577ae5003d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6e2d52-fb88-4442-b07a-c6044e18f233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82a256e-417d-40b4-af21-465630f02b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f9fd8b9-184f-492e-b2ee-b50d9a5af7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b08122-7fc9-45eb-90f5-15d36dcc7f73",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb41f83-96d7-487d-a72c-77cf2a5b6806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e2b25e-1134-4ff9-a7d0-b7c6a713df46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4aa4a6-8381-495e-8e99-1bd9c95d1784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9497bc27-9c94-4482-a9f3-002cb334e50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cc0659-8544-45af-9163-f95a4c4ea291",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657e97c4-1958-45b4-8fdb-2cbe695ac66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce517be9-b03d-4333-9e13-9e7319bde0f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517ca6cf-9910-4cc6-9526-1871faf8a260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05121ad4-79ca-40f9-ae45-54413d2e2380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab639da-c11d-4433-b0a0-796aadda2968",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d87cf1-bf70-4f1a-bdf3-e5c33b71b172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60089bc8-0a58-472f-89f8-ee01dfd4e35e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1966bc3c-aaa0-48b7-b4f3-c4d7fa313056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61674d09-d486-4005-b751-86b24aace959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4faf0bab-0b0d-4aba-a6b1-e65433cb40e2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b264e9-4d42-4f88-bbe6-19d36e775ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a23731d7-00bd-48fd-97f9-594cc3d7eeef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746d33d3-1efe-4693-85f8-d2374e2571a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dafb4b4-f918-4172-8e6e-0b1fa44360fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5fae03-0bc4-4219-8860-28be907724fb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfee4b02-5c53-4871-8bd6-af3ca17d4e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f944339-2af9-48cf-86ec-165b02338614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0ff27e-b35a-478e-8b5a-762220bd2644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdfd1ed4-3c83-477d-93ed-ae02785f1297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e66b192-7871-4d80-96ad-120bcc1bc54d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cafbbd0-54aa-42c7-b67c-3ffb1f6724ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b9110f6-74e8-4cee-818d-e994b15e0893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f31724-74ca-4655-8fdf-f2e1f9ce66b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5121530c-07a8-4576-8bb7-fc22d96d1350"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "175d4e9e-cee5-4d85-b9ce-0eea946f834d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d6de46f4-668c-49b5-bee1-32d7a511f490",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81259220-4773-440b-982b-466e8395089e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b255357a-5b15-44ab-9731-c14e83b8b915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb51a01-0b6c-4913-bb8d-92345d71b463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34ae59e3-0b9d-444b-9b7c-dc6671ec0483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9371dfc2-14b6-4bd1-af51-8d275dd4027d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a469e4b-8f45-4cc3-8916-b687745be031",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a73946-77ac-411d-854a-d91d588c57bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed57be25-d3e4-4247-9278-837f9ffae665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61326b0d-3799-42de-a5dd-311ca820354b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54c58489-65c5-49ec-a8ea-9afa33af4baa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51f1a571-ef38-47ed-babe-0f68c3367d26"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "908e7e5a-349a-4d9d-b478-6a7460ead030",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "189d2b81-3600-45a1-afc0-2948593f0dd7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dfe4f477-6444-484f-89cb-a17d9bf1a49a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4152bcea-fc94-40cf-a7f7-e29001f13b07"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e2fd9bd-b4a1-4b3d-997c-6f28ef6e6faa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7fc4a6e2-cf08-45cc-8b1a-b81d84e41bf4"
            }
          }
        ]
      },
      {
        "id": "b8b1c6b4-7044-4e3f-b64a-5708965fc7ee",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e81610cc-f5a0-4000-a44a-06af94edf91d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c88c83cb-2acb-4778-86ed-3ea90a2a7a65",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2dd68450-cc3b-4e2c-ab76-65a370db7a60",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1df6af-571f-4ebb-8f34-83584b2fa4ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1c39f6-7f9d-4b2d-88d8-427f5f897e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88729946-a43d-4a19-80b6-a10445c01213",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9aa957-b674-406f-a0c5-a997e0f1c7b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb016521-ef79-47c0-8d70-fb67f114f09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e2545a-f312-42f1-a22c-9096c3b41c46",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ae4f95-a4d6-43cf-9d39-52be2b022241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e571c9-b62b-453b-ab37-7822f7b5615c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9c7151-9d8d-4672-b4ba-1a200d1b202b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "142351d9-6db7-44b8-88ab-2a390595be2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35eddca2-dff4-444b-8deb-c7aa324e18d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e5a47f-2216-41f2-b310-175d435b69a7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "691a7c77-d314-47ce-a607-7dbc43188109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d050fd7c-de31-4721-93e7-634966c04589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3198e9cf-dc9b-4743-afe5-0e5211872454",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751f82cd-da1b-41cd-9ce8-81e35e8b7294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6013134-34f2-439c-b6fc-b0c37f4eeb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91c968f-54e2-4792-ab88-38450adb21b8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a8c3a0-625b-47ff-810f-ab195ebf5466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c97d0b-af7c-42ce-919f-7a9ecd632230"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19d2a53-5e94-46e7-a3d9-25337eaffba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7062e220-4534-472b-a402-d55f3bbc2908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65219359-52fe-4033-abdb-3d4754a79019",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e446fca-af3b-45c7-9061-85a4a43102c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96b289c9-f08a-46ba-9634-afc43bec333e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73e934d-07a3-49f0-8573-8858913c9c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58f649a-692d-4959-8e6d-84a32c7debd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c01b938-aa93-4956-90af-c68d9fbf86d0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8190efd1-874c-48b9-9131-44cf4e90731c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52e65045-bdad-41b7-9057-e5b30370b69b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af834df-0718-4e7a-a0a9-58f3d880d207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a4baf2f-bdec-48d1-9fe6-68f4a1637085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7367952c-481c-44c3-b0fe-8a46efe5ece2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2449903f-2267-4592-8116-ed12cc203d17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "396ee3c4-86d2-4d95-9c66-da84b17f3d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d398bfa4-2807-4e77-9ed5-6147a37ccff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4945b67d-16b7-47ee-b7e4-99ba03a68b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fd9749b-e653-467c-9ed1-451bce4860db",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f29ebd03-39e0-41b1-8868-09a7a2667f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78be7a5b-ba8f-4916-bffd-cf1ffc280005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a5af8f-4426-477a-be38-bd58c6cac27d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d5cb5bf-7f00-435a-8194-40849981cff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f87dfa-c81a-4650-a7a3-7c3d342d0640",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bad76d-ec07-40ac-9b54-4c03cc2a8000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca398636-ae24-46b4-8013-29b3aa6af59d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863843e9-64bd-4465-adb0-4c8062fe920c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3351cdcd-834e-4045-a8e3-d1e79a5c6f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aef8684-7d89-47b5-b85c-94a96b132182",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7127f09c-b4c7-484d-b83a-da8ec2371b3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d45321e3-6600-4b30-8934-8d85d0df0264"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "808bddc9-9140-4dbe-9b11-3185a2c5578a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd6bec19-720b-468f-8892-4fa9727eb5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a890ef-44a8-4fc0-9720-6a3800b00230",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee20a71-dd85-4276-80d4-262e50b9adab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "427bcbf6-d1b5-421c-b232-de457a5317a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8afe13-b7d3-4cfd-a2db-9babe341a2bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe45973-79b0-45dd-8099-001312238a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738a3b8d-51fa-4345-8d26-42aa89191e59",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d095805b-36dd-497c-99db-0afb7dee2cb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce4ccb1e-be5f-4b31-8302-f04cb234a3dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "474cbfd9-e7c7-4fd5-9a2a-f5d8bd9f4375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69737075-7cae-490f-83cb-e8f60a605d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3eba2b4-dd9c-4035-8a97-6e83bac7a9a4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7755d224-ff75-41a4-ab0a-e6e5a725e01b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ecdd198-4d66-4352-8a08-d31155723f30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58af19c-61ac-4338-8edb-349e2ff8313e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff55a87-4bc0-41c2-9c3a-091e1b771ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb4f0d9-f176-4d02-be82-41117dfb1e79",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0cdd9e-f0ce-43c6-a268-ba4f61f40e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535857a7-23f5-46a7-b63d-5676ed8cf09e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da61b42d-a7db-4314-9ff7-e82462d39728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf34d766-45bc-4194-9ad4-bdaf3941866c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b6a3ab-8a95-4853-9b16-f849c481b853",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6b7c77-0cd5-44f2-9581-32992f73932d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aedb3148-cc35-4b61-94bf-421641e3f5cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8ad1c4-004e-4156-b8d7-0e7a8d30dd4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2fa1988-40ff-49aa-ba30-a4c3b6687afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d647eea-849c-4f0a-99e8-7aff97f008c7",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c52b49-b933-4a07-a7df-fe58663e296e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2012ea2d-26ce-4a06-863e-e0e122262179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc60074b-ebf1-4292-a93e-46d4b3a783e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293f0659-6395-4bb5-bf50-b6c1f78a3e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e2b75e-3365-48c8-bc9a-e596100ca816",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8f3126-b09a-4e41-ba0c-e3b4b3dddd39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d50b3d-7f23-4033-bba2-453549cdb75e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dd2a26-45fd-4d92-8d6e-a5e9b0c0bc1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a51c8db-75c3-4e9d-bbf5-ffd3622f8946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3fc89ff-4319-445f-ad50-94ddb1db9eaf",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e956c91d-30b2-4e72-badb-9a98923bcd18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584d427e-4fb3-47bf-9afd-c74f983097b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3233c615-80b9-4e8f-a475-eb1c3fe1640e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca8f5b0c-3747-44be-b8d8-e113c45988b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb69b4a-282b-472b-b610-69bd0066fa27",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c587a4f2-b5a0-4403-9592-274eedbe2e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93613c87-ced8-4da0-9815-1699069f3fd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f227557b-fe84-4fa5-ba4d-af8cb39ea5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3489cd-7b1e-4bcc-80ca-e298be9fb63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347849eb-fcd2-4df1-899b-56608041d4a3",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b61602-4903-4306-9e5e-df3646a8c96c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4196fa87-86c0-4a60-bb3d-200743808e25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f9c18be-c84f-4142-8d79-190ccb3bf24d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72425fcb-f9a2-421b-a952-4fb807c7fd54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a740e7-249e-4eee-ab49-aa9fea46b5cc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0cda799-112f-44ec-b2c8-dfc180b831a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b08d736d-dd80-4afc-83a9-33c86acc383a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4665585e-b79b-4b63-9c4c-c9401aa07029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c71d74eb-3bd3-4c23-b7bd-9031b4e1522a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa68db8-fafa-4b37-bf16-f2bd97812c5f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0c8966-de46-43a4-ab1c-5e72069c9421",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5072506f-6e5f-4856-8304-507112714293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61aa666-5b2c-4ac6-a37a-70454aaa397d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4880ca54-ed4f-4539-ba6f-e783f96972c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7106d1b5-5362-4904-8349-5026b9ee7a63",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5149ed-7e3b-43c2-880f-970b548a83ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f45cf67-0225-4980-8192-1b7ed2dea8fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "535dd03c-07b2-4e4f-b7f7-8da66d47059d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3004bc15-a953-4a56-9418-321e8f3c0a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e500df-6c31-4103-9b5b-58b29cd74086",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ccf0f6-8cad-4cfc-bf1c-f224bf5eb771",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d17aafd4-7c30-4305-89bd-c4209c80db84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "219b4fc3-bff5-414f-b712-37077208386f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd3a21a-b56f-497b-89dc-4c3c7bfb4a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ddd0d88-6d6e-4504-b9b1-499c14051186",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38d4554-82e2-48ee-adfc-93eee3d4e996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2cb3d88-a53d-493c-9ace-fe0ff5a43135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbc6922-d636-40fc-a0b9-46743606fa4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97aa3b58-dffc-4256-ad80-dfe3c7b8bb8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6899e8-cad4-4340-8cb0-a637df08b614",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48592a7-4abb-401e-99a1-ad6607270b71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "830dee03-1b6e-49f5-af64-448138d3339e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c10836c-133c-4b16-9ae3-87da7810b8a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15749ebe-546a-46b0-a274-c5c5a5aa3117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a69f448-476b-40e7-8388-ef5d227c81a8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fe76b0-22e2-4f67-b995-43ef66de8f01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cdca45d-2461-4b76-8c9b-aac3063a43c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d132cd78-e9b3-4be3-b345-f26119eec4b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a336fe2-2c5f-4e98-b7ea-67ff4dade0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2b7a3c-6875-4272-9234-5d9740ebf1d5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb84f8e8-c0f3-46c5-a0e8-ad05e6f5ce96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec4181e7-8816-464d-a4d4-9af9724bbb56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f5914a3-a34f-43bd-bdfb-cb7c2e7e0fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa7b12ec-3371-4c4a-b291-9c4ae93c29c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1afa1785-fcd1-407e-8c1d-718dd979cd9b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d701341-9821-4f61-bb84-1b75f19ca012",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92a43352-e7ff-4784-86ec-4764b244233c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3679270d-7a7e-45c2-a6b8-f2785869b785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5035874a-330e-4992-bcb1-20d901d6d8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11379fa-b4c3-40a7-9675-c6e66ef60b87",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d68b94-1b2e-4a7d-bd00-5cc4cd264e4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77ed5b07-c703-4c95-916b-b80275f693e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3accf267-6778-4a80-a365-650b574236f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042ed566-b98d-49a2-8a24-9eff1a4e6d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23ec50e-9752-4497-835d-b67dabd29329",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45b77fd-61a5-4d5b-90bb-1a16ec53dc9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6d9fc26-817e-4df7-88cd-6a026d5ae01f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "568df72c-b5bf-4078-9c57-b8ee432301d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0032c96-3134-409b-83f7-ae24ffcaf611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c4d92e-c2d2-4040-a8fb-f273138fd3ab",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde53c75-a305-4940-b51f-301d0d87fbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f3c5a1-c221-46f8-ba08-b7bad70f03c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c93812-558b-4d00-9bab-3377997276bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1545e1a-e736-4f14-b27b-573d3d80ffee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ba7487-3a73-413f-8b7f-8f1ae40d906a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff100ff4-19f9-4d2c-98d4-fa228e3771ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f047765f-0d5a-4581-b9c8-2153b0f41e60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7874d8e7-e9da-4fe0-a50b-1027c9e03950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b022d34d-ca8c-4756-afdd-4755290b74fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00e500c-e874-43de-b2ee-c58493793b4d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7769be4e-51e8-49c1-a32e-5c8a57add453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82cbdd8-2fd0-476c-af30-db90e13b76ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e62c93-2897-4ee6-9682-369691cf78e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a51b62c-5d79-40d4-b5b2-fd4250e0d669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceebb8ba-3c25-4a76-9130-e741dc60044a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d770840c-f76e-46fb-b93c-b397feaad8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0bdb0aa-5460-4449-929a-3e63b1fa8a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "363b0e4c-eb48-4833-8fae-f95533edb592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "874f3e91-e0cf-48c8-ac8d-cc8e1a5a0440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a0f8e1-dffd-4092-a4d2-ed1572770edb",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81292fd9-e036-4803-834e-db9da58820a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d714b9-5a76-4758-ad62-725850d570eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "248c80f7-1f3f-42cf-88ce-e60219644911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412ccf4e-8636-4b97-b8b7-846eeb03270d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de04023e-dddc-4231-97c9-0572679162bf",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16bd182-c227-4544-99b8-fc082f4e8e7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a25a28c-265a-4ec1-b64a-017d1f76d1dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b1e2ff-6507-470a-887f-664657fc0312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d07add-52ff-4f6c-a3df-7eaea885cf0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d7dcd7-eca2-4d0d-a82f-653bd71d3661",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f304b4-bdcf-441e-8112-be64199fc2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611dcd01-7c51-4303-80cb-b48379a189a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2cf98f7-6e36-4aba-ad68-0d6e061dd863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dc90499-537d-48d0-ba08-ad706fed7cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6815c9b2-34fd-4be0-954b-46a44ce9c897",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8c7c42-0c72-4254-9e99-6f1f6d26f19f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e2ce93-6bd4-48a3-9d21-63e487bf454f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e6e8e5-eb46-4611-985d-0aa5bd387dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff17846e-38ed-4abf-ae92-bf1bb40f7d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb24291e-c71c-4397-93c5-605a60afde51",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0274023d-2a8f-4461-a2dd-6c9f7324e833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28c3da06-bd26-47c7-a3d7-d9023abb8be1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d0bf73-e54f-404b-bd69-ad5a0320f337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e218f26-d0c3-47a2-9b32-56603fa5df40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca476ef-2b3f-40f5-b89b-450f7ba081a8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1347d4-8b3c-4076-bec1-24b9a8947ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563ddceb-39a1-4495-a4ae-464d697e859f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7a7d8cc-f268-4982-89d9-2fb3114a13f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e931d81d-cb3b-4388-a546-d184ef21a16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3733e45c-bd09-4799-b633-e048fd10a786",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e1ef6b-bd52-4a67-8a1d-5715fcc4137c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b4735e6-1a86-42c4-a9c4-2c7c040d534b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f7bba0-5182-4b8b-9d2c-092f90bbb438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e39b177-1f24-4848-8d99-b68392996210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb864383-ea00-4d9b-a255-ed097b82b3f5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fee575e-96ef-4f30-9f2c-548295014649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8070917c-39b9-4200-a33a-0004ed16f215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63af9de-eca3-4856-a8a6-b2923d4a63de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e429eb48-b4a6-4a67-bcff-2af1ee136ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4591ae-2533-4f19-b357-5f2600e9472b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af60e62-c7c2-4ca0-864c-64827c6b55e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d01e5e-b2f9-4e7b-b9e5-f966ce88284a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf380afc-b11d-47dc-b345-7832eed9103e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "214dbbf2-8094-49c0-b56b-bea6e8cab3fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e6fa385-2d21-419b-8caf-95a861511991",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7e7062-0ca0-404e-a9da-4c9fd62ed9f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9219cbff-57af-4b5f-8740-a01e651a3100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf862a6-e4a7-421d-87a7-3d1e3280a33a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "243d304e-d38e-45ad-8ca6-3cf39a5a9340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097cccd4-d3ba-42c0-b661-2aa12efa15a0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81db2e2f-5cbf-44fc-a9ba-ad00eb57059b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd377ae7-f2b3-46af-869b-1e89c8e4d7e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad39a12-39a8-4c34-8437-6f4a1516fb28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f73f297-bac3-4735-989d-42e9526da582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d9c4f4-cfdb-4143-8f2a-516f9cbc0de3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8e5487-a145-432a-aba9-8761693cc129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0788c92-43fc-436e-98d3-949f221919bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8e0a28-bf28-4bba-8f23-95b4c11f8018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81baa02e-e3f8-41e7-b291-ba834dc45c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce93c2a-9d64-4748-b93a-d722cfb3c697",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96bdb8a-c46f-43d2-a090-c5f39014c924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a36cdfe0-7ff2-490c-8f85-919d552c3652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c76be0-d5e7-4e12-a3e8-707c41395ec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d025a2-9ae8-44b8-b044-77aa6a1cf97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf344c25-e5f5-4d23-910f-714a6a5ec5ad",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d251557-a36d-4c4a-9e05-eface7deadcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c415b7c5-1a13-44ae-b015-8b73c8c5e058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "185b427f-db87-41aa-a488-cb6890d6a445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8853a2ef-b372-4f2f-bbc5-af5ce397dcde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687106a6-22dd-40f9-968c-d6081dceafa8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a625492a-eb5f-4bd0-8b62-cc8fc113a622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58545381-0f42-4724-82c6-2e0638e1ad48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c654a6-23b3-4073-b86d-ebea790c6075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba99800-6db7-4335-a944-5e0ef156180c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043d3300-917d-4fe8-b158-226555fff9bc",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b4ce5f-f54d-46f4-9c85-dd5f80c7c427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f52cf5-073f-48b6-8aba-d81f689aae35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5978c77f-63c9-4c21-ac02-830b7b2f8bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd3d7331-1349-43d9-9cb6-6532252a415a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a5a2a7-da25-465a-92ba-c58300ca7f6e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc4f2af-8a58-4432-b6da-ab2918323240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47cd82ef-9c52-40eb-8c4f-a0cb96ae712d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d97cf3-7edf-4a41-8d7c-8509a052cada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aec0aab7-a72e-4577-9703-9e9402c3399e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054a8a28-00af-4650-9b78-e4e61c45b676",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f86b312-e37a-48ea-940b-a10130f4e96f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55bfd93c-1599-463f-8734-f0f7677cfffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a2dd75-ae57-48e3-b373-4e7a358c4edc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c201100-9ce3-40c7-91e4-bf3b9876e6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba3619d0-e0ba-426e-a7d4-cd3712c7a3b5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11cf448-1a17-4c29-a922-3e9fc6408314",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cfb5a7b-3aa5-4390-a7b4-930e42b25850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc107cb-ec94-4aa8-864a-6338895616bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df44fac-82cb-4ee0-a864-1671db7099ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e0c0a2-ae81-4e00-ae39-8006c09ff45c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2abfcf06-d7a6-4ef1-b77e-e58bc65c7832",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27be6959-ea62-42d4-8d4e-8fb079a2ca23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1614b6-45c7-42c3-8061-579c6a3f2fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a6a1ae-9fd9-4056-b67e-f6ed5156c378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f5cc93a-08e0-4aaa-b3e9-f5c9aa7d3f12",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146a95dc-a3a0-4926-9e67-88fa7e41b25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d7c6b0-c07f-46ef-8dee-a057bd371f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e56315-3b1c-4090-9675-e84b95674e1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c835114-24b2-416d-a916-292bc620852f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801f7e5e-7bec-4fec-a4f2-106af5bf49b3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad72ad2c-b325-490e-80ba-5ffd3141dc66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14fdc1eb-0f18-483d-9ea5-a365846c87ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "565bf43e-868b-44b6-a394-13bd0c00e54a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb6bbbd9-9512-499b-bbad-bf50ff0bde9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f450932-e314-4fe8-850c-b420a0ca56ac",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09833629-e825-4be8-8d92-39960433fe79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c1286f2-6723-4d9a-9657-8810b785d130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3531b40-4613-4057-8f18-5477b181a38b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38bf8158-fc1c-46f3-949b-9f401abd0be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e95fce4-cf40-4a78-b562-71a78a7077dc",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482b2e1c-fc16-4a83-9d40-316225458c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc90e935-59ac-4b61-91df-13beed6a63b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66950182-2e6b-4445-8054-7f45e2a6e80f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5317cf6-7fdc-40b8-b962-02113cff2a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1daba8-a800-4be3-9594-1d2781ede83b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f394dc2-6ae4-49cb-9385-2df8d49df654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe94d9f-37e2-4426-9b2e-3f79fa0eba7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be79973-b310-4713-a040-50dc1347d3c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a86728-59cc-4790-aad4-e33a17cac3c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99c9f88-59ad-4ca8-a23f-86a5f31338a2",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8e6fbc-dd4b-469e-8dcb-19b77bbd2be3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84380d2b-715b-4ec1-94e2-89bc48e1969b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a55ec89-2779-419b-a536-f888e18c0355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1afbd2-9641-4cf4-af9c-500f1d6639a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b170e8d7-7263-4044-8060-56b462f021ed",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfe42c1-213d-4040-9a41-973c2ef885ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00a505ff-0523-46af-ab77-5dd1b40c9c6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b061ab-aa09-407d-b0af-0ae1adc63738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b96733ef-e91c-4560-a336-4bc9328f3a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03a3911-6eaa-4c1e-8a03-0e94661e73f3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94437c3b-b49e-472c-9ef6-2cb1b3941a15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5de8cc8-6188-4776-80f1-efbe5bcecc61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "904bede3-0a6e-4659-9e03-17e11d13b361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a36f85ae-c483-4e99-9165-a03653ad91fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175dc52d-9d7f-418a-88fe-6c987bc39926",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651707a8-3370-4793-8029-c9994642468e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbc8ef44-9f6d-4b05-bcf9-6f93db7c249a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5bc06a-b37c-455d-9f62-358e725f59ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc9ce4b8-dec2-4a78-90e4-32c1149e3726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b292d3f-e6bc-4d77-b59c-718af88a0e1c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11bd2286-acab-4765-916b-c8531bf3022e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fc33e6e-7f1c-4d16-a90f-5ca0dd254d4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eecfea8f-bca3-41ea-9ec3-13d54a604642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5edfa5c-a5cc-438a-86f0-d13082de6656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bf07a6-c5a1-4095-b7bf-fcd33a056c8d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb03206-c739-4c04-9768-d0b598dc4ed5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aed0a72c-c541-4150-a1de-087d936ae5f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54008eb1-065a-4e87-af9e-efccede211b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c8c5c5-fb8c-401c-b1b2-8e902dec8f9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4462d26-db65-4dfa-a229-405fab0203e4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ce7411-d430-4568-a4c3-bd193896c64d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2e0e658-02e7-4814-9ea9-6f64e0fea277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778656ee-ed6a-44cf-9a71-8b4784a40c21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4cf47f-2ef7-4afd-a25e-23d6b7d5ca7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d275dd3-8db4-424c-a33f-446f6614acfd",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08efb8c-3f40-4710-82b7-0aef129988f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1fe53da-2d76-4fb7-9332-4d44a1c606cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d7b283-eacf-43df-bde1-5d4a624e9566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e11dcf88-6100-49b7-80f0-127a87da530d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b312b5-da44-48d7-a439-56bab12eed81",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ed7fc9-3c82-434d-9967-866b6411cbe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "299d36a3-d328-43ac-a47f-a9caeea42ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b83331f-253e-451c-b1a8-416b7b196555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1104bad8-362d-4b5b-9300-314c3a67f5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c82d29-c943-4dd2-b98c-75e8b6ee24e3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c455190-a800-4047-8993-d4eac592e115",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d04f0d70-c2b7-4124-af43-bf1ae3fb795e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f809f400-0d1c-47b3-8692-1dae6f48a9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1fcff66-8c60-4d76-99ac-8c7ca3ff8c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15743be5-f9d0-425f-ad74-380096a3b04e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0b9335-d3a2-418f-873f-0e9a78e2b80d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "300c8b5f-5673-40ed-9207-90c8711196ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4276ef-d899-44fe-9c76-4a1f9779f6c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d557fee-0ef6-4b84-8817-7bee2fdf578f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1524693f-5be3-4ea3-b19a-a3f947ca9ed9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6236a98-ff59-454a-b1d5-50080c052aa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07e2ffd5-06e1-4bdc-a010-8ab18838a09e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d223960a-dc58-4ac4-8c35-f31c96dd584b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8340134-99ea-4563-b737-623e5ee16747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a0c235-f51a-4f66-8387-2fa03f614589",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a81d6639-d938-4ff4-ad9c-f3d5ce6e06f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8d7c998-4215-4d6b-a891-d17a4eaaa6e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efa9d5a-8ba2-460b-a53b-b9af1106ed9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c72454-1d4f-472a-8a71-3784286d5b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904e4ef3-3a58-41a9-a786-33063d72a08e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e24d690c-8af4-444c-833d-b7cff8613a3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e0b73f9-421b-48cc-a412-5928f50863da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a88d51-ab29-426d-8ae2-d1764a825cb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71238d8b-f659-4ec3-b3d4-6a3a76c65f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4883e58-1421-4528-92e6-bf0dc9d8cac7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6cf9817-72d2-448d-91fb-f17a44ece674",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a81be0b-b2f9-41fc-bd3d-49594469aff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9401e7-50c0-4596-8b9b-813d256f115e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a94e4c-e723-45dc-bf7b-3e983dd494cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d729e13-23a0-444a-99c3-dd3c44f05f14",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c54ca4a-e37f-447b-9318-7a699b96dc8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bef86dc-c683-45d3-a2e6-a277c70ad498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "746daa65-c149-4935-976f-dc51b4fdf7d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff03b02-f128-4a29-921b-382274e09391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0d3689-0ddc-4eff-8fd8-6cfbab2c7d87",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd85ffee-77b1-49bd-af5c-5625b4297afa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2b9eed8-5306-4c07-8e40-b75521388dec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c70eee3-48bd-4c74-b57e-e6e6682e3374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8286a78-d44b-4f70-b01c-f7875600b9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f68c9c5-02e3-4c44-8038-901679279896",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93962e6c-112b-41aa-827b-93da120a3aac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd18cdd0-cbac-4067-9c61-0ddeec6524ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2c7943-635d-47dc-8e93-f015b37fe93a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0d34bac-84c9-4ab3-a85b-4bb286167532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b933da-9bf2-48c1-885b-ac161d26377c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bda4a1-9213-4ae1-b7d8-a96c566bd1f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66a1a967-c737-4877-86a6-88d498745b40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e299e426-8e63-4b8c-a947-49a2fcdf3d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a129af-09f3-46f0-b313-48512ac7f651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbafc25-1ee2-4aca-b24e-aa3a639e4f48",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59698f0b-cd3a-4d09-b3b8-3d686636794f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdd5ac87-2af1-4a3b-ae2d-3a0345a17f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9b7bea-e50e-491e-adc4-fdee8576ca33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee3b57e-c8e4-431e-a174-20b8c3dbb21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2bba95-6ebc-483a-bc75-4f780938e7b4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe39c4e-96c6-474c-9815-734c41fb66aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ae45fcf-4a51-4360-953c-757728f59a24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78203e62-784d-4e80-93cc-09013e991c97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f044eeb6-94eb-4d5f-9b4d-f4fe25a671e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49122a3e-782d-454d-b6f7-b81f1cbab971",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a69c77-ddd4-4abe-8591-74f5e1a6756a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b9f89dd-18f9-4619-a535-06d27b11da57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f784e9-fa91-428e-83ce-0068c3975284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fac86cd-08e0-4d8f-bca4-b54ace9a5cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d038f14-48d8-4ecb-99de-b8a10135acca",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90cf8241-cbe3-4e6b-954b-eb8206f1b580",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f2c4e36-1d4f-40d6-b893-9316bca36bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d40331-5bea-4661-9e80-ef0e0df62af6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22371a4f-06f9-4942-898d-a12382d94f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679388fb-f081-4c64-b536-6668682fd3ec",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f234d39d-9a36-4e9c-8b74-fe5fb970d035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74b3d77c-c82a-4f7c-94e8-c9922f9513cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddca617b-3a2c-4dad-928c-8615ed0bc144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "299611a4-9196-43d8-8533-c85475cafa72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f65e97-793f-4ef5-8ed9-fae126730d08",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "accb99df-d91c-454a-99d0-793069714201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f79e382c-bc0d-4dbe-a3b3-9fa5eea52774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd945249-4df8-4d66-a726-a48fbc06ef62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eb8ee5c-8e69-4547-8897-9ffd40493fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed32d18-436d-4afa-89f8-360418fa20bc",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bef9504-fb44-4bec-9cc0-776dd72636eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcb89ec5-4eeb-401b-b37b-76184e0c7a51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5983c75d-8405-4e3d-be62-af6576bb2696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c01b888-cb0e-4c16-ba7a-f277b58b884c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaff71cd-5ec3-4601-9c38-293989e22c10",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3340c3a1-1f22-4696-8703-0ac9061aa8fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79364e4e-cf1c-478f-81f8-1787a0347b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "419129c8-9c6d-4520-95fb-5cba8a8807a1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c94dc7-d644-4ba6-993c-7ef57c2f709a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e282701c-a907-40b6-be85-724503d5824e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de6a557-17c9-46c1-be65-6bf38167c033",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db4a5d3e-da0e-428d-bc0a-21cd19a64cfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d2ef8b-723e-4688-8429-e52c45156227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b187a2b1-9580-4b58-9c1e-eefae7179ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fec42f2-7811-49b8-bd6b-8d8821f6e172",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0250c065-684c-4a1d-bcf5-f9550801fc58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dddf565a-44f0-4331-86c3-25dec0752d55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8247652e-21c4-46a8-a4db-c5c57a4e63e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212ebd54-3d5a-4de6-b80b-edf37ad65471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e92b6f2-0dbb-411e-b9f3-17459ff7fee6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c518e556-ebf6-4911-8830-dfd27c2031b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31340f72-75ae-40b5-a64c-429f1ab8823f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "136c2e70-0a77-47a1-84cb-0a31164626b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09588bf-254f-4fde-a7a3-a837743428f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0408773a-6e3b-4f58-b5b1-3f6b7ea5d508",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a52fc5-367b-4d5a-9fba-0deb7c108056",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0935b071-d58f-45d9-8714-4756bffe9383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de851a76-b3e9-4ea9-9618-1e786a1d3fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed38454-9399-4c6f-9405-c197dbc13916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0a8276-4a3d-4ce8-9ba6-8556fa939227",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d1f618-8699-417c-b7c3-73d46d82190d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "299d82bf-56d5-4064-b9ae-55dd61e33616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c47370-ce8f-4aa8-b9ea-a8873ff08d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79921c0c-ee3d-4368-a2e6-cab8b6f64c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce87e42-c660-4a65-8f80-2203236ca632",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c01bd8-9357-4206-8936-ebe6b2b89ac1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bedff134-6f9e-4a06-9da1-b30ff4f6a323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c9d498-23ad-4d6c-a663-299d5e11434f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bab7e42-a7df-43b1-900c-0bcfbe9b0b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cbdf03-022c-4b09-8da3-b7984a555b99",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976be496-5ca1-4cdd-90f8-b4e77f013e43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ddde64d-269e-4f17-bd32-cd718c1e42d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "279f2c37-2d76-4e13-a1d0-5785f287e41d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc96a59b-e208-45e1-b7d2-01d4547e0713"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51575b3e-71eb-48bf-aab6-bdc44a0fd2a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abc70253-aaaf-4015-bdf2-1d178bc80153"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "df44b2b4-d159-4e56-a81f-d3fd16f79143",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf616c33-fda8-47eb-854d-e0195136637d"
                    }
                  }
                ]
              },
              {
                "id": "cfa1d44c-5787-46f1-92a8-082370d27c23",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee0673bd-17f6-4cb9-9c3b-5a6d07dddc1d",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c3e311-e8b5-4ff0-bdde-d17fdc7a4764",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5bafb0cd-a2e3-4937-bf82-c5c5b037fdd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88dcad0-f2f7-46fb-a215-5dbb0b07ed19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0fef8be-03ab-418c-8208-cb2f3d8f1e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b315680b-ee3e-4973-8ad0-593dac2ea48c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527fe029-ee9f-4a44-a984-19ddd42e84d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2b1edb57-beac-42c6-8ef6-6ad6935b071d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d3183e-cea7-4ec1-b502-1ca33c5cdf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5713f175-6c37-4ae7-bf89-bdbfd191fb7b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b63c4ff7-97f2-4965-af6c-1de5275aefaf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "670c25d1-d102-496d-b78b-6bd2f71c02e7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "314c22c9-20dd-4c27-b0eb-89746562c964",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0dbfc0b3-cb5a-434e-9009-0b9da9b0302c"
                    }
                  }
                ]
              },
              {
                "id": "fb0096eb-610d-49df-b374-7fe63d2691fa",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "98fa1d41-d993-4da8-a7b5-ede6f5eb94e8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca7e8a6-56e3-45a6-8e63-babd4297d81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c2a53c85-a3c2-4065-8096-9c54ba59e355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24389417-4651-40df-8740-79d06341069b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d11d18-3ed1-4678-87ac-114a729b8609"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d52a8b97-ab48-4dac-8de1-dba799f33e85",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3445f13f-7021-4252-b290-333a1b94a127",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6dee59fc-0984-463d-9cfe-102da775bade",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "aa6d1aa1-3451-4fec-914d-e1ce487c896d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16fb4880-ef59-4139-8d6f-0ace9ffa33f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "622a8de7-3422-40ac-8d0f-1a684370f566"
                    }
                  }
                ]
              },
              {
                "id": "71e0887e-0d6d-4bb3-85a1-a440d7e5d2da",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e94c233-20a9-4b08-8f52-7030e18e5bf5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "839a6dd0-8d32-44cb-b55d-827a05ec917d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58aeab57-ac93-49e3-9b6b-653510c925d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a5e94e8-7eda-4654-b845-5932c6bd70e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c2a22b9-0d87-4f3d-a8ca-3689fff3745e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "72a160cb-ff3f-4b13-bf72-f1cd0b104a1f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9e261173-501e-4e5d-a857-0e31bc259c74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "075cb26e-2e2f-4c96-9e91-ed036608a108"
            }
          }
        ]
      },
      {
        "id": "a8fd556f-829c-4545-b7be-698095aba281",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ef455542-de3d-429b-a035-15ec901d8930",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e2c97fe-f16b-4353-901c-73a3e6c0e208",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a30643a3-6fa9-4f54-94b6-cdc04801598e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7713b7-76c6-498c-8d36-3dd5c7d8d95e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a35b2853-6606-4bad-8e68-4501ca7075b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8045608e-a008-4686-97f1-c16b9234402f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "311f42c7-aeaa-4a39-a807-6a2f0a18f6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a7fb14-5210-4c84-92b9-e8339f16de34",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34496a2-f748-4763-b34a-d589fc72930e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "687f4d88-630b-42c8-bbbd-f03ccf014032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "238c45a4-b16f-4995-be61-24142f0c3866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d606a547-5c21-4b11-8bdc-c0d6fec7d409"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef0d7779-96f4-4044-b140-897a362bd38e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1cd52e0-f7e9-4cf2-a2df-6b0440f55890"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "531c26ea-ce29-4f2a-9a7c-fe13465cadd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "593c8074-fa47-42cc-955f-08cc61d86879"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1be116d-f7b5-4712-b65a-b424821f67e2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "df378aca-a8e2-4e09-98da-944749d88133"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6a8a66d6-e0eb-4f8a-9636-16d7e011dd24",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "627fee58-7659-45eb-840e-5c7773465ef2"
            }
          }
        ]
      },
      {
        "id": "07b8fa8a-5a18-4964-bbdb-084b39a4e11a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "765ef7b3-54fd-4489-ad06-b9bd7a7784cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e281a113-4ebc-40de-90ea-1e7f4b425bba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9678f803-4840-46cb-9a70-014cdd7a1ec9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40003818-f78f-4ce7-ad70-371367be7a46",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b8506b8-fc86-40f3-9c7e-a13e632dc958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24030ab6-a82e-4157-932b-ac6ecb80741c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c462ef2-1d79-485a-ba23-7d14974e0a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3a9565-8840-422a-b10c-dfd531de57c2",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eef62dd-8c7c-4924-a181-00c901fe8ac3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1aca29ce-0c0f-492f-9eb2-13163b055f05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4bc84f-26df-487a-9ede-7b833445e46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "389c2266-e396-4e04-af8c-002e85d94d44"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "daf321dc-7e6f-41a7-b5de-c8772b4e3b40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b657075e-0bfb-45ed-9575-85db2f377e90"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "da4a7df8-8003-4635-8b7c-4ca9798c125e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f17d9fe-9097-4175-9742-49dc77a7690c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "215b7069-90bb-48d1-8a0d-2b3eb5b1e131",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8126a2d2-c625-4963-8655-eb4df804a9cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c345f56-fbf6-43d8-8389-0a4e783bdb39",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7687c2a4-8572-4b36-9152-4f7cf1fdab03"
            }
          }
        ]
      },
      {
        "id": "9c961386-d5c6-4a96-8270-1792c5165e4d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "26942230-9bea-4577-bf0d-a797398fa83a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "775f6898-9b29-4119-878c-a8b389c5f9ad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e8d1d05-632e-410f-b3a3-8a24ae2f52f2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7aa538a-a221-4587-b632-281364615dcd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "503ea87c-9040-47a3-8edf-d6cad47812a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa6f276-21f2-4c1a-ada1-219b751c0261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8def9b33-13dd-497a-ae6a-c319a6933368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3bff5c-f2ae-4145-b8ce-b5a278d0e6d2",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0cecf4-0ca2-4ec5-8a69-e8224ff231c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c3fa1ffa-a2d6-4cf9-9f3a-1fde2367b674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "867c8e96-a1de-453d-b6ea-d9aad5405950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52b18949-3659-4aab-83b5-3ba2ad11b721"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "753144eb-b00d-49dd-9957-0974de693a1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18f342af-c95a-4c1e-80a6-6b7cd36b58a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "26c2f6cb-1a98-4626-b288-38353d4633b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5503b9f-afc3-4026-a462-576d8e7d18ee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9861e3c3-402e-43bf-a5c7-08ec0a3a5ec8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "03588dac-8229-4204-8a36-0bf5f347f582"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cadbfb3b-a11d-46b9-b9cc-7cea8a3d7318",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d00b6f8-cf09-497f-883e-0e4d70962a4c"
            }
          }
        ]
      },
      {
        "id": "6cbca7b8-ffde-4440-a93b-f56c870eb90a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31de2d28-c2c9-4822-adc7-1b31fb7fba6a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4727fa5-8f4c-402e-8f29-8fd87f4f0932",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a0e72531-ddce-4451-acac-23a868e752a6",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "49b76074-3062-42c8-a26f-9529e4a9ff03",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be25b8a7-e4bd-43ea-b5c3-0b2680021fc2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 270
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 214.7192307692308,
      "responseMin": 9,
      "responseMax": 4895,
      "responseSd": 732.5357184881478,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1680482231915,
      "completed": 1680482298521
    },
    "executions": [
      {
        "id": "89c57e44-a4ed-42fe-9ccf-ad7bc5b7fb19",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7457405e-1dfd-460f-b991-2f95dd9c2844",
          "httpRequestId": "1fbe9f34-1886-414c-a22e-85e0e7796ca4"
        },
        "item": {
          "id": "89c57e44-a4ed-42fe-9ccf-ad7bc5b7fb19",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1b4a70d2-354f-4e8c-89e2-54ad79ad5be2",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 0
        }
      },
      {
        "id": "c7c257b9-ef24-4988-bef4-1a536d0a24f8",
        "cursor": {
          "ref": "b4a11792-169d-484a-8a20-1e90c67f37c4",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "33fdf216-647a-4798-9279-f2940f1fc181"
        },
        "item": {
          "id": "c7c257b9-ef24-4988-bef4-1a536d0a24f8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "df1d0bb0-347f-41ef-9843-e35af63d885c",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "a02876a5-25c1-441e-9686-27f04109f596",
        "cursor": {
          "ref": "1db738ed-4945-4194-98cf-94b74518f75d",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d46109f2-a3e2-43c4-959f-bdb375dd3a7b"
        },
        "item": {
          "id": "a02876a5-25c1-441e-9686-27f04109f596",
          "name": "did_json"
        },
        "response": {
          "id": "d17a0c8a-6728-42ae-87c1-c055f5a2f12d",
          "status": "OK",
          "code": 200,
          "responseTime": 214,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f6ff38-f79f-4754-9469-c2610e7bd27c",
        "cursor": {
          "ref": "ee4c0495-d6fe-4ed3-a935-2fe0b9277b14",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7db125ef-06c5-4da6-87c4-68b12193a8db"
        },
        "item": {
          "id": "64f6ff38-f79f-4754-9469-c2610e7bd27c",
          "name": "did:invalid"
        },
        "response": {
          "id": "00e189b6-68b8-4f5e-9b8f-34f2c45ddc05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f6ff38-f79f-4754-9469-c2610e7bd27c",
        "cursor": {
          "ref": "ee4c0495-d6fe-4ed3-a935-2fe0b9277b14",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7db125ef-06c5-4da6-87c4-68b12193a8db"
        },
        "item": {
          "id": "64f6ff38-f79f-4754-9469-c2610e7bd27c",
          "name": "did:invalid"
        },
        "response": {
          "id": "00e189b6-68b8-4f5e-9b8f-34f2c45ddc05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "757467b3-c4de-47f0-8ffe-6ad1fa70f7f9",
        "cursor": {
          "ref": "b754fef5-5956-44aa-b739-eb72fd686acb",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c5f10a5c-9e88-40fd-8ff9-d2b507526768"
        },
        "item": {
          "id": "757467b3-c4de-47f0-8ffe-6ad1fa70f7f9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2bb0a361-2b9b-4fc0-b4be-137c551e6a69",
          "status": "Not Found",
          "code": 404,
          "responseTime": 104,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8620de3c-a44d-4b8f-914d-e0639745b4db",
        "cursor": {
          "ref": "3f468541-99dc-4ccc-8680-5fd5093528f4",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "204ddb51-f4a3-4017-b480-91b06ad1d592"
        },
        "item": {
          "id": "8620de3c-a44d-4b8f-914d-e0639745b4db",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "86c702ca-1b8b-46aa-afa9-3bf6245c7ff5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999a4175-07f8-4d4b-8f60-e9bea9ac6cee",
        "cursor": {
          "ref": "626da7f5-525a-41b8-8e12-15bcc87c67c3",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a0b7ae48-1f00-43a2-9112-3a3ccaecf67e"
        },
        "item": {
          "id": "999a4175-07f8-4d4b-8f60-e9bea9ac6cee",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ca6ce8fc-f739-4004-8d4b-70fa022b83df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd76b4b-c831-4bb1-841a-f5d18fce67f7",
        "cursor": {
          "ref": "1f767642-5f0e-4653-9533-9d45758e0a12",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4f1360e0-818a-454c-a320-c3256140195a"
        },
        "item": {
          "id": "0cd76b4b-c831-4bb1-841a-f5d18fce67f7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1fece9ff-b721-4717-9b43-7e867aee843e",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0cd76b4b-c831-4bb1-841a-f5d18fce67f7",
        "cursor": {
          "ref": "1f767642-5f0e-4653-9533-9d45758e0a12",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4f1360e0-818a-454c-a320-c3256140195a"
        },
        "item": {
          "id": "0cd76b4b-c831-4bb1-841a-f5d18fce67f7",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1fece9ff-b721-4717-9b43-7e867aee843e",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7c2ac504-784e-4fa1-96d2-b2942c03ff72",
        "cursor": {
          "ref": "d172ae3a-3850-4c60-8658-08fdc32d772e",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0247fa0f-e6c9-4351-846f-5da428a1ab0d"
        },
        "item": {
          "id": "7c2ac504-784e-4fa1-96d2-b2942c03ff72",
          "name": "identifiers"
        },
        "response": {
          "id": "a36510a3-f149-4841-9761-e628f3b5b4b2",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "dea1a351-6758-48d8-a581-88afd9a49aaf",
        "cursor": {
          "ref": "ece029a6-bb74-45bb-ad32-353f1abe072a",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fce0305d-c0ca-49ba-9ecf-22bd0ca8b61d"
        },
        "item": {
          "id": "dea1a351-6758-48d8-a581-88afd9a49aaf",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f8aab6ee-df01-403e-88db-a951d06414fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "dea1a351-6758-48d8-a581-88afd9a49aaf",
        "cursor": {
          "ref": "ece029a6-bb74-45bb-ad32-353f1abe072a",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fce0305d-c0ca-49ba-9ecf-22bd0ca8b61d"
        },
        "item": {
          "id": "dea1a351-6758-48d8-a581-88afd9a49aaf",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f8aab6ee-df01-403e-88db-a951d06414fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "381cbf82-f558-4a4f-a75d-25e5305c380c",
        "cursor": {
          "ref": "00fda9bd-e614-4af9-9e6b-825360915a0c",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d83c45b6-5229-4ca5-b12d-6f8424045dcb"
        },
        "item": {
          "id": "381cbf82-f558-4a4f-a75d-25e5305c380c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "af661595-7e8d-40ac-b9a5-ad623abc83ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "8d40d03e-7436-4382-bda2-6738a58f2220",
        "cursor": {
          "ref": "22821f8a-001e-45f0-ae7f-e60eb0e5f9e7",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2d10ba3b-ca0a-4a12-8916-74bc1b655aef"
        },
        "item": {
          "id": "8d40d03e-7436-4382-bda2-6738a58f2220",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "03c4a549-59e4-4e9d-8f72-370181703e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "05335752-f4c8-4e2c-b21d-82cf7567b41d",
        "cursor": {
          "ref": "85f47b8a-e890-48d5-af9b-d10f54630d76",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3dfcb881-e3d2-4082-bdff-48b59a4ace81"
        },
        "item": {
          "id": "05335752-f4c8-4e2c-b21d-82cf7567b41d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7891d3b7-8ffe-440a-b6dc-6620c669a859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "cc1a164f-452a-4255-9b3d-ee7139af3554",
        "cursor": {
          "ref": "33c75ed5-e55b-44f1-84bf-c4ce8bcc15c8",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "39d4973a-8a43-4d49-9413-a93287f42987"
        },
        "item": {
          "id": "cc1a164f-452a-4255-9b3d-ee7139af3554",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1ae2b548-2726-467d-a835-5f3eac221044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "58f76c03-8c99-40b5-b489-84a6c437fd53",
        "cursor": {
          "ref": "1685f958-91ad-4d0b-86d3-3eda5fd517f7",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a790270e-7560-459e-835e-49faf4bbf9c8"
        },
        "item": {
          "id": "58f76c03-8c99-40b5-b489-84a6c437fd53",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5e70d6c7-98cb-4bfb-86f4-3a49ddcaa534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "e6114be5-44b4-4386-b8e1-28c9458a83ff",
        "cursor": {
          "ref": "73e19e28-919c-4e8c-8bc0-7f1aee39c924",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "79917bc3-a929-4f74-9619-d95cacb2e6db"
        },
        "item": {
          "id": "e6114be5-44b4-4386-b8e1-28c9458a83ff",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "704b5ddd-8864-4122-81b2-928430bb2545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "1f368068-7113-43df-8940-c82c93a226df",
        "cursor": {
          "ref": "b172553e-a5cb-4a5e-9cb1-5ff30c9ca192",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a23920f5-cd5c-49aa-9734-f2d8c3789ddf"
        },
        "item": {
          "id": "1f368068-7113-43df-8940-c82c93a226df",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d13e62de-d30e-4c6a-a167-b3236bcfeff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "39e48e5c-5e5c-4ea6-b9b1-2e81d70c0012",
        "cursor": {
          "ref": "ffc82744-0724-4ff8-a843-1f966b672ced",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c73f42bc-dd15-4143-827d-9366a63ddd35"
        },
        "item": {
          "id": "39e48e5c-5e5c-4ea6-b9b1-2e81d70c0012",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8b162902-9925-4027-9d8a-2e51352c81f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "4b2a006b-586d-4927-901e-cd5cb06cb8d7",
        "cursor": {
          "ref": "67b8e758-502d-421c-bb11-a2e1fe039e61",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "103d3520-a72d-422c-81ea-bf8837ea61ac"
        },
        "item": {
          "id": "4b2a006b-586d-4927-901e-cd5cb06cb8d7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b2b60591-a149-46c7-a641-36b41af5ad2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "b3d0ab27-4a4c-4e2c-8c6a-676fabca5306",
        "cursor": {
          "ref": "365c625a-51d9-4b2f-98e6-abda48483ec4",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4db9118b-6884-4139-8f29-dbbd08810bc2"
        },
        "item": {
          "id": "b3d0ab27-4a4c-4e2c-8c6a-676fabca5306",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a71e0a83-a057-48ee-9ce0-d8ddd4566922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "a8f63fd2-70be-4dd4-8cff-8a3cad332f76",
        "cursor": {
          "ref": "fb628241-ff9b-436f-9282-957cd6425507",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "57d939fe-6275-4c55-90b9-55bff8a775b4"
        },
        "item": {
          "id": "a8f63fd2-70be-4dd4-8cff-8a3cad332f76",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "36b7cdce-6f5d-4e17-a6b8-b66406d56eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "9783a1e4-517c-4006-800a-66d86616658c",
        "cursor": {
          "ref": "0d2f1eac-56da-4895-a7d6-505d60be1e2e",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c9719ca3-1143-423f-ad21-0fdc9b0f88fb"
        },
        "item": {
          "id": "9783a1e4-517c-4006-800a-66d86616658c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0c442b97-e726-4551-b77f-ec9cce92b845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "d7a4f766-1332-49e5-a615-8d954430a56b",
        "cursor": {
          "ref": "bd3b29df-fa59-45e2-80a2-0e724a2e29e5",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c09017f7-9e62-423a-9f20-00d96ce162ef"
        },
        "item": {
          "id": "d7a4f766-1332-49e5-a615-8d954430a56b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "14e3a41c-ee7a-4dd6-9e2c-9fdc362fca20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "e7eea803-2936-47ef-9120-8d22bf09e618",
        "cursor": {
          "ref": "05bb40db-4d45-40e9-a492-e8673e9560b9",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "65116cd9-3214-4912-bfa8-00f802be8f82"
        },
        "item": {
          "id": "e7eea803-2936-47ef-9120-8d22bf09e618",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2357dbbd-96a4-492c-bb9a-0a7c6d584161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "b1367cab-4cf5-4ebd-b94c-3f37088ad1bd",
        "cursor": {
          "ref": "91137dc5-ef61-4126-aac8-2cd62a8d1350",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "61a07978-b746-4c81-b57b-f8f47ebd5716"
        },
        "item": {
          "id": "b1367cab-4cf5-4ebd-b94c-3f37088ad1bd",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "bd31d1bf-3311-45bc-a7f2-ab651d1e844b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "a4fad06d-b083-4be1-994e-5d1573ee331b",
        "cursor": {
          "ref": "bf1fc16d-39fe-4830-a58a-92b4544ab59b",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "76ecde79-b920-49a1-b261-700c50bd5685"
        },
        "item": {
          "id": "a4fad06d-b083-4be1-994e-5d1573ee331b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "507193c2-d9ff-4420-a30a-b20bfa49a8a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "c8a8d613-280d-4e9e-9f5f-ea53e09f34cc",
        "cursor": {
          "ref": "4230c0b3-4893-4d5c-b87d-f51b44b3c585",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c3203c71-738f-4171-bd91-724bd0047581"
        },
        "item": {
          "id": "c8a8d613-280d-4e9e-9f5f-ea53e09f34cc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c101d24f-43db-4b97-be96-d9a05c999880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "cdb6d3b7-0ca8-4a86-9c77-9b8ef09419f9",
        "cursor": {
          "ref": "1d97ecc6-bc78-4c99-9c98-da5c69360f44",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "da7a619a-b55a-4488-a393-41a7b967bcb7"
        },
        "item": {
          "id": "cdb6d3b7-0ca8-4a86-9c77-9b8ef09419f9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4b87f07a-e8f5-4b9c-9fa9-5e73d49435f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "162d1dd4-9ef3-4f4d-82e4-143992edc6de",
        "cursor": {
          "ref": "d0cd4015-3ff1-456d-a130-d67e0c8ab7bb",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "feab3a0d-ee4c-4b00-96dc-7268278e033e"
        },
        "item": {
          "id": "162d1dd4-9ef3-4f4d-82e4-143992edc6de",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "64c56298-215c-4a1d-9d8a-c6fef8f4e9aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "bee417d1-1f00-441e-aff3-6114fd992f38",
        "cursor": {
          "ref": "4fcf229a-1a3b-4e7f-b8d9-effc73d3838c",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "16037e26-719e-4cb4-86b6-4bf14689aa9a"
        },
        "item": {
          "id": "bee417d1-1f00-441e-aff3-6114fd992f38",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1d9e5e95-d4f5-495b-9dec-d2894fa15050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "14831de0-8244-4d17-8a0f-04b67888016d",
        "cursor": {
          "ref": "2fa47cf1-cd81-4098-9bfa-50d071e20ba8",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "270775e3-91ea-4775-b176-c323556b5ce4"
        },
        "item": {
          "id": "14831de0-8244-4d17-8a0f-04b67888016d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0f24f547-9c2f-4013-b6b0-ca1a7d8c14dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "208fd6e3-0512-4365-914b-6fbc16e73742",
        "cursor": {
          "ref": "506a9f93-fead-4d2c-a782-dac0e00af9cb",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f99c54ea-b7a1-419d-993c-eac54110062f"
        },
        "item": {
          "id": "208fd6e3-0512-4365-914b-6fbc16e73742",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e4e1b4e5-7bc2-43c7-a23e-9ce107eb56f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "bd39bf86-d700-4868-a016-163a38b634dd",
        "cursor": {
          "ref": "52321098-7878-48bd-a66e-2e522b6a5e81",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6dad4d2b-c340-4020-949e-023768eea614"
        },
        "item": {
          "id": "bd39bf86-d700-4868-a016-163a38b634dd",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bcb58a5e-e46a-43fe-9f8c-f17be6f3340f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "fed62dca-bfd0-4a71-b154-e8ebecdb0840",
        "cursor": {
          "ref": "460e6d40-299c-4754-966e-3836296b113e",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fecd2117-c99b-4c49-a7e7-4de0d263c368"
        },
        "item": {
          "id": "fed62dca-bfd0-4a71-b154-e8ebecdb0840",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "716416e1-b03e-4380-96d0-f4b3620c7d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "e9df04c9-827b-42d9-ba8e-4362e9e0f9d9",
        "cursor": {
          "ref": "ef30d8de-556d-45dd-86b8-d567857da0fb",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "84be8a4a-ba37-4cfa-bd13-50787f9cb55a"
        },
        "item": {
          "id": "e9df04c9-827b-42d9-ba8e-4362e9e0f9d9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "594cd05f-3cf0-429d-97c5-d1b95c62ba95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "1a626b32-fad8-4168-aada-e3bccafd4084",
        "cursor": {
          "ref": "25185c4b-0bdb-43c8-9e0f-0b6f44a05588",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a0aa90e2-263c-4f33-bbac-a2a10af85018"
        },
        "item": {
          "id": "1a626b32-fad8-4168-aada-e3bccafd4084",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8f10b51d-11d1-4bc8-bd96-3c73f75dc9a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "c0377952-bb3a-4797-815f-e4c776586721",
        "cursor": {
          "ref": "c34286ce-866c-45c6-8a14-eb286a4318e0",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "51934d36-111b-459b-9e93-d9408af95e50"
        },
        "item": {
          "id": "c0377952-bb3a-4797-815f-e4c776586721",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "74ee177c-900a-4aa7-beaf-fc5c0cad3615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "f7a3bd21-5e8d-4352-b10a-cc5d645e22f1",
        "cursor": {
          "ref": "ce05ecad-75e5-4a11-85b1-45cbadaf5e8b",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c37794db-ac65-4ff1-89c1-4d62fac840c7"
        },
        "item": {
          "id": "f7a3bd21-5e8d-4352-b10a-cc5d645e22f1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "710c7492-86d7-4be0-a7e2-7c83faa99951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "53b5214e-9116-460b-8f6e-c9bf7acc1f80",
        "cursor": {
          "ref": "2647a104-5b54-45b6-b905-073b9edd5623",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dfd9d72c-057d-4c63-93ee-587d33578879"
        },
        "item": {
          "id": "53b5214e-9116-460b-8f6e-c9bf7acc1f80",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7a95c92d-0b35-4798-bc86-932c63cbfd19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c65c0e10-9297-45a0-aa5b-c50a68e6cf80",
        "cursor": {
          "ref": "b59e9332-6052-4408-b45a-a84c898a7b57",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c5d8ac86-a090-4203-8660-0334cf083380"
        },
        "item": {
          "id": "c65c0e10-9297-45a0-aa5b-c50a68e6cf80",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a57e22c7-7c5b-4e6f-b778-09a9a0e9c68d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "48d1ca00-0872-4096-981d-73508c308893",
        "cursor": {
          "ref": "e4904bf3-ef47-4b03-b046-e20859495784",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d26fd252-ae49-4063-9454-0f2cc74178c4"
        },
        "item": {
          "id": "48d1ca00-0872-4096-981d-73508c308893",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0ab56af5-5e79-4f0b-bbce-f233a4462641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8d7f7700-863b-48d3-b791-e0ca0eda9ef5",
        "cursor": {
          "ref": "727fbcb5-9fb0-44f3-b0f4-2394d364ee2f",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b14ec27c-8a10-4257-b490-6d4ed86ea3d7"
        },
        "item": {
          "id": "8d7f7700-863b-48d3-b791-e0ca0eda9ef5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2568bd08-fb8c-45f0-b464-841edf3de7ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "1b7d887b-a937-4d2b-9f71-8f9539b8ae5a",
        "cursor": {
          "ref": "cf84b11f-3df6-43cf-96d8-71ac82dcd1ec",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "fd3cd06e-30c2-46de-82f4-d92938b5034a"
        },
        "item": {
          "id": "1b7d887b-a937-4d2b-9f71-8f9539b8ae5a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f2442902-5245-48f5-b2dd-2ddafc35ea0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5e2f6030-d1ce-4709-807b-50645170d9d9",
        "cursor": {
          "ref": "076f5a89-4b0a-470d-a86e-a44a0d17fabb",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9cbca132-1ef9-49f8-98a0-e89913482c57"
        },
        "item": {
          "id": "5e2f6030-d1ce-4709-807b-50645170d9d9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a9dbfb7c-e00e-48b0-83ef-4ef115113085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c4bab830-3560-4545-9377-98bf833d87dd",
        "cursor": {
          "ref": "46e97735-d92e-4c18-b2b0-d2b5957062b3",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "36bc961c-475a-4843-880f-e573fd252879"
        },
        "item": {
          "id": "c4bab830-3560-4545-9377-98bf833d87dd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c50eab02-3918-461b-ba27-3850e49f9f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "337670d2-4f2d-431a-9949-ac833ac6d1b7",
        "cursor": {
          "ref": "17b406b5-9e4d-48ca-8532-c9d2cf4ac2f2",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a4f80b29-7efe-4bdb-9d91-0eb021cca12c"
        },
        "item": {
          "id": "337670d2-4f2d-431a-9949-ac833ac6d1b7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "aa388b60-53e9-49d1-9c91-438a81aaff3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "fc6606d9-4fad-4c3b-9cb5-3d3d834fc7b2",
        "cursor": {
          "ref": "423fd2b3-c7d9-4a23-a4f5-928bf08a11cb",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7a6cf7a3-5e1f-4793-9872-0ab50c6d63bc"
        },
        "item": {
          "id": "fc6606d9-4fad-4c3b-9cb5-3d3d834fc7b2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8c5192fe-96e9-4948-b9c6-21f2754cb35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "357dd898-1c9a-4c5c-8078-dc2c555cb550",
        "cursor": {
          "ref": "7d3649f9-5654-4ebd-a4d2-687b9e813d2e",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b2de220f-7b02-4bb2-8aff-240e8642302a"
        },
        "item": {
          "id": "357dd898-1c9a-4c5c-8078-dc2c555cb550",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7316b6c5-45e1-4a5f-a2a0-c401fae31a4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "fc926735-72dd-4bfe-8dc7-80ae71a2f36e",
        "cursor": {
          "ref": "ce325978-1ee7-4f10-a50b-79e0094e1e55",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a9e48b68-60f7-4a34-8c36-455ebf87e728"
        },
        "item": {
          "id": "fc926735-72dd-4bfe-8dc7-80ae71a2f36e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "43d555ee-7550-4451-8bec-6fc40412a8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "eb7bf391-1abb-4bd7-a488-ff1894acdc92",
        "cursor": {
          "ref": "7e9be5a9-fed6-4955-8e3d-1551efa7e3a7",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0c643536-2f21-49b3-9724-3fd72feb128d"
        },
        "item": {
          "id": "eb7bf391-1abb-4bd7-a488-ff1894acdc92",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7a85c7f2-fe74-4c42-b450-0789dd27b1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "06925dd3-32f1-4189-8536-3a3e0409f8dd",
        "cursor": {
          "ref": "63c9bee6-92f5-4b17-a05a-758411f1fbc8",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a8cdcc9c-5acc-46da-a170-6818c4c0b189"
        },
        "item": {
          "id": "06925dd3-32f1-4189-8536-3a3e0409f8dd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6dc8553d-51fa-427c-8d26-fa66c7624383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 476,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f8e512b4-dd5c-470a-8d8a-5b4865f57e3e",
        "cursor": {
          "ref": "bee5bca4-c275-4cb9-8379-2980134ed1a4",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2d679db4-85d2-4f60-ad48-a4e4e350cf21"
        },
        "item": {
          "id": "f8e512b4-dd5c-470a-8d8a-5b4865f57e3e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a3abbe7a-a446-456f-b28e-1fe394e4e71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 454,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "eba9148b-77cb-47be-9fd7-d6525873a0ca",
        "cursor": {
          "ref": "ae30312a-99ba-4565-80ec-b1a7e3ea7025",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2932221e-0d21-482c-8a91-354d3505808c"
        },
        "item": {
          "id": "eba9148b-77cb-47be-9fd7-d6525873a0ca",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7019e3fa-4bff-45d9-a01b-c5da900324a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 265,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "8db3da60-672b-42b2-b276-8b6028412986",
        "cursor": {
          "ref": "0c7a9ff3-163b-4226-a733-414cbb2ba715",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "593aaba7-943c-443f-a112-e71530b27248"
        },
        "item": {
          "id": "8db3da60-672b-42b2-b276-8b6028412986",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4fa6a38d-0896-41f9-a4a0-d7b96e0deadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 249,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "af0e85d7-8fb3-4298-bf03-c066d8647330",
        "cursor": {
          "ref": "a77038bc-2547-46da-a5b3-acdbc4fe8777",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "94c234b5-b4d4-4698-866a-8202c39b09fe"
        },
        "item": {
          "id": "af0e85d7-8fb3-4298-bf03-c066d8647330",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9a247df4-41d9-4e57-a255-9a8e3bc3abc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 277,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "1dc9d2a7-b3b1-40c0-ba8e-a8d755f3f7e3",
        "cursor": {
          "ref": "a19f7a6a-ba94-41df-91c0-2264b9399faf",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b43aa588-6dd4-481f-8bd9-aa493f869476"
        },
        "item": {
          "id": "1dc9d2a7-b3b1-40c0-ba8e-a8d755f3f7e3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "229b25b9-97cc-4954-8d86-a11d51fd8470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "4ef17c82-79ad-42b8-951e-c4465c0f80af",
        "cursor": {
          "ref": "8df43265-93fa-4fb1-adae-8e7a26426dca",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6cb27572-9e4c-4689-9394-c590f4badfa1"
        },
        "item": {
          "id": "4ef17c82-79ad-42b8-951e-c4465c0f80af",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "aa3bc4e7-31b1-4869-96df-d8ebeae9097c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "a3cd08c7-98fd-4af2-b628-4e61e1e55afe",
        "cursor": {
          "ref": "4798b3d5-1aa7-4e47-a9b5-0f2eb2e0abad",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d750129e-c954-4321-8c3e-86412a55cf6d"
        },
        "item": {
          "id": "a3cd08c7-98fd-4af2-b628-4e61e1e55afe",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b571d0ac-3cb6-4b7f-971a-c74ad8c823f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "e2aec219-37d5-4c3d-8c88-5af7ef9b79f2",
        "cursor": {
          "ref": "23ff8b1a-67e4-42b9-ae8f-313dc4f9bfe9",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a92968b1-86fc-47dc-b299-c1df451fbc6d"
        },
        "item": {
          "id": "e2aec219-37d5-4c3d-8c88-5af7ef9b79f2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "85a64809-15e5-4c5f-bb88-bba65aaebb0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "6dac4b22-72b7-45fd-b2b8-59f969dfae83",
        "cursor": {
          "ref": "11663309-aaa4-4645-b5ba-c77a7f615e31",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "524a2af4-dd0f-4255-9cbe-10a3d2d1b187"
        },
        "item": {
          "id": "6dac4b22-72b7-45fd-b2b8-59f969dfae83",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6081e28d-96fd-48a3-bd3a-ba44db39e407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "a54b0840-72e9-444a-a887-163d41c16e37",
        "cursor": {
          "ref": "4fc2038f-3b0c-4327-844d-92e0191d4e8b",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "26279b6e-a8f2-4815-b045-bbdee27bcd8e"
        },
        "item": {
          "id": "a54b0840-72e9-444a-a887-163d41c16e37",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2f9dae1c-4f4c-4751-b826-ec3fe0b97b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "2a57b49a-aec4-4fff-b4a2-4b91ab8e7232",
        "cursor": {
          "ref": "d76e9adf-4c57-4bfc-a6bb-3c6af49406ea",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3d9cb76d-93e7-4905-abe7-703704dd5764"
        },
        "item": {
          "id": "2a57b49a-aec4-4fff-b4a2-4b91ab8e7232",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "db420f86-02e0-4382-b15a-37d633d75265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "1a042fe1-abca-4396-9084-6143e6b7ccf9",
        "cursor": {
          "ref": "9119e80a-adb1-40f9-b9b7-c30e0a9408a2",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b70ac58c-358e-43a5-acc6-61e6eed22705"
        },
        "item": {
          "id": "1a042fe1-abca-4396-9084-6143e6b7ccf9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b78bdb32-78e3-443b-ab44-b9da77dfc35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "0c5863da-5095-4674-94e7-a46cb6ee738c",
        "cursor": {
          "ref": "9b66d3b3-ff17-4521-9c07-430cf53a6e65",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "913945ad-d5c1-486d-80a7-8052d8bf294e"
        },
        "item": {
          "id": "0c5863da-5095-4674-94e7-a46cb6ee738c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7926c0d8-d841-450f-91af-767ebba83389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "94428986-d826-4fc9-8202-b90426febb0a",
        "cursor": {
          "ref": "6b215cee-9aa1-44b6-9847-29a8de0513ed",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2d2fb60f-7f04-4db6-a009-3634372f8d1f"
        },
        "item": {
          "id": "94428986-d826-4fc9-8202-b90426febb0a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "bf0c4755-8225-48a7-adc1-4940b4a9f9d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c0f70e37-c3b1-4817-a1b2-03d0d2b4315e",
        "cursor": {
          "ref": "7f0abb85-5dc5-4baa-b98d-0087e2f53097",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0bf525eb-60b0-42d9-a7a4-737119096bc5"
        },
        "item": {
          "id": "c0f70e37-c3b1-4817-a1b2-03d0d2b4315e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e1112017-1ed4-4ea9-a9a3-f800479a9227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5b35a66e-1af0-45bf-8af7-ea24ebe62937",
        "cursor": {
          "ref": "d0d54ecb-fdda-49aa-a8de-620aa2903a5d",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "58d92b24-8e21-465a-b5dd-fbbdd96063c9"
        },
        "item": {
          "id": "5b35a66e-1af0-45bf-8af7-ea24ebe62937",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "653089b4-1167-464e-9f93-d6eb7314158a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "cb9d3307-506d-45a9-a935-a4c931582734",
        "cursor": {
          "ref": "35324cb8-cf51-41d7-829d-ddfc52e4d9c3",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a502ecbc-9299-4509-be40-6a3fbde33401"
        },
        "item": {
          "id": "cb9d3307-506d-45a9-a935-a4c931582734",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4f50ae38-6f00-42ec-a31a-346a64d025d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "1131eba1-814b-4a3b-9a12-1bd7cf62a34c",
        "cursor": {
          "ref": "e9970e8b-5350-4edf-9d72-2341deff9754",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "af2a7bf4-e64c-4b0b-8846-e6ed0736c5c2"
        },
        "item": {
          "id": "1131eba1-814b-4a3b-9a12-1bd7cf62a34c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2ea45256-dc1b-47d9-8673-aa0eed0d7f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "77e47bc4-cdc0-4f42-81c8-35f7c5fc8eb1",
        "cursor": {
          "ref": "1109cf54-0a35-4af1-9ff4-b0cea3e9cacb",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6caa5713-e490-4422-a823-5103c111f235"
        },
        "item": {
          "id": "77e47bc4-cdc0-4f42-81c8-35f7c5fc8eb1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "544275da-9f5b-4d03-8a13-8f5d752065c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "d7c0b485-a44a-418b-bea0-4071fa027b2b",
        "cursor": {
          "ref": "b2dfc25f-c548-4b0c-8239-c14d9dc357a1",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e76e6cbd-069b-4b70-b6e5-1691bf13b8ab"
        },
        "item": {
          "id": "d7c0b485-a44a-418b-bea0-4071fa027b2b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4c4cac2b-7f20-4566-a40b-40559b7ff110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "652d7e5e-8c19-4ca9-b3ed-438c62f73ff0",
        "cursor": {
          "ref": "d1ee3023-7ecb-4808-851c-28f56057957b",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e4679e76-5e34-45d6-88f2-9c348e813cc4"
        },
        "item": {
          "id": "652d7e5e-8c19-4ca9-b3ed-438c62f73ff0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8fb9f8f7-72a1-4bb2-b3b9-71d8fddd5d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "eee19473-f7c2-4898-b8bd-658c16805da4",
        "cursor": {
          "ref": "a8cad247-88f9-4c35-8a3e-3549f1fe2232",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c9b0d9e8-aec2-440d-9621-6f42bb347d45"
        },
        "item": {
          "id": "eee19473-f7c2-4898-b8bd-658c16805da4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "43747fe7-c8e9-4f66-83c9-1967605365c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "165d8134-9f4c-4b1a-8ea4-10c4ddc2f882",
        "cursor": {
          "ref": "10ebe101-007e-417a-9b61-89dbcb6502fb",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e73000eb-8a7c-48d8-9c8e-e848775a7571"
        },
        "item": {
          "id": "165d8134-9f4c-4b1a-8ea4-10c4ddc2f882",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9ac354fd-fbbd-4d0f-acb7-8f0dc3162fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "19366409-61b2-40e9-b18d-c4f8822a2026",
        "cursor": {
          "ref": "4bfed862-3cc9-4b1c-8641-906b92477850",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "16c1fdd5-643a-4666-9836-42ed502a11ae"
        },
        "item": {
          "id": "19366409-61b2-40e9-b18d-c4f8822a2026",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1e7f01d4-5626-494e-bdb6-344ad373bf61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "426b0aec-9073-4bac-8d41-40f4a9340613",
        "cursor": {
          "ref": "cbc2ae22-1353-44e1-9b82-9583d4982e34",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "4c123e76-2e2b-4c6b-b9f7-a408f3134943"
        },
        "item": {
          "id": "426b0aec-9073-4bac-8d41-40f4a9340613",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d4b324b5-5d7e-4841-9765-27d63a26f7c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "ff835857-eaf3-4801-ba83-9452b5bea8c8",
        "cursor": {
          "ref": "8bc1389b-a323-4215-b5c3-eb43ea6bdc9f",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5a55724f-75cd-420c-8d29-fe8484fdcabc"
        },
        "item": {
          "id": "ff835857-eaf3-4801-ba83-9452b5bea8c8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "79a0c464-dd31-4a0c-a61f-98a10edb24b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "a5264a77-c0d2-4634-95dd-43709ecb6907",
        "cursor": {
          "ref": "5ca59cca-e655-4e87-b229-3f69f3fc529e",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "420f3c5c-a9ea-4d9a-a34d-f00717ce4ab7"
        },
        "item": {
          "id": "a5264a77-c0d2-4634-95dd-43709ecb6907",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "48eef63a-0fb7-4dbe-b418-2968c0454745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "38fa43f4-48a4-4b9d-ac23-e832ff309aad",
        "cursor": {
          "ref": "654a526b-f793-4817-817d-1031dcacc999",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b018cc8a-fdfc-4df5-92d8-7832b09c4d0e"
        },
        "item": {
          "id": "38fa43f4-48a4-4b9d-ac23-e832ff309aad",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "825615be-02c5-41f9-b3bf-0c4fef03e758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "133da46b-a94a-449a-be58-7e77b8788825",
        "cursor": {
          "ref": "6ca42ee9-47a2-4d27-ae48-b5cff844215a",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3b338360-02e6-410e-8da7-82536a705188"
        },
        "item": {
          "id": "133da46b-a94a-449a-be58-7e77b8788825",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0fe40106-68a0-44fb-9d6b-bb908b421c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "5dc2d8b6-47af-4d98-a1d7-2edc6cafc56e",
        "cursor": {
          "ref": "7c0c7038-b531-4568-835e-4ec1c7a450b9",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2152bdf2-ca78-4d01-a3c4-5ad48cfbf4e3"
        },
        "item": {
          "id": "5dc2d8b6-47af-4d98-a1d7-2edc6cafc56e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0bb096a8-03d8-4e1b-be42-2ce70bfc3558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "32393b76-76b4-4dc9-92a6-a50677248c48",
        "cursor": {
          "ref": "e49b0ad5-633d-4764-a16d-b379d4b51d5b",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "83e8fc82-797a-4a8f-8c4f-5fc9a0f2e49f"
        },
        "item": {
          "id": "32393b76-76b4-4dc9-92a6-a50677248c48",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "336125e3-73fc-4268-92fb-976e6251feb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "e7ea2ea2-826b-49e6-b069-8ad27e18ad8f",
        "cursor": {
          "ref": "3181200d-683c-4e67-a666-1ffb364d2d3a",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "155ea4df-a0ee-4647-bc7f-9a2781005f7e"
        },
        "item": {
          "id": "e7ea2ea2-826b-49e6-b069-8ad27e18ad8f",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9b2917be-68b2-49e8-a988-2a201b0d40e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "8d99efd9-bc40-4866-80c8-becf5f814ea0",
        "cursor": {
          "ref": "3292c051-5723-4ade-900b-8037e9d76f42",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e49b4ac3-411d-475c-935d-69615d3cac12"
        },
        "item": {
          "id": "8d99efd9-bc40-4866-80c8-becf5f814ea0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3ea8b580-81d6-4558-87ea-eb6bf0a2c61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "679723a4-d6d2-4bba-9c83-cab1112b68dc",
        "cursor": {
          "ref": "252ed41d-353d-4413-8cd1-db1ca8238ded",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f35dc598-d812-4668-8f2c-d76d5c989285"
        },
        "item": {
          "id": "679723a4-d6d2-4bba-9c83-cab1112b68dc",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "218f2a1d-64a4-464f-8912-5472194171b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "e9cf7dfa-9663-4477-9ce0-181d29c71055",
        "cursor": {
          "ref": "eab02eb1-5180-4920-91d3-0ec89f1f1457",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a8a5916b-ec46-420d-bcdd-f94d5f6c5998"
        },
        "item": {
          "id": "e9cf7dfa-9663-4477-9ce0-181d29c71055",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1c89c4e2-784d-4bd4-adc8-63ceae6ef98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "db5ede59-1dff-4de4-8d33-9431cd96706b",
        "cursor": {
          "ref": "5994edbb-b72d-44b2-aa28-306abe651676",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3382021d-8d95-4e72-aaf6-3a15827a7465"
        },
        "item": {
          "id": "db5ede59-1dff-4de4-8d33-9431cd96706b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "90b456b6-ee3e-49bb-aa7c-40fa7f8d35f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "bcafdd4a-1d76-46c9-b3de-281940582cbb",
        "cursor": {
          "ref": "0d757e76-8c1e-4ef1-a513-2320cfb3d021",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "84bf198c-5734-4226-bd6d-1133b91bdf06"
        },
        "item": {
          "id": "bcafdd4a-1d76-46c9-b3de-281940582cbb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "58869576-fcaf-488f-9112-52cb9d89c52b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "44a3ebb0-b259-49bb-9a70-25a02c22a328",
        "cursor": {
          "ref": "a476bef7-8553-4730-a556-5449e1d8948e",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "285d9bf3-98c9-4158-b017-7decff05d66e"
        },
        "item": {
          "id": "44a3ebb0-b259-49bb-9a70-25a02c22a328",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2c60ba05-d52d-4398-905f-c0e0d6e4ffe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "1a96405e-7799-4aa9-a838-b410b9f68503",
        "cursor": {
          "ref": "bf9071f1-af15-4a9e-b294-05c2c022c2f0",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5789caaa-2bb4-4de2-a71c-d3b1e635b078"
        },
        "item": {
          "id": "1a96405e-7799-4aa9-a838-b410b9f68503",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e308b7e9-9437-47ab-89c5-789918ac0033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "dee6e59b-3ffc-41ec-9ce9-fb1299017759",
        "cursor": {
          "ref": "2297b300-3756-4bf9-be42-39ebb9b49075",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "36ce54be-88d9-4c6b-bd35-4cbf329d34fc"
        },
        "item": {
          "id": "dee6e59b-3ffc-41ec-9ce9-fb1299017759",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "49a86085-21a4-47a0-9b17-e6455b1f522e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "5109057c-7397-4a22-8c31-f46da56b811f",
        "cursor": {
          "ref": "368fb35d-7886-4e5e-8faa-90197fa90306",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "226ad86b-5d22-4aea-8517-25c72a442540"
        },
        "item": {
          "id": "5109057c-7397-4a22-8c31-f46da56b811f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e64840b5-3013-4a84-be89-e78b9473afc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "d80485ed-f36a-4c97-9e1c-a8a637bdb9aa",
        "cursor": {
          "ref": "29e14159-cca3-468c-9115-a61fdebd0963",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c5bae9eb-6094-4f7f-809e-b2446ee262c9"
        },
        "item": {
          "id": "d80485ed-f36a-4c97-9e1c-a8a637bdb9aa",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "78b8386d-9a39-479c-975c-fbe7758a49c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "a0da62c1-03d3-4637-aefb-9376ce6dac75",
        "cursor": {
          "ref": "a32d9dec-14e9-4dce-921a-4d8fcdef22a4",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4c8a3013-17a1-4645-92ce-9090b227ad70"
        },
        "item": {
          "id": "a0da62c1-03d3-4637-aefb-9376ce6dac75",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e03a12ec-9655-4892-96b1-365306b91928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "39fe69a4-4561-450e-887a-bbb799133038",
        "cursor": {
          "ref": "ab8b0a08-0656-423b-8d96-ff86e9d08aa6",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1f05ad64-ecf3-4109-8fc7-ebe2caed60bb"
        },
        "item": {
          "id": "39fe69a4-4561-450e-887a-bbb799133038",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f87139d4-a789-4780-91b7-b17d8b340264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "54b23abb-8138-4484-af0e-17139ff0684d",
        "cursor": {
          "ref": "c8cb60e8-f3cd-4bea-b8fb-961e52096844",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1df088c0-1d84-4252-848e-c8bebd7a30a1"
        },
        "item": {
          "id": "54b23abb-8138-4484-af0e-17139ff0684d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b1216e3c-7eeb-4017-8aae-5d07892fb22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "e7aa3d52-b3ba-4593-8484-f4fb72d27e47",
        "cursor": {
          "ref": "e3bc5c7d-b522-4092-a31d-c7b5fa484100",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "07a82826-57d9-4c09-ae22-5975fa58faf3"
        },
        "item": {
          "id": "e7aa3d52-b3ba-4593-8484-f4fb72d27e47",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3ef9baea-0f23-4aea-9f28-c4f9691d9abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "de3ad044-bc09-49f4-b9da-6086153bcab8",
        "cursor": {
          "ref": "dc95efac-49f0-4678-877d-8b18980d83c1",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b76cc3d3-dee9-462d-a65c-c9ec75ef6ee4"
        },
        "item": {
          "id": "de3ad044-bc09-49f4-b9da-6086153bcab8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "36da9739-9e86-488e-9c39-9b98fb2c77f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "645d67e7-409f-45bf-9c26-bb65c86e1a7b",
        "cursor": {
          "ref": "0287bc37-ab29-4d57-aa05-96af7a4a3448",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6fa6221e-cf63-4848-9217-edda23730dca"
        },
        "item": {
          "id": "645d67e7-409f-45bf-9c26-bb65c86e1a7b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "be531a7c-6dea-4eed-ba45-901b96565497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "1ed0b8c8-4d62-4b15-aaf0-1db100b314d1",
        "cursor": {
          "ref": "a4aacf8d-2768-4e9f-85b9-3c526621cd97",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d3b3c0ad-e6e8-4c60-8762-d20399c060a3"
        },
        "item": {
          "id": "1ed0b8c8-4d62-4b15-aaf0-1db100b314d1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "87f807e4-7192-486f-b41f-45c23c1bd225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 203,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "988f820f-b52b-400f-aa59-e2dd9c2d06f7",
        "cursor": {
          "ref": "fbeb8278-bbca-438f-b125-33c970d91bad",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "99bb4f4e-2cd1-414d-8ffb-00d7ce4856c3"
        },
        "item": {
          "id": "988f820f-b52b-400f-aa59-e2dd9c2d06f7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2c9c5678-c7f6-4d88-b69f-045c6dadc172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "4aed4f43-4a8c-41bf-8711-519f90b84b36",
        "cursor": {
          "ref": "8e978e9b-f278-4568-93b2-a4c1ab2001d9",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6274007c-cd5b-46dd-a7aa-34c707fa72a5"
        },
        "item": {
          "id": "4aed4f43-4a8c-41bf-8711-519f90b84b36",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9327ef0b-623c-4fa5-bd96-ef37ba073aa2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a5a72c-30d9-4723-9105-059c073a02c4",
        "cursor": {
          "ref": "613e441b-33fa-44e7-8147-6a83a7c295e0",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "09334eb4-d4ff-4699-8b07-ea16e08aa281"
        },
        "item": {
          "id": "79a5a72c-30d9-4723-9105-059c073a02c4",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "593fa4d4-c3b1-4e64-9fb7-a01f3a5022e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "91d22c5b-a6ae-4a36-b23c-fda6db97126e",
        "cursor": {
          "ref": "bf9f47aa-6ffb-40ab-b3a6-4353c35e8216",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a096c0c9-ac0d-433b-8af7-aa518f065f0d"
        },
        "item": {
          "id": "91d22c5b-a6ae-4a36-b23c-fda6db97126e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "eaaaedd1-8fa8-4579-935b-30b5de32a270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "0ea95a8b-0f2c-465d-9566-8beac4eb6da3",
        "cursor": {
          "ref": "c30e2b3b-ab7f-4dcb-a13d-bbd571369b19",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0f892415-783a-486d-b54c-699f7cfdc2ce"
        },
        "item": {
          "id": "0ea95a8b-0f2c-465d-9566-8beac4eb6da3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f386e1c9-22b5-44f1-8147-d6fd3612dfc7",
          "status": "Created",
          "code": 201,
          "responseTime": 4895,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "cc8aebff-dcf6-4619-8854-dcd69fcd1a13",
        "cursor": {
          "ref": "9cb23de0-eb80-4998-baa0-542d105f67e7",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3ad83cae-3009-44a0-8cb5-d0a2ea746919"
        },
        "item": {
          "id": "cc8aebff-dcf6-4619-8854-dcd69fcd1a13",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6bad8e8b-0c82-4b13-aa1d-490e8481e989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "bf7dc05a-3038-416d-b25a-5b812cd0ab34",
        "cursor": {
          "ref": "a82e6d22-10a8-4300-9918-143b45aed076",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f8c6f896-7f49-402e-afa7-5ec4d87620de"
        },
        "item": {
          "id": "bf7dc05a-3038-416d-b25a-5b812cd0ab34",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2fbe357d-28a2-420a-a476-ac5a694febe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "a6567494-a360-4330-a680-3a19f9b3b1fb",
        "cursor": {
          "ref": "3244e530-e97c-448a-aa8f-89103eaf04d7",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e8ff9b41-09d9-46d3-892c-9b8597ab2521"
        },
        "item": {
          "id": "a6567494-a360-4330-a680-3a19f9b3b1fb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d613ee3a-3487-43ea-acfc-1290e60d173f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "6404d626-67a9-4476-a8d4-afd327f0ab84",
        "cursor": {
          "ref": "ede116b8-5ff7-4159-92c3-3ca94413634e",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "403525ff-93ac-41f4-b81e-dc394a218487"
        },
        "item": {
          "id": "6404d626-67a9-4476-a8d4-afd327f0ab84",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9dc5885b-2731-4412-8579-4323375a4279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "b256ff3b-121c-4a04-b026-730ca019f1bd",
        "cursor": {
          "ref": "9bbe21a6-afd7-4abd-81b2-37154a357fba",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c1bb285c-7059-4bfa-85db-d75d3983a8d9"
        },
        "item": {
          "id": "b256ff3b-121c-4a04-b026-730ca019f1bd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a67e4baf-31eb-4ddc-8eb9-25de6624f533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "b256ff3b-121c-4a04-b026-730ca019f1bd",
        "cursor": {
          "ref": "9bbe21a6-afd7-4abd-81b2-37154a357fba",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c1bb285c-7059-4bfa-85db-d75d3983a8d9"
        },
        "item": {
          "id": "b256ff3b-121c-4a04-b026-730ca019f1bd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a67e4baf-31eb-4ddc-8eb9-25de6624f533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "8cf71a1d-875b-47dd-a976-5c9dd143aab9",
        "cursor": {
          "ref": "e0f991eb-cded-4a30-8fc9-736169ef0628",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0309d804-07db-44b1-b559-aa58e94e1501"
        },
        "item": {
          "id": "8cf71a1d-875b-47dd-a976-5c9dd143aab9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d27061ca-94e4-4aef-8e1c-288cf6f946e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "825dbc0a-1087-45cf-a9be-af3c7a6810a7",
        "cursor": {
          "ref": "e7cf5ef9-1156-43c1-9dc7-98b2a4c2da95",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b7904dda-b809-4944-933e-4c96a55dd701"
        },
        "item": {
          "id": "825dbc0a-1087-45cf-a9be-af3c7a6810a7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c9265a08-b672-4cac-981e-239ad1ba81e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "274e848d-eb5a-4f65-9761-e6cc8605a9ac",
        "cursor": {
          "ref": "4fa18407-ab50-4858-88d0-1f8fa8a7a1e9",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8ec56c69-a2bb-421c-8d9f-d05427b6df63"
        },
        "item": {
          "id": "274e848d-eb5a-4f65-9761-e6cc8605a9ac",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "531a095d-7261-4c74-aee4-dd3223fe7d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c619f073-50dd-4372-97f8-4b999a07a96f",
        "cursor": {
          "ref": "076c0455-e70a-43c7-86cd-8911d512548d",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7f760556-55ee-4af8-adee-d433fe35dfeb"
        },
        "item": {
          "id": "c619f073-50dd-4372-97f8-4b999a07a96f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9733700a-a3c2-4c3f-903d-1fac6be74a37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "6ec3bc60-38d7-4680-aae4-63e125af6e52",
        "cursor": {
          "ref": "c3400cf8-3418-4929-bb7c-c3dd1099a080",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "bf6c9713-838e-4076-9981-b2d8eddffe22"
        },
        "item": {
          "id": "6ec3bc60-38d7-4680-aae4-63e125af6e52",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f2f3b07a-0df0-42e0-8bb3-4af1103d054f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "5ac51932-6b65-43d4-b61d-499ca3c62be9",
        "cursor": {
          "ref": "fa527ecb-2feb-486f-b002-4d33f802963c",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d56e53c4-c001-4385-bbd7-27760f2810fe"
        },
        "item": {
          "id": "5ac51932-6b65-43d4-b61d-499ca3c62be9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0f0ed730-f61c-44d7-b49f-30fa1c1ed752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "b6b592e1-5490-4d22-867a-61405b2b65a6",
        "cursor": {
          "ref": "1f9ea733-c9f4-4f45-97b8-2a6e56dd38fc",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b656cacf-abeb-47f3-bdd7-6520d9b36afb"
        },
        "item": {
          "id": "b6b592e1-5490-4d22-867a-61405b2b65a6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "88a2fdeb-9fa8-41b1-84c7-530685c0d771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9d19d808-8aeb-4306-84be-98d9bb8430b4",
        "cursor": {
          "ref": "566b0455-4191-485c-8d5d-355c46fd9983",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a6deae12-8027-44f8-8251-0de2c0dd9c0c"
        },
        "item": {
          "id": "9d19d808-8aeb-4306-84be-98d9bb8430b4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8799f12f-b218-40df-a121-a9d8b6e93528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "75690d07-0661-4563-bc53-13497e45766d",
        "cursor": {
          "ref": "2514e999-feb6-489b-971c-b798ad95d6b7",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bb072157-c8a8-4d43-91ef-16bdeca7d443"
        },
        "item": {
          "id": "75690d07-0661-4563-bc53-13497e45766d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f096932a-719e-4705-9590-1a6def6819a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "8053b002-0082-41d3-9f8c-5c824b1fcd15",
        "cursor": {
          "ref": "66942152-f5a5-4450-9fb5-f411183bfc15",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dd0443cc-09bd-4323-9b25-4689a2d242fb"
        },
        "item": {
          "id": "8053b002-0082-41d3-9f8c-5c824b1fcd15",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "011670f5-1939-4278-be5b-699bbc812374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "0f30b88d-54eb-4116-8ae9-5c2a89dc8491",
        "cursor": {
          "ref": "8c26588b-a11a-402a-a291-def4891f65b0",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "bac27629-bc60-4237-b553-f204fc4c68a5"
        },
        "item": {
          "id": "0f30b88d-54eb-4116-8ae9-5c2a89dc8491",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9a07a6d9-1e3c-4f23-a6e9-81b81081683b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "32bd2856-13cb-471b-82a7-d3d0b217d139",
        "cursor": {
          "ref": "9bb7937c-b68d-43b2-9d78-9d1810dd5d05",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "dab5c0bd-ce13-4502-9db5-08c7d1df243f"
        },
        "item": {
          "id": "32bd2856-13cb-471b-82a7-d3d0b217d139",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ef9ecc0f-586a-430c-9667-67b48e664db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3f02b339-8417-4a22-af40-4749f5eb2bd4",
        "cursor": {
          "ref": "2ead9d4f-b39e-4ad7-9fc8-1fd29fb17e3d",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "94365c9b-b139-4b6f-b1c7-98c283522d1e"
        },
        "item": {
          "id": "3f02b339-8417-4a22-af40-4749f5eb2bd4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c811de90-0209-4eb4-bb2b-c042c3385260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "0f760de9-7fd5-47ab-bf35-ff926ee1d2e6",
        "cursor": {
          "ref": "ef2c5fdf-1a94-4e99-89a4-337989d17f9c",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "401aa902-d03c-4c26-911d-0119ba9e1daa"
        },
        "item": {
          "id": "0f760de9-7fd5-47ab-bf35-ff926ee1d2e6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3123a459-1e46-4b14-a8d3-abe58027311b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "7e422124-4fa8-4711-8696-e4c7ee2b7c94",
        "cursor": {
          "ref": "5703312a-e86b-47e0-9f86-92badfb47229",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6a1c5305-f708-4842-bf4a-e737471960fc"
        },
        "item": {
          "id": "7e422124-4fa8-4711-8696-e4c7ee2b7c94",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "89abe202-2156-448d-99d6-a4cbdd586933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "2bd4e0f7-0936-44e8-9af3-e40e94f4876e",
        "cursor": {
          "ref": "9d05b16d-f8bc-48d8-a525-6c9580ff39da",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "04314094-28ed-4b1c-83f0-4f1d9f707bbb"
        },
        "item": {
          "id": "2bd4e0f7-0936-44e8-9af3-e40e94f4876e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1581e5a4-17a5-476d-a83d-e36e66e22613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "4936f412-0c59-4c35-9e86-d318ba02fe1e",
        "cursor": {
          "ref": "000057d3-b7ff-4de1-8823-494e6a3b7404",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fdcfa596-0919-4a3a-8cf5-b52111ebd07f"
        },
        "item": {
          "id": "4936f412-0c59-4c35-9e86-d318ba02fe1e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5de3610b-0c47-4063-b38c-d2a99fbdde40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "d6ab4698-f3cf-4e99-b4e7-301f83b91a8f",
        "cursor": {
          "ref": "9e471ca2-9aa9-4071-b123-09e770d4b3c5",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c452befc-83c2-41a2-85f4-e74e26c37369"
        },
        "item": {
          "id": "d6ab4698-f3cf-4e99-b4e7-301f83b91a8f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a9b7fc23-a32e-4188-a30a-241f3d46ab4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "f0a73e8c-e3a4-40bf-8e2c-09c20fc23d0d",
        "cursor": {
          "ref": "bc84ad36-2b1a-4e8e-8001-c18a4f7ceebd",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b3c0a194-1bea-4e18-af58-3ac1eb3f4950"
        },
        "item": {
          "id": "f0a73e8c-e3a4-40bf-8e2c-09c20fc23d0d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fa709140-2dac-484b-9819-6fc48b2bc068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "004764b5-b111-435b-b5fd-207d272059ad",
        "cursor": {
          "ref": "17f67bbd-ebdb-4154-980e-bdadde9d84b9",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "db00563e-e9b9-4800-ac13-828e966f99fb"
        },
        "item": {
          "id": "004764b5-b111-435b-b5fd-207d272059ad",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2f96f1bc-a438-45be-a899-1e762780a89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "e6c422e1-b8fd-409d-935f-d5bde5d60797",
        "cursor": {
          "ref": "1c787687-609e-4e65-9020-75299b1afaaf",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9adc6efc-0efe-4549-89cf-0e63e6d75981"
        },
        "item": {
          "id": "e6c422e1-b8fd-409d-935f-d5bde5d60797",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "80dba2a8-0b19-4656-b027-52cbfbc0373f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "119876ae-2e37-4814-a6ba-138ec6e39e0d",
        "cursor": {
          "ref": "1e829442-124d-4943-84ef-95778f57fb74",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b36ab9e6-ba79-4356-ad47-e4355df9449c"
        },
        "item": {
          "id": "119876ae-2e37-4814-a6ba-138ec6e39e0d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9fe511a8-83f7-46b7-852c-31f3c65eaa22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "642ad62b-7d50-4e7a-905d-15220967f465",
        "cursor": {
          "ref": "d43847ef-c9d3-453d-9540-9b1ed96d30e6",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4dd4aca8-ba00-43da-9737-94b7d0f72600"
        },
        "item": {
          "id": "642ad62b-7d50-4e7a-905d-15220967f465",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "26a0209e-0cff-425f-99be-b34aded71f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "8a214d97-9179-4e13-8486-de9fdc4056a9",
        "cursor": {
          "ref": "b354f3bb-70d7-48e4-b00a-17ead91a5177",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2a916dbb-e241-4c07-b0e2-1c2c2e2050e2"
        },
        "item": {
          "id": "8a214d97-9179-4e13-8486-de9fdc4056a9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "78c2c93a-784d-4908-ad3d-b37ef5d38de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "004f915b-dbde-4e8b-b3da-d76ad4e6e241",
        "cursor": {
          "ref": "106050d7-b954-4a9d-877e-4261b1860c4d",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "cbc64844-4a49-4548-a398-4efe6e6c7f74"
        },
        "item": {
          "id": "004f915b-dbde-4e8b-b3da-d76ad4e6e241",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9e1a7cab-256e-4caa-940f-25227756ce30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "20b08122-7fc9-45eb-90f5-15d36dcc7f73",
        "cursor": {
          "ref": "dfb4dbb2-8083-4464-a5a4-5ed02c868606",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ad859c34-3595-4929-b733-f4c3f82c9cea"
        },
        "item": {
          "id": "20b08122-7fc9-45eb-90f5-15d36dcc7f73",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "78db2681-d080-4aaf-bb52-39b0441f19dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "87cc0659-8544-45af-9163-f95a4c4ea291",
        "cursor": {
          "ref": "b1a8741a-03ad-43f0-a03b-96582b4a9500",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a2c454ac-c1e7-43bd-9c8e-a07dee987b58"
        },
        "item": {
          "id": "87cc0659-8544-45af-9163-f95a4c4ea291",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "be1af7d1-2a43-459a-b56b-a094586f7506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "3ab639da-c11d-4433-b0a0-796aadda2968",
        "cursor": {
          "ref": "b6e75040-d7a2-46df-9d68-03cf39b338de",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "190983c6-b3b5-48b2-a8d6-686816627135"
        },
        "item": {
          "id": "3ab639da-c11d-4433-b0a0-796aadda2968",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "85f2f0d8-a98d-46f3-b92d-a3c4ceb45a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "4faf0bab-0b0d-4aba-a6b1-e65433cb40e2",
        "cursor": {
          "ref": "d6deddca-0eae-4208-9085-c48761f11518",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0b44a108-d6a9-4c3b-8765-cc3eca09ca9e"
        },
        "item": {
          "id": "4faf0bab-0b0d-4aba-a6b1-e65433cb40e2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a4082d3b-56ba-4723-8316-fbd4269c8423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "3e5fae03-0bc4-4219-8860-28be907724fb",
        "cursor": {
          "ref": "e3ba9a6f-71b8-47a3-8348-2508cbc20e82",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b43096f1-3575-4619-b8fb-4c306840e09b"
        },
        "item": {
          "id": "3e5fae03-0bc4-4219-8860-28be907724fb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7abaac58-9bed-4c2f-8737-f087c5f50f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "6e66b192-7871-4d80-96ad-120bcc1bc54d",
        "cursor": {
          "ref": "989104fb-0982-4d45-b8cd-0eb2244e7cdd",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a42253d5-f9e9-482a-81aa-12d31bf4446a"
        },
        "item": {
          "id": "6e66b192-7871-4d80-96ad-120bcc1bc54d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "edd8823e-393d-47e3-a403-0f8724ebbb4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "d6de46f4-668c-49b5-bee1-32d7a511f490",
        "cursor": {
          "ref": "0ec5f863-850c-4ceb-8728-dd6d759e260a",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7387fdde-67dd-415c-afef-f2413510ea71"
        },
        "item": {
          "id": "d6de46f4-668c-49b5-bee1-32d7a511f490",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c18511e3-cf8e-4e2b-8cf8-6fecd890232a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9371dfc2-14b6-4bd1-af51-8d275dd4027d",
        "cursor": {
          "ref": "3d6e16c7-d76b-401d-ae8f-916d093c41fb",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "af5cbd6a-18cc-4adb-929f-ae50db896617"
        },
        "item": {
          "id": "9371dfc2-14b6-4bd1-af51-8d275dd4027d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "289163e6-2627-4be4-983c-e643793fa6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "2dd68450-cc3b-4e2c-ab76-65a370db7a60",
        "cursor": {
          "ref": "59ac58f4-91c9-42a5-939c-7a783a5a9f16",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "990625df-0fbd-4a57-b337-609e002164f6"
        },
        "item": {
          "id": "2dd68450-cc3b-4e2c-ab76-65a370db7a60",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "73761e88-76f8-421d-b4b8-f29de4020d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "2dd68450-cc3b-4e2c-ab76-65a370db7a60",
        "cursor": {
          "ref": "59ac58f4-91c9-42a5-939c-7a783a5a9f16",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "990625df-0fbd-4a57-b337-609e002164f6"
        },
        "item": {
          "id": "2dd68450-cc3b-4e2c-ab76-65a370db7a60",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "73761e88-76f8-421d-b4b8-f29de4020d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "88729946-a43d-4a19-80b6-a10445c01213",
        "cursor": {
          "ref": "eed5b733-4906-4531-a95a-52cfcb0d1ed3",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6578c942-52b0-4a17-99b7-60ffbae36b3c"
        },
        "item": {
          "id": "88729946-a43d-4a19-80b6-a10445c01213",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3731f246-b88c-4899-82d8-4ae5096d4cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "71e2545a-f312-42f1-a22c-9096c3b41c46",
        "cursor": {
          "ref": "f5512c48-1f86-401e-89e8-7d9d84bdc11b",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2c8e9b29-131d-4d40-bf9a-deedcecb38a0"
        },
        "item": {
          "id": "71e2545a-f312-42f1-a22c-9096c3b41c46",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4d8269f0-4034-40c1-9e1e-a892661cb3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "0a9c7151-9d8d-4672-b4ba-1a200d1b202b",
        "cursor": {
          "ref": "0b20084b-36e7-4a31-b642-c6db565adba2",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "67ad9c68-f056-4dc2-9a4d-37a6847e79eb"
        },
        "item": {
          "id": "0a9c7151-9d8d-4672-b4ba-1a200d1b202b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a9033602-b8b8-47fc-80e5-939076dfe432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "f3e5a47f-2216-41f2-b310-175d435b69a7",
        "cursor": {
          "ref": "919e742b-f395-4868-82a3-9dda49d38763",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2b88ea33-5b76-4b9f-adf3-c7cfc54b669d"
        },
        "item": {
          "id": "f3e5a47f-2216-41f2-b310-175d435b69a7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7f77c0c8-3b16-4bc5-b9ab-4940277ce1a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "3198e9cf-dc9b-4743-afe5-0e5211872454",
        "cursor": {
          "ref": "2c1903d2-abc6-4b8b-ae17-9fe67eccab51",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "db96810c-cdc6-4e8e-a42b-470bb0b39dde"
        },
        "item": {
          "id": "3198e9cf-dc9b-4743-afe5-0e5211872454",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0caec57d-b9fc-4abf-94a9-ca8347cc707a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "a91c968f-54e2-4792-ab88-38450adb21b8",
        "cursor": {
          "ref": "57084bbb-068a-4f38-97cc-76da27f6bc53",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "51c2d3cd-076d-4d0a-a0b1-2adf6004835f"
        },
        "item": {
          "id": "a91c968f-54e2-4792-ab88-38450adb21b8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1a6664a7-f94f-40af-96c8-589ee4600f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "65219359-52fe-4033-abdb-3d4754a79019",
        "cursor": {
          "ref": "82e2c18b-d85a-4d5d-84ed-dd2cf3f9bd2e",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "45e06370-c447-43e4-a6cf-49d2e72e108f"
        },
        "item": {
          "id": "65219359-52fe-4033-abdb-3d4754a79019",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b900ba6f-4670-4108-b9da-3e09509b55a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "5c01b938-aa93-4956-90af-c68d9fbf86d0",
        "cursor": {
          "ref": "788ff370-6ab5-4f0c-9ed0-ace6878fa8c5",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "423a3b37-defb-4d55-b602-49e4edb67f57"
        },
        "item": {
          "id": "5c01b938-aa93-4956-90af-c68d9fbf86d0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "746fa99f-faf3-4f23-893c-a4bd847c13b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "7367952c-481c-44c3-b0fe-8a46efe5ece2",
        "cursor": {
          "ref": "83018825-3827-4e29-a0a8-6540265a46e0",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c2043491-bf0f-4bba-a00a-776e394ff946"
        },
        "item": {
          "id": "7367952c-481c-44c3-b0fe-8a46efe5ece2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a85c6057-6869-44f2-91a7-e3467af866d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "4fd9749b-e653-467c-9ed1-451bce4860db",
        "cursor": {
          "ref": "6864eeb5-12b5-44dd-a5ce-b9e1530c00da",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c91790b6-fda4-48f6-b42f-1918eac47077"
        },
        "item": {
          "id": "4fd9749b-e653-467c-9ed1-451bce4860db",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c0066d90-43a5-4ac1-b6b6-2cd0828447b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "a3f87dfa-c81a-4650-a7a3-7c3d342d0640",
        "cursor": {
          "ref": "35213a3e-106a-4078-bcef-94fc0f9af164",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "426117c7-2c3c-4a0a-8717-8a6ee0347075"
        },
        "item": {
          "id": "a3f87dfa-c81a-4650-a7a3-7c3d342d0640",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b109b9dd-dcaa-476c-942b-c8de34d9b4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "3aef8684-7d89-47b5-b85c-94a96b132182",
        "cursor": {
          "ref": "d2fd836e-9634-4871-a78a-0b05bb9432ed",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ff7333d4-c0ec-4a8f-8ac2-e625c31df6cc"
        },
        "item": {
          "id": "3aef8684-7d89-47b5-b85c-94a96b132182",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "05587189-e4c4-488b-9b53-d1335f09e797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "a3a890ef-44a8-4fc0-9720-6a3800b00230",
        "cursor": {
          "ref": "b874d7c2-a6e1-48ce-b12d-7f4cfd4b9f65",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d936d0a9-2867-43d5-a86d-f774265b1cfe"
        },
        "item": {
          "id": "a3a890ef-44a8-4fc0-9720-6a3800b00230",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "201e0dfe-d43b-4b98-930e-68d6758ec70a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "738a3b8d-51fa-4345-8d26-42aa89191e59",
        "cursor": {
          "ref": "caadc92b-fc4e-4226-8160-e1be8a55228b",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b7a2a1fc-73a2-4075-95d3-1266e36f6065"
        },
        "item": {
          "id": "738a3b8d-51fa-4345-8d26-42aa89191e59",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4281bf89-8992-4c44-83a6-8aa5c529f5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "d3eba2b4-dd9c-4035-8a97-6e83bac7a9a4",
        "cursor": {
          "ref": "34f9f5e8-a04c-4968-b0f8-3d0cfea821b9",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "19d3990c-76d0-4c32-bb50-9bf53799d612"
        },
        "item": {
          "id": "d3eba2b4-dd9c-4035-8a97-6e83bac7a9a4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e5350266-2ea4-4aa3-82ea-39b69562cc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "5cb4f0d9-f176-4d02-be82-41117dfb1e79",
        "cursor": {
          "ref": "9101c564-7ca7-4d34-aee4-1a71ad2e3b08",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "24ce92fd-3064-4ed1-9253-ce32f71e5235"
        },
        "item": {
          "id": "5cb4f0d9-f176-4d02-be82-41117dfb1e79",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "c259cab1-850d-4660-a2d3-9342aa9ab8d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "13b6a3ab-8a95-4853-9b16-f849c481b853",
        "cursor": {
          "ref": "76460049-eded-4f44-943c-50240e92097c",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1fc7f1dd-6f57-4491-b585-55b7c8004578"
        },
        "item": {
          "id": "13b6a3ab-8a95-4853-9b16-f849c481b853",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cd683c5c-af65-44f4-b51f-a31940644fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4228,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "5d647eea-849c-4f0a-99e8-7aff97f008c7",
        "cursor": {
          "ref": "436aee43-6be3-4a29-968f-12bc699ea3e0",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "424260d5-114d-4f9e-bdb1-122cd4f83bf8"
        },
        "item": {
          "id": "5d647eea-849c-4f0a-99e8-7aff97f008c7",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f99e85de-8c7b-4d4f-9548-901f52698270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2553,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f5e2b75e-3365-48c8-bc9a-e596100ca816",
        "cursor": {
          "ref": "f5b1bca4-f031-4b1d-9a76-7eebc573926e",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "3c94b73f-7689-48ac-b631-460e51e0c376"
        },
        "item": {
          "id": "f5e2b75e-3365-48c8-bc9a-e596100ca816",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "739d4f4d-68b3-4359-9190-471cb388f818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2367,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "c3fc89ff-4319-445f-ad50-94ddb1db9eaf",
        "cursor": {
          "ref": "e27904a3-093e-4806-ab60-9c1c24a4eb84",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "afb47cb2-786c-41ec-8604-8a98aac66578"
        },
        "item": {
          "id": "c3fc89ff-4319-445f-ad50-94ddb1db9eaf",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "78b181dc-b404-4be1-aea8-d7184e8f6138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "1eb69b4a-282b-472b-b610-69bd0066fa27",
        "cursor": {
          "ref": "7e79372b-0cfd-4bcf-bc43-fbfd39eed892",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "df90cb21-2c59-42f7-abf1-ef4e55f489e5"
        },
        "item": {
          "id": "1eb69b4a-282b-472b-b610-69bd0066fa27",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f10db860-85f3-4257-80c2-ecf3d96de61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4262,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "347849eb-fcd2-4df1-899b-56608041d4a3",
        "cursor": {
          "ref": "31cdee00-3fc5-481c-bd75-aa1cdd26b700",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "64b6d1a4-439e-475c-a235-9a7e35175629"
        },
        "item": {
          "id": "347849eb-fcd2-4df1-899b-56608041d4a3",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "682b2898-9157-4199-aa11-19ef47ec861f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "53a740e7-249e-4eee-ab49-aa9fea46b5cc",
        "cursor": {
          "ref": "92379a90-c956-431c-8bd0-82a853c64e20",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "fbc272b7-fcb7-4507-8798-62e49ee9ec72"
        },
        "item": {
          "id": "53a740e7-249e-4eee-ab49-aa9fea46b5cc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "243756ca-bd3e-4280-8a36-8a4b29e07b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "5aa68db8-fafa-4b37-bf16-f2bd97812c5f",
        "cursor": {
          "ref": "f2864db1-afed-43bf-9466-988688564197",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "00a2e470-b431-4043-9d5b-1210fc07c72f"
        },
        "item": {
          "id": "5aa68db8-fafa-4b37-bf16-f2bd97812c5f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "99aa17a3-0f13-4f88-8554-ca7022f1819d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "7106d1b5-5362-4904-8349-5026b9ee7a63",
        "cursor": {
          "ref": "84199cf8-e085-4a5a-b956-fc5dee44b3ec",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "22131023-1048-4907-acf8-8b2f319c510b"
        },
        "item": {
          "id": "7106d1b5-5362-4904-8349-5026b9ee7a63",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b144cf8c-8570-4e4c-9ff5-8d750b46dab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "c2e500df-6c31-4103-9b5b-58b29cd74086",
        "cursor": {
          "ref": "7492375e-2c79-453f-af7b-c11a886e790d",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7b233163-b3f4-42b4-bbb3-33d6d4f07bad"
        },
        "item": {
          "id": "c2e500df-6c31-4103-9b5b-58b29cd74086",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3a8b007f-af30-4f3e-b8d4-cc6429879454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "2ddd0d88-6d6e-4504-b9b1-499c14051186",
        "cursor": {
          "ref": "dff955b1-59d4-4b3a-81e6-221393f04554",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9cb08133-7b89-4f6a-a1b5-bb2744e16186"
        },
        "item": {
          "id": "2ddd0d88-6d6e-4504-b9b1-499c14051186",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c068317f-bcdd-4e91-aa13-f5186ba70144",
          "status": "OK",
          "code": 200,
          "responseTime": 2308,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "6f6899e8-cad4-4340-8cb0-a637df08b614",
        "cursor": {
          "ref": "38acfe29-c851-4420-bddb-eef2f85759b9",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "cc1c208c-62c6-4ea3-ba18-4c27ffcae858"
        },
        "item": {
          "id": "6f6899e8-cad4-4340-8cb0-a637df08b614",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "eb0f93f2-ab50-4129-abc6-d51b65f4da77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "5a69f448-476b-40e7-8388-ef5d227c81a8",
        "cursor": {
          "ref": "01d0072d-9468-4e8b-b6ba-db1832bd1331",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "fab50fda-30ff-4159-8417-fa4c141fcc55"
        },
        "item": {
          "id": "5a69f448-476b-40e7-8388-ef5d227c81a8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c1b525f3-1043-4897-864b-58c91fdaa466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "0b2b7a3c-6875-4272-9234-5d9740ebf1d5",
        "cursor": {
          "ref": "06f515c7-1cd6-4561-95f5-5034051cbdc7",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "33fd096d-7a18-4f82-9caa-70bf99c7d3e4"
        },
        "item": {
          "id": "0b2b7a3c-6875-4272-9234-5d9740ebf1d5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "c63a1f2b-ca48-44f2-9c0d-9a5a2e0fa7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "1afa1785-fcd1-407e-8c1d-718dd979cd9b",
        "cursor": {
          "ref": "cbf626a2-965a-45a4-b67e-c7e945960b95",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "84b8d70c-2164-4343-9878-a2053e2e2f73"
        },
        "item": {
          "id": "1afa1785-fcd1-407e-8c1d-718dd979cd9b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f4834698-4ee8-410a-b231-8d3e6f67280b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "e11379fa-b4c3-40a7-9675-c6e66ef60b87",
        "cursor": {
          "ref": "fc1cfa71-388b-4099-ae26-ec0900c34bea",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "88bcc83e-f59f-4ec2-b506-344f8d087124"
        },
        "item": {
          "id": "e11379fa-b4c3-40a7-9675-c6e66ef60b87",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9af870f8-3ba3-40e6-a2e6-e341dc4a649c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "d23ec50e-9752-4497-835d-b67dabd29329",
        "cursor": {
          "ref": "f59b2a01-86d6-4713-b51e-edefcd46b701",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "59aa1c87-0f32-4925-a98d-c511caa54d2c"
        },
        "item": {
          "id": "d23ec50e-9752-4497-835d-b67dabd29329",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "927d7241-721c-4a2d-a626-10242d542ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "f5c4d92e-c2d2-4040-a8fb-f273138fd3ab",
        "cursor": {
          "ref": "8071fda5-ab99-4213-a835-5b577fa31618",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c67f8b89-432b-41f8-8c8d-7a1d1bde0740"
        },
        "item": {
          "id": "f5c4d92e-c2d2-4040-a8fb-f273138fd3ab",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d1ef2610-3aed-42f6-8591-8208bd5815fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "01ba7487-3a73-413f-8b7f-8f1ae40d906a",
        "cursor": {
          "ref": "040aa9db-9294-40a8-9077-4b163160ef77",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1844bca9-f371-450e-9a07-3e436366ce0e"
        },
        "item": {
          "id": "01ba7487-3a73-413f-8b7f-8f1ae40d906a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6e86d916-bb47-40ae-b451-c58810a3acd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "b00e500c-e874-43de-b2ee-c58493793b4d",
        "cursor": {
          "ref": "fb76f812-1f7c-4b85-856b-309311d8a946",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3fd3931b-8510-4a91-a908-af9a88987816"
        },
        "item": {
          "id": "b00e500c-e874-43de-b2ee-c58493793b4d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3804c0cf-4fc9-4cb9-8220-be55542c0a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "ceebb8ba-3c25-4a76-9130-e741dc60044a",
        "cursor": {
          "ref": "f72ff008-0ade-481f-a0a3-5b3b988b8975",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a29135e1-ea2c-4b16-ba7d-ab44e83d4f99"
        },
        "item": {
          "id": "ceebb8ba-3c25-4a76-9130-e741dc60044a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "63019abb-5e7a-4120-baae-fcc3a28dae8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "63a0f8e1-dffd-4092-a4d2-ed1572770edb",
        "cursor": {
          "ref": "45247644-da1b-4040-aa2b-e3e27135ddbd",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e8a215d1-8387-4039-bc10-b25fbaadedbf"
        },
        "item": {
          "id": "63a0f8e1-dffd-4092-a4d2-ed1572770edb",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5f549cef-7c2f-41d5-ba54-cfc87344c75d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "de04023e-dddc-4231-97c9-0572679162bf",
        "cursor": {
          "ref": "4deef512-5178-43e7-b942-227739af9887",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "569a910a-f4bf-4afb-9fb8-67c96f39e415"
        },
        "item": {
          "id": "de04023e-dddc-4231-97c9-0572679162bf",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d665b6ac-9e24-4e7b-bc92-e27f13276206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "58d7dcd7-eca2-4d0d-a82f-653bd71d3661",
        "cursor": {
          "ref": "53771e03-897a-4275-8e56-8620da2f5089",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5faef624-d2f8-400b-848e-981867c77468"
        },
        "item": {
          "id": "58d7dcd7-eca2-4d0d-a82f-653bd71d3661",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5a74918e-1861-4a57-8287-e45999a65dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "6815c9b2-34fd-4be0-954b-46a44ce9c897",
        "cursor": {
          "ref": "5071958b-1521-49c8-9214-41bdddf09d34",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a6a03397-5ed3-4f2d-a935-b76f13c7db5c"
        },
        "item": {
          "id": "6815c9b2-34fd-4be0-954b-46a44ce9c897",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7617fe5c-01a4-48d1-88b9-76eede0f13d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "eb24291e-c71c-4397-93c5-605a60afde51",
        "cursor": {
          "ref": "3e5295a2-fb9d-45e1-8c0d-96fdc5c88457",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d1dd4e25-2cce-4dcf-a3a8-0f09289b4fc5"
        },
        "item": {
          "id": "eb24291e-c71c-4397-93c5-605a60afde51",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "cfa6ac9d-331b-4274-b3ba-17bc8480a598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "0ca476ef-2b3f-40f5-b89b-450f7ba081a8",
        "cursor": {
          "ref": "fe4d7835-1409-41b1-9468-b766e5f8ece0",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fdc1189b-5091-4237-b920-1a8816c29339"
        },
        "item": {
          "id": "0ca476ef-2b3f-40f5-b89b-450f7ba081a8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c5e3603d-c568-404c-ab3e-2c430ed4a61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "3733e45c-bd09-4799-b633-e048fd10a786",
        "cursor": {
          "ref": "07d26916-ccd5-4a34-adf6-be2963997f3f",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ef577360-f765-46dc-9538-c332a7adc9a3"
        },
        "item": {
          "id": "3733e45c-bd09-4799-b633-e048fd10a786",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "217364bb-b336-42ef-b746-2e8ce5c355d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "cb864383-ea00-4d9b-a255-ed097b82b3f5",
        "cursor": {
          "ref": "0b572abb-1cc2-4612-8e41-2202c767db15",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1d318a2f-d3b5-447f-b56c-1a96c64f2f80"
        },
        "item": {
          "id": "cb864383-ea00-4d9b-a255-ed097b82b3f5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7864db16-a05a-4216-9141-6b5830d2d961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "fa4591ae-2533-4f19-b357-5f2600e9472b",
        "cursor": {
          "ref": "f788aa8b-168f-49df-937f-3730bca03033",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b4463ea7-87c0-482f-9ede-6a6135664918"
        },
        "item": {
          "id": "fa4591ae-2533-4f19-b357-5f2600e9472b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3c3ae650-b506-40c1-bd3b-de90e5525a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "5e6fa385-2d21-419b-8caf-95a861511991",
        "cursor": {
          "ref": "0dec36bb-5aac-42c5-bc1c-690ba82b52bf",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4e5cd2e6-864e-4802-bbe2-7747623cbb72"
        },
        "item": {
          "id": "5e6fa385-2d21-419b-8caf-95a861511991",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2bc66c0c-058e-460c-b370-c03376f0c754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "097cccd4-d3ba-42c0-b661-2aa12efa15a0",
        "cursor": {
          "ref": "12127c90-467f-4899-9b89-2cd08edbb011",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7c2609ca-f741-4737-8df7-733044b66d8b"
        },
        "item": {
          "id": "097cccd4-d3ba-42c0-b661-2aa12efa15a0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ad43c251-4947-4ce3-9c06-172b41e22172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "66d9c4f4-cfdb-4143-8f2a-516f9cbc0de3",
        "cursor": {
          "ref": "2441f0ed-6b58-4f33-aeac-c118e6accde8",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "56ba5efe-33ed-4154-8498-3882de42bb53"
        },
        "item": {
          "id": "66d9c4f4-cfdb-4143-8f2a-516f9cbc0de3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "064fd88b-6fd6-478b-8ba5-6cda3247868d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "5ce93c2a-9d64-4748-b93a-d722cfb3c697",
        "cursor": {
          "ref": "88775189-457c-49fc-b82f-89e982eac2b3",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a3a60c3b-6765-4913-bb03-879a15b22bf9"
        },
        "item": {
          "id": "5ce93c2a-9d64-4748-b93a-d722cfb3c697",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "99abe1e5-d42a-431b-a953-d6b0c030141d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "cf344c25-e5f5-4d23-910f-714a6a5ec5ad",
        "cursor": {
          "ref": "ceb902e6-93ba-400c-97a1-496b731ef2b9",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6ab1f7df-f436-4d19-9bd1-2948fc177779"
        },
        "item": {
          "id": "cf344c25-e5f5-4d23-910f-714a6a5ec5ad",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "01c6d290-1eae-430b-8ad7-d54fa4a5ff50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "687106a6-22dd-40f9-968c-d6081dceafa8",
        "cursor": {
          "ref": "f2d54b13-2f91-4d96-a4c1-b0b047c71f22",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "985ae343-8bd5-4741-9954-56a0c725d467"
        },
        "item": {
          "id": "687106a6-22dd-40f9-968c-d6081dceafa8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8c21cb7d-28a5-4002-8c78-a9a3ce14f31e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "043d3300-917d-4fe8-b158-226555fff9bc",
        "cursor": {
          "ref": "a63197cc-f6ac-4682-8c47-5feba5996cb8",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1bd81acf-79ae-43d8-931c-505d58669492"
        },
        "item": {
          "id": "043d3300-917d-4fe8-b158-226555fff9bc",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "097eb89b-e36e-410a-be12-7eefb850b4ec",
          "status": "OK",
          "code": 200,
          "responseTime": 2301,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "27a5a2a7-da25-465a-92ba-c58300ca7f6e",
        "cursor": {
          "ref": "b2e5e312-c3de-455c-abe1-893f9f5df758",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "07daa038-cb88-42a1-a187-bd8205b63077"
        },
        "item": {
          "id": "27a5a2a7-da25-465a-92ba-c58300ca7f6e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a573c4d4-ce0c-42d9-814c-4d986a5f9cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "054a8a28-00af-4650-9b78-e4e61c45b676",
        "cursor": {
          "ref": "6f8edbec-4e1b-4b98-aa8e-58172a2faf03",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "81401f49-00a7-492b-abea-7a5fd1a86644"
        },
        "item": {
          "id": "054a8a28-00af-4650-9b78-e4e61c45b676",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a456c2f8-f6ff-47d9-8403-eeac67bf5560",
          "status": "OK",
          "code": 200,
          "responseTime": 4173,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "ba3619d0-e0ba-426e-a7d4-cd3712c7a3b5",
        "cursor": {
          "ref": "1afeeaa4-0111-44e6-907b-60d693cf5085",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "695f937e-29f0-4d56-a171-26dc9f2be155"
        },
        "item": {
          "id": "ba3619d0-e0ba-426e-a7d4-cd3712c7a3b5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "08c4fce3-33b6-47b9-b829-7894e5c1092a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "d9e0c0a2-ae81-4e00-ae39-8006c09ff45c",
        "cursor": {
          "ref": "698b4f72-b1c8-4c7b-a737-7141b656df75",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "db11ce2b-608e-4163-8878-c9cbeb969a55"
        },
        "item": {
          "id": "d9e0c0a2-ae81-4e00-ae39-8006c09ff45c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "836d5a2b-0e92-4f68-9c22-1a0f08e2f812",
          "status": "OK",
          "code": 200,
          "responseTime": 2341,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "1f5cc93a-08e0-4aaa-b3e9-f5c9aa7d3f12",
        "cursor": {
          "ref": "40adb8af-3dca-4fa5-ba84-350f4f47439d",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ba23bf24-5184-4ebe-9aa3-8655ca2f2adf"
        },
        "item": {
          "id": "1f5cc93a-08e0-4aaa-b3e9-f5c9aa7d3f12",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3f142f92-705f-44b6-8d59-92b07c416561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2482,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "801f7e5e-7bec-4fec-a4f2-106af5bf49b3",
        "cursor": {
          "ref": "c90ea5e4-442d-4ee2-8b80-284c7056662e",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c544cff8-e047-4ca1-af30-879281946dc5"
        },
        "item": {
          "id": "801f7e5e-7bec-4fec-a4f2-106af5bf49b3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2a97c345-e70c-48b7-9d77-931dc99410be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4047,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "9f450932-e314-4fe8-850c-b420a0ca56ac",
        "cursor": {
          "ref": "4bc310fe-cd25-403c-afde-81360a2bea62",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "19c269c9-7bca-4aed-b8da-af6f3bc16544"
        },
        "item": {
          "id": "9f450932-e314-4fe8-850c-b420a0ca56ac",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6327562d-2d3e-4e4b-ae58-31912b334392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "3e95fce4-cf40-4a78-b562-71a78a7077dc",
        "cursor": {
          "ref": "308264a0-ac27-496a-85a9-66bc1848f23b",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "462b5b88-b5e9-4ced-8aa3-aec5c2a0fa40"
        },
        "item": {
          "id": "3e95fce4-cf40-4a78-b562-71a78a7077dc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9ae7a7be-62d7-49c4-9702-34cc3d755dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2345,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "db1daba8-a800-4be3-9594-1d2781ede83b",
        "cursor": {
          "ref": "0f3e9bcd-14fd-47a7-991a-8045d4d325f1",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7bdef3b8-67e9-420c-967d-ff1e1f9d0509"
        },
        "item": {
          "id": "db1daba8-a800-4be3-9594-1d2781ede83b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5127b627-7032-4faa-9bd4-b3fcd10b6758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "f99c9f88-59ad-4ca8-a23f-86a5f31338a2",
        "cursor": {
          "ref": "2ce9893b-c58d-4bbe-ab66-0ccd6abb271d",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "500ca61a-6813-4e79-8a81-627ed4bd55c5"
        },
        "item": {
          "id": "f99c9f88-59ad-4ca8-a23f-86a5f31338a2",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a152161d-c548-4ee2-9fb5-68b5557779ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "b170e8d7-7263-4044-8060-56b462f021ed",
        "cursor": {
          "ref": "6c80b44b-3384-46e4-a2a0-549f698c780f",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ff95dd27-02c1-46a7-8bd5-c4497b7a42bd"
        },
        "item": {
          "id": "b170e8d7-7263-4044-8060-56b462f021ed",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "41ea9fa5-d744-4974-8d24-35c1b8303170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 61
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "d03a3911-6eaa-4c1e-8a03-0e94661e73f3",
        "cursor": {
          "ref": "39d23cd6-81a2-4002-a647-89f6844aa300",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "23723afa-9266-4fbc-a46f-6a5340b343dc"
        },
        "item": {
          "id": "d03a3911-6eaa-4c1e-8a03-0e94661e73f3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f854b564-b69d-4eef-a6b0-3115c390b80c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "175dc52d-9d7f-418a-88fe-6c987bc39926",
        "cursor": {
          "ref": "7bacb4d6-d7c0-42b4-97d2-7878b3b61b54",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c5d7b336-69ce-439a-a109-373353d138dd"
        },
        "item": {
          "id": "175dc52d-9d7f-418a-88fe-6c987bc39926",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "501ec473-f893-4099-b2ef-9f38f1b54a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "2b292d3f-e6bc-4d77-b59c-718af88a0e1c",
        "cursor": {
          "ref": "cd44136c-0c14-41b6-a5f5-6efe355510f0",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7e875a92-8b4c-4cad-b96c-9926e0336619"
        },
        "item": {
          "id": "2b292d3f-e6bc-4d77-b59c-718af88a0e1c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d8f8c068-3566-4995-8d75-df3bd9841459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "11bf07a6-c5a1-4095-b7bf-fcd33a056c8d",
        "cursor": {
          "ref": "c705e394-2f7a-4f25-b2b0-2971ef8aa932",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "873e2a86-d558-4135-a511-44ea8cad3f54"
        },
        "item": {
          "id": "11bf07a6-c5a1-4095-b7bf-fcd33a056c8d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9c4d601d-c74a-44fc-85b4-aefac412d46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "b4462d26-db65-4dfa-a229-405fab0203e4",
        "cursor": {
          "ref": "64786a41-775f-4e6c-9640-d67faf8be2d8",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bf172186-f3bb-4b2a-bcba-6b01c19767b8"
        },
        "item": {
          "id": "b4462d26-db65-4dfa-a229-405fab0203e4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f81526c5-f0f4-4a97-9ffe-dccf7669508e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "8d275dd3-8db4-424c-a33f-446f6614acfd",
        "cursor": {
          "ref": "74b94ca1-02fd-46b9-b313-02eb4abcf8c9",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7cd59566-e450-4136-91cd-25f884775f87"
        },
        "item": {
          "id": "8d275dd3-8db4-424c-a33f-446f6614acfd",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "eafba99f-602f-4443-a3cb-5e485873d50a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "98b312b5-da44-48d7-a439-56bab12eed81",
        "cursor": {
          "ref": "ead4a703-e567-4ea1-b40e-b3d2c8c3f0c5",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1325fa55-1594-4ead-8b8f-b1ead55d4871"
        },
        "item": {
          "id": "98b312b5-da44-48d7-a439-56bab12eed81",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "05776303-678d-46a5-b9d0-da14cd91bb4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "b4c82d29-c943-4dd2-b98c-75e8b6ee24e3",
        "cursor": {
          "ref": "77f68476-fade-4a3f-8cb3-ca0c38c5ab6b",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c34a9de1-ddd5-4f61-873e-ff2294e7bd70"
        },
        "item": {
          "id": "b4c82d29-c943-4dd2-b98c-75e8b6ee24e3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e8638c6d-62e0-42b1-99f1-e5d5dc386794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "15743be5-f9d0-425f-ad74-380096a3b04e",
        "cursor": {
          "ref": "5d2437de-e9d4-4751-934a-0f75aff7484d",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "6086aae1-21e4-4cd9-bc22-f10615be4ca3"
        },
        "item": {
          "id": "15743be5-f9d0-425f-ad74-380096a3b04e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d67b5b77-fe47-4dfc-aa74-3f1801ef9fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "1524693f-5be3-4ea3-b19a-a3f947ca9ed9",
        "cursor": {
          "ref": "ed6f5c6e-9512-40ea-9e9d-a75d309731a0",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5b4ed81c-1bad-4b0a-91e5-9708780cf244"
        },
        "item": {
          "id": "1524693f-5be3-4ea3-b19a-a3f947ca9ed9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "163485ee-b5ba-4579-a770-b6575e0f26bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "35a0c235-f51a-4f66-8387-2fa03f614589",
        "cursor": {
          "ref": "d53c4a4f-cde8-4175-b652-dc6faf696aa5",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c06cec88-5323-46f7-9421-2ea4c0d8a7db"
        },
        "item": {
          "id": "35a0c235-f51a-4f66-8387-2fa03f614589",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "04374999-7b39-4d3b-90c2-69bbab6696c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "904e4ef3-3a58-41a9-a786-33063d72a08e",
        "cursor": {
          "ref": "595e48fb-05b6-495b-9420-12904ef93e2d",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b9f24735-c75b-46e3-8a35-0cb07fc852e6"
        },
        "item": {
          "id": "904e4ef3-3a58-41a9-a786-33063d72a08e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4bf3c89a-fbe4-4589-8a3e-aaba737f226b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "c4883e58-1421-4528-92e6-bf0dc9d8cac7",
        "cursor": {
          "ref": "33888f59-5332-454f-8b3b-c930ba155b65",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4be5768c-e731-40dc-a352-9e1c5322a133"
        },
        "item": {
          "id": "c4883e58-1421-4528-92e6-bf0dc9d8cac7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b8fcaffd-1bf4-49ec-99f0-5933f88373bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "8d729e13-23a0-444a-99c3-dd3c44f05f14",
        "cursor": {
          "ref": "3392d6d2-0eb7-401f-8e3f-afa045786381",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "cccea016-6779-4c07-8b20-8e1a940b5628"
        },
        "item": {
          "id": "8d729e13-23a0-444a-99c3-dd3c44f05f14",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1edb78da-0cec-45cc-b701-40efecf30594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "4d0d3689-0ddc-4eff-8fd8-6cfbab2c7d87",
        "cursor": {
          "ref": "ee3c2d06-61c2-47aa-8a5d-a7ee14be7a30",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7ba59356-f290-4994-b2c0-4ce9b18e164c"
        },
        "item": {
          "id": "4d0d3689-0ddc-4eff-8fd8-6cfbab2c7d87",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3f0fa556-04d0-4af4-bfb3-45fb2235e216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6f68c9c5-02e3-4c44-8038-901679279896",
        "cursor": {
          "ref": "249aa5c5-a76d-4487-b753-53db5129cae4",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ac334beb-850b-4200-a645-ac7fc09f4a14"
        },
        "item": {
          "id": "6f68c9c5-02e3-4c44-8038-901679279896",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c2cd3988-05dc-48fd-b05c-dd87aedb3964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "36b933da-9bf2-48c1-885b-ac161d26377c",
        "cursor": {
          "ref": "1ad05bc5-725b-4082-86ad-603ff29e90a1",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0a6ee01a-2d5d-4602-911e-9c45284f2e0e"
        },
        "item": {
          "id": "36b933da-9bf2-48c1-885b-ac161d26377c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5a253f83-91ee-4eec-8ec4-ae71291d211d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "abbafc25-1ee2-4aca-b24e-aa3a639e4f48",
        "cursor": {
          "ref": "be391e64-8573-438d-a613-5592d3821c70",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "08109838-6523-4e7d-a54e-1f51ad7b9480"
        },
        "item": {
          "id": "abbafc25-1ee2-4aca-b24e-aa3a639e4f48",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c8202c64-7115-4f71-85a3-4e94e9e8b8cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "2f2bba95-6ebc-483a-bc75-4f780938e7b4",
        "cursor": {
          "ref": "c33afb33-76c3-4940-938c-8ce483ef0a58",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "633295d2-415b-410a-bc15-26a86b87d2af"
        },
        "item": {
          "id": "2f2bba95-6ebc-483a-bc75-4f780938e7b4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cd799c90-89c3-42fb-9a3c-e7f90907de22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "49122a3e-782d-454d-b6f7-b81f1cbab971",
        "cursor": {
          "ref": "b8d738b1-fdd6-473a-8191-df51b990f44f",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "77b5b9fe-668b-4bb8-b163-b3528d7f4e65"
        },
        "item": {
          "id": "49122a3e-782d-454d-b6f7-b81f1cbab971",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e71f9645-1537-466a-8157-65ba7307dae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 59
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "3d038f14-48d8-4ecb-99de-b8a10135acca",
        "cursor": {
          "ref": "bdf588c8-0bd6-4441-ac80-0618db83f96d",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "e023733e-211b-4698-9eeb-03a5dada7dc1"
        },
        "item": {
          "id": "3d038f14-48d8-4ecb-99de-b8a10135acca",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "410784da-881c-44c0-9a4e-c9570d52f71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "679388fb-f081-4c64-b536-6668682fd3ec",
        "cursor": {
          "ref": "922c4e91-ad77-4a3b-bfc2-095e6d72112b",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4a7ce2d0-8f37-4e37-a7b7-f4a81a71f87c"
        },
        "item": {
          "id": "679388fb-f081-4c64-b536-6668682fd3ec",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c4c0d5bc-ce80-4866-ad95-412d97857bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "f3f65e97-793f-4ef5-8ed9-fae126730d08",
        "cursor": {
          "ref": "4646ebfa-9526-40fd-888f-1611b1daf510",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "23d315db-13e3-4927-9375-8ca2c69d922d"
        },
        "item": {
          "id": "f3f65e97-793f-4ef5-8ed9-fae126730d08",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8e0a9536-ded9-4b94-9f7a-1c109368216d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "3ed32d18-436d-4afa-89f8-360418fa20bc",
        "cursor": {
          "ref": "4a3d16a1-3ed3-4a8b-b3c6-c1df75a170d9",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cdf41683-ede3-4b4a-88a1-6375ec961d28"
        },
        "item": {
          "id": "3ed32d18-436d-4afa-89f8-360418fa20bc",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "60b150ca-aea0-4ec1-a98e-6e882f9deb4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "eaff71cd-5ec3-4601-9c38-293989e22c10",
        "cursor": {
          "ref": "0ed7738c-808c-41d2-873e-88e302c7f0b9",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cd3ae129-94a1-402e-a07c-4e2a69af64be"
        },
        "item": {
          "id": "eaff71cd-5ec3-4601-9c38-293989e22c10",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c0f0a4d2-1223-4d70-94d0-8cc680f7535f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "e282701c-a907-40b6-be85-724503d5824e",
        "cursor": {
          "ref": "342c3579-afd7-443c-807a-c42342e4eaa0",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "2d9d727e-7ab0-4892-9b59-91205050e354"
        },
        "item": {
          "id": "e282701c-a907-40b6-be85-724503d5824e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a7ecdee4-0350-4291-bf17-47fcefa3886d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "6fec42f2-7811-49b8-bd6b-8d8821f6e172",
        "cursor": {
          "ref": "83435c0b-53bd-4f32-b46e-e3011355197b",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a35f1226-2503-4f04-84c4-3ad72e7e39fa"
        },
        "item": {
          "id": "6fec42f2-7811-49b8-bd6b-8d8821f6e172",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3ffa2a21-9a22-45fe-95bb-4d1d8d3ca02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "7e92b6f2-0dbb-411e-b9f3-17459ff7fee6",
        "cursor": {
          "ref": "0272fba7-292d-4d67-85c6-f9948ee0a806",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "405eeb5b-0d99-4f0d-966f-5b17dfef1b8c"
        },
        "item": {
          "id": "7e92b6f2-0dbb-411e-b9f3-17459ff7fee6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "fb8b640c-4589-463c-bd24-de45b9338852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "0408773a-6e3b-4f58-b5b1-3f6b7ea5d508",
        "cursor": {
          "ref": "9b7b89cb-1143-4ae6-be17-a1380269b93f",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "46031884-2739-44f1-9180-7df2e6b60810"
        },
        "item": {
          "id": "0408773a-6e3b-4f58-b5b1-3f6b7ea5d508",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5c823c80-671d-4d4f-a063-ed659aa86e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "ab0a8276-4a3d-4ce8-9ba6-8556fa939227",
        "cursor": {
          "ref": "1bc161b2-4f6d-4381-b4da-d3702f3777fc",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f40d995b-26aa-496b-95ef-bca06c90ca0c"
        },
        "item": {
          "id": "ab0a8276-4a3d-4ce8-9ba6-8556fa939227",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cb31e3d3-1471-42a5-9b81-3f6805772a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "1ce87e42-c660-4a65-8f80-2203236ca632",
        "cursor": {
          "ref": "273daf1a-b6f2-4a04-951e-b5064a606873",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "24db6741-9180-4ee4-8547-94a4d1f48bcf"
        },
        "item": {
          "id": "1ce87e42-c660-4a65-8f80-2203236ca632",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "480aea67-4998-4843-be0f-919c2e4b43a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "21cbdf03-022c-4b09-8da3-b7984a555b99",
        "cursor": {
          "ref": "d84713b1-1709-460d-bc69-f39b4269b26c",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4cecd1a9-25da-40e3-97f8-0119043fe964"
        },
        "item": {
          "id": "21cbdf03-022c-4b09-8da3-b7984a555b99",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "34dd1079-e3c4-47a8-bd01-e69f77f1ffa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "ee0673bd-17f6-4cb9-9c3b-5a6d07dddc1d",
        "cursor": {
          "ref": "8b45f0e4-fa17-48a5-9949-6b43c376c873",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a5512efb-0463-46fb-9a53-65a1361c151f"
        },
        "item": {
          "id": "ee0673bd-17f6-4cb9-9c3b-5a6d07dddc1d",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9592fe9c-5096-480f-b71f-837748e65ea8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b315680b-ee3e-4973-8ad0-593dac2ea48c",
        "cursor": {
          "ref": "c62aeb83-71ec-4ba6-b93a-28f459b4145a",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "48f418bb-b770-499d-8cef-8c6b606bd355"
        },
        "item": {
          "id": "b315680b-ee3e-4973-8ad0-593dac2ea48c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "eed7a28e-bd07-4461-9adb-743143733225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 32
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "98fa1d41-d993-4da8-a7b5-ede6f5eb94e8",
        "cursor": {
          "ref": "ea57eeb2-8856-41d0-bbea-a62d1c3cdae2",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8897b46b-8aa0-445e-a061-5694c8098170"
        },
        "item": {
          "id": "98fa1d41-d993-4da8-a7b5-ede6f5eb94e8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7393d783-fa2a-4394-82b6-d137f0a7aac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 32
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "3445f13f-7021-4252-b290-333a1b94a127",
        "cursor": {
          "ref": "b2f56c33-906c-4772-9938-3228318d732c",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e1877734-fe74-4582-92a3-2409fb0a8c87"
        },
        "item": {
          "id": "3445f13f-7021-4252-b290-333a1b94a127",
          "name": "credentials_verify"
        },
        "response": {
          "id": "21e61044-b4bd-4663-a9c3-b6008fdaa770",
          "status": "OK",
          "code": 200,
          "responseTime": 4044,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e0887e-0d6d-4bb3-85a1-a440d7e5d2da",
        "cursor": {
          "ref": "cc76a7d8-eda7-4287-8ef9-0288b1570d29",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "edbd2f52-7a85-4ad6-8019-80e189e25d67"
        },
        "item": {
          "id": "71e0887e-0d6d-4bb3-85a1-a440d7e5d2da",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "181888c4-af71-45ec-849f-94488001d9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "a30643a3-6fa9-4f54-94b6-cdc04801598e",
        "cursor": {
          "ref": "7de8cbf0-0af1-4622-a187-537288b60326",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "68af2291-8dc9-4688-b314-836c079124ae"
        },
        "item": {
          "id": "a30643a3-6fa9-4f54-94b6-cdc04801598e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6dab6e8-0519-447b-b69f-3d962579e8a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a30643a3-6fa9-4f54-94b6-cdc04801598e",
        "cursor": {
          "ref": "7de8cbf0-0af1-4622-a187-537288b60326",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "68af2291-8dc9-4688-b314-836c079124ae"
        },
        "item": {
          "id": "a30643a3-6fa9-4f54-94b6-cdc04801598e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6dab6e8-0519-447b-b69f-3d962579e8a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a30643a3-6fa9-4f54-94b6-cdc04801598e",
        "cursor": {
          "ref": "7de8cbf0-0af1-4622-a187-537288b60326",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "68af2291-8dc9-4688-b314-836c079124ae"
        },
        "item": {
          "id": "a30643a3-6fa9-4f54-94b6-cdc04801598e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6dab6e8-0519-447b-b69f-3d962579e8a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "d1a7fb14-5210-4c84-92b9-e8339f16de34",
        "cursor": {
          "ref": "06e53ab8-ddef-48cd-b569-4734d9bdbac2",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "98799719-9f17-44d3-b781-94da6904c4a5"
        },
        "item": {
          "id": "d1a7fb14-5210-4c84-92b9-e8339f16de34",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "492c20d6-a0f2-44df-b673-c7fca35b41c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 319
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "9678f803-4840-46cb-9a70-014cdd7a1ec9",
        "cursor": {
          "ref": "6c63aa98-e88f-407f-9f22-dfea355b531e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3bf1d65d-dc2f-418b-a29f-0e2aab077571"
        },
        "item": {
          "id": "9678f803-4840-46cb-9a70-014cdd7a1ec9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b2ac18c7-3737-4cd9-9290-9d83117f5441",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9678f803-4840-46cb-9a70-014cdd7a1ec9",
        "cursor": {
          "ref": "6c63aa98-e88f-407f-9f22-dfea355b531e",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3bf1d65d-dc2f-418b-a29f-0e2aab077571"
        },
        "item": {
          "id": "9678f803-4840-46cb-9a70-014cdd7a1ec9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b2ac18c7-3737-4cd9-9290-9d83117f5441",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9a3a9565-8840-422a-b10c-dfd531de57c2",
        "cursor": {
          "ref": "be550ff9-eeb2-448e-a56d-0bb7221e7a0a",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "593dd6d7-5549-4acf-8701-4f6aef07144f"
        },
        "item": {
          "id": "9a3a9565-8840-422a-b10c-dfd531de57c2",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "0c81df9c-9c93-4a1b-836e-6c609bc7ce5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 87
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "5e8d1d05-632e-410f-b3a3-8a24ae2f52f2",
        "cursor": {
          "ref": "ed1f86b0-412d-438b-9c40-7b134ebec597",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8f6257f5-0885-4d17-a26e-c9ff089f5f2e"
        },
        "item": {
          "id": "5e8d1d05-632e-410f-b3a3-8a24ae2f52f2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "167161bb-9530-4154-853e-ff8ea670ea46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5e8d1d05-632e-410f-b3a3-8a24ae2f52f2",
        "cursor": {
          "ref": "ed1f86b0-412d-438b-9c40-7b134ebec597",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8f6257f5-0885-4d17-a26e-c9ff089f5f2e"
        },
        "item": {
          "id": "5e8d1d05-632e-410f-b3a3-8a24ae2f52f2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "167161bb-9530-4154-853e-ff8ea670ea46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "aa3bff5c-f2ae-4145-b8ce-b5a278d0e6d2",
        "cursor": {
          "ref": "6e533954-9f36-42d4-a9a4-267cbaf9218e",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "53d7a45a-f337-4dd6-a5ed-6aeb93910224"
        },
        "item": {
          "id": "aa3bff5c-f2ae-4145-b8ce-b5a278d0e6d2",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6dc0d839-4efa-41b2-8fd8-78593ffece38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 97
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}