{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c60fd181-b2e6-4788-9d16-07f238ef73dc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4e851c4e-9d44-40da-b41f-c46f2abc6b11",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2de7ec8e-e570-4383-987a-1462c18b424d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2379c5b1-b7bc-48b6-bd09-79d199c9a3d1"
                }
              }
            ]
          },
          {
            "id": "e90043c5-3532-48fb-86f6-034ac72448bb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7abdc081-c908-4a87-bb9d-0d053dc30595",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7f53a6bf-519e-49e5-b4c5-7969513eb8fd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b73b926f-58b3-47b5-a0e4-b5225d16542c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2a5b7fcc-1ad6-46a4-a59b-7e92b9a098d8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b53d8eb9-f34f-4779-82d3-93ec225f829d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85143e9c-1f92-4b22-833a-766b4b5e0fb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "723130cb-6d6c-4414-a623-bc3fe9520399"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8161b831-4c2a-477c-9c19-61f2cde4e8b9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f089f83e-b71e-4d9b-a257-76691cb22b89"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "de3d9adc-cd45-4e23-81c0-3a630705e53f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2fae0ad4-d276-4ad0-ab9c-50710637ac43"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a6014c3-1e9d-4da0-a8b0-63ab0ad255b8",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f9a0e053-5be2-4cc0-b120-af153e6d2ccc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "99721ada-1480-4ebe-937d-c28e5ce9400b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e88e728-e9a1-458a-ad29-b1d97ff797c6"
            }
          }
        ]
      },
      {
        "id": "a3807664-2e12-41cc-8691-e4a15c4a3c6e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "60ec317b-a9f3-494a-bba2-b4beaf3eac2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2ca9e028-4e57-46f9-9f5e-54b2476250aa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4eec0402-ad8f-4fbc-a9f4-37770e7a5fbb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d25290-4501-442e-bbd9-c4ac058b053d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11111640-b443-4854-bdd9-2daec283872b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ec1be6-7e9a-47f4-9d57-4f963b929e51",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d35b3c-07c0-4100-9b9e-71a4f5f0ab62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "23b761de-5afb-49ce-9b3f-a49ccd171a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdef1564-356b-4d59-a246-5a8a76743999",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0fbe82-a3f2-41d0-9752-61a0395824c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d187f437-3531-46f0-b0f9-e9bcf67d9931"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3aeeaca6-12ea-4578-9b4d-a69f0d4dd488",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a42b13b-dade-419e-945f-889d8d5104f4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75925bcf-8460-45c5-b784-84fa9ffd01e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a05ad59c-7717-44cf-9fc1-12e3af93d78a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b12215a-046f-409c-afb1-976d7f815fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a08b894-3632-4371-aab8-19134ac26784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7224eb38-7854-4410-84ce-d29456ff8038",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaaf56c2-c6d6-4e43-8895-3a10fba926d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91d1f850-f6be-4e45-a94f-1cfd514b3484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb38027-4aa2-4f7d-b279-643981ba6ca9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "1d3caad3-55e9-41d8-81d5-88d11cb368b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "263a3ada-a92e-4c43-b8bf-0c29e5f08ce2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fb2ad189-13d6-4e53-8e1a-4898327d35f2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9212e4a-3518-4794-9fd6-540bed83d2b9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "23963de9-f4c6-4886-939f-bb915b93fe9a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce25643c-3a52-4fee-8bc5-f4e29ff9c867",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "cf0b579f-6e70-403a-97dc-19d691fd3ad5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c467409-149d-4478-b129-5b942e1bce74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1af06ecf-e5b1-40fb-9ad5-1fbeaf176458"
            }
          }
        ]
      },
      {
        "id": "ecada566-9605-4e6a-a6c3-652e93c92cbb",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7985ca7d-ce22-4794-9839-45ca79952bbc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f8cf1a7-59ce-4356-b53c-d3edf3a57723",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f20d38b4-50df-4a6e-911b-e19403521754",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5dd339-8423-4641-9471-e413e9d9fc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99912279-da32-472a-85a7-1a3ae122aea2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba3f9cb-f43c-4c85-80ba-d456549cc138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2de2960-b9a2-4ca5-a7ee-0a736f3338a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d18d2b4-b847-4560-aca8-baab0bf807fe",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb43ffa-77ee-435c-9689-7e7e8f948d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a261805-1c9f-4a19-b916-5b3fb6d2c997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9434743b-9e7e-4b1c-b146-15388d62edcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa8e79f2-1048-4ece-9ed3-8764baeea943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b034bd2a-b988-4903-949d-b95c8c68eb3c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69f26a3-da0f-4b79-9fbd-dd31d2f54f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f54ddc-b104-4d17-8fa4-78dc96e9b652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546027fe-11a4-423a-8c96-74b47458e2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f626947-3aea-4cac-ac17-f1fb9df80c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9723ffa-cbcb-4794-a2c1-6f9e8e234db2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3325b0a2-a807-497f-9222-bb57fac24f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b924f1-c3f2-4997-9c11-b593c0a83e72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9282e43-776b-4f47-a962-6afb9e891f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f756595f-208e-4836-9508-1c93cc497d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d093a7bb-9979-4fc7-bb81-ce0283381e9c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3731019-2c8e-47e4-a807-cd9c6ac68b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4672bb39-0e6d-47e0-b947-1667e05734f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cbf950-b4c6-4ad7-b802-6e77260fac8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b145ee09-1dea-4a12-803f-ca962e0fea61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f2d08a-3dfd-4545-9a62-1f56836acac9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb78a941-0430-46ae-bb21-426d39225116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57867aec-f47d-4478-8b7e-b76a610a8d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952100bf-de3e-44e4-80e6-74c969528979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29ff64f0-4ef9-4a5c-8e50-b72d6e5694eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5ba413-6ad3-4784-b35a-4afb9fb07547",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d90ce0f-2346-4ba9-ab0f-5b0fcf8dbd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2558934c-543c-411f-831c-9a484d55a8c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71fcf73a-3993-4465-8773-90c73dbc634c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8358d8d-88eb-40d6-a860-3da7ded1747a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19cfee4b-1d3c-4c48-817e-eeb3def92f38",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84603451-87d2-4955-8500-7f3dab743d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02039948-5c74-4a50-8f60-e37fc0c94d26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ef4873-5561-4ce6-b474-5f3464cc7cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cdc9980-9282-425f-a550-fc9b65bf9ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e988b1-77b1-4c70-b4ad-e14441ff349d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be245d03-5cee-4fdd-9620-f3cbe418cc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e93186-931f-4548-9ea2-fbd3e21a0977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad97c52e-1ad0-482d-b2a6-e53e658fcc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c3e2335-b358-4c04-a719-71a16c905a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60630f3c-b074-41df-bef9-d97fabacf070",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1022d8e4-e171-4348-a75b-32d3e82a13d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a846c770-a5ba-42da-a9c9-71e815ed5096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a32a9f0-52f3-44c5-87bb-f3c5e8386a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3acb3520-6669-4f09-bcec-7f99e34bee76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3ae254-4ff2-4488-b4bb-2c45fb0a34cf",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8db6cd3-eeb7-4c8a-acab-95be0b4de38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eca8bf6-bb31-4c69-ac1a-4f801ccd6fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57c5581-7f03-42b9-baa7-d004e26f8971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa753dbf-7253-4364-b45b-8d8d966acf3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1f28fb-bc79-4f46-8144-59e639121e09",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1847215-7fe0-4611-9f0a-a5c753de34d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "950883a7-feb9-419f-b024-31279e2c0ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb908521-e9db-4a22-99b4-fbca0760e666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d94e6b7-d17d-4c69-b786-6eb498f31d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f49224-fa77-4e5e-819e-211eebe91930",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1079a350-48d8-400b-84f0-63561c8d03d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b907b917-5cde-4fd2-86bf-b193521da4fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96835aed-3ab7-48bd-8247-1201c167323c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f5db3a4-a5bc-40df-86bb-06c25c645760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c1216f-5282-4504-b76f-f0c06662b311",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36b9fa4-4d6c-4849-8f96-49e274d614cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d657ef35-1f30-4a31-b432-8b78e5e40bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a85289-4eaf-44ca-acd9-10c43b8a0226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f611cc08-fa6c-42e8-a50d-2b5a42a7c209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4845fa1d-5315-41ba-b4ab-39c8e2a5f89c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702182f1-a022-4c30-8edb-7055cfbbd839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "264f3f95-a6a2-4975-9e27-fe98d5f4f5ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38a3354-5abb-4de3-83aa-172dfe7d35fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb0c6a68-f646-4eaf-abab-f0bd4af3419c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd99d55-fa33-45f7-8e85-20fe3a9e59e0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c332efc-b6e5-4eae-aab5-6647c3f0746d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43ac5a7-acc8-4f69-a2ac-1cb8a84ca56a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03d93f1-ce8c-482b-aea2-42c0a76d411f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "278a1b7d-79be-42fb-8a42-dc8a77cd7516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9ad7af-c10c-4527-adad-cb870e4ad567",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d361bd3-ae1f-4fe0-b0dd-37ba596bd1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53a0846-cdda-4db6-9917-49bc4c42abde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2759e119-80ba-4abb-bcb3-2dbd43018054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "777664e0-53e1-416f-9afb-97a5703ab91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee9b6ae-1ca0-4dac-b83e-6d93070eac6c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7be9ea-9555-41eb-beb0-160cd697f73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75fb8a0b-281e-4c01-9ced-d6338a35f4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e4eb55-4e73-4627-b291-a59e16e73654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f76277-4fc1-499b-8c61-f3d5088b25a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beac0707-09d1-44fb-8182-bed4f3e77000",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491106fb-3e3c-4e57-84bf-eb16458856ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b5f5d7-ff0c-40cd-98af-a9c27bde1cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc8b465-8b05-473a-80c0-e4f677ca5fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd2b5e5a-8945-42c2-aae9-eddcfe58b1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22541656-b5fa-4cbb-ba16-21f8cd766bf5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1970a6-a6d2-4234-ade9-dc17e011d7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c785b1-8444-4693-9360-75fca2e4921f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8709d4a7-7145-4f13-b29b-28ea08ac8a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b95e7f2-547a-4afb-a1df-800aee8a0c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45964bb5-502c-4a74-bb1c-9d880a4b3b16",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25dcd44-93d6-4aa7-991f-8a7408b24125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d6ff3f1-82f5-440d-828d-40c6bbe3ea59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b814704d-7d24-40c8-88ec-79229421cf4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21da2724-74a9-491b-ae02-254661b87f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7598c7-b7df-43d2-a348-bddcdce2bf1d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3e690c-e121-448e-af48-d15cbdf26893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf8545f-f74e-47ff-af86-076c1ac88028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3884dca5-0ca2-49af-8700-43571f547183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "59bcbfd5-a7d4-4fb6-9ab3-4c7f7007c71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed253586-d4b3-4cf8-8f2f-db573b31a3fe",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc85233-5a63-4c5c-9d28-37ac25e5d7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ce2bba-74ce-418d-91c7-cba4fed2b783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ef6dc3-ac68-49a9-80ad-3850f58ff478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e0a30ac-e5c5-4e69-b130-d635f988083b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73b8804-eb4a-40d1-9cfa-a302283c6116",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c14162-2c9e-450d-bd81-8cd3f10a33ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0027780-ca1c-4422-b06c-1e563acc8e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8c5780-9a81-4d02-8ce1-1a112cfa0bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e18ff0b-1a71-463e-9e48-df7c9e8a8eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84fa2825-895b-414f-b41c-9a71755fa8f2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa881da3-c0a2-4fe1-a249-f012d4bf74ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d7f0db5-7086-460d-8f8f-d176b44e94ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74dc0200-94c1-4a23-8c73-4f8398d5da68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "df9d15c0-7522-42d4-8a49-b898d725cba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015b70cd-cac3-49a9-a121-2bb7c80fc8de",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d07e21a-6891-44bf-810c-5f6c8dbe4b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee1548b-4229-48d1-b979-da9c4511b7e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e1772a-a22a-4483-9528-33509d5ceb45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "549fbc70-c45c-4416-b1eb-d3bd5c9b404f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0197c072-3958-40d5-93a3-10ebe5975bf3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ccfc5b-c6f7-4ac0-8e6a-3edeee7b2507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f8b1c46-7983-4446-bb65-943ccdb86c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3b9b2a-ed0d-4474-9e12-af77eab8b551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "028024f2-604e-4e13-970f-2f7386a8a902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a8d661-fa8c-473e-be42-8ff8af0a7952",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5975e95e-7aeb-4839-b15d-564a7e3cab16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc9990e-591a-4a60-ae22-ef7c1129d155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6942fc12-8dfe-4088-b675-837b940b8557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e2a8aa3-9037-4838-8a3d-9e6f54ff90f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b16e65-5af6-4729-8b69-f1c686dd1a84",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c6df64-18a8-44cf-b24d-05aa53dbdb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57f45ff-db26-4d24-8231-83d77843ad19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315517f9-428c-4c4d-8d35-49398866e41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f42552-36fb-4391-9397-b56bb27adea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895c14c2-9617-4dc6-8460-ecaa855111e2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8ace17-8518-4bb2-a826-cbb3335143a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0820ab71-1b30-4877-8ea7-245e68cce8c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e957796-2961-442b-8a14-f981c69faa93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9c32a7-9be0-479c-9989-594ff2303793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb99abb4-f3b0-4cfd-822a-d5056a240ba8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "901ed01a-8d1d-4c16-be60-50fd12694c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f4adbb-822d-4f0e-9e8d-4d51b7164312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "161f9a49-a479-42d4-9cfc-253ca5c26b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d57a9dc-842e-4285-ba45-83d4b6edbb73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a963f0-5a3b-4a66-b056-2bdfe7cef6dd",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6a5c05-2d9f-4aaf-9b68-a65749e93b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b4a22fd-d4c2-4b49-8151-17eda67c84f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243fbea7-c1b9-41b0-8f18-2db4b5054b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34bd7909-c600-43af-b608-41ce22d33106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "214d89c9-424f-44b7-be0a-49092592e039",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ef8a8e-3f76-4396-9557-a24fb5d73d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143c26b5-6a0f-4295-919c-1a29a292697e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5ac040-b12c-4923-bf49-516f3db77ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1920d904-eb90-45c4-ad4f-3d27aaa839dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58cc686-22d0-498f-9080-cbd1aa21ba57",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98279de8-7712-4a19-bdf3-71fe66a65756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c19ea89-f009-47f3-b838-ac5c5b9dac77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d20834b-71f8-4f9e-a465-df0828cd1d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6932125f-3596-4b26-94e9-94a806dcabc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861fd22c-d6f1-4b8a-81c5-2bd0f45159f4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75af62d7-57e5-4237-b479-d33091a706f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "217e473c-d844-4de8-b76b-ed5232ca5c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1a80d2-60ab-47b7-8b7d-5bf8b04219a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "77ab61b9-81b4-4998-92db-dcfd8639b3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b89c41-e7e2-476b-a482-9d4d52be9798",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c73ec86-5df4-454b-bf1e-30208171708c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06165551-c3b3-4b8e-96b6-9df647401b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dfceeef-a7f2-4931-ac55-23d31a664736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2a60a9f5-c2d1-4d53-8467-9dfc83f0bbec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb23b78-27cf-4b39-a1f8-53f48dc3d9ad",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613ef6cf-8674-4a0a-b2e7-a23d7760a849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02620fe0-2a33-427b-8035-0834d8b64f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b953735-53f8-4837-8f71-d539aba2c8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28ff2007-6889-42fa-bfdf-b81217f2c7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804e5538-c366-412e-b284-e04092e8eeb0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb54259-5226-4b3e-9e7c-865a0f131384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73226a61-58fd-46f7-9ecd-8d64a1d2616e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0177f31c-e697-4857-888d-a7e4a56cba62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "16cb47bf-b1a7-41ef-acc5-d5f080178336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc0a0e4-bb3f-43ff-9bcc-f364adae394a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6326a3-f287-4ca5-a6fb-cf0d6f6ea9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7c7e4a-737f-415d-a9fd-e522430ec02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d9ef7b-47f1-4729-a06b-99fe5b238d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "20a45a51-dd13-4963-8683-a29d66e42dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc32859-570d-4451-8c33-78b5e197d86b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "768cc906-c313-49f1-bf31-45d2eeb5b2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd29704c-8846-42d2-9876-fd6b08e969b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a61bde3-6edb-43ae-aa5c-5fffbc1d9da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "61571ae0-7740-4d2f-8c6b-ab26287d3c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2048ced3-18d0-45ff-a004-aa6874b48e84",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05bb805-761c-43e2-850a-9c062f7984fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57bcd41a-3bef-4e95-b430-393c39a4db97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd82287d-8175-4f5f-813c-1d2709124f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4426c5e-4f5a-40a1-a8af-e0be1bbf4703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3c5c37c-b2b4-4fda-9d9b-8e726140c557",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c1a3cb-87a2-43de-822e-0d6bb4b0aba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d550e872-75a0-45d6-91e7-318c26d6cd8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f09a43-7d4d-45f3-a3a9-2093cee8480a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "36f59230-637b-4a76-973c-d318b4fd2d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a6f98d-2921-4e27-8dca-0c8193db94c1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d8c762-e134-4c48-9d37-2d8137ad5d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6200fe49-282d-438b-8aa2-44080b6483e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2efb50d4-215c-4512-b875-90e09db26ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d644ef9a-70ef-4dc7-b16a-2a14d59f844e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04ce163-5d6c-4af0-8df1-a3acb0f7d5e4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58c7536-8483-47a1-b587-ee238d1ceac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "075c0c9d-f8ca-4013-a4ba-ca7858da9e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a9015c-3def-47d6-bac7-909de8a2634c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7edcc8b5-f3fd-4541-a23e-5ff5218b0755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63312495-7bef-46c4-957a-5708af39730e",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9f970a-ee2a-4cca-af52-e6a26212b838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84aa0b6-59e4-4c78-a8ab-707f15f8e7b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d16265-4967-4ca3-a0d5-67b1c34d1792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "04168ecf-9d7b-4a0e-ad09-c97cb85aaeaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15be0810-d761-4fde-a730-49379ae3c1c7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78289e1-9a41-44e6-aaa7-2b2c274834a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05520f8d-b02d-4d21-abb9-991ecf902cfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64015e2-19e4-46c7-a7aa-4c39392edb11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e27e8f82-2522-4e2d-b034-20cfcdad8011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd295b9-73f7-4bde-a7b8-17b3d8c8aab9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0a7194-f19f-4568-8a5c-bfb6719596b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4145430-a673-4901-9991-e4a37fa26cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1966d11-932f-4061-b469-9932ee8a451d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f22bc843-87ff-429e-b6c9-bdda279cb9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e36c9b3-928a-4a70-b784-2a3f2bf96967",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d027a1-4eed-4a2f-96d6-9c0218f68d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31a8a09d-3e75-47bc-8f8b-32791f2e6b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49494fc6-6313-4bb0-9abb-00703238046c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95d53980-4533-4a7f-bbc4-34a223fc09af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde90902-5fef-497b-9675-832efe4768a3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb413cd-3282-4405-be06-5e212d4029f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90826c95-935e-4fe6-82bf-f5898a001bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be468868-1145-4c45-8d50-ee207aa00716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1759e964-0bf5-4ab7-8635-da1d4f559dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b354b9bf-014a-4d46-8531-254ff3f64308",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea0c81b-9b0b-4482-98f5-cc50c7e092e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3708dd3d-da2c-455e-8ab4-aa11aaeb3fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d8d905-ca96-4304-aece-57f6ad388c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d4329fbc-612f-4139-8112-eae4118c735d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b607083-0deb-438c-a08c-4f3e5419b5f0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53146a4-ae09-4556-b5bb-e6a522efdd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fae3262-773c-4d67-ad89-918833e2d638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6a656a2-81d2-40eb-9548-b935860a6bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5466ef29-d7ef-498d-9b12-2bcf0a86204b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b2e950-0dec-458e-9983-b6f13212ed02",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78d96b5-addd-4bdd-b97f-8203035e10bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9edfd37-fb51-425c-bb6b-532b5ba6952e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4f874e-227a-48f0-881b-3f36dd634ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "53e87c36-dfac-49f1-9b64-d7e1c2e3d085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3c4006-bf18-4457-9aa7-32653cdc9731",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a16faf4b-c255-4729-9d55-1aa9af15992e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a8bddd-b6ab-41eb-8aa0-45f0e90eeb60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dee304a-7563-4a84-a26d-3b4910cf9085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0af50ac-62f2-488b-8ce8-4a92efaad73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdfe3889-49e9-40a3-a875-c0c9c8537737",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89ae772-0d55-4963-af32-b0fc952d96f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7700bec4-2d0b-4394-8f45-86ca01ad303a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28e6146-b8a4-4c1c-a422-a721ab71e327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3419263-d5b8-4cf9-9d48-e67550f8efcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d62fe1-d779-4e3a-b9c7-784c8c28e8f1",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c0b80d-b57f-493b-8e99-2568e527a80f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42d7c88-7129-40b3-b1ac-80835ee6a991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96247050-939a-4f85-b7c9-4eb86fd275a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba8710a9-5437-42c8-a460-64ffb8a8f80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1136a481-2afc-4bf8-9fd7-579fda5ae881",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83877e8c-2c2a-4cf3-ad6e-813f4a9cde92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9e62538-32cf-42b2-9d69-82f694febf1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b08124b-9556-4f24-8f7f-becd387e0df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0e0872a7-8272-45d6-867e-43ad95cc8f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa581a5-c1f2-45fb-bb67-7afd73be8639",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e21d423-5c74-49ed-8a2c-c70d152d1456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7a082b-308f-418a-ac55-ad25d3558b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bb62c2-22d7-42cd-a1e7-b2f57d65c991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3a78305-5092-4820-a38d-186d3260c797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2523772-03fa-4a89-a70e-250c8d76095d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9469768e-b0f4-4cec-9568-3b1e2c77d18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb39194d-b83e-4ce5-a46c-1d7f19dc5b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eeb8a61-5207-458a-a7e1-2b5aca7d7905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2632920d-e725-425d-b62e-4f81a13d3ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0c270f-29bf-48d7-8c2f-f9deb20b51d2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4c7c80-f870-4b3c-b7b8-167d830e3362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f63655-3904-474b-969b-86ab3aeb0a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88bda24-8e74-4bd7-b55a-2a9bd9038514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "003533dd-84fc-409c-a31f-98e1b91e6e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ebb885-316c-4700-9bda-9c8e3e47b1ba",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec3b577-ae16-40d6-b915-3e4d8905c21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d75284d-0aee-46a0-8f52-91ae6b0d4c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40db41b3-edab-4824-b581-2106176528a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4f6a18-0703-4655-9e9b-cebc8c67ed4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c84f312-77ee-43b4-8f1b-a9b1cdff3bac",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd41fd1-5159-4df3-a6b4-512c200ff729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482cba16-53cb-4b18-88bc-753f2cc2ab53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4d7970-0eac-4890-9f64-aa53ff2526de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "026d063e-9a93-44a4-b24a-471a4ae45868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15291b83-989b-4f76-af5e-00d6d9b9b46b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d8439a-c857-44ea-878e-0c3ad8b22bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684631a1-c246-4336-8a1e-f4b7fcf6b017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eaf4edc-df77-4b9b-a1a2-2be308dee6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "427f0bbd-8da2-4571-b483-f5c96f7d4aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4baf818-3097-4bcc-9fa9-420dc5be4951",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9bae6d-b744-4a7f-b452-4aed141a42b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6518136a-4bd9-442d-9891-e559b4ee8b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf2882d-1e17-48e3-99f9-b762ee5234a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3370d3c5-7265-4ee4-9052-7200326ece47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4f84db-eaa2-4c23-8939-83281010e2af",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1fd6eb-a609-44d4-be3b-fd8c42ac1de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f51ae3-50c1-424e-aa31-ad809ca6cf37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81630787-6b29-4957-bb0f-6dcf27e9fb00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44949c1c-e171-478b-aba5-59c1ba4569cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61766811-6f0b-4095-8850-6f667dd71a0b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ebcc47-0d32-42b9-8ef3-6070c694dbce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0204037-4a01-428b-9121-6ceb22d087a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba81ed0-935b-43d3-844a-a78c87027e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a413e361-3e05-4e2b-9664-2ce2e5b72b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de106388-9803-463c-8ead-af0ded2e2bfb",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffbc4bd-559c-48be-bc1f-fdfa5dbbe98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823f3987-df0e-4265-8ea6-8282364d1695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92362dff-5f4b-47be-a297-b34cabc7280d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff7ae1be-60af-465c-b99f-3ebf167f9c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77dfe1d4-c247-415c-b50f-4e49a6c1c871",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63f9c155-2abd-43b6-ae74-984d3c3d870a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d409a636-1246-4c86-a5c9-dc30a5454c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89200f28-4632-4717-9771-9a20359667b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "36d2dd1d-67c3-4276-940e-cb1977ea04ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82822b1-df8c-4058-b0b6-607a4d260da3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44dde8c3-e504-48a1-b4a4-cbbd7f368a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0acf564a-eb70-464c-8dbc-0a92f10bb944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed3cf39-22f9-41b2-ac98-03b0509ea277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab8e99e5-ace3-47fe-beb6-e5c913538ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd12901-701f-410e-a429-af6dbeb3f995",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd16fb33-cd5b-4a75-9d26-397e27ae4e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ef11f9-dde3-48a7-967f-5a0e7e38bd67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df77b05a-b48d-45aa-b234-4fe7fe69500a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5d3776e-42c4-4a10-bd17-0e2bd1c8b5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acea0c00-bb1a-4b28-85f8-d87ed57c3746",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "927051af-da35-4de0-b2be-2f1f938f25b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "698859a5-cea6-40f5-868a-6aa5647e7179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9a521e-bb0d-46ed-8a08-eb4d8e7d0c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ede56931-5f42-4be1-bc4d-44641fa79337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67cf4d4-f208-4c5c-bf07-b0f13c273ee2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce29210-446b-4add-b63a-6b3327be30ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8b0a99-25f9-4114-8dda-1dce88bc4b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8b7c87-44f6-42f9-9140-9421fb5a913e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf9f93e-032d-4111-ac22-72a5d18ecd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d976e04b-da1a-4183-9e39-59a12d9b3e72",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e1134f7-ef0d-4088-9d24-3412fd9bb3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c527a8e-0d95-44b8-ae59-e1025b0e15f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b74af6-6e6d-44a5-8d53-9090ca8d9fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "707661f4-a1e5-437a-baaa-b2f27fabd758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed77eae-822f-47e6-a06e-2ef7f3c851ae",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ab2adb-d283-4734-9445-684d2349451c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1498ac2b-0151-4e80-a393-340ce538be33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4065b44-c5bf-49c2-83c8-2b079b4f0490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1eaf76-e2a5-43d9-b86c-edd4de4b9ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64559944-369c-4125-92fe-20b2431b08b9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459b7274-5dc1-4733-926d-252344cd5197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff565368-3b78-496f-8d72-e0ba16299f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886fd763-786a-4d6a-88fb-ffb6cc80572f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "877ba617-f322-4150-b369-32ceac433a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14aecf1-caf0-453e-a7d5-d084788d1c98",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8a5b5f-e168-4543-b0ba-b13e1c025ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a3adba-c7e9-4a62-8caf-c5596a4f08fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbedd7f0-fa65-494d-8072-0cc858f906a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d7e9aa4-a136-4bf6-b24b-aa96067f3ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5d5532-0e20-42d8-9ed3-71b8698592ca",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a9efef-3b33-43a6-afb9-1cc8d57f2153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b429b51-30c6-4a1b-9467-572c65a395df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ce21d2-188e-411b-9a6c-dcd6a1118d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0707a346-c39b-487f-a675-c8a45cae8012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c68cf0b-3d0a-4fff-aa51-2ba27f26659f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac80c5ff-0739-4bd7-ab3b-bb8525b82db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64407508-e025-44cf-98c6-e40e335b7696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5a0758-13ab-4693-aab3-09cda76e8f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7189f1e8-2609-48de-9e59-757b9e98bf8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1a75e3-a678-46cd-bc43-98f29305f73d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ac74a1-a29b-4d3e-879c-9790f71237b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a45558-305a-4b00-b16b-128fc0bbc2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2a025c-e56f-4ac5-9a20-49a39e49d3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e40a54d-5b13-4fcd-9830-8ef6d8803a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d1be93-120f-4149-a191-0095863ab0c7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95f1141-0c0e-4981-991d-1083a2692cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a5b32d0-8597-4483-82da-8790eca5dc28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f965a5e-de41-4050-ae35-a8639cab2e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcf51aba-14a0-4419-a012-965fbd0d3a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d3ed61-b0a0-403b-8350-2706402e4469",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff59f12a-7b31-4935-8b70-22af103ee06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b11082-3b1f-44fa-bc84-22b722b669ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0460536-895d-4c02-8dec-3af7e1afdd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d06fc025-d094-4d5e-a7e8-0fee90312db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1b2345-77f9-4259-8273-41f2e7ff9890",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "164b84a3-0b86-466a-84c4-86680300a231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04473c51-b39d-4a9c-a58e-f6677ce907b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94cfe973-cfd9-4ceb-82c4-33a8ef96fb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "36a2695d-c74a-46d0-a55c-5531b70bfc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6928d7a4-41c6-45a2-850f-3bb0389174e0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5670e6-bc94-4f2e-802a-8826d1fe504d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d368d22-68ef-4951-b5dc-1dd4e88b427e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74b79a2-bc4e-4b5e-9641-5618efb42e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cbef831-36fc-4d48-a691-0660df8edb5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00a4104-8934-41e6-9655-290b1810cfb4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8de6bb0-166d-4350-8418-9f8f147b17e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7d077e-5df2-4aee-a7b0-58e1b84663a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044aee77-bf7b-474f-9c8b-ad1839a4d6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "50e11d57-e083-43af-a9df-768f05a09f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42308e6-af33-4405-b3e2-f737835f9df0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ba0ce2-ddda-45f8-bd3b-1d395f535ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df744ff-9a5b-426a-a467-ae6dec2f2299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da769468-7a68-400e-8b38-ac164ed5c48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "72a47114-a1f7-4504-8c24-0536e40fb0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea6e9b5-a093-45af-9e4e-4b78f7e2abd4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368a8d91-4f3b-41f7-a50c-5a255ca88df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "367e48dd-e829-483f-80c6-ea2e35a8a379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b35a28-997b-4c78-98e5-66a9f527f268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7678f98-a530-4de3-844e-449140f5430b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd18251-b4c0-440c-8e76-340b5a843b6b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe0b8d5-a213-408c-9976-3c252cc583bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318bfac2-657b-4a59-a7ca-2294dcd78395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc200279-af7a-44ae-9e6a-c524e879155c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6285413c-2ba5-4550-84ca-1d873b353cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f434ada4-86e3-4fd5-b2f7-c13fc0837983",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20d5c48-7a91-483a-a87e-e61c42ab0949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d04bb63-16ce-4c51-8122-fe61aa173bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9577203-3ccc-424a-8c97-0c214c482055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d48f595d-b387-4994-97aa-232b603cc62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c718c45-1479-43d5-94d0-3190361fb8e0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6502e6-9018-4e54-a029-71b73344befd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6ee245-98f5-4dab-b0a5-9c8d4fa1c1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5991683e-c8d5-4a72-89ef-8d3c435ca8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "130c1e67-7072-40ac-ba9d-a674bd462d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b325d8-01f0-4551-adcb-f32b34b30a62",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f04d058-27b6-43c7-8316-2992f1536e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f00d95-e51d-4729-96a8-330e83113495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025e79bd-0b86-4b62-930a-e13a3cb26dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d92124ed-8da4-4dbd-b3f4-5ccfe0216f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7482141f-6ce8-408f-87a4-0ac6bfba3bfe",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce88fe18-aed6-4228-89aa-48cd66860f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf8cdb28-38b6-41f6-9341-3f100449e58c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490e809a-6f0e-4c8a-9662-79fd18648b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc3ef85-c249-4e67-9b5e-3e84e62b52f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ee2768-7e65-4d0e-9d71-f16cebb09d5a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f11c01-6aae-41b8-8d4d-fcf16da6d37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb41a53-acf8-48b6-aead-c6b4706ee1a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f49e15-cd9f-454c-badf-c7165b9be260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea4d01b3-123d-4443-9214-88f0a1f89f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2fc512-fb91-42b4-8f74-494fa23c2705",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43704c5d-2b32-445e-86f3-f1162777b4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5562d7c1-3d28-4a50-a922-23d0260ab86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99def94-ee9a-4276-8b61-95b10fd78b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f1b6f2d-1212-4247-a1a9-3c9f6066b7ea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "224e65c2-e97f-451e-99f7-23329e7125a6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bed50a39-eaa3-4884-8ae2-4d5997eb31ec",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1036da-f5e6-4f87-bc04-4a91b2208b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67eb2821-33d5-4f70-ad3e-c4328a9bbbd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8188350-28be-4a41-bb43-60cd469ed384",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90a45439-458c-4f31-b6da-e8a563046681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9de3998-306e-4c6f-950f-d5893d49292c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb82e94-f251-460f-a124-5513b4fe9485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9731db5d-ad4b-4e7d-bc2a-34caa32af9e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d317d9e-cdcb-4035-bcf4-dde1b24cd13c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b55d030-c719-47ae-88e6-62c3d177f35f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a0e0064-78ea-40fd-8d34-07188f9d0ff8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0aa4a7e-4c53-4927-b177-8d637c9bc7ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "adab38cd-03da-44fa-9b2c-7bd5becb8c3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b4af496-dc00-429e-840d-6150b3fe0d15"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "59e70fad-ee50-46c6-9dcf-5f1d50f52126",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f7aa8fbc-1c60-4919-a715-5e5d1bc78221"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "72ec6d1d-dc7a-4335-a65e-3465fd943b2a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aabccc8a-e8dd-4b1d-8037-a0d727344837"
                }
              }
            ]
          },
          {
            "id": "b4cc7336-3f91-4f17-9f14-61cb8f9fd84d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3e80de4d-e930-4f99-84ed-5bbb6f805328",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fe8bedc-37eb-472d-aa90-2739bf490db2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8574c22-e789-424b-a17c-6bbb2f0fe244"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7e9e453-e670-461e-89bd-c1fa7bf9a001",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "eaa1a313-81ef-4821-8a57-ba614edbbbcd"
                    }
                  }
                ]
              },
              {
                "id": "415e3d1f-b33e-46c3-9cc8-9528ba270c08",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "285a7963-cc75-4478-b556-49690e4fa4c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "20c95866-9161-42d9-aa39-8534696d670b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c90424d-2ac2-4e02-a00f-58961bca1830",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "de438cc6-1966-4701-88c4-a55fd78d0b2b"
                    }
                  }
                ]
              },
              {
                "id": "ceee0f05-7a95-440b-8e52-1a6e0de43b33",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbd7a37b-b1b9-461a-b79a-5be6c6ef787b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1339fdf1-2ddf-4bd5-a05e-d65da56f1e44"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "acb47426-a58c-4cdc-8398-159cdb643886",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4fe392ca-ec8f-4924-a916-5ef663d37dd5"
                    }
                  }
                ]
              },
              {
                "id": "56b047cc-eda7-4988-9d07-363f68766aa8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcf13061-3108-46c3-8fb6-03fb295b5af9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a483c83a-ddce-4d2b-b6c3-23d3cd0b12bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2c40175-a2fd-47f3-aa1b-877d58163e01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4348b4ca-7caf-46f8-8631-41ae3af7997f"
                    }
                  }
                ]
              },
              {
                "id": "4f6ac027-933a-4046-b408-079c20835bd6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "54a829c9-c329-4ba6-93bb-033e2be97463",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "03d105a2-174f-456f-933c-45d9fd478377"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6114d77-74bf-4bfe-8aa8-ddb95ca96d36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "54b9bc5a-3444-44f5-80e9-d51d72b76050"
                    }
                  }
                ]
              },
              {
                "id": "5218bd3a-36ba-4d29-9c1d-578e81dc8d35",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa4b571e-9bb2-4c9d-b3e0-b245081168b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bc28f95-1bc8-4347-a33a-2abb44b2b66c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "39373449-27c4-47f8-880e-a0962f685c0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d39987f9-dea9-4dd4-a1f7-e78f835f8b2f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a24e27f1-030c-420d-9db0-553ac8e0bdfb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e1535ef6-af08-405f-81e8-0533314ea1d3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6e42fabd-337c-4ac0-8360-021eb21dde29",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af2dc7f5-4f36-47eb-9a01-8c70cad96fc0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c950c88e-b507-41a8-8d50-7b3bfedbf18a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "52c55225-821f-4679-bd36-04a5c1a8dd71"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3650b36b-b90c-44ca-a2ff-6914d89bd295",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "553e231a-384f-439c-99d8-20b7ab9aaf3f"
            }
          }
        ]
      },
      {
        "id": "82c31c4c-41a0-408c-88e8-c7deb4cec6c8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "33b40e08-038b-443c-8c51-9cc179a8babc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b903deed-4cda-4021-a396-1398eea1a17a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "21d91df2-58c6-4391-bf07-9fd2fe670816",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83678a20-188b-4fcf-bb15-e8f1e552c319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "219ac163-cdbd-4053-8003-5459e274bdb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d089c2-74ba-4231-a226-0355a4df5bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a848aaec-0f08-4a22-8aa2-5a9d2f8cead5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7357caff-6d4e-451d-8691-29c4beeec92b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac99190-0296-4aa8-903b-76ed9857abff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4dd2b05-05a7-492c-9837-6d0a4abe0636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a16e2a2-48da-4c64-ac27-7bd4ecbff0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cafe9e3-56c1-452a-adc1-6f0ac828438d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702b1b3a-5dde-49c9-a34e-654274f4fcb2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42a7fb9-a031-4635-a79c-ba9f6c004ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee50a288-98e7-4d22-8866-48e79bcdfc05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "045635c4-97b5-4f75-95a2-e354afe56d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cf3b5b4-0985-427d-ab91-517eb813ac74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4315d0cd-4511-4cc9-906e-79f825d38343",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3537af-bc6d-4934-951c-557a7990f487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48ab81b-1fc9-44ae-9e9e-372b70d71960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5444843f-6e46-42a3-a505-8615b3843b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb46be4e-2d34-44d1-982b-bc8331149b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbe11e1-ac26-4c21-9a9e-1821b55e3bcf",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be91acd-57c6-4943-b97a-4f541c7050cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce2bf2b-a1fe-4afe-abcf-9044658df4de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90ea553-7367-4098-92ba-06ebda926139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05187b4b-1bbd-457b-a1b7-0f1063d2b6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7143bb-bedd-4913-9f7e-c32e38173b2c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72474a39-e9b6-4469-bc87-e4e65dd79859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0209a312-eb2e-45f0-a112-bcf57733056a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f05db69-f3a8-448b-98f9-e49ac7deaba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5271cd44-a960-4ad0-93a9-0aac036c88b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7f8a13-999c-430d-9fa2-a819db48fa71",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa431128-1d9b-475e-98d5-200cc144eef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "668d5bde-825c-4ab1-ae51-a21f5deba6e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc7469f-ca4e-4036-b10b-c196e7647a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "79b46280-b0d9-4cf6-b1c4-06e070cefbc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c244e3c-7e10-4613-91d1-6fbe66600d90",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0fc4ae-0608-486a-bd63-99447397428b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f738ebc-d4a4-43fb-8963-c25ef2395db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb9c581-04ab-4d3c-8950-57ec2d6ccfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff89036-5cec-4284-8d54-13cbb17f0777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398f971f-bdb8-4096-9c20-5388badcfd1d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743bb53a-4a92-4002-934b-c397260cd5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b36393-363f-4da3-b157-d0bf74b691ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6fa3d7-7f09-40be-9e6e-554e9227dc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e885e53-44c2-41ad-b3f8-6ca01420cccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e18250-d907-4118-8fa6-77a75adf6b76",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fff8699-3256-4271-b5b3-7a2f40accb27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb1f25f-2791-4a1c-84bd-1fdd22736dfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa7c46b-ca48-4224-b54f-424db78c4679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31334825-dfbc-4333-bec3-8eae96fc6a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8364008-ddc7-49ba-a081-c73a5b77fbeb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad4bcbc-dfe8-4e62-8d45-8bf21a1dc6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af4c6ac0-e258-4ae4-924e-d64778a9d6a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23739d36-eca4-4b81-8160-6b1d586a00ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "48e95a58-1fd4-45e5-8ae0-cbb0f8b51ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16197ad-5713-47c8-a0ab-56f807854454",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9dfcbd0-d205-453f-8bdf-784ceeb05947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab8106d-22a4-405e-8e6e-57531d2757d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e715fb7-6c45-44ad-a83c-deefafdc5164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7082c05a-1c46-4dda-9bd4-f95e0a466ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e320be-294d-4e4e-9162-47b2575eb0fa",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "964a10fd-65db-4a23-9030-158655475b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c100e139-8f6b-4c35-bd5d-2e1f46226af6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73669434-dc4b-4c8d-ab80-26b2f75d8140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d129cbf6-d86b-4b35-815b-d84f4c5bf507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fd9d9f-8815-4cc3-a383-4d03395b9657",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89607cf-7b37-4856-8502-2121cdd04ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc61bdbd-7b7e-4739-9bc2-b040f148663a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c4a27e-70ee-48ef-acb3-fb6c8a6ecc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "840ac22f-5789-4165-9a91-d8e8e6c456d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc999a93-df33-4a46-b38b-0d346c54e421",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423c3d9c-e418-4b70-9f62-b4c93e5c145b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b1bc68f-1181-4e1f-862d-e2bdca94ac34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecbbc95-93f7-41bf-819c-fa110d065713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d085b990-fa8c-4418-90d1-15473a58e084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f75d418-3ddc-4439-a9bd-cc9f17cb3f44",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa09abb1-d584-4444-9a65-2a9ed4e99631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30fc486c-eae8-402d-978e-80d46d239351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1acb684d-8814-4324-81f3-d8734122dbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "47558a74-042e-46d5-99e2-2fff0d7f0a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e626a679-3482-47b3-8921-546c255fa253",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23916208-276c-4f7b-bda4-3d0f72112117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50619146-888b-427b-8cb2-1e495be11528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e98a5a2-c251-4a01-94bf-3c035a74475d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "13963fb5-23a2-46e3-92c7-c58268074da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c1ccaa-8755-4fd1-8686-52e171d98b96",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6e8251-e48c-4cf6-9e57-7a33ddea12ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46af59eb-e2de-443e-be7c-7bce038fd960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71315e0a-303b-464b-845e-7a06a07ab126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a106d612-23eb-456b-92ae-94857ef26146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a333e66-c0d9-4399-a332-d131aabc30db",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44f853c-1c1b-4d4e-80f6-707f803f9d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77c4ae62-6ae6-4666-89f4-41f515db3056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c871ef8c-3a39-47d1-8f45-3ada3db89149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e259a03-e1ea-4670-94d4-0ff4b1fc78d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4f3562-758d-45fb-896e-b62965945c72",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26def70a-761e-4a26-b213-1852e54f55d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ad8534-64b5-4190-83bd-a84228884e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1828fc-741a-4277-a10e-4353f1eb37b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea59c20-3611-4802-bf57-b6a0e854e837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307f0948-21a5-4980-bccd-c2f3a5f2d8da",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28eaea0a-9150-4598-8605-f2325cacc7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9511cd6a-8d8e-4e30-a541-b9f0f9337d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebac1227-7e51-45e4-a907-8e6cce972794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01e3f72e-8c4e-4fdb-9339-2bf58b9153e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca023d38-0615-4bfb-bee0-5875d989f991",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2bbd39-4597-43c1-8084-ac6205419817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86f0f5f-f76b-46a5-a5c8-c8182d321cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6313506-e13b-4f7a-968c-4e4d5a2a60b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff99f52-f9d0-4178-8d8c-a05e4006cf67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45dbc6f-70c4-4dde-b262-7a670bfc012a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86612c0-b706-4d87-af6a-db3dcd4386bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9df647-3c00-4fbe-8d45-295c91413fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2104cbee-d402-491f-a8d4-4dc6b0324587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7db7b809-1fae-44b4-a268-3527e6925481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327f8013-d9fd-486d-8d3c-84ccab68f3f6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4239f20b-9ffb-49d9-9ed1-52d0da91134f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b70e333-f307-47fe-b41c-81f0146a0643"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ee08bf-6f59-420d-ad63-5bee92110639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af41f067-15fd-4be7-8609-2749ec278c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca660f8-5aef-4a65-b0c9-55841db2a715",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98df9455-e04a-4c43-8133-40e47788e508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c893c8-a943-44cb-86f2-4b1039aa9ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9661cbc9-ab94-453d-8954-5a840667a1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c18db957-a1be-4614-bcd2-4bf23e35e41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75b9e0b-fafe-4eb7-b5d2-68f3e06fa759",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a94bf1-3d78-4604-baea-694895a5f371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3bd3206-0a60-4324-85fa-8ee615bbe309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe423a0-f144-4ee7-9c4d-84560d442e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7144b530-1dc2-43e4-a41e-b617b61884d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b8eb64-8fac-4e71-8deb-79840219ec2f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6c938d-f270-4f6b-b179-988e76aa7a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde150bc-0201-47d8-afad-60069725f513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1070ac61-28e8-46c5-9ad0-b92379fe3635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a556ffa9-1bf9-4110-b4c3-faa67a804fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6338864c-e3a4-4fd2-9e0c-590c5a930bd0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283680bd-a284-4207-853f-cf387c12992d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "411ba170-6b54-4931-97fa-ecee348b98d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa7ba5c-85c1-4b78-a5ee-f6c1885ebada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4337903d-a542-446c-9652-2b3c8812d2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edbb1bc1-f713-4ccc-b7d8-34e55761c195",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f79b6690-4123-4df7-9290-dfa35f95314c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df303ca-892b-40c2-8f96-6755caefb817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d64a0c-8069-4644-9614-2f8f0d0f2456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "298f6684-9ceb-4440-a548-7cdb92b36231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8500d3db-6e57-45fb-9d27-5074b705bf21",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7ef061-e550-4cd5-bcfb-5f40a9911567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e169ff-9327-47fc-9737-30c7779ca845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48343bed-1253-4e05-8ce8-5cb14c98c811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7041f29-fa15-4bce-ad94-856b72bed0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93af9388-cc55-43d1-8ac7-c1e6d4784e48",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f36f5d-3bdc-49e7-999f-95c2bef44f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6179057-de76-49e0-afde-d6b27fd82b88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ae19d8-648a-4742-be31-28767a24e56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3977ee01-97d3-4d1b-a010-05c635d97dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeffba5a-6b20-435e-829a-65fb5fa42e3c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ff3e74-7c5d-4a56-a690-5e9430ed96c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b609070-c51f-4c26-ad87-2a398d58eafb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126328b7-6b6e-4830-9ecb-9483ad8ea97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a4f33dc-2fe0-4e37-96db-6d68b264f10f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5fe7027c-68c7-4a06-b203-1d362edd719b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b6a01f3b-1f52-468e-9661-ce8b2e22d53a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35b7fac-c852-4787-8ab8-3feccc6efc32",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "418e929a-449d-4493-a864-765cef3076aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40bebd4c-988e-43b4-86fb-ef19fc1fd9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cce361b1-e4f9-44c3-ae56-24d79909ee05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95fdcfc2-efde-442f-bcc9-aa14c44a2fd9",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2f4473-9d10-487c-bbd8-a98aaddff23d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fd7cafbc-1bcc-4602-a8db-d7d8d401d245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b83819-a708-4906-8e00-885ecdd90c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b53c0831-8752-4fd3-9d99-48fa95a92f46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c5a6d84-1b41-46b5-b5ce-c7162877fad4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53db6f43-0de9-45b9-8067-4296427a3b23"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5353860a-6534-4256-ac18-dabc0031fe76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a13f9c0d-e997-4f12-b300-79696b2777ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c94309cb-6091-4db7-bfac-d54fba0c0b84",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e39228e6-66ff-4a3e-a559-51796b0c3625"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d4e936a-ab38-4ecb-a44f-cfd6ee7c6fea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37c888b5-c836-49f6-997c-30cabfa7cf03"
            }
          }
        ]
      },
      {
        "id": "67fd53e9-1fcd-4f2e-8fb1-723d261913b5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f855b8ad-b7a9-4f73-a728-615d62257ab5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fbde28c7-7d7c-4b35-be7f-3df9f54f6ba1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b71429dd-0fb1-4add-b808-b3ba29d9d449",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3782767b-4931-4559-ad7a-b23c2b865f4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ef5e02-3fc4-441d-85b0-c579cffaa9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765153e9-17ca-44a3-b36d-4875f2a83ee3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598a3382-8c89-4e30-877a-445f3d342fe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e178d0dd-6c51-44fd-81c2-d192d25e5cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19486868-08a4-48c8-a8e4-338ca47d8c85",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca94d184-9117-410d-a169-a0d70164ed68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "953f538d-7891-4186-a137-a3eb1c2fa6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee45f0bc-0a02-4ca1-9d5b-386213844bf6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72822e15-79a8-41aa-90ea-b94cf2d8c6ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb9be557-3df5-4f4f-90f7-9f2151e307f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2480a18-41c5-4004-a1ba-ef8fc9b2e1e6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c06db8e-a97e-4680-9ead-9ecae0c73eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35a001af-640a-4f99-949a-1b47a84ca874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e939c103-5afd-4897-9108-98f6253fe646",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb23d8b4-6ea9-4b78-bba4-ff97f7367dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "904189f1-0fae-4f90-b2a3-8abb105e1a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641a25ef-8f00-4ddf-8276-459aa7114d5e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51856cd7-31b0-42d2-8edc-597135a6ff7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8686cf-4504-4582-9780-17ebefef4322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05562d3a-ce84-4ab5-8ab7-628d3ca36546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aa85b90-49c7-464f-8757-7e982b4b5d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9b6c5c-6f34-453f-bb35-5ae108403a12",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377b8c5b-4c53-4fd3-9e4e-ed61faea35ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43d2db65-5878-4b8a-9714-917a376a596a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b8dbd8-3164-491b-b177-5c557f5bb8b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebc01d07-0e41-4396-b58e-cc49ca198395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9fc8b7a-df89-458b-a5fd-9fe8e9379717",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9279acf0-cc64-4bc8-862a-fe65fca758aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4adbb0be-2d5d-4450-a4ab-caa9ae55b1e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f91301a-7fd8-4921-98a0-9ae4548197c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a31bd31-86c3-4995-9717-63626b6e66e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337b7647-5bd3-4527-80df-e0281f337ab4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61fcb97f-82a5-4067-a241-47493fce69f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bb8dbd5-3b41-4208-b00a-05153198a724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d7e41c-ed44-4f32-b875-b6b18629eed9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b97c3832-d1fd-4f6c-8b19-efd199f6a638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52864051-1585-4b2d-a643-0df16b2cdc35",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927f45b9-98ed-49ad-b470-d80c116bdbbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57aec8de-8aa0-41fc-8b45-d9c65be9dd08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d47619-6ef2-4eb1-b3eb-b260570c7cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76949dc-c24d-44dc-b662-4bf0e7c4fa4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745f89e8-cf23-4562-aae2-d97dea5a61bb",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d73c558-c161-4db6-9f13-529c4ed0a6bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ba87eb-8cd3-4ef3-bc5f-97d8c46fb612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc16d0d-f009-4d07-9d4b-7b8f989164ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "887ab130-6513-4c2b-9a2e-08f23cec089f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20481f0e-3265-4f63-9a4f-b343b846bd8d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "157f06a2-61f4-448a-9e42-497341a4166d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74a2de17-d629-485b-8f98-213cde903b81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf436f99-cf3a-4abc-a131-073f5332d207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097b5e4f-60e6-4c0b-8850-d48c009e846b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eefc183a-fe6d-445e-92b8-4fe6fc6fb0a3",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e7581f-f0c0-4508-9f7d-3011311e7db9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba76d645-a99a-433a-8dd5-15421dd215f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbaa821-4f68-4038-8c5b-23a425027437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30b46c3f-c0d3-48d6-83f9-86756729d32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ee9fa1-057d-4ff6-bf38-b8d4e52a13a4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ece9cdc-dc88-40fc-9bfb-be81c50dd9f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81334913-75ca-4862-b3a6-01fec53313ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfca1699-941b-450e-8dd6-110204edc22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea78623f-18c4-4d29-b4fe-6cce49261460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2efc5c-e65c-4a34-a3c3-f7cdf1cc5a29",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b1256e0-2984-48b8-8966-ecb3d950afb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e981ef39-d245-4466-944d-71773d8464da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "273a9430-fc59-4b5e-b74c-77fbde181927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cec92aee-e5cf-41d5-a1a1-0cdea3571d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc07a219-b03d-403c-bf78-c12d18688e17",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af334b7-cee2-4552-9168-f6036642cf4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81a678b-9649-401d-8b61-2b1a67ba8c97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7f5012-2053-4678-92e3-3eabe95c15e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795cd328-4066-484c-8fb1-a17c0280bfa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656aca12-9602-48c8-9f9a-c81ed115df4b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea9f185-49a8-4374-b801-12e381766a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "371f8ee9-f0e1-42ec-ba2c-2b107411e07e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd5f298-f532-42d9-9a16-25ce0de24173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d904774-edf0-47d9-9399-259b702d90d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104c39dd-d036-4b7f-9a3b-b94149444741",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681cb5a5-7377-4fce-9914-c13b3fb8130d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2935fe6-634e-46e8-87dd-54073092188f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa0311c-d58a-4b49-bb6d-c35bc0087f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d11eef-b70a-431c-ac9a-92c68c6bb0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17d0f505-f4be-44f0-b56e-e5b497b4fd7b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b182d8a-7430-41fa-8cd0-8f5d0106bf6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c04ae2-c447-4c00-8de6-611fc2289833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "434748da-9497-40a0-abc2-08c5a8dc71e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66da7d52-f990-451a-ae11-636b48a2020c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62101af2-612c-40a1-bc33-e318c61fc078",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb5e02c-f6d1-4a14-8e11-375645555b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35482901-481e-4f56-9ac9-9f0401af89e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3feb341-c759-4097-8f30-4c5851c395c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77035af0-b6e3-4d7d-941b-5f10c31eb97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cf6c9c-6cad-479b-b3b0-624f90461a8d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eff13dd-40d0-48bf-a994-a87e622a577d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f5f69e-19f2-4efa-a9d0-1064758f610b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f005b37a-f3a9-4c69-a6f5-e17ca96f8e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f47ad24-12dd-4fff-8a46-49b066d03c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e077dd-7efb-41f2-97b9-77ecbdb28a88",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f07d1a-4cb0-4094-a905-44492f33a54b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca04c4c-1077-4c1f-ac66-83c146ae13b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6faa2f8-7613-4f43-a57c-5cdb241bb24c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1919c3-9033-4f4a-94ba-b1d970d2aabb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07989b8e-1967-4899-bd32-300e7935f76e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c1692b-500f-4482-b2f3-49c9a4158b78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "794a71f1-32ea-45f2-8cee-004c70695bce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b11dd9-abcd-43e8-8e52-64462a27bb19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2d91e7-5f44-46a7-9fee-f8558c585caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1a2186-4d4a-4953-9a3e-845150326633",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280d3038-5998-47df-bb88-11fd165283ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4600201f-a175-4539-b176-ccf723e3667d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803f6d36-5765-42dd-9c6e-660e98274796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70ffd6f-856f-4cc3-bb31-9dd91f840ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d575a037-85d5-43fb-9c55-7675b88b8fd9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423ffefe-99c6-49dd-ad33-ec53ab289745",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d96978a-2cf7-4106-8f59-f49178f48c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a093a8-cf5a-4d24-bf27-1739656883cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af178ab-90d1-498d-8c79-ef76bef263d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3c1da9-7d21-42bf-9192-6ad6c5538c69",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e35796a-dada-4fc8-9352-9f166239a133",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb9fb94c-7a3b-4e14-872c-770f76cce3f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89093ede-e5fa-45b9-a67b-577147203bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f463ec-03d1-40e4-9143-a77b7973cf1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5bdb03-2a76-44b7-a799-04d177f6aadc",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f9d732-0265-44f4-9e33-5abd2639b64d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d8a12d-ec79-4dca-b445-0a10acee7d42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1374a98-9026-45f3-8b16-28a21d47200c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e379eb-228c-4d91-b859-fa1160a34912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94662afd-0dcf-475b-a8f9-d090d627ee95",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949e389f-4c63-49ba-a5bf-5fb3696d1fdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a192d46-46ae-4ab2-a0a9-7266fa5cf946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9588007-7817-459f-accb-823cfc193514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5da6aec-9392-456f-a7b4-7d02d9d3fcd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87933df-c510-4234-9b22-da25f2a979d8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58efd216-ed97-441c-a442-9dd86201eba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c72937c1-8982-42d2-8d53-17e030ac684b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4f3545-bf28-413e-a000-a86f3468a694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3489fd-2dba-49c9-be21-ff0a7b719997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e45daad1-7e28-4f0f-89c3-e5e86e10b6d3",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d76b35b-6ebc-4ca6-b18f-ef952e102b59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e08e897-5f94-424a-b03d-725279684441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6eecde7-ad0b-4bd7-9639-00ae07a6d990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f773779-abb7-4a5e-b839-afc6053f3426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2599a698-4a90-41d7-8021-9af4c28d46ee",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0faee3e3-ff11-42a6-b7fb-2514b108bd4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7bd5f42-fd15-493e-9d42-ceacf3219134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb2132c-5a51-4cb8-bdd7-dd0940fc4362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f60ec0db-8831-42ce-93a6-9a6b9244a791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9adb86-edc1-4a17-bbe3-b1fa2c4e5f4c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557c14c1-4fc1-433f-b0bf-28ee9dced88d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89cc0c97-816a-4b7c-84aa-8c30a3ca0bcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec403f7-befa-40f6-a61a-a10519d6b2c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53862d26-a4ef-48cc-be61-cab3cad96ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c3ea19-c44b-405a-b954-afd27955381e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8de26c7-df15-48f5-a0d3-b3061e750e0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0cf9301-6d67-4a7b-aa4c-67b12d9d256f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10153de2-7083-4221-832d-294948d8303b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4380c0bc-ae7f-4857-831f-cbececb77212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f76b91c-6f21-4774-b207-296ba2476ac1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0023d0c9-bd8b-4c6b-9fd2-3effbb34529d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d9c0962-8c35-448b-b7ad-9b5f394afa9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cec331-5307-487a-961c-9173d3a7e69a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8281fa19-c1cb-4cf2-a431-ed89326dc603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23098a4c-1f1d-4d35-b921-4b742642bcf2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38bfcc06-bee0-49a5-bc60-19b6ae91cd63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ab39b8-9be7-4466-9971-84ecb1f67ffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10133f2-ef37-43ea-beea-17d4182b671e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af2b251-50ef-4ad9-8753-053ec139e528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d138bb-bf07-47a4-8afa-f7221cc0c9be",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b78fe5-319c-4e9a-aad5-f717996197be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a540161-f563-4e4f-8c55-6b8a9598cdd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dfe8bbe-0495-4a52-985e-5609e59414ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a423f058-d364-450e-b03f-d6e0eadfac52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a6c189-961d-4bf6-b1f2-c147ee8506b3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56064b3e-6530-4824-8130-1b2a15421f83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b57df802-ab97-4bd3-8b1e-b61df86c9caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd1f659-5e5f-4ebe-b247-6ff4d9b503c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e21ec05-125d-46fa-8d57-613c71de227e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74437fb7-a5a3-4485-8872-9ef266848451",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c849a01-477b-4887-abb3-1b25ef225b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c13bb55-c1d9-4eb0-95ed-b8dabed3d9b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec842753-91b7-48ec-a931-b17e49b127b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b93ef54b-400d-4432-b0f2-bdfa4fee5c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52fabd1c-03e0-462c-8dc9-b282419ed396",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d0ef4a-db53-4c79-ac18-d905aab7a447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba5b071-45f7-4c71-bbfb-f9e7c85c3b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0555e645-21f2-4f3d-83db-697c97d921e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da29e10-e42d-4131-a13b-22acadbb7176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a536837a-35aa-49b3-bd7c-88ba1ec4bfee",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad77c4de-49cd-4d34-a662-89a70471866a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c01b084-b59f-4c41-af48-e63b6950762d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5e5fb9-9a65-43bb-bb2b-e26d2b8adb2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "799af36f-ddbf-4c8e-b594-718579805b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d5af62-0ec6-4be2-aecc-1d91f8bed3b6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a9b1cc1-c65e-497b-bbae-c512cd29f19f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1c3160d-5c95-40f3-9990-e354b859b667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f0c195-c257-4c88-b6ed-0b21a1ea9a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f38cee64-00f0-427a-a4c8-6751b7cbeccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83e64b4-d79a-42a9-88d5-3a073b9d4f8a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa204b23-9026-49a8-8c96-6ddd74ffc9ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154bc8ae-2aed-46e7-ac42-1ae08e441c37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad7eb86-b46f-4353-bbc1-85e4f57b819e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4df72fc-5b87-4afa-beea-67762a4dd1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efae2a4-ef72-4fc7-8f53-0766b2e305e7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d5bb414-e0e8-47c7-b134-cb3ed8fd0fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d2d0ce-1200-40c1-8474-99b754bde4d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8743f9f-d592-40ee-b0ec-ee867603a74c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "739a7578-739b-4278-8d1b-5ca45bbab5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fbf393-2a49-40b6-8586-b44185e82eab",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace49569-b6ae-48db-8e1e-ded7abaa1d3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d120ab0-7b9e-49a0-a646-b6d82f9d94ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05fb07a-2218-4748-985f-069c4b6c7e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb9beda-03fc-43ea-8436-da2fd62d405a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee99e23-1f37-4be1-b889-df73e9bc83ec",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8929001-4d27-4c70-9417-1bb8a26fd142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8279b75-0e71-461a-a62e-c3d453064655"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b17f86-3f0e-4cf9-8c9e-ea5d7954a0d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0acc1f-431c-4f59-8572-c3154869324f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2158f4ce-7f4b-43bc-86c8-208aae391266",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf528a3-2b78-490a-aae0-68234740822e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089c614a-0ff9-49f0-b0a0-0497c5c93f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec5c263-011a-4831-80e1-255d0882b7a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb17c17b-2f97-47f3-a2be-f10775a8e8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f74d0d0-471b-4209-93f5-37ad7815b452",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d74c19-21e6-4318-bfbf-6b367778ce25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2080867c-4c3b-4c6b-8dc0-fa95abeb884f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a55aa47-aa3d-4fdc-b863-329f4833e68b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d89aba81-7691-4084-817a-38683cb1f635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4023194d-3ffd-4ce2-9299-6c949890355c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5042f77-c778-49bd-abca-3a566d039be3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a31d5281-3258-4bec-af08-d7f4a89d5b56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6d7fc3-f2e5-4c7c-91da-592abe49c093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c716c1a8-0ae9-459b-97dc-b2d31abe75ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4911f8e2-e0c9-4319-a4fb-79584eb2bd19",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057207dd-b3d0-46e0-abf1-6e4dde46a201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df22a6e-07b6-4e1d-94f6-6b3b66bfbc9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68822a09-0ec5-4aac-99bb-3aed030ff8ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b88257a-5039-451f-b8df-b3ba54478c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e6afe0-a4fd-48eb-b6f7-389a6c51219d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3b9cd7-72d1-471d-8bbd-3363e104457d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597f276e-196b-4e46-a237-bd6a2720b3ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2152afb-b2b9-4f40-be10-ff3047192eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9236bb3-8efa-42ff-82b4-8f86e8c73466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6e16bf-52d2-4468-9aa7-4b678f722a1a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "febafaf9-f433-4083-86e5-5cc9be449b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0197205-ff08-4e64-a0b9-623967c33851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19b7f3a-1683-4c90-990b-b2ccc2e3d9ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8a46191-8325-40e9-a1c4-cf43eecdab7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5c13f9-1b95-4876-af17-1335853b881a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ab9109-bfff-48f5-92a7-b5528469766f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77d44f06-6887-4f13-b42f-0bcfa9021556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d646310-3f40-4454-b5f8-d2dc62b4b30a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "effdad31-9b24-4df2-9e68-d28f85120b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e39c31-0366-473f-bfc7-1ad8f6435d31",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096d0caf-2845-41b7-90fd-b92b22bdd857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00346932-b3d1-43e3-92e8-df3468dcde23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02155b13-ea1e-4494-8619-05184c53ed86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3cf5589-bdba-4e74-9e9a-460acb6950e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb7b6b0-7cc5-4aff-a46d-9e402a64474f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd38efb-7186-4f2c-ad8b-633c436cc9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38a256f8-cac3-4990-befb-38a57aea147a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b3481d-6417-4c69-a962-0cde31afc1f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1662e5-6b25-40a8-af92-4990d9d2eb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c14aa5c-5753-4904-90b2-530daaebdf28",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f510f7-38ae-4198-b4b2-5b75e6e3ad3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781b0fb6-65df-48f0-8d8d-f9caf4f7b33c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28062658-9e05-4761-baba-a5f145f2714a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bba0b4b-8e97-44f7-990e-0d11ac627670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8dc43dd-b803-42ee-a24f-88db8fbaebe9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fcb1d8-e033-4a80-88db-9c3def1f767f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba900f8-981c-44c4-8ce7-ceb5838c04c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8c2f8d-76d8-4115-81b7-f2f66f80ed49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7fcd2e-e0fb-420a-b499-21636aa86eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fbf284-a9b3-442d-a523-97e7051ce8c3",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b038eac8-382e-42c5-a283-e10dc5534961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69c84d2d-854c-43bb-9d79-c1fcbdb460b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80bbe74-cf65-490d-b366-5ed851638b6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d9f6f55-f8e5-4286-b9fd-482d2c0f5007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d16524-0712-4335-aefe-d0a398b60781",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0733f5e4-64dc-4921-b397-141cfe0501bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49661317-74e3-45a8-b9d6-fbe8a69f6b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9561bf-d98b-4ca9-9a79-be86cd4342cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0febabab-d97f-4d14-8772-0c7544f4a5ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84417b29-e88b-4b84-a3aa-34d94484bc91",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e4015d-667b-4534-b0dd-104b368f2766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c56460-3b72-41f4-965b-2d3646c7c05a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb2f25a-4496-432a-a4b4-cbdd7e62aba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a0fa3a-932b-4346-8c00-59f6453b8e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654dce9e-e0de-415d-a20d-d4e373ffeaf3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc232268-1da3-47d6-b825-0283b0b968b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c443b64-cdc5-416b-9e3c-64bbef0230f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "105ff335-af1e-4778-b459-e9bb912397c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2523f56-1233-480a-ac41-97c0daeb5077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62dbcb2-457f-41e4-a9bd-969412c13a69",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e231020-035a-45b8-b1e8-76a0d807d3b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c77ae003-20c9-4421-96f9-d3e7f409afee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b012dba2-ab56-40bd-b9dd-e6ae59a6165a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1d10fb-a31b-4f6a-8658-b6402dd33e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fade7830-a35e-4645-9e93-0a9b3c3c6949",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a6bc27-309f-4e2b-8d44-076e0c5a249f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd987ba-7f32-4804-a8d8-9133427eadc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e54f3ae-79f8-4ff8-a204-54419d86d8c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "519df338-9bab-4606-a580-2d044ac96a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9f71c9-4bb0-4899-9d0a-4acc74ae78cf",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc68b3a-ec6f-46cf-b592-1659c29eb23f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "123ad7e5-7be0-420a-a6eb-159ab7112f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb4bbcb-9925-41bd-b27d-c445962566a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a29339-f030-46ea-b0a3-daf95c6d9a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38c2a5ca-7cac-4a51-8969-083c0733b58f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c266c6-bf53-4c36-9e27-a5fd6e07f806",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce8a4622-61f0-4379-869d-f7f817bed5e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c423abcb-4915-4942-a54d-211b606aa3a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a896e14d-83ce-4b92-a28b-dad2fae65f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4eb9ee6-46f2-4359-8d5c-71168f650229",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81f6a8ea-dce7-40d6-8c08-b37bc19db1ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d638bc1e-dd28-4372-bc15-7291b823a09c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb53f41-3ee1-45af-9299-12be40abaedd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c6cba8c-b645-4a36-9180-42b0f71fe8a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96940d7d-3b2f-4729-983d-e14bf99045b6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ecda5a-1a23-467f-ba1b-3a84f45dd39e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55e74ea1-4387-4661-bc71-a69264a0e214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a525f9cd-b005-4d42-a125-208db3856109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac933828-db82-46c5-bcb0-0ffaca070da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a78c58c-77fb-47a1-9f52-66bc51536ad7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ece3665-7014-4273-b98a-344f9af8f005",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6284eeaa-d0a6-4255-8a2c-d8368010c6a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c6d15c-527d-4837-83f4-9b3505370ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0606a4-f1dc-4a84-a409-987e3cf99343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b7684c-c209-48a4-a4c4-24390206d02f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8036d26-e9a2-4387-b739-bac4a8f605ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e2d4557-c761-4028-9209-b3dcbae0b52b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3553847a-e652-470a-8f70-09b08dd9228f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0662b0bb-8f22-494b-878b-e2fb4abf23de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c0551f-137c-4486-9501-cebf7903b6b0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893eb7c8-1110-48d4-b8cb-8ed539b87d5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "252b2d7f-9a10-4384-93f0-98a3f987926a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8a5281-81a5-47d1-a35e-6546e49c7e00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "423752e2-25f5-42d6-89da-c8ef3aad4f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc80815-3a5b-4576-9b18-397218057edf",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e125e1-8542-4cf2-b525-ce8c24de608e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3231d480-add1-4d6d-8f7c-9f9db88b679c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6caf81f9-3ce4-4402-a403-033379c0b9ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1851926b-6aee-495d-b204-99b6d4624a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec80412-e43c-43d1-920e-37d53bf568f5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60c0314-0e1a-45a2-9143-008fd3fb441d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58a6ad1f-8a1d-4813-a801-c363583f4117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a32ed7-38b0-4506-9823-41e6f1e97732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91664872-60df-47a0-a41d-2f9e4df16d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b49fb2c-0cdc-4081-8d95-1bacc9f9fc9d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27722d8a-9481-4528-b7ea-33aa59119e30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc715830-fe44-44e2-9789-80230bd8e60e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b1f36c-e141-4911-ba0c-59f710ea3e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e403cf-0e95-43fd-a5bb-b59cb55a213d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e8dd4d-0000-43b5-8f1b-08c7e993c24f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ece607-a83c-4065-8e07-6cfd9118c311",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "488f8920-fd74-4666-8308-a86ee98ee0fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1fac36-890d-4996-afb2-67c3ac3dab90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba975b6-c2cc-48cb-b77f-8a26167d5fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87bdbf90-62a0-4c4b-a039-9e791570851b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619b466e-b438-4576-82e7-b4aae11b8cb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76ef70c5-e1e6-47fd-949d-e96bcf14dcc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd05a417-ffe1-4226-8c15-18b944938cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bf494d4-fb5d-489f-8a34-4ddc18f290d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047ffee1-d7c5-4605-9a54-f182bfb70677",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ea85a3-dcf0-4bcd-a7c6-eba0627285ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78958607-32a9-4b4e-8ddb-cdf4046100bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f2be8e-2869-4bd0-ad07-917c6e78fd17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf336ee6-27b7-4a2a-b625-041dfe41e6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba95dd7-d6e8-4d25-8c10-20b186382221",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2c7a48-28c3-4808-a27d-ca63a21e0112",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4ffc374-3465-4b21-a6b3-96bf590bceaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957ad418-514e-4a91-ac49-f23f81316a33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c51f92a-ef92-4c2c-bc89-df264996f622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178e5ba3-3188-48b8-92ce-80f6f8b680e0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809cb5e1-8ff6-4e1b-b33f-d5c5add12399",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e63a118-8348-4a55-84ef-315c6250d185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f52e2bc-b888-4f57-99e4-8d942be8a3a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cfac399-753b-4982-8343-dad69f7806eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068bcaba-db69-4cac-94b6-591dcb4e3815",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed09c30-2bdc-481f-b645-1cf40f074be1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59818cd3-fc69-485f-847c-dc976676adaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c994f46a-baec-4e25-bb4a-4d4a1d02d11b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99939841-ded3-41f2-ae23-6842027f8062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f02623f-5034-4ded-a737-a743d0032e8c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43b4fd9-2de5-4bf4-966d-bc5c17f03f9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c136d070-3f46-4202-804e-d4bedac971c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3b3f1e-fd06-4b0c-bdf6-c6419409591d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82285c49-5bc6-4b8f-a0bc-521e4b96d5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b13043-06f4-47a9-b8cc-65d9db42db10",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db842858-390f-47f9-afc7-75846aa36e9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70d7fef2-5662-42f5-9755-e5f0bc0c9c25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3c2666-8671-435d-9350-43577692eea0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5350c3-374e-4008-9c0d-997dd7afcd55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a9f41e-5250-41cc-b117-27e62fee7255",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f282f13-1a59-424a-97cd-dae6ec1ec54c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e525e57e-d118-4d33-ba6c-0ba7ebbd2bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc1ecfe-411c-4f36-82b4-b58705b3abd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d2d879d-afe1-447d-a33d-b5a2296892a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef3e4d2-5045-478b-a24d-dec8adbe361c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5260fc-aee2-44ef-b00a-15b0c4e2346a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1034af9a-03e1-48df-baf4-b2af530e63f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c479bae-be5c-4796-9e2b-68507091a339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07380a6-4e3c-40c8-bcb5-25820ec26e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2b9aad-1cbe-4bfd-bbeb-df00ece66da2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6247a9e4-3848-4ce1-a4a1-cc54f033e712",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c76f47f8-c923-4f39-8572-73851910268c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6300526-2853-4073-a952-69377614ff8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b08162a-3a91-4222-b96b-f149b7a062a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9d061c-53af-43e5-9ab4-2d120b6d94ac",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52eb89a5-0e1a-4dbd-b521-042a33c63f1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f01411f6-d321-4a8d-96b0-01954eee22c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f0a3f6-e9c4-4a63-9dae-6daba699045b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bcebb4-c3b4-487c-8d98-0532221ad01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522c8c0f-0827-4c23-ae88-c50e258fc706",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84884b5-cd9c-4260-9280-34e5c68ec482",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ffa2a93-9f92-441c-885f-a98ee4e03f7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0f0f63-b89d-43e0-abba-f4f633e709b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b52548d1-7c0a-4ff8-94f5-b0844fcebfc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505f6e61-50da-411e-a6d1-871660054540",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85c9316-7d57-449a-bff5-0075ef409a7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3f4d171-9efd-42ed-8f33-91bdfca6985c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "598dd1dd-87aa-4a7a-a13f-457859224d2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e6f4e78-8608-40d8-9097-1fee8cb0ca2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6800da3f-a98e-49c0-8489-9c1a763b8ea3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c3dda2-e14b-49c7-a00b-0bb4eb124337",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e394bc7-a6bf-4398-b4fd-3d82cc9b8c2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac3eb10-4f59-4b45-82cf-1d05d0ec478f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dae8966-adbd-4e11-a4a4-5ae775295963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf5b655-650f-4d3c-a573-20e1e3e69793",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5cadb4-e588-4980-b331-521ed49c3457",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9298d1b-9e73-43be-8375-406b46cc42a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112a7e4d-acf3-4739-a4a5-9c38589fbad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ef916c-5868-4388-9ac7-d33c66a72616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95741c0a-5f28-4c9f-8f78-27942873285b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aeb53dd-25f0-47d9-857c-cfacfa54a80a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "339070e3-76b2-4351-b197-621f04b6b1e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6509fbed-30ad-498d-8935-17fb3969aff7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca6c8604-0d1a-4606-9414-0567508f82d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871469a3-7005-467e-871b-ebaef86f0991",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efe44b4-6ae2-4603-a6a7-a109a4b091c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2485b87-b566-44c6-9cde-b833e6ad8928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe96eea8-ecce-47b1-a1f5-3db5160f245e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17fa3eff-083b-4365-a7be-979f45933e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a15891-5910-4e6d-b6c1-2f40ba592636",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab21871a-2afb-46c1-8786-0f388b0e91e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0df90ab3-5543-4a37-bab2-8d5f354ee742"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43be11cd-f3b6-4e2b-918d-663e7e83ea6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8f50e46-610b-469e-97da-19b74cdfc4aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625bff88-b957-4025-a6c6-0a992a796a1c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e86a1c8-9357-4515-aacd-21402f67d74c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4fd02e7-e4f7-462f-8ad3-c26503ef8924"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a72dd42-a0a5-4570-9257-f15f795f0ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182015fc-550a-4c14-9644-5249043922e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b379ce-055d-4ee8-8481-c5e6e031dcb3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4b38dd-0d9b-469f-94ef-cbc542d4caa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b27858bf-5563-4948-ad94-4e5efa495923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bbd4d8-ff73-446b-8333-3630f806a2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9db02148-dad7-40db-b81e-3e9962ba8628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc1cbb8-d66f-4ee7-9029-8cff42d5a62e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755f647f-d2e5-4539-b35b-55c6b6bc651a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddbdac1e-31f3-431d-969b-bc534e460dd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1716162b-d787-445b-a95f-41f06a6581f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf36d646-c605-4612-a1ba-a3609cd1987e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a61994-b44c-4bfd-b7e9-4fe6ee90683b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e378b33-8f98-4db9-a038-948b40e008b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ef1fe0e-88ef-43d2-818e-2c13eb1b9dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "847634a9-8cbc-45a9-995b-c587f55f702e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eb4abef-e0bc-4fda-bbb8-83f568b79893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85309de6-9687-439b-92b1-8df9b93fc931",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8c9db5-8df4-4683-aeb6-08acf82b0d12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c34346db-061d-4661-a5e5-68a5d783c175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7e7efc-4129-4e64-a4f5-a4ffcafc5ba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64362c9-50ef-4649-9834-f59b4589f18f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38ca1a13-c928-42f8-bdac-f28c77de85b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "007b1f96-75dc-4c18-87bf-13eb14fd0db5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b18f9286-b34d-43d5-af47-1a90e28f6448",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc8c93cf-151f-404d-bfba-ee9d9fd92954"
                    }
                  }
                ]
              },
              {
                "id": "dabcac94-d35c-49fd-a084-c2ffb4528596",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e0e8f42-ad50-40b4-8450-c8e40e961d1b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4202fe57-e53a-45b7-a5c5-5458f3889429",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "77e3d36b-d5b5-462c-a22a-b3566cf00c70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad130a57-1f3c-42f6-b377-467f9d92f2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "940e5058-ddc3-44a0-a84f-8634a72e245a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e85bec4-6bca-45e9-97fe-b01f4ce4d04c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62004b1f-c219-464b-8876-d5cb5cdd953f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c1d1cd23-c2cd-4bb6-a711-21450fea1802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3a35f3-d6b7-4231-8efd-f778d8cb4204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5039c22-7bfd-4dba-b7fd-94b96eed1040"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee02801a-b01f-4dea-98aa-95d97e07eade",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2419910d-ed7f-4f8c-ba17-7d5e602c0552"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4ad96d0-ddd0-4d9b-ad65-ddce15a7be02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41fb10e9-3e2d-417e-9b69-8c66d624b2a1"
                    }
                  }
                ]
              },
              {
                "id": "e920f399-47d0-4e58-b365-6ed91929373a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "fba89e05-f7de-49a9-b0bf-b09bec04ce4a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76cf99c-c174-4e25-92a9-3ae3a5bbd8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4f47f415-ff5d-47d5-9272-4bf03286e89d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d489f71c-f761-4c76-8b33-efe877c0b750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c90875bb-e7e2-4b63-b65c-5b77dfb93c5a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4c7c812b-5fca-4ddf-9f09-ab6a28dcd9b9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "574f6e53-57dd-4c5b-81a6-54884b88749b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db292266-b6c0-436d-8020-de46e3763f85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "392dba56-9e54-498b-8b0e-e9601f4e77c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f954c845-3f41-4330-b83d-3cc3b4b5ec21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5564d4b7-55eb-4afc-b843-5902a947e749"
                    }
                  }
                ]
              },
              {
                "id": "be2d5cf1-04bb-4bbc-ba78-6a067b20811b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a8155f9-eea0-426b-8f2e-a35c5d8d39a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8d8b31d4-b1b3-4955-a4a0-200e232ea8a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2926d25a-75ee-467b-ba87-a90ac2887d0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93597d86-f73b-41f5-ac2a-7251e9e5894f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95c7a6c6-38fc-4d77-abb2-748f032ce4a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3e3e38da-e648-4c06-806a-ac52389a44fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d30fe0bf-900e-49cc-83db-4e97723284c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eda7aa6c-d741-4dae-8e07-9cb2e055007d"
            }
          }
        ]
      },
      {
        "id": "7e1a0adb-d320-4de7-a94b-9cbe5d6c06cf",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e838a268-e4cb-4e25-8938-6d458a52e14b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db10cbd3-0d7d-4603-ba11-a605ec465a36",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e65156d5-d03a-4bc4-8b0d-598d944cfbff",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f54c26f-c368-4cc1-b1ef-6fe781839c78",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c5d4d5e2-4c55-4437-91ff-52f4994654ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17cc6735-113b-481b-9627-c4083e10deae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eff408dd-3fc2-4bfb-a744-99446634c18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79e08c8-5cbd-43fb-889b-62de176984fb",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63f5ba77-b119-46da-aa5a-db32bd743ffe",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3c15e7cc-e865-4573-9f2c-4befc0e515d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b24e0a-a1ec-409b-8df9-1a32879350fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3fc5c0d6-c9a1-4f04-a1e1-f95dc48edb5b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "084e93d2-d8aa-4040-9005-57b2bf5d0e2b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ef48feb-ae46-4c4e-844f-1c5fc189cdb1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48fe3432-fa92-421e-aa4b-a55560195701",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc5174e9-553f-44ea-b29d-9b7eefc8e53d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac76bf3e-4d16-4d04-a971-dee600f9f6ef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f71ac15f-6870-4dbc-aa53-0c8b8fbf496e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "09b802f2-9fec-4f35-bbcc-5bb19f16d2b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29e5c939-91d8-4d34-88c6-b127e1911512"
            }
          }
        ]
      },
      {
        "id": "15b60f58-d60f-444e-9d84-c693faac3dab",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "97f3eb9f-88cd-4ac4-ae3c-58a169442591",
            "name": "Negative Testing",
            "item": [
              {
                "id": "678f977b-fdc2-46bb-8214-0c6256e2a2ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c1f6611a-058c-4df1-b2bb-c06f1968b3b3",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb27760e-b7d7-4d63-8858-23a48cc37052",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab8c4f8b-7e96-4f8e-b5be-da5d02d1d6e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfcea23-dc65-46ce-b6eb-a410af161a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cadb24c6-e908-4ed5-b022-fbe707f4f953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93299cc0-5077-4c1d-8656-0e6553017080",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9404ec95-71e7-4afd-ae9a-658ef8f151ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ba72dced-21b1-47f7-a2d8-80cfca8aab46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b92ec1-d2d1-4a64-acfa-717dba74022c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c363fc34-0c31-4649-8c49-f7f80da682b3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f99af49c-f0d3-4ce8-91ba-aacbb58d5715",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "105efd78-ed47-47ec-80c9-05ce6e9a8cb7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75de5c6b-30e2-40fb-b4e5-df4dc2e39a79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ceeb32de-4d09-41bb-8c52-c37a0e720688"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "997f356f-21f1-4a8b-8684-479548cf43db",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "186f89fb-3f4e-47ef-bb00-f3e7686a544a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "613f0c0c-90d9-4fe3-92eb-9e8787fc6cef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cdffea94-86b2-4e0d-a23d-71ac7e5dcc0e"
            }
          }
        ]
      },
      {
        "id": "7bf9aa2d-bf27-4a29-a2e2-41a3143c5269",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9f6388b9-734c-4be4-8062-52ce01bf7800",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e899a66-4b05-411a-bdd0-cb5c43081806",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86ad3097-f7ab-41d8-a9ab-bc1113ab038b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be26f79-68a4-4696-b013-dedc5b7dfba5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78b2deab-eda7-4033-9ab9-3d7cb3d79baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b19db96-adcf-49eb-ad1f-36aaaa717c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84b2814c-c5ff-4283-ad8e-775c94cee578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b549ffe1-479f-4e94-a97a-c9eb668b6490",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6824e04e-4547-4408-a30a-6db3bad23c35",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "949e16e8-c6ee-41a0-9985-b7666d8e25a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ce9765-07f5-4144-87be-6d160a7a9f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca09a0c1-6b63-420c-b733-f2784aedb905"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82acc148-8951-436c-a42c-6b544d9421f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45e7df95-c126-4732-9fcd-881d84505181"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8d74570-828a-43f9-a94f-3e33419f1cca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da14ab27-7ac1-4547-b5c9-6469a0f66083"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2828995-6644-44d4-95b7-3239bb4a47b9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1f356b30-372b-4f7a-9bb7-ac6b345378fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b73030e-d508-41d9-b0bd-8ffeab7a4899",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "162198cb-ea00-46d0-8604-2fe3742a4589"
            }
          }
        ]
      },
      {
        "id": "c98c5089-c53c-481e-9376-4aaa4d50d821",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "babee55f-3acd-4410-8796-50cd7f1c05cb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eaa8714a-cbe0-4dec-b7b5-3cfda89673ef",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "059696c5-5030-4695-8e0c-6554a6b6e877",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8933e90-602a-4a66-860a-4f58540f379a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96b803d0-c455-4eef-bfc3-4bc6b69033b2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 343.5692307692308,
      "responseMin": 7,
      "responseMax": 7979,
      "responseSd": 996.2234568490799,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1682728564872,
      "completed": 1682728667090
    },
    "executions": [
      {
        "id": "4e851c4e-9d44-40da-b41f-c46f2abc6b11",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "be231856-51a4-494c-bdad-a85abf7839eb",
          "httpRequestId": "4a89ae6c-55c9-4f0f-b443-cc7a0e488e61"
        },
        "item": {
          "id": "4e851c4e-9d44-40da-b41f-c46f2abc6b11",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e7de50be-9a33-436d-9c2b-3afc58360e10",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "e90043c5-3532-48fb-86f6-034ac72448bb",
        "cursor": {
          "ref": "4665bfcc-81f7-4754-acaa-60079fa073e2",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6e722217-b17a-48dd-aa45-71ebd314f936"
        },
        "item": {
          "id": "e90043c5-3532-48fb-86f6-034ac72448bb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7e968e23-02fc-4c1f-80e8-ecc6c6847932",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "b53d8eb9-f34f-4779-82d3-93ec225f829d",
        "cursor": {
          "ref": "dbed70d2-0c90-4f30-8b1a-2c06c31797b2",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e4276f82-3355-425b-9878-a537af806cc0"
        },
        "item": {
          "id": "b53d8eb9-f34f-4779-82d3-93ec225f829d",
          "name": "did_json"
        },
        "response": {
          "id": "212e6656-c0f1-44a7-99ce-5ec9e46089cf",
          "status": "OK",
          "code": 200,
          "responseTime": 532,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eec0402-ad8f-4fbc-a9f4-37770e7a5fbb",
        "cursor": {
          "ref": "3acf5178-bf4f-4be3-9a3a-18a068bb3579",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "82c6a25f-e918-4d83-bb40-d5f42f4c2046"
        },
        "item": {
          "id": "4eec0402-ad8f-4fbc-a9f4-37770e7a5fbb",
          "name": "did:invalid"
        },
        "response": {
          "id": "a61c27a7-8625-461b-a451-d3ad045d1831",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1310,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4eec0402-ad8f-4fbc-a9f4-37770e7a5fbb",
        "cursor": {
          "ref": "3acf5178-bf4f-4be3-9a3a-18a068bb3579",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "82c6a25f-e918-4d83-bb40-d5f42f4c2046"
        },
        "item": {
          "id": "4eec0402-ad8f-4fbc-a9f4-37770e7a5fbb",
          "name": "did:invalid"
        },
        "response": {
          "id": "a61c27a7-8625-461b-a451-d3ad045d1831",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1310,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e7ec1be6-7e9a-47f4-9d57-4f963b929e51",
        "cursor": {
          "ref": "78c3a4f0-77ac-4e23-83b1-1e79e6763497",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "12d985a7-0ba6-4720-a6cb-75e9a6f64759"
        },
        "item": {
          "id": "e7ec1be6-7e9a-47f4-9d57-4f963b929e51",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2bce24e9-798b-4fa4-aecc-01b97a7dd30a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdef1564-356b-4d59-a246-5a8a76743999",
        "cursor": {
          "ref": "992667a9-7588-417e-b636-495331d19077",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5abf09cb-5ed7-48fb-8a5a-50c4d42532b4"
        },
        "item": {
          "id": "cdef1564-356b-4d59-a246-5a8a76743999",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3ca1d67d-41d3-4890-b7de-e1f1df3edbe1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a42b13b-dade-419e-945f-889d8d5104f4",
        "cursor": {
          "ref": "cb779162-3ded-40ef-a41e-8c953e20fc26",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b90d2e49-5432-4465-bb03-8eb14ba9ec6a"
        },
        "item": {
          "id": "6a42b13b-dade-419e-945f-889d8d5104f4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c8d2c7c5-53fb-487f-b498-ba38ce0f8e4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "7224eb38-7854-4410-84ce-d29456ff8038",
        "cursor": {
          "ref": "658dd6cb-5987-4cc0-8644-15139be46e86",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "002864e9-483a-459d-bcb6-0a4a9555ea3b"
        },
        "item": {
          "id": "7224eb38-7854-4410-84ce-d29456ff8038",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "465f1b29-41dd-49cb-afed-6fd312700fa1",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7224eb38-7854-4410-84ce-d29456ff8038",
        "cursor": {
          "ref": "658dd6cb-5987-4cc0-8644-15139be46e86",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "002864e9-483a-459d-bcb6-0a4a9555ea3b"
        },
        "item": {
          "id": "7224eb38-7854-4410-84ce-d29456ff8038",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "465f1b29-41dd-49cb-afed-6fd312700fa1",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fb2ad189-13d6-4e53-8e1a-4898327d35f2",
        "cursor": {
          "ref": "fb3ca99f-6a80-4862-aab6-ad8f134adb74",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c2630944-3e8a-422d-be87-13d2a0c6a1b9"
        },
        "item": {
          "id": "fb2ad189-13d6-4e53-8e1a-4898327d35f2",
          "name": "identifiers"
        },
        "response": {
          "id": "fd140415-818a-45bc-a6c5-67d433573ea8",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20d38b4-50df-4a6e-911b-e19403521754",
        "cursor": {
          "ref": "76cc83f5-fa4f-425b-8100-7a76aa141c1e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "229e325f-624f-4fce-9295-3300050c9f15"
        },
        "item": {
          "id": "f20d38b4-50df-4a6e-911b-e19403521754",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cfe53e4c-8326-483a-88c8-38c7a59e3abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20d38b4-50df-4a6e-911b-e19403521754",
        "cursor": {
          "ref": "76cc83f5-fa4f-425b-8100-7a76aa141c1e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "229e325f-624f-4fce-9295-3300050c9f15"
        },
        "item": {
          "id": "f20d38b4-50df-4a6e-911b-e19403521754",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "cfe53e4c-8326-483a-88c8-38c7a59e3abd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d18d2b4-b847-4560-aca8-baab0bf807fe",
        "cursor": {
          "ref": "22d5336a-ff16-4759-9e55-5d34558e5fcc",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4529deab-6e2e-41b7-8fd8-ccdd79c84ec6"
        },
        "item": {
          "id": "0d18d2b4-b847-4560-aca8-baab0bf807fe",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a0da3dd1-f1f2-4a9d-b26a-18e541245bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b034bd2a-b988-4903-949d-b95c8c68eb3c",
        "cursor": {
          "ref": "591717eb-dbb1-4de8-8025-1903cdc3cfb9",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "239d5923-3ff0-4585-981d-4e789418cad0"
        },
        "item": {
          "id": "b034bd2a-b988-4903-949d-b95c8c68eb3c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "907e28c8-0074-405a-885a-283477e6c031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 824,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9723ffa-cbcb-4794-a2c1-6f9e8e234db2",
        "cursor": {
          "ref": "c4ca7b93-10ca-40e8-a4b6-011fc075d804",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ccf7361b-ee33-40ed-93a4-881e4ac44188"
        },
        "item": {
          "id": "c9723ffa-cbcb-4794-a2c1-6f9e8e234db2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d5743a87-cdb2-4767-80d6-b4ea671c1084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d093a7bb-9979-4fc7-bb81-ce0283381e9c",
        "cursor": {
          "ref": "b9ba25e6-574a-49ea-80cd-d189715a5ac9",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "909e0ec8-bb0b-4f2d-ba65-1e06dafd2006"
        },
        "item": {
          "id": "d093a7bb-9979-4fc7-bb81-ce0283381e9c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "00e64830-6d5e-4806-b09e-56d381d88be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f2d08a-3dfd-4545-9a62-1f56836acac9",
        "cursor": {
          "ref": "3fa02ad3-31b0-4eee-816d-5212d4271f6b",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2f3bbfd5-7abb-43ee-955c-3e9fa0af9b74"
        },
        "item": {
          "id": "90f2d08a-3dfd-4545-9a62-1f56836acac9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d91962d4-b335-4a00-97c2-0721560ad1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5ba413-6ad3-4784-b35a-4afb9fb07547",
        "cursor": {
          "ref": "b2466232-c054-418b-9598-bcf471921219",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3e86ee7e-c66e-496f-a387-b2bfbc05a06c"
        },
        "item": {
          "id": "9a5ba413-6ad3-4784-b35a-4afb9fb07547",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "09665344-8dbd-44e6-960f-4321c9300b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19cfee4b-1d3c-4c48-817e-eeb3def92f38",
        "cursor": {
          "ref": "56451cb2-609d-4781-9678-293e6c351d30",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d68b090a-2db7-47b3-8a73-5909f007dd3c"
        },
        "item": {
          "id": "19cfee4b-1d3c-4c48-817e-eeb3def92f38",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "2ffb9730-7d1e-46e8-b636-b9d1b9ebc36b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e988b1-77b1-4c70-b4ad-e14441ff349d",
        "cursor": {
          "ref": "83544cd3-0a95-40df-935f-ab582e43d524",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2c719dd5-b6e0-4c56-bb95-13f11e6b15fd"
        },
        "item": {
          "id": "f6e988b1-77b1-4c70-b4ad-e14441ff349d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b2afaaf0-e4bb-4700-826a-d906a15bd689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60630f3c-b074-41df-bef9-d97fabacf070",
        "cursor": {
          "ref": "fac37b38-d147-40ba-b22a-e8f24d235d28",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e6de7a34-7c3c-4b87-9a72-ae979611784c"
        },
        "item": {
          "id": "60630f3c-b074-41df-bef9-d97fabacf070",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "13775fa1-57af-4508-8d79-6be72fe2468c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3ae254-4ff2-4488-b4bb-2c45fb0a34cf",
        "cursor": {
          "ref": "d36ee216-3782-496b-ba16-59b3a8bbd94e",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "1e3371c5-7f0a-4f65-b823-f064a6959513"
        },
        "item": {
          "id": "ae3ae254-4ff2-4488-b4bb-2c45fb0a34cf",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "72c7f84e-5879-4d39-b412-abd100f61149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1f28fb-bc79-4f46-8144-59e639121e09",
        "cursor": {
          "ref": "ee683b3d-57a7-4272-989d-32c54a18cfb1",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "78427e13-ec65-4ac5-a99d-f4bdea27efd9"
        },
        "item": {
          "id": "1a1f28fb-bc79-4f46-8144-59e639121e09",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "26bd220a-4352-4324-9a7d-c7bb4ad4ae3c",
          "status": "Created",
          "code": 201,
          "responseTime": 1021,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "59f49224-fa77-4e5e-819e-211eebe91930",
        "cursor": {
          "ref": "dee43278-eb50-41f9-a0e4-86474d38c7f3",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6f8dcdc5-dbdc-441c-a66d-a7fdba13424d"
        },
        "item": {
          "id": "59f49224-fa77-4e5e-819e-211eebe91930",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5591af4a-bd30-4364-afff-e51f0a7e4afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c1216f-5282-4504-b76f-f0c06662b311",
        "cursor": {
          "ref": "045a7f4c-64a0-4cb0-9883-96b417ab40dc",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "aaac32a6-a42a-4a49-8ffc-fe074e00d391"
        },
        "item": {
          "id": "b5c1216f-5282-4504-b76f-f0c06662b311",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "8b5b3fea-b8a3-475d-837c-341a6121e92d",
          "status": "Created",
          "code": 201,
          "responseTime": 7081,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "4845fa1d-5315-41ba-b4ab-39c8e2a5f89c",
        "cursor": {
          "ref": "1b49f784-d3cc-4b42-adb3-41072f3cdc61",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6079d101-b8a6-474b-9e96-a5f6450e0213"
        },
        "item": {
          "id": "4845fa1d-5315-41ba-b4ab-39c8e2a5f89c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6e69142d-ee49-4ffa-a57c-a4c566672e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd99d55-fa33-45f7-8e85-20fe3a9e59e0",
        "cursor": {
          "ref": "2aba1158-4f7f-44a4-80f9-21924ca14102",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a9d23386-6035-435c-a653-73944e0dbbd8"
        },
        "item": {
          "id": "4dd99d55-fa33-45f7-8e85-20fe3a9e59e0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a1171f3b-e2c1-4be2-8c37-1b6be2843af1",
          "status": "Created",
          "code": 201,
          "responseTime": 2727,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "5c9ad7af-c10c-4527-adad-cb870e4ad567",
        "cursor": {
          "ref": "1190ae8d-98aa-4c61-bed5-5c474742b447",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "95bd5dde-1071-4a0c-b8f0-f08f813164aa"
        },
        "item": {
          "id": "5c9ad7af-c10c-4527-adad-cb870e4ad567",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e736b3d9-7e8c-4de3-8655-ef4c252dabca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee9b6ae-1ca0-4dac-b83e-6d93070eac6c",
        "cursor": {
          "ref": "5ab136bf-01a6-4376-acd4-d873fa547996",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ad61c70c-232a-4aaf-9841-30ef2e974a6a"
        },
        "item": {
          "id": "eee9b6ae-1ca0-4dac-b83e-6d93070eac6c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1ec813ad-6e8e-4a64-adaa-08af3861a0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beac0707-09d1-44fb-8182-bed4f3e77000",
        "cursor": {
          "ref": "7615e188-7d87-4782-852c-baf02dfc4022",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a44a4953-fe32-4004-9ff3-4a15a18c8494"
        },
        "item": {
          "id": "beac0707-09d1-44fb-8182-bed4f3e77000",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c962c980-2d85-441e-af26-b106adf37f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22541656-b5fa-4cbb-ba16-21f8cd766bf5",
        "cursor": {
          "ref": "b91e14cd-8392-4b58-bbdf-80ca2dc95855",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e5cb0f07-682b-480d-8212-9a47aed73d4e"
        },
        "item": {
          "id": "22541656-b5fa-4cbb-ba16-21f8cd766bf5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4ea57130-76e4-490f-be7b-e16a8e9f6bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45964bb5-502c-4a74-bb1c-9d880a4b3b16",
        "cursor": {
          "ref": "65ee9bf9-5b71-4c68-a80c-ec53076cdcc6",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "53e499d2-a392-4091-8e9a-fac84f296aba"
        },
        "item": {
          "id": "45964bb5-502c-4a74-bb1c-9d880a4b3b16",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "36ab5efd-3574-4082-95f1-3b9561309133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7598c7-b7df-43d2-a348-bddcdce2bf1d",
        "cursor": {
          "ref": "4ffc1828-a1ed-46a7-9bc1-7bf21cf8106a",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a59b5873-3237-42a6-b777-a222b98030d2"
        },
        "item": {
          "id": "ed7598c7-b7df-43d2-a348-bddcdce2bf1d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3b5a31ee-41d3-431b-8dcc-b0b99a3dacbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed253586-d4b3-4cf8-8f2f-db573b31a3fe",
        "cursor": {
          "ref": "6e1d84a9-b1e7-47ae-b496-b8fe9051104b",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0522b381-88ea-43ee-8aad-ae8bbb5fd26c"
        },
        "item": {
          "id": "ed253586-d4b3-4cf8-8f2f-db573b31a3fe",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e041f7f2-b728-411c-8f86-c74869bb7151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73b8804-eb4a-40d1-9cfa-a302283c6116",
        "cursor": {
          "ref": "419cb93a-8176-4085-a060-0a9b4a327516",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2b60a40f-9edd-4f56-8e84-5143923533f7"
        },
        "item": {
          "id": "a73b8804-eb4a-40d1-9cfa-a302283c6116",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1fe0cd89-e21f-4a5a-bb61-192e774eed33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84fa2825-895b-414f-b41c-9a71755fa8f2",
        "cursor": {
          "ref": "33bb304b-492c-4afa-82f6-bd4a594d49ae",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1d4880a4-750c-4c6d-801d-e4397f1cd13f"
        },
        "item": {
          "id": "84fa2825-895b-414f-b41c-9a71755fa8f2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6a9b278d-b2f8-40ce-b067-4ba4fb2e3ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015b70cd-cac3-49a9-a121-2bb7c80fc8de",
        "cursor": {
          "ref": "d3e56210-94a8-4e9b-850f-ae5e0a761e57",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "10a0f71e-f9d5-421d-b39f-6c46f8a4141b"
        },
        "item": {
          "id": "015b70cd-cac3-49a9-a121-2bb7c80fc8de",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a8695d4c-7af8-40d9-980e-b9a5aa8d177e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0197c072-3958-40d5-93a3-10ebe5975bf3",
        "cursor": {
          "ref": "1ddef93e-a348-4d3e-b426-9bdaa2aac1d1",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7cd73e84-645e-427f-8b1f-ad991d7cb21f"
        },
        "item": {
          "id": "0197c072-3958-40d5-93a3-10ebe5975bf3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c7af6057-9770-4e05-b1c3-b32bac789e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a8d661-fa8c-473e-be42-8ff8af0a7952",
        "cursor": {
          "ref": "57dadd36-9e1c-408d-b72c-f76d81c234f0",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4cf45d4e-a05f-4944-b774-026ad967624a"
        },
        "item": {
          "id": "b6a8d661-fa8c-473e-be42-8ff8af0a7952",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a4247ff7-b11b-427b-817f-d262fde8f25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b16e65-5af6-4729-8b69-f1c686dd1a84",
        "cursor": {
          "ref": "35dc4660-0c36-41d3-90b3-0d8e78857922",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d248c239-69a9-47e1-a7fa-b29da9e38edd"
        },
        "item": {
          "id": "29b16e65-5af6-4729-8b69-f1c686dd1a84",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8e0539c5-fe1f-44d6-8993-7bfa37cf0b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895c14c2-9617-4dc6-8460-ecaa855111e2",
        "cursor": {
          "ref": "b240caa7-9f45-4742-ade9-fbf514d0e30a",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bbb9fbb0-922e-4ecf-a888-3ad70c9f4735"
        },
        "item": {
          "id": "895c14c2-9617-4dc6-8460-ecaa855111e2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "dccc3ab1-0796-4965-88a9-20ee07aad79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb99abb4-f3b0-4cfd-822a-d5056a240ba8",
        "cursor": {
          "ref": "2520b09a-0ad9-4c6e-8300-cde097fa11dd",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "286dcdcb-64f7-42e9-b7eb-ab43fab2e83a"
        },
        "item": {
          "id": "bb99abb4-f3b0-4cfd-822a-d5056a240ba8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6faad8b8-6b9f-4fe1-aa6c-e4f627326358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a963f0-5a3b-4a66-b056-2bdfe7cef6dd",
        "cursor": {
          "ref": "b50f70f3-8c20-4248-b734-7a4aabd8107c",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ad728e2c-eccf-4acf-acac-58992e583b30"
        },
        "item": {
          "id": "95a963f0-5a3b-4a66-b056-2bdfe7cef6dd",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7c9ff8ee-8116-4a9a-9572-566d772ec274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "214d89c9-424f-44b7-be0a-49092592e039",
        "cursor": {
          "ref": "78c65637-e1b7-4a00-a136-6d30951e5442",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0db1fa12-4a32-46de-a6a6-f7010de1e6c8"
        },
        "item": {
          "id": "214d89c9-424f-44b7-be0a-49092592e039",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f6febe96-fb84-4b71-b951-c1dff6dda5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f58cc686-22d0-498f-9080-cbd1aa21ba57",
        "cursor": {
          "ref": "6eaf953b-dbd0-4fe8-b4c3-97d989bed3dc",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d34869cf-3422-4c71-b78d-e5b793ba6c11"
        },
        "item": {
          "id": "f58cc686-22d0-498f-9080-cbd1aa21ba57",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f6d8d5bc-89b4-4621-a126-fad6ad7dd04e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861fd22c-d6f1-4b8a-81c5-2bd0f45159f4",
        "cursor": {
          "ref": "e06391f9-6795-4e67-ac67-16a29761143d",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "31b3f24e-e79b-443d-b5c2-25e56eced8ed"
        },
        "item": {
          "id": "861fd22c-d6f1-4b8a-81c5-2bd0f45159f4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bcc3cbc9-3566-41ef-b2d4-bd650c9aaf3a",
          "status": "Created",
          "code": 201,
          "responseTime": 4881,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b3b89c41-e7e2-476b-a482-9d4d52be9798",
        "cursor": {
          "ref": "9dbecc75-4357-4164-a334-0093a28fbd66",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d766af77-fb3f-4150-a0f4-4eeb2fadfe0f"
        },
        "item": {
          "id": "b3b89c41-e7e2-476b-a482-9d4d52be9798",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "76de4576-e004-4448-8815-4bcdc9981319",
          "status": "Created",
          "code": 201,
          "responseTime": 3314,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "afb23b78-27cf-4b39-a1f8-53f48dc3d9ad",
        "cursor": {
          "ref": "e020eb4b-db30-43e1-b4a8-c7036e6d0340",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1de06904-3936-4102-b23e-c97a26fb96e1"
        },
        "item": {
          "id": "afb23b78-27cf-4b39-a1f8-53f48dc3d9ad",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ba7413d4-4939-47cd-af2a-6f0f8ff9e693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804e5538-c366-412e-b284-e04092e8eeb0",
        "cursor": {
          "ref": "eb5805d2-7672-480d-b5b1-1d2216e11985",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a22cf294-0bca-4d43-a72d-7d5a043b9e2c"
        },
        "item": {
          "id": "804e5538-c366-412e-b284-e04092e8eeb0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "42a43db5-b9dd-4678-ba2a-e11a47020c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc0a0e4-bb3f-43ff-9bcc-f364adae394a",
        "cursor": {
          "ref": "e7fa82e8-017a-4927-a1cc-146dc783b1b4",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "184c9637-4edc-4858-b9c7-76f87b7f3581"
        },
        "item": {
          "id": "9cc0a0e4-bb3f-43ff-9bcc-f364adae394a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "daf38f60-c266-435f-af34-161f06beb100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc32859-570d-4451-8c33-78b5e197d86b",
        "cursor": {
          "ref": "dcc0bcb8-56ab-4639-a936-1ab81098a663",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e854f4d8-9958-4b51-a68b-9cf0bb37a62b"
        },
        "item": {
          "id": "ccc32859-570d-4451-8c33-78b5e197d86b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ce04d0bd-0be3-44b6-ad9a-a6e353ca53ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2048ced3-18d0-45ff-a004-aa6874b48e84",
        "cursor": {
          "ref": "e751c189-04d2-43ed-8ed7-63b1d5710a42",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b7555fa2-6748-43c7-8e53-17e9e8b44a4f"
        },
        "item": {
          "id": "2048ced3-18d0-45ff-a004-aa6874b48e84",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "04497ea9-6aef-494f-ab2f-5bbe4f06c915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3c5c37c-b2b4-4fda-9d9b-8e726140c557",
        "cursor": {
          "ref": "4b006f44-e79f-4c2a-ad0a-cd4e54a15bb0",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "89d44f4a-2505-4cbf-b162-5fd13a725212"
        },
        "item": {
          "id": "c3c5c37c-b2b4-4fda-9d9b-8e726140c557",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d6844675-4529-4400-9dc4-0e687fefe820",
          "status": "Created",
          "code": 201,
          "responseTime": 2205,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f9a6f98d-2921-4e27-8dca-0c8193db94c1",
        "cursor": {
          "ref": "565dafc9-188c-4cb2-a98a-771d8dc4c982",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6e5a4430-0d0a-4743-816c-58d15bc97bbf"
        },
        "item": {
          "id": "f9a6f98d-2921-4e27-8dca-0c8193db94c1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3fafe26a-4622-44ab-b70d-5e2e0cddc7a8",
          "status": "Created",
          "code": 201,
          "responseTime": 2336,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a04ce163-5d6c-4af0-8df1-a3acb0f7d5e4",
        "cursor": {
          "ref": "4244ab00-119c-491a-a2d9-253b03dc463a",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0a4c372f-7275-40b3-831c-82b6b99f0ba2"
        },
        "item": {
          "id": "a04ce163-5d6c-4af0-8df1-a3acb0f7d5e4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f220d9fa-411f-4920-8722-c081363b113b",
          "status": "Created",
          "code": 201,
          "responseTime": 2486,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "63312495-7bef-46c4-957a-5708af39730e",
        "cursor": {
          "ref": "3263e5b3-9df5-4a25-bcdf-7de6d5dd1c63",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c8c225a2-1e0f-4c5c-9d33-ab0cdc5cccd0"
        },
        "item": {
          "id": "63312495-7bef-46c4-957a-5708af39730e",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d7d9aa12-14d3-467e-93cd-152f50efb94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15be0810-d761-4fde-a730-49379ae3c1c7",
        "cursor": {
          "ref": "23df2d65-523a-40b5-8c9e-e4e888510c93",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "26ae49be-3c2a-476f-893c-3bdd300d85ff"
        },
        "item": {
          "id": "15be0810-d761-4fde-a730-49379ae3c1c7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "fe4a2cc6-d7b5-43c4-bfd2-c56eab7444a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 208,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd295b9-73f7-4bde-a7b8-17b3d8c8aab9",
        "cursor": {
          "ref": "6ed878e1-ed53-428a-9900-e4a3d5ef43f3",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e4874d1c-47a4-4ad9-8a17-1e6670aa3a0e"
        },
        "item": {
          "id": "1fd295b9-73f7-4bde-a7b8-17b3d8c8aab9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "be54ff0e-6daf-4114-a3a4-331fcd5934e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e36c9b3-928a-4a70-b784-2a3f2bf96967",
        "cursor": {
          "ref": "afcccd8a-00f3-487b-b9cd-e6329cc17e33",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5e6d8f1f-c05d-4d71-9469-04f08e7b646c"
        },
        "item": {
          "id": "8e36c9b3-928a-4a70-b784-2a3f2bf96967",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "26fafbc3-237c-4d2f-ac82-cf08d675159e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde90902-5fef-497b-9675-832efe4768a3",
        "cursor": {
          "ref": "2cb7d628-4c4b-4b46-83c2-60045e189a00",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7c2ce5e1-4a45-433a-baec-82a5d6b91d24"
        },
        "item": {
          "id": "fde90902-5fef-497b-9675-832efe4768a3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "80f15612-bd02-4fce-a158-c552c9392c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b354b9bf-014a-4d46-8531-254ff3f64308",
        "cursor": {
          "ref": "c2bef657-32bb-4420-b2ff-b54d79b6b088",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fc95a97b-cbb3-456f-a79e-140e3bcf37ae"
        },
        "item": {
          "id": "b354b9bf-014a-4d46-8531-254ff3f64308",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e70c16c9-34a5-4899-8aa3-a01dd6bfddd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b607083-0deb-438c-a08c-4f3e5419b5f0",
        "cursor": {
          "ref": "798d2fc4-94ab-40bf-8a8b-f6b5d7620a53",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4a771b5e-7f12-4d45-9d63-ba7bc986d287"
        },
        "item": {
          "id": "5b607083-0deb-438c-a08c-4f3e5419b5f0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "56145e75-1829-4cfd-989b-fec507af4177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b2e950-0dec-458e-9983-b6f13212ed02",
        "cursor": {
          "ref": "832d6dd0-2827-48aa-92af-76a1bc429009",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "43e60b7c-3207-4603-9245-93c587f03542"
        },
        "item": {
          "id": "21b2e950-0dec-458e-9983-b6f13212ed02",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "64569df6-c631-4eb8-a382-e80a10bad4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3c4006-bf18-4457-9aa7-32653cdc9731",
        "cursor": {
          "ref": "25d83571-6b7a-4b8e-912a-eb5a46114c32",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5443afca-6e3d-4e03-a82d-f58b184bf84a"
        },
        "item": {
          "id": "6e3c4006-bf18-4457-9aa7-32653cdc9731",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "96bd8d25-c46f-42e6-8b70-d2b7e51e0a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdfe3889-49e9-40a3-a875-c0c9c8537737",
        "cursor": {
          "ref": "61ce761b-ab67-40e1-b8ac-7345f70ad941",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5ea6bb00-ee70-43e0-adb2-735bb9bf40e2"
        },
        "item": {
          "id": "cdfe3889-49e9-40a3-a875-c0c9c8537737",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "93de5ede-2fb5-4c97-b9a8-88caadbfd46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d62fe1-d779-4e3a-b9c7-784c8c28e8f1",
        "cursor": {
          "ref": "8bb045fa-046d-4663-9443-bddaae0b30eb",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8eda62de-13b1-40cf-9b66-52b48c036ba4"
        },
        "item": {
          "id": "26d62fe1-d779-4e3a-b9c7-784c8c28e8f1",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1a4b8a57-4d18-4e20-99b2-e222ec108343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1136a481-2afc-4bf8-9fd7-579fda5ae881",
        "cursor": {
          "ref": "5f67aafd-f95d-4e10-aaae-af22127c98e3",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7b3e0da9-de03-4f2f-b904-ab126bcf0943"
        },
        "item": {
          "id": "1136a481-2afc-4bf8-9fd7-579fda5ae881",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "bfeda23e-a5dd-4294-bc90-dd7366b6fdc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa581a5-c1f2-45fb-bb67-7afd73be8639",
        "cursor": {
          "ref": "aad635ff-fb96-4a12-97ec-e57d11418579",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "db263e7a-2285-4f16-8762-48fd8d91f975"
        },
        "item": {
          "id": "7fa581a5-c1f2-45fb-bb67-7afd73be8639",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f697774e-bf8a-435d-b97e-a7d133bdda9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2523772-03fa-4a89-a70e-250c8d76095d",
        "cursor": {
          "ref": "aa3c786f-8fe0-4a62-9ba1-75448b16fe30",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cb5a92d7-c641-4eff-a22c-b44e77622db3"
        },
        "item": {
          "id": "c2523772-03fa-4a89-a70e-250c8d76095d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ff7b8fc5-f7c8-49d8-a004-3bef1b86c417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0c270f-29bf-48d7-8c2f-f9deb20b51d2",
        "cursor": {
          "ref": "4fcd1471-bccf-43c8-9dde-530d5ccf5a23",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a792339d-da04-4b85-b057-0b6e5e7f43a6"
        },
        "item": {
          "id": "ae0c270f-29bf-48d7-8c2f-f9deb20b51d2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0da175fe-b8be-4293-8285-097dd3d1a47a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ebb885-316c-4700-9bda-9c8e3e47b1ba",
        "cursor": {
          "ref": "8c2ea805-67db-4a7a-bc5e-e14979efd4d0",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "23d8e580-043e-4e08-8f1c-dd4d39d5aa59"
        },
        "item": {
          "id": "98ebb885-316c-4700-9bda-9c8e3e47b1ba",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a4f2728b-28bd-4d81-b580-d3fff5cba556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c84f312-77ee-43b4-8f1b-a9b1cdff3bac",
        "cursor": {
          "ref": "6ce1764c-02bf-47fc-a522-4529d634380f",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d251bae6-81c6-427d-b379-acbe186654f3"
        },
        "item": {
          "id": "9c84f312-77ee-43b4-8f1b-a9b1cdff3bac",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1e8a2d1f-9507-45c9-93df-cfaca7695c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15291b83-989b-4f76-af5e-00d6d9b9b46b",
        "cursor": {
          "ref": "01beb99f-dec9-4600-8425-72d24e5f6fe6",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "99f92a96-071a-465c-a72d-72204a509f49"
        },
        "item": {
          "id": "15291b83-989b-4f76-af5e-00d6d9b9b46b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "78261a41-c45c-4348-bfcd-e38cebbfc718",
          "status": "Created",
          "code": 201,
          "responseTime": 1937,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "c4baf818-3097-4bcc-9fa9-420dc5be4951",
        "cursor": {
          "ref": "a093af8e-e69d-4d95-98c6-b64be72098f2",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "44c12616-371d-465b-936d-535da7bb1eeb"
        },
        "item": {
          "id": "c4baf818-3097-4bcc-9fa9-420dc5be4951",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "cbe7cdf0-4e3f-4ee9-b6db-1805b4a36168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4f84db-eaa2-4c23-8939-83281010e2af",
        "cursor": {
          "ref": "c4edfe92-dd5f-47e5-9f9a-2d8155e39fd5",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "74ae145a-fd40-4b60-8bdd-dfc0bc7953f7"
        },
        "item": {
          "id": "ff4f84db-eaa2-4c23-8939-83281010e2af",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "35203cc8-51be-4020-abf3-28f5296a8b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61766811-6f0b-4095-8850-6f667dd71a0b",
        "cursor": {
          "ref": "da55cf99-1294-42d9-995e-6a24ba7c6c1f",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e04b30ab-8b2c-424e-bd3b-f4d17c938617"
        },
        "item": {
          "id": "61766811-6f0b-4095-8850-6f667dd71a0b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4432b685-148a-4aa6-a659-2ef1688df4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de106388-9803-463c-8ead-af0ded2e2bfb",
        "cursor": {
          "ref": "0871fa18-43a1-4cda-b9b9-05bc7042b9d6",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c6f2d3fa-a252-475f-a1d4-48d64a30e5b1"
        },
        "item": {
          "id": "de106388-9803-463c-8ead-af0ded2e2bfb",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "bfb31c11-2f03-4d2d-a873-4a1e4467d8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77dfe1d4-c247-415c-b50f-4e49a6c1c871",
        "cursor": {
          "ref": "5ca75b13-61fd-4136-932b-7c01c6403ba2",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "173c5939-afa5-45ee-b200-6ca1128b6808"
        },
        "item": {
          "id": "77dfe1d4-c247-415c-b50f-4e49a6c1c871",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9fd993f9-212f-4a97-8a65-d01dddae2349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82822b1-df8c-4058-b0b6-607a4d260da3",
        "cursor": {
          "ref": "9f5b033e-894d-4674-a525-f5ce7ce37e4c",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6bd2125d-39b8-40d5-a2e7-d260da7bbd99"
        },
        "item": {
          "id": "a82822b1-df8c-4058-b0b6-607a4d260da3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "86040924-67e1-4294-a9dc-9469c9afd0fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd12901-701f-410e-a429-af6dbeb3f995",
        "cursor": {
          "ref": "d77a7ed0-7b43-4756-8883-77c1ab06189e",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "427f49e9-04a1-43bb-8f54-85eb060882c5"
        },
        "item": {
          "id": "9bd12901-701f-410e-a429-af6dbeb3f995",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7183a387-c5c4-4b9e-80ef-96cf7b1fbbe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acea0c00-bb1a-4b28-85f8-d87ed57c3746",
        "cursor": {
          "ref": "f72468ed-da29-403d-883e-8656451fa570",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a876eafb-8799-44a8-b937-bddd5c8ccb2b"
        },
        "item": {
          "id": "acea0c00-bb1a-4b28-85f8-d87ed57c3746",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "799a7160-a718-4758-b706-d82d256126de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67cf4d4-f208-4c5c-bf07-b0f13c273ee2",
        "cursor": {
          "ref": "40438ea2-2fc8-45da-9e15-afbc084fbc88",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3827801c-16c9-45b1-a4bf-d554eb4f14b6"
        },
        "item": {
          "id": "e67cf4d4-f208-4c5c-bf07-b0f13c273ee2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "baf393f8-9c92-4792-9544-f53907aa0bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d976e04b-da1a-4183-9e39-59a12d9b3e72",
        "cursor": {
          "ref": "e0616dc5-8cba-4242-a879-6d1fcac10284",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "826f8f72-40df-4213-9759-120f517e7e8b"
        },
        "item": {
          "id": "d976e04b-da1a-4183-9e39-59a12d9b3e72",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8a9d2455-dbf4-48cd-9709-780e936e2e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed77eae-822f-47e6-a06e-2ef7f3c851ae",
        "cursor": {
          "ref": "7e4483f2-008d-454a-8d20-1e74de1ef321",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3cc4b1c6-0db5-47a6-9041-512202bcd157"
        },
        "item": {
          "id": "5ed77eae-822f-47e6-a06e-2ef7f3c851ae",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "516ed435-a511-4d37-bc37-063ac1d61e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64559944-369c-4125-92fe-20b2431b08b9",
        "cursor": {
          "ref": "22311cef-1c01-4007-9801-178767fd6250",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a58611dd-00ab-43aa-a9c4-e3b6cc586a2b"
        },
        "item": {
          "id": "64559944-369c-4125-92fe-20b2431b08b9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "61acbdf3-f35c-449d-a740-78730c7d4cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14aecf1-caf0-453e-a7d5-d084788d1c98",
        "cursor": {
          "ref": "dd72939d-5796-4f1d-8d96-c1f6853dbdaf",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d5f24092-5950-40ba-be0b-2ea49731c46a"
        },
        "item": {
          "id": "d14aecf1-caf0-453e-a7d5-d084788d1c98",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1f755962-e521-481d-9810-d5b752df40b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5d5532-0e20-42d8-9ed3-71b8698592ca",
        "cursor": {
          "ref": "d0054c47-94c8-4804-84dd-2364e60e9910",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "177b43e3-c1d0-4ba0-a2c7-e922ba7cba7f"
        },
        "item": {
          "id": "ec5d5532-0e20-42d8-9ed3-71b8698592ca",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bdb9e492-5035-4852-83b7-58b2e5232f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c68cf0b-3d0a-4fff-aa51-2ba27f26659f",
        "cursor": {
          "ref": "45e705c2-9c04-4ef9-819d-c11ee54c3635",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "32cb59fc-75e2-4966-91ce-f4e8699bacfe"
        },
        "item": {
          "id": "8c68cf0b-3d0a-4fff-aa51-2ba27f26659f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5322d6cb-f79b-4d11-a267-dc592497657e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1a75e3-a678-46cd-bc43-98f29305f73d",
        "cursor": {
          "ref": "82cf919e-7f80-4002-85e1-cf493f1b8f1a",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "da9e143f-5f41-46bc-a5ff-01458d4019c2"
        },
        "item": {
          "id": "0d1a75e3-a678-46cd-bc43-98f29305f73d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2e543c87-9e4d-4214-a19c-af9f93290a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d1be93-120f-4149-a191-0095863ab0c7",
        "cursor": {
          "ref": "13a7fc85-6557-42e8-ace0-2435fde2d9b1",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c46f6c1f-ad75-4a2f-81b0-be2a8f40aa39"
        },
        "item": {
          "id": "e2d1be93-120f-4149-a191-0095863ab0c7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d7a030a8-c4e9-465b-a63d-f592d129f4d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d3ed61-b0a0-403b-8350-2706402e4469",
        "cursor": {
          "ref": "0391a108-050d-4e67-ac95-41b2aefcd7f5",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "80afdc89-b9a1-40dd-81c9-6fcfa7e7b8b6"
        },
        "item": {
          "id": "f9d3ed61-b0a0-403b-8350-2706402e4469",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ddc298ce-976b-4b1f-8d6d-5f49900df5f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1b2345-77f9-4259-8273-41f2e7ff9890",
        "cursor": {
          "ref": "c37c6e16-463c-4261-9b80-cf1063be363c",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8a0aa922-66fc-4c77-a5ef-d5f460466246"
        },
        "item": {
          "id": "7b1b2345-77f9-4259-8273-41f2e7ff9890",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "fdb65e28-c623-46b9-b7d8-116c7d4a5ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6928d7a4-41c6-45a2-850f-3bb0389174e0",
        "cursor": {
          "ref": "ae071407-d39c-4af7-9810-2d4780197c71",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f7c2df4d-c571-428d-80de-f7d2a6dbb0c0"
        },
        "item": {
          "id": "6928d7a4-41c6-45a2-850f-3bb0389174e0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7e2c9d48-6330-4ce5-b8e6-5f7767c5a18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00a4104-8934-41e6-9655-290b1810cfb4",
        "cursor": {
          "ref": "2669cc43-2018-4f7a-ae08-b009c2cf57fc",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ed2106c0-a607-4749-86f0-424c786a7ab9"
        },
        "item": {
          "id": "a00a4104-8934-41e6-9655-290b1810cfb4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "612a8c75-b18d-4d28-9772-08b45399923d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42308e6-af33-4405-b3e2-f737835f9df0",
        "cursor": {
          "ref": "704e064d-b95f-4824-9d4d-1b1e12eb8557",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7755675a-d137-4684-a1ec-6e0bae94d963"
        },
        "item": {
          "id": "c42308e6-af33-4405-b3e2-f737835f9df0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5a600c98-d6ae-4649-9e95-65ddca974286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea6e9b5-a093-45af-9e4e-4b78f7e2abd4",
        "cursor": {
          "ref": "0b1a881a-2d51-46ce-b04c-c6c56414d3c2",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cbe6c857-791d-49c1-833b-6c9b41084c3e"
        },
        "item": {
          "id": "dea6e9b5-a093-45af-9e4e-4b78f7e2abd4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a2c1c6ca-b044-44b9-93c1-7a9f74202a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd18251-b4c0-440c-8e76-340b5a843b6b",
        "cursor": {
          "ref": "60c5d5e6-0a3b-4486-a4e1-7c66087440be",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f4eab0d4-458b-4dc6-8ae1-5dc81a675fa6"
        },
        "item": {
          "id": "acd18251-b4c0-440c-8e76-340b5a843b6b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "360b9c27-d86b-476b-be9b-d75690ef4544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f434ada4-86e3-4fd5-b2f7-c13fc0837983",
        "cursor": {
          "ref": "13893009-9357-4354-aaeb-9951ab7795e3",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "58613b3e-ba30-4edf-8a8a-958105f81ad5"
        },
        "item": {
          "id": "f434ada4-86e3-4fd5-b2f7-c13fc0837983",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "385158f4-605e-4160-bdb9-070c21af1583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c718c45-1479-43d5-94d0-3190361fb8e0",
        "cursor": {
          "ref": "90a3f1df-0560-4212-9945-9ebc4f89e4a2",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c087b83a-92d6-41cb-9149-f67da64355cb"
        },
        "item": {
          "id": "8c718c45-1479-43d5-94d0-3190361fb8e0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2875bcab-5c06-4961-9d41-5f9c59798298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b325d8-01f0-4551-adcb-f32b34b30a62",
        "cursor": {
          "ref": "f448819f-ef94-4470-8774-5b1d16449887",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6a390656-1e4b-4c05-aa17-666488a7d794"
        },
        "item": {
          "id": "79b325d8-01f0-4551-adcb-f32b34b30a62",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "95d700bf-48cd-4c0b-881a-bffb71587e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7482141f-6ce8-408f-87a4-0ac6bfba3bfe",
        "cursor": {
          "ref": "41d1f226-7c82-4789-8bad-6c3701d1cba7",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "56ca3320-12a4-4b3b-a188-6a98f5b0e075"
        },
        "item": {
          "id": "7482141f-6ce8-408f-87a4-0ac6bfba3bfe",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "80b1e5d7-0ebc-43d7-b504-813e54504767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ee2768-7e65-4d0e-9d71-f16cebb09d5a",
        "cursor": {
          "ref": "cb5fbca7-c882-4c0f-a516-c8834db57b7f",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3d08dc1c-6ee0-4029-8a9f-58efec647d4e"
        },
        "item": {
          "id": "43ee2768-7e65-4d0e-9d71-f16cebb09d5a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5f00bdff-b8a8-4a50-889d-7f0008586d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2fc512-fb91-42b4-8f74-494fa23c2705",
        "cursor": {
          "ref": "60c81568-d0ef-4938-9198-d10842bdfadb",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d3143b70-2a1e-4440-b059-7d281e01107e"
        },
        "item": {
          "id": "2a2fc512-fb91-42b4-8f74-494fa23c2705",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3a794ddd-fa07-4a71-9601-353216fc05f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed50a39-eaa3-4884-8ae2-4d5997eb31ec",
        "cursor": {
          "ref": "ad10e0c6-9fc8-4020-a3df-c55326f0c957",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1648f140-637e-4d27-a999-af62c7cc1f4c"
        },
        "item": {
          "id": "bed50a39-eaa3-4884-8ae2-4d5997eb31ec",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e4d90215-4fc6-46d0-bb7d-dbd423d34944",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f9de3998-306e-4c6f-950f-d5893d49292c",
        "cursor": {
          "ref": "182dfe9f-df66-46cc-ac83-0644f7608ffd",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "358f53b9-f13e-4133-8fd1-529b5096a566"
        },
        "item": {
          "id": "f9de3998-306e-4c6f-950f-d5893d49292c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "dde863cb-b3db-4fa5-9d85-e82e4e5b42b0",
          "status": "Created",
          "code": 201,
          "responseTime": 1753,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "3e80de4d-e930-4f99-84ed-5bbb6f805328",
        "cursor": {
          "ref": "cf8cd712-e738-4087-b36c-5a07bc0fc217",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d3d6c6d8-acfc-498c-beba-a104d31ce5ec"
        },
        "item": {
          "id": "3e80de4d-e930-4f99-84ed-5bbb6f805328",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a1634d42-0bab-434d-a4e8-f870fb7581fc",
          "status": "Created",
          "code": 201,
          "responseTime": 4980,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "415e3d1f-b33e-46c3-9cc8-9528ba270c08",
        "cursor": {
          "ref": "65567ef5-348e-429f-afe6-27b7ccd70383",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f261d523-47b2-4261-9bb7-5940d0c51257"
        },
        "item": {
          "id": "415e3d1f-b33e-46c3-9cc8-9528ba270c08",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8bedcf6a-90a9-498b-8715-1fd62022af82",
          "status": "Created",
          "code": 201,
          "responseTime": 2312,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceee0f05-7a95-440b-8e52-1a6e0de43b33",
        "cursor": {
          "ref": "3e8a1a62-94ab-4e66-8938-04cd7c438dd1",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f01a9826-7afc-4f54-88ad-1332708d236c"
        },
        "item": {
          "id": "ceee0f05-7a95-440b-8e52-1a6e0de43b33",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "88d4d4b4-d0f3-4617-823a-c2d775ccf5a8",
          "status": "Created",
          "code": 201,
          "responseTime": 4835,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b047cc-eda7-4988-9d07-363f68766aa8",
        "cursor": {
          "ref": "f26f232d-ff16-48d4-8174-c59243886902",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d87bea5f-3f97-4f88-aa83-904915c517a3"
        },
        "item": {
          "id": "56b047cc-eda7-4988-9d07-363f68766aa8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4eebf318-c5ec-4c3a-b427-6b68b2fc95e8",
          "status": "Created",
          "code": 201,
          "responseTime": 2840,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6ac027-933a-4046-b408-079c20835bd6",
        "cursor": {
          "ref": "e04ccb9a-472d-45a6-94f2-e0354e383dc9",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5f60baba-8051-4532-a68f-2aee6738813a"
        },
        "item": {
          "id": "4f6ac027-933a-4046-b408-079c20835bd6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4a4ce79d-4ff4-4cac-a790-92104e12604e",
          "status": "Created",
          "code": 201,
          "responseTime": 4752,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-29T00:37:09Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-29T00:37:09Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "5218bd3a-36ba-4d29-9c1d-578e81dc8d35",
        "cursor": {
          "ref": "e9db7978-d6ca-44ff-b150-ef4e54f0569b",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "95b85d67-45cb-4838-9948-a228dfd0d415"
        },
        "item": {
          "id": "5218bd3a-36ba-4d29-9c1d-578e81dc8d35",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "876af48c-3a16-4332-acd0-8279bf0e9790",
          "status": "Created",
          "code": 201,
          "responseTime": 7979,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d91df2-58c6-4391-bf07-9fd2fe670816",
        "cursor": {
          "ref": "19d719c9-b73b-4af4-9b39-f34c2dcaa6be",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f977a895-d58b-49f8-b6ad-9952762eabe9"
        },
        "item": {
          "id": "21d91df2-58c6-4391-bf07-9fd2fe670816",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ae81d892-aeb6-4940-95dc-d2f75f67318d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d91df2-58c6-4391-bf07-9fd2fe670816",
        "cursor": {
          "ref": "19d719c9-b73b-4af4-9b39-f34c2dcaa6be",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f977a895-d58b-49f8-b6ad-9952762eabe9"
        },
        "item": {
          "id": "21d91df2-58c6-4391-bf07-9fd2fe670816",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ae81d892-aeb6-4940-95dc-d2f75f67318d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7357caff-6d4e-451d-8691-29c4beeec92b",
        "cursor": {
          "ref": "9a9ac958-080e-4413-be45-ff539795e054",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8fc92cb3-3e7b-418f-a69b-e1b0f8860f89"
        },
        "item": {
          "id": "7357caff-6d4e-451d-8691-29c4beeec92b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4b8fe70c-425c-4634-a2d8-413095d88d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702b1b3a-5dde-49c9-a34e-654274f4fcb2",
        "cursor": {
          "ref": "af147ebf-cef6-4444-99b4-204ddf7de529",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "425f50cd-dd8a-4f1b-a1fc-0b7e3d01b03b"
        },
        "item": {
          "id": "702b1b3a-5dde-49c9-a34e-654274f4fcb2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9a618302-9297-4d34-8eca-f9bf1f6f4c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 252,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4315d0cd-4511-4cc9-906e-79f825d38343",
        "cursor": {
          "ref": "7626da54-062f-4813-a45c-62af8d4aa37f",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "271ca490-ac31-40fa-937d-22a5cf1cb2e5"
        },
        "item": {
          "id": "4315d0cd-4511-4cc9-906e-79f825d38343",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ff4b779e-7b60-4119-88d1-fcb768473377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbe11e1-ac26-4c21-9a9e-1821b55e3bcf",
        "cursor": {
          "ref": "51384dc5-3a9a-450a-9624-9e89076f2218",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "25b2baf6-fb3f-462a-b3f2-a4c4f2e2c7c0"
        },
        "item": {
          "id": "7bbe11e1-ac26-4c21-9a9e-1821b55e3bcf",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a6cfaca5-7a27-4644-8c1f-f0f3f07fa64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7143bb-bedd-4913-9f7e-c32e38173b2c",
        "cursor": {
          "ref": "62e9fac0-1881-4511-9bcb-cef462ba76dd",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "173f15d3-4146-443e-9d81-3bffcda0537f"
        },
        "item": {
          "id": "7f7143bb-bedd-4913-9f7e-c32e38173b2c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c946af72-acdb-44aa-b2bb-e30c7c3d68ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7f8a13-999c-430d-9fa2-a819db48fa71",
        "cursor": {
          "ref": "b8dc89bf-cf9c-417d-a8a6-d70f7973c8fd",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4783635f-8af7-4386-8242-d086029fc783"
        },
        "item": {
          "id": "7e7f8a13-999c-430d-9fa2-a819db48fa71",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "006c957b-e16f-4456-8b89-d401eaa14172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c244e3c-7e10-4613-91d1-6fbe66600d90",
        "cursor": {
          "ref": "91ac8dd8-0ee8-4ecf-92a8-2dccf38512ed",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "dd02d8a6-c842-4aed-8b5c-a8e139ace4f5"
        },
        "item": {
          "id": "1c244e3c-7e10-4613-91d1-6fbe66600d90",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "75fea243-b13d-4fd6-b3f7-5695aa73f1d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398f971f-bdb8-4096-9c20-5388badcfd1d",
        "cursor": {
          "ref": "46579cde-101f-43a9-8e39-373dee005b6b",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1caf8f4e-0373-45aa-aa1d-623104e1178d"
        },
        "item": {
          "id": "398f971f-bdb8-4096-9c20-5388badcfd1d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ec4bbd30-a33f-4263-8ab1-0fd188c28c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e18250-d907-4118-8fa6-77a75adf6b76",
        "cursor": {
          "ref": "78a5b16a-6869-46a6-8c2a-d1bfd0b2e8ef",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "84546ca5-e27b-451c-a5c8-b06aec81ab93"
        },
        "item": {
          "id": "c8e18250-d907-4118-8fa6-77a75adf6b76",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "818fa49b-2bd4-4216-8ae6-9cf5ca5c2feb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8364008-ddc7-49ba-a081-c73a5b77fbeb",
        "cursor": {
          "ref": "983cd541-6f82-466b-8882-efc60ab28626",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f8c6d087-88b7-460a-b862-d43aca45847a"
        },
        "item": {
          "id": "b8364008-ddc7-49ba-a081-c73a5b77fbeb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "fc980345-9649-49d5-a72a-5f4acf8c5f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16197ad-5713-47c8-a0ab-56f807854454",
        "cursor": {
          "ref": "55ba17e4-0605-4f12-b067-1870401b5f10",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5366edc7-9528-47c0-979e-cd263d9c26fc"
        },
        "item": {
          "id": "b16197ad-5713-47c8-a0ab-56f807854454",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "55920376-3de7-4d73-9c5f-1aaa650f09f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e320be-294d-4e4e-9162-47b2575eb0fa",
        "cursor": {
          "ref": "1a85e12c-d21f-48f2-93f1-3cd4bb8fdeda",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c65f36a1-afdb-49dc-9e81-f9d92c4fd5f6"
        },
        "item": {
          "id": "64e320be-294d-4e4e-9162-47b2575eb0fa",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "095cc55c-e7e3-43ad-ba13-7b190ba58c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6fd9d9f-8815-4cc3-a383-4d03395b9657",
        "cursor": {
          "ref": "3cabb75d-2f9d-443b-8f3a-c1f9706e52c9",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "982218f4-1906-45f7-ae5e-3febb7250638"
        },
        "item": {
          "id": "c6fd9d9f-8815-4cc3-a383-4d03395b9657",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3f7bccbd-d794-4c84-bc8b-1b1c1e3cf22f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc999a93-df33-4a46-b38b-0d346c54e421",
        "cursor": {
          "ref": "aa9191b8-485b-4af3-b380-053991b01817",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d8a45933-3de4-430b-a7c0-65e08614b4bc"
        },
        "item": {
          "id": "cc999a93-df33-4a46-b38b-0d346c54e421",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9002a09b-db8e-4724-8753-d6424adf5244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f75d418-3ddc-4439-a9bd-cc9f17cb3f44",
        "cursor": {
          "ref": "105aca44-1910-4dc2-ba99-e1f483894c61",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b55d1a38-4d7a-4aa3-b2b4-9245a9818b3f"
        },
        "item": {
          "id": "2f75d418-3ddc-4439-a9bd-cc9f17cb3f44",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f52083f9-453a-4b60-a4dd-c33af6655234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e626a679-3482-47b3-8921-546c255fa253",
        "cursor": {
          "ref": "babffe4b-a505-443d-a767-7efbd05f18c4",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "dff9c43e-504e-44e7-83aa-568dc128e5db"
        },
        "item": {
          "id": "e626a679-3482-47b3-8921-546c255fa253",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "807f8de5-3fd7-4158-b0f4-97b47312a3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c1ccaa-8755-4fd1-8686-52e171d98b96",
        "cursor": {
          "ref": "bc18fc42-a3a2-49cf-b141-f55ce4889ac0",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c48024d7-d524-41e9-8df8-4e402f672029"
        },
        "item": {
          "id": "a7c1ccaa-8755-4fd1-8686-52e171d98b96",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d501ef85-8738-45a9-b2ed-d4e4c9bae556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a333e66-c0d9-4399-a332-d131aabc30db",
        "cursor": {
          "ref": "1116c188-5185-4a2b-9af3-03076db80d8b",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b89d3065-fb8d-44d2-873e-7efd42c274b6"
        },
        "item": {
          "id": "4a333e66-c0d9-4399-a332-d131aabc30db",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a4d2998e-fb02-403c-bd59-79f8173c0df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c4f3562-758d-45fb-896e-b62965945c72",
        "cursor": {
          "ref": "991be1e5-8c9e-4b62-a81e-99107aaba8e2",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3ea2d7bb-4d81-410e-b528-a149fd07b0b8"
        },
        "item": {
          "id": "3c4f3562-758d-45fb-896e-b62965945c72",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ef3c83be-9a4f-4e92-9212-ba48548b4723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307f0948-21a5-4980-bccd-c2f3a5f2d8da",
        "cursor": {
          "ref": "c3d47b9a-9e85-4f9a-b966-60c11d3199eb",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8764679c-1ac1-49f5-95ae-b836eb7b7a1c"
        },
        "item": {
          "id": "307f0948-21a5-4980-bccd-c2f3a5f2d8da",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "54712268-0376-481d-8cba-44cb937121aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca023d38-0615-4bfb-bee0-5875d989f991",
        "cursor": {
          "ref": "cd716f12-ffb2-470b-9523-c00a034e10a6",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3ce6a765-02c8-424f-a4b4-84e0c6f4d443"
        },
        "item": {
          "id": "ca023d38-0615-4bfb-bee0-5875d989f991",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "44fcbfb2-9d3e-43ad-a205-58fb981912aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45dbc6f-70c4-4dde-b262-7a670bfc012a",
        "cursor": {
          "ref": "0f51c4fc-8aef-45dd-8b0c-1ea6e2f9eb77",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "31096112-4369-4cb7-b4e5-fa09ac7f7cd9"
        },
        "item": {
          "id": "c45dbc6f-70c4-4dde-b262-7a670bfc012a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3cce1db8-dc5d-4f0f-9a1a-a0179b02e17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "327f8013-d9fd-486d-8d3c-84ccab68f3f6",
        "cursor": {
          "ref": "4bf558f3-c477-4084-bfe5-64d1210f95eb",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f603421a-e019-48d5-9d02-737ddc342e79"
        },
        "item": {
          "id": "327f8013-d9fd-486d-8d3c-84ccab68f3f6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "59788b76-11e1-4ba0-babb-e58970f7657e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca660f8-5aef-4a65-b0c9-55841db2a715",
        "cursor": {
          "ref": "0033f857-6393-4fea-8cd2-1f0cbb0201c8",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ffc1e861-a6c5-4ce5-a6fe-bc9db10dedc3"
        },
        "item": {
          "id": "5ca660f8-5aef-4a65-b0c9-55841db2a715",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b1c70cf0-263b-4214-9347-fca58d048d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75b9e0b-fafe-4eb7-b5d2-68f3e06fa759",
        "cursor": {
          "ref": "a997d058-4c24-4219-89a8-5eea6e077f70",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ad4345fd-4bab-4726-a2d8-87b1a8952aeb"
        },
        "item": {
          "id": "d75b9e0b-fafe-4eb7-b5d2-68f3e06fa759",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e420ca67-59fe-4c68-88d6-e7a19721c608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b8eb64-8fac-4e71-8deb-79840219ec2f",
        "cursor": {
          "ref": "503baaa4-6fc5-40d6-891e-bae3f87448d6",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fd39334e-3fa4-4e8f-9240-79bec6f6db7d"
        },
        "item": {
          "id": "76b8eb64-8fac-4e71-8deb-79840219ec2f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4b8815c9-9a4d-470f-af23-226c68873ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6338864c-e3a4-4fd2-9e0c-590c5a930bd0",
        "cursor": {
          "ref": "83bb17f1-c712-481b-b29d-1a782ea4fded",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b86c860e-1c8d-48f8-8b08-4bb569ff04b7"
        },
        "item": {
          "id": "6338864c-e3a4-4fd2-9e0c-590c5a930bd0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5a35ce7a-5f42-4b39-b60e-0839cdeb2505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edbb1bc1-f713-4ccc-b7d8-34e55761c195",
        "cursor": {
          "ref": "c34220bb-e9af-42ed-94fe-8228a7efacb3",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "32edcd0d-9ce9-4b7e-ace0-4e74bb87bfd8"
        },
        "item": {
          "id": "edbb1bc1-f713-4ccc-b7d8-34e55761c195",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "998851a3-b1a3-49ae-a450-07c2027f6ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8500d3db-6e57-45fb-9d27-5074b705bf21",
        "cursor": {
          "ref": "e2ef3a57-59a1-46f3-a6cf-9ddbec329f67",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b4731ad7-c735-4acc-9a88-eafd7f1bd2fc"
        },
        "item": {
          "id": "8500d3db-6e57-45fb-9d27-5074b705bf21",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "881199ab-7ccc-4adc-8766-b3ec6d927fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93af9388-cc55-43d1-8ac7-c1e6d4784e48",
        "cursor": {
          "ref": "f2db832c-02a5-4a02-88b8-94aed7e02071",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a7d4c9de-c0fa-462a-95d9-4f541e9907d4"
        },
        "item": {
          "id": "93af9388-cc55-43d1-8ac7-c1e6d4784e48",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "58c41619-b963-472c-821c-1050e3fdf6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeffba5a-6b20-435e-829a-65fb5fa42e3c",
        "cursor": {
          "ref": "32ddf6f2-2897-4f35-a13a-12dc89de7a54",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d468dbb9-51b5-4ab3-ac50-de070c8a3f43"
        },
        "item": {
          "id": "eeffba5a-6b20-435e-829a-65fb5fa42e3c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d29398cc-df9a-4bd1-beab-920e9ca80697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a01f3b-1f52-468e-9661-ce8b2e22d53a",
        "cursor": {
          "ref": "7bf02056-8123-4c68-9e67-2ce57068fa0d",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c9171c34-b72d-4f44-9295-9d694e5bf7eb"
        },
        "item": {
          "id": "b6a01f3b-1f52-468e-9661-ce8b2e22d53a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "622d40da-4aba-4801-9a61-560fa78c0c83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "95fdcfc2-efde-442f-bcc9-aa14c44a2fd9",
        "cursor": {
          "ref": "ee1584c8-b1ee-4615-8d89-6af77c0999d7",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d529b557-882a-4037-89aa-bc6d08250705"
        },
        "item": {
          "id": "95fdcfc2-efde-442f-bcc9-aa14c44a2fd9",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "3e9501b9-5e9f-4bcf-8084-26abb530b78d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "b71429dd-0fb1-4add-b808-b3ba29d9d449",
        "cursor": {
          "ref": "7f218b7c-0b55-4e59-bd15-7112a406f400",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d969e94f-1aff-4348-b0dc-144a9449933d"
        },
        "item": {
          "id": "b71429dd-0fb1-4add-b808-b3ba29d9d449",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5ec71660-b4b2-481b-a720-8d3550ae3135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71429dd-0fb1-4add-b808-b3ba29d9d449",
        "cursor": {
          "ref": "7f218b7c-0b55-4e59-bd15-7112a406f400",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d969e94f-1aff-4348-b0dc-144a9449933d"
        },
        "item": {
          "id": "b71429dd-0fb1-4add-b808-b3ba29d9d449",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5ec71660-b4b2-481b-a720-8d3550ae3135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765153e9-17ca-44a3-b36d-4875f2a83ee3",
        "cursor": {
          "ref": "702cd73e-99ba-43c1-b875-1c45d198a50a",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6ef44915-b752-429e-92e0-a9a053534687"
        },
        "item": {
          "id": "765153e9-17ca-44a3-b36d-4875f2a83ee3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "372ac16b-7449-4624-b59a-a456b0c2c64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19486868-08a4-48c8-a8e4-338ca47d8c85",
        "cursor": {
          "ref": "fb24e88a-9bc6-4380-a019-d1329dff4d84",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "701caf81-8d57-482c-90cd-785a65e77f8d"
        },
        "item": {
          "id": "19486868-08a4-48c8-a8e4-338ca47d8c85",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8531a2a2-5bdc-491f-80a9-4c4c6ae4293d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee45f0bc-0a02-4ca1-9d5b-386213844bf6",
        "cursor": {
          "ref": "625e10da-ed21-4e12-8d8b-da16edf492cc",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1b3b08b7-79ee-4137-944f-42e0069ecad6"
        },
        "item": {
          "id": "ee45f0bc-0a02-4ca1-9d5b-386213844bf6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5f7542e8-9877-4e22-9d37-9d18c620db73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2480a18-41c5-4004-a1ba-ef8fc9b2e1e6",
        "cursor": {
          "ref": "d9682c82-a2ae-495d-851c-b14d649389ea",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "88b083e7-ade9-48df-ac5e-55e9f7f11e63"
        },
        "item": {
          "id": "e2480a18-41c5-4004-a1ba-ef8fc9b2e1e6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c621c12a-133b-45a3-94ad-63d2452c29d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e939c103-5afd-4897-9108-98f6253fe646",
        "cursor": {
          "ref": "ea1016ab-da99-44dd-ad7a-08884807dca9",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c54c6bde-79cd-407f-beac-244477ce05e6"
        },
        "item": {
          "id": "e939c103-5afd-4897-9108-98f6253fe646",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "dcfa6151-f5e5-4543-a3bf-92ffd9a0731f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641a25ef-8f00-4ddf-8276-459aa7114d5e",
        "cursor": {
          "ref": "b3499583-fe03-48f4-852d-33969d852d85",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "628bb82c-b63b-4fa7-960d-0f6fa75554ff"
        },
        "item": {
          "id": "641a25ef-8f00-4ddf-8276-459aa7114d5e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9d4510db-22dd-42e2-82a0-00b00f7c26b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9b6c5c-6f34-453f-bb35-5ae108403a12",
        "cursor": {
          "ref": "1249f451-fc62-4d0f-ad31-ceb13e831e3d",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "52c65660-328b-4735-80c6-53be96b4c78e"
        },
        "item": {
          "id": "2d9b6c5c-6f34-453f-bb35-5ae108403a12",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "826423db-3065-4533-a521-dcb72903d124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fc8b7a-df89-458b-a5fd-9fe8e9379717",
        "cursor": {
          "ref": "4e688212-e98f-4afe-a646-04fdbb98cea7",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a6f277af-60e9-44e6-9475-093c3d80aaf5"
        },
        "item": {
          "id": "a9fc8b7a-df89-458b-a5fd-9fe8e9379717",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "733cfa4a-a803-400f-8627-de2899d31f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337b7647-5bd3-4527-80df-e0281f337ab4",
        "cursor": {
          "ref": "7b6f9706-8411-49e1-9a5c-7e46e1f201fc",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8391d199-4125-4dad-82b8-ef906626cfa4"
        },
        "item": {
          "id": "337b7647-5bd3-4527-80df-e0281f337ab4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "69a60aaf-acd4-4ebe-bdb8-c0904fbeb58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52864051-1585-4b2d-a643-0df16b2cdc35",
        "cursor": {
          "ref": "2a80f31b-7cc4-4abf-8532-83288cf401ff",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "531d5806-31c7-4679-a008-b6c4fb94b7d1"
        },
        "item": {
          "id": "52864051-1585-4b2d-a643-0df16b2cdc35",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "90249014-9f1e-4047-847f-ac7bf8086089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745f89e8-cf23-4562-aae2-d97dea5a61bb",
        "cursor": {
          "ref": "85597a64-4337-4be4-9fbc-40326c049223",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6efe9850-100d-45b3-ad3c-3a6f639898d8"
        },
        "item": {
          "id": "745f89e8-cf23-4562-aae2-d97dea5a61bb",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e02e542a-fadf-4e4f-aa3d-bd0093d12186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20481f0e-3265-4f63-9a4f-b343b846bd8d",
        "cursor": {
          "ref": "0560601c-cc4d-43c0-be23-0718e65e2985",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "304bc73f-f906-48d0-9f81-20f103407047"
        },
        "item": {
          "id": "20481f0e-3265-4f63-9a4f-b343b846bd8d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ee7b271f-6d44-4a0c-b200-789dc425b2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eefc183a-fe6d-445e-92b8-4fe6fc6fb0a3",
        "cursor": {
          "ref": "09c8614d-f2cc-4fab-a465-16a62ef16a9a",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1f087496-84ac-4b85-8d8b-e1d4759f0f21"
        },
        "item": {
          "id": "eefc183a-fe6d-445e-92b8-4fe6fc6fb0a3",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "eec52202-691f-42a3-839f-dcb65260be5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ee9fa1-057d-4ff6-bf38-b8d4e52a13a4",
        "cursor": {
          "ref": "8ea87927-6728-4f67-b19e-d4721aacc5ff",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d57f5a9d-a21e-4cd2-b266-167f8bb00140"
        },
        "item": {
          "id": "c0ee9fa1-057d-4ff6-bf38-b8d4e52a13a4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "180b1702-b913-445d-9be7-89d49e913129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab2efc5c-e65c-4a34-a3c3-f7cdf1cc5a29",
        "cursor": {
          "ref": "ca0446b0-5cb8-4eb5-9de4-0f34be8be9b7",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "dd29ce52-4cd4-4680-9898-1a8b0cf0bc48"
        },
        "item": {
          "id": "ab2efc5c-e65c-4a34-a3c3-f7cdf1cc5a29",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e9e493b8-c698-4ea1-adf8-dd9574ab17a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc07a219-b03d-403c-bf78-c12d18688e17",
        "cursor": {
          "ref": "b68a2d19-fb76-499f-ae72-e87cddcdd74b",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e3b2d4bf-3e0a-4faa-87b0-19be982a048d"
        },
        "item": {
          "id": "cc07a219-b03d-403c-bf78-c12d18688e17",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9f86de64-9c51-4e72-9c46-8b00678bbceb",
          "status": "OK",
          "code": 200,
          "responseTime": 228,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "656aca12-9602-48c8-9f9a-c81ed115df4b",
        "cursor": {
          "ref": "e9b49149-1b6c-4cba-a5dd-be6316eb9dfa",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "920e6889-8151-43ce-9a04-dca7ad7fe043"
        },
        "item": {
          "id": "656aca12-9602-48c8-9f9a-c81ed115df4b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0472b282-e82d-4ec4-bf25-6c149d4d0a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104c39dd-d036-4b7f-9a3b-b94149444741",
        "cursor": {
          "ref": "f93154dd-3e91-49dd-98c3-28f31a232818",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "77fb0815-3527-4671-877d-2fb14cbf0fe0"
        },
        "item": {
          "id": "104c39dd-d036-4b7f-9a3b-b94149444741",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3683163d-2435-4702-8a6c-4ec62ea7b775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17d0f505-f4be-44f0-b56e-e5b497b4fd7b",
        "cursor": {
          "ref": "bc4b84bb-fb11-48b3-96cd-f3766b3a5693",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "338e6b3c-1f70-469e-a30d-11cc387630dc"
        },
        "item": {
          "id": "17d0f505-f4be-44f0-b56e-e5b497b4fd7b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7a70174f-44f7-4f2f-83dc-f93ed304df5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62101af2-612c-40a1-bc33-e318c61fc078",
        "cursor": {
          "ref": "a557bd6b-48ed-4aba-88f4-05a005d08e9b",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c1547fe4-8f12-4771-968f-b0b35de1a9f5"
        },
        "item": {
          "id": "62101af2-612c-40a1-bc33-e318c61fc078",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fd60a0c0-04ec-4832-a516-fb8a8d6c8ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7cf6c9c-6cad-479b-b3b0-624f90461a8d",
        "cursor": {
          "ref": "18393b7c-dc00-4b46-afcf-1e04775406cb",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d6312c9d-e760-49b7-8b78-22666889a838"
        },
        "item": {
          "id": "c7cf6c9c-6cad-479b-b3b0-624f90461a8d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f642025f-9a57-47d3-b8ec-971220dda709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e077dd-7efb-41f2-97b9-77ecbdb28a88",
        "cursor": {
          "ref": "30fc54f8-91e6-4aad-8dfe-611cb23061d8",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "82eb7c2a-b37b-4376-9635-5af96ea0c2b7"
        },
        "item": {
          "id": "06e077dd-7efb-41f2-97b9-77ecbdb28a88",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7f39eb09-33f5-4348-8240-25d6da478341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07989b8e-1967-4899-bd32-300e7935f76e",
        "cursor": {
          "ref": "0310fe2a-f35e-499b-88aa-92663afb4d56",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "bfe0be89-5cb1-4bb8-9062-17af89b49281"
        },
        "item": {
          "id": "07989b8e-1967-4899-bd32-300e7935f76e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "72e556be-cdde-4e2b-a67e-737f377fca9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1a2186-4d4a-4953-9a3e-845150326633",
        "cursor": {
          "ref": "2ddff2f0-f52c-4803-86be-7967a004938a",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f1f61a88-6c37-42d4-a8ff-b572f1fe78f4"
        },
        "item": {
          "id": "3e1a2186-4d4a-4953-9a3e-845150326633",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5049eb44-c9c7-41aa-ae88-5605b4681ac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d575a037-85d5-43fb-9c55-7675b88b8fd9",
        "cursor": {
          "ref": "56d2a261-69eb-4331-b938-751c8d57d668",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2dd895eb-ba7f-4be6-8963-8efefd6c6e44"
        },
        "item": {
          "id": "d575a037-85d5-43fb-9c55-7675b88b8fd9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "beba6cdc-79ae-4af0-b7b9-d433e0f49047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3c1da9-7d21-42bf-9192-6ad6c5538c69",
        "cursor": {
          "ref": "4021fbde-672b-4c0b-b58f-e8abd03e6b01",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6594037e-6092-45ad-80c2-562ab6cf724d"
        },
        "item": {
          "id": "4a3c1da9-7d21-42bf-9192-6ad6c5538c69",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5873d9bc-ff01-40b9-83df-e32893204970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5bdb03-2a76-44b7-a799-04d177f6aadc",
        "cursor": {
          "ref": "4d0e3c06-8760-40e0-b835-e75295d9f8f9",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1dc6f7e6-19c4-481a-8374-d09f6d6f8093"
        },
        "item": {
          "id": "9b5bdb03-2a76-44b7-a799-04d177f6aadc",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f454c345-4e08-4149-906a-78edc3763bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94662afd-0dcf-475b-a8f9-d090d627ee95",
        "cursor": {
          "ref": "cafea861-d84f-4e71-9025-f418a2db68da",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f471c070-5be8-41fc-b86b-7422cea7d9d9"
        },
        "item": {
          "id": "94662afd-0dcf-475b-a8f9-d090d627ee95",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "547e5f5c-b9c0-4c51-bf34-be2d213990bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87933df-c510-4234-9b22-da25f2a979d8",
        "cursor": {
          "ref": "06414e50-edc9-43f6-8211-17abb532b0f9",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d72db5ba-6185-49c4-ae63-5862bfc4821e"
        },
        "item": {
          "id": "a87933df-c510-4234-9b22-da25f2a979d8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "95adf5af-e75c-499a-af61-6bca0d48ccc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e45daad1-7e28-4f0f-89c3-e5e86e10b6d3",
        "cursor": {
          "ref": "c7081b60-e803-4e2b-a01e-ad19b2debc36",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3eeaeb2c-b3aa-4f9a-a8bb-c07e66fc576e"
        },
        "item": {
          "id": "e45daad1-7e28-4f0f-89c3-e5e86e10b6d3",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a9c3c38a-dfd0-4071-b245-4e6c941b6ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2599a698-4a90-41d7-8021-9af4c28d46ee",
        "cursor": {
          "ref": "968dbcc0-154f-49db-bb46-242a482d376f",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4b3b9e1f-f81a-42e0-b482-adc335e5bb43"
        },
        "item": {
          "id": "2599a698-4a90-41d7-8021-9af4c28d46ee",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b99a9fba-cb51-40e5-a077-14d218a961ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9adb86-edc1-4a17-bbe3-b1fa2c4e5f4c",
        "cursor": {
          "ref": "e1059905-a477-467c-8e84-1b60f501337a",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "1fb8107f-bc94-4c24-88e3-6a40f0ca9e71"
        },
        "item": {
          "id": "0f9adb86-edc1-4a17-bbe3-b1fa2c4e5f4c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a12b612f-f265-4e11-995c-40bb5c10c0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c3ea19-c44b-405a-b954-afd27955381e",
        "cursor": {
          "ref": "45b3a9a6-abae-4223-9b34-7b8f1aadc376",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c98ea231-3a7b-4b21-991b-4cc56bf8a250"
        },
        "item": {
          "id": "d6c3ea19-c44b-405a-b954-afd27955381e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "98411c36-ff83-4d11-a23c-68a3856286a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f76b91c-6f21-4774-b207-296ba2476ac1",
        "cursor": {
          "ref": "709e9d75-dac9-4685-b5a5-a8690d192d50",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "986d9054-69bc-4b86-9ab7-208818581ac3"
        },
        "item": {
          "id": "4f76b91c-6f21-4774-b207-296ba2476ac1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4bf64249-a6e9-48ef-b7de-49d4fb88d6e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23098a4c-1f1d-4d35-b921-4b742642bcf2",
        "cursor": {
          "ref": "b49026fe-2151-4b71-aa28-2760ffea5695",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "091371ec-7277-4f30-ac07-9ae35be1f3f1"
        },
        "item": {
          "id": "23098a4c-1f1d-4d35-b921-4b742642bcf2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "91b78575-b0f5-4975-b040-587b5d22e922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d138bb-bf07-47a4-8afa-f7221cc0c9be",
        "cursor": {
          "ref": "2d14339a-ca5d-42e2-808e-a1a8f3afe639",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "85c65a4f-93c5-4af1-995a-804299b29c40"
        },
        "item": {
          "id": "38d138bb-bf07-47a4-8afa-f7221cc0c9be",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "51614663-2c23-40d8-afe9-a761db0dee1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a6c189-961d-4bf6-b1f2-c147ee8506b3",
        "cursor": {
          "ref": "693b82a0-f3ba-4c20-8e69-94714d7608d1",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "db88c25a-102f-4836-a701-80442d939604"
        },
        "item": {
          "id": "41a6c189-961d-4bf6-b1f2-c147ee8506b3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "47f6ef4f-2cb6-46d2-a73c-a4d50fe3ce3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74437fb7-a5a3-4485-8872-9ef266848451",
        "cursor": {
          "ref": "6ba8fa43-1a78-484e-87b2-a1e9b2d19a4c",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "eaf92498-2151-4deb-be70-7b23f6f22345"
        },
        "item": {
          "id": "74437fb7-a5a3-4485-8872-9ef266848451",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fab86058-0e3c-4483-85c3-736da50947bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52fabd1c-03e0-462c-8dc9-b282419ed396",
        "cursor": {
          "ref": "115afa55-a82e-4c53-bdb4-0b1f534c7329",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2591aa90-a514-4b4f-a46d-5d60ad9648e5"
        },
        "item": {
          "id": "52fabd1c-03e0-462c-8dc9-b282419ed396",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1a35ed28-72c1-45e3-9969-b0ad69271fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a536837a-35aa-49b3-bd7c-88ba1ec4bfee",
        "cursor": {
          "ref": "0b3ff322-fcc4-4087-ab8f-071c26530108",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0255a853-cc35-4864-a7c7-b6c5c4522b20"
        },
        "item": {
          "id": "a536837a-35aa-49b3-bd7c-88ba1ec4bfee",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "da27683a-c210-4f2a-9adb-f7cbcf42afbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d5af62-0ec6-4be2-aecc-1d91f8bed3b6",
        "cursor": {
          "ref": "67399760-e5b8-4887-85da-81b29635db53",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8adff5ff-d3a6-4b9b-88ff-41389dd2ce16"
        },
        "item": {
          "id": "45d5af62-0ec6-4be2-aecc-1d91f8bed3b6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "72d01696-3a1c-44f1-aa46-7025b8ec7c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83e64b4-d79a-42a9-88d5-3a073b9d4f8a",
        "cursor": {
          "ref": "075d053d-14c8-472d-bb85-908e3436c733",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2f5db425-1909-4751-aa14-4a4923e2d01b"
        },
        "item": {
          "id": "c83e64b4-d79a-42a9-88d5-3a073b9d4f8a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e595663f-b665-43b5-a391-1debad73a8d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5efae2a4-ef72-4fc7-8f53-0766b2e305e7",
        "cursor": {
          "ref": "0c734597-4198-4b13-973e-2505ae1cd61b",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "640f752e-9e49-4970-b67b-16f92f46f82a"
        },
        "item": {
          "id": "5efae2a4-ef72-4fc7-8f53-0766b2e305e7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "424c0837-757a-4d20-825e-b8edda40773d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8fbf393-2a49-40b6-8586-b44185e82eab",
        "cursor": {
          "ref": "cc421780-96d4-48f9-89f2-9bc9694c5c39",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5f2911be-ffc3-468a-a9fb-06035b95dbd6"
        },
        "item": {
          "id": "e8fbf393-2a49-40b6-8586-b44185e82eab",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6a253b18-fa3f-4058-83e4-eb95dd98ef88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee99e23-1f37-4be1-b889-df73e9bc83ec",
        "cursor": {
          "ref": "6fd51fc8-20e5-48fb-951d-ead6447c166a",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "039f2497-4ed6-4efe-83dd-eaafade742ff"
        },
        "item": {
          "id": "2ee99e23-1f37-4be1-b889-df73e9bc83ec",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9f58e888-fe71-4aba-bf45-61b5462468d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2158f4ce-7f4b-43bc-86c8-208aae391266",
        "cursor": {
          "ref": "5ac69a40-5769-42ed-be44-a09d79ebc086",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a3fe3517-662b-438a-b640-e6eccbd0a898"
        },
        "item": {
          "id": "2158f4ce-7f4b-43bc-86c8-208aae391266",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2fa88178-2350-4e57-9166-a088c52be46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f74d0d0-471b-4209-93f5-37ad7815b452",
        "cursor": {
          "ref": "58a2c98a-3671-4503-997a-fe6320ba40ed",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "de9fef88-741b-4a30-acc1-b604f3dbfb38"
        },
        "item": {
          "id": "6f74d0d0-471b-4209-93f5-37ad7815b452",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b9231106-ecf0-4031-9c93-093aac3c598d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4023194d-3ffd-4ce2-9299-6c949890355c",
        "cursor": {
          "ref": "bc5b92f7-3ed2-4d71-af7c-5ef8ef3861e1",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "18102ac4-984b-4c65-9534-16168f1cee01"
        },
        "item": {
          "id": "4023194d-3ffd-4ce2-9299-6c949890355c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "bc9e97b6-48c8-4ad6-8409-4a016ce55eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4911f8e2-e0c9-4319-a4fb-79584eb2bd19",
        "cursor": {
          "ref": "aea4002e-ad25-4711-a5b6-0baab75d867a",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1fe4a55f-ecab-4b08-bfac-76945bdc145f"
        },
        "item": {
          "id": "4911f8e2-e0c9-4319-a4fb-79584eb2bd19",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "09785b50-0bf4-44b4-80f8-a87fb8573899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e6afe0-a4fd-48eb-b6f7-389a6c51219d",
        "cursor": {
          "ref": "f879fdc3-7022-4e08-9a89-76fae16e3935",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b004b75b-ea02-437e-bcee-bea08c2c1282"
        },
        "item": {
          "id": "42e6afe0-a4fd-48eb-b6f7-389a6c51219d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ee081178-c0b5-478b-859a-d43a12bca485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f6e16bf-52d2-4468-9aa7-4b678f722a1a",
        "cursor": {
          "ref": "bbb58e5d-aa31-4b92-b910-0c5cc5240152",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4e8a03ad-8ee9-4c74-8741-1a31cdde18c6"
        },
        "item": {
          "id": "0f6e16bf-52d2-4468-9aa7-4b678f722a1a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "08b54486-ffb9-4b6b-9cdb-2b2829d3221d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5c13f9-1b95-4876-af17-1335853b881a",
        "cursor": {
          "ref": "9c115755-8f54-4340-a375-4b30aa206819",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "752a6da3-237c-4588-9183-0dd25b9596b9"
        },
        "item": {
          "id": "af5c13f9-1b95-4876-af17-1335853b881a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f4d02111-404e-4d18-9566-bd1ca6183526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e39c31-0366-473f-bfc7-1ad8f6435d31",
        "cursor": {
          "ref": "7c5c8c88-3448-4fec-bd5c-ab4e3ebb8ee6",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "93a9800c-1a01-42f3-a5a8-b37311ff6df5"
        },
        "item": {
          "id": "60e39c31-0366-473f-bfc7-1ad8f6435d31",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fddf0f9c-be37-402f-a008-f7568c6b3252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb7b6b0-7cc5-4aff-a46d-9e402a64474f",
        "cursor": {
          "ref": "b7c1a7f0-b4d5-426b-81d0-5425486b8fec",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e36be032-7e34-4438-98be-f00ab0eec39f"
        },
        "item": {
          "id": "0fb7b6b0-7cc5-4aff-a46d-9e402a64474f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "81f8fbb3-a0b2-4d49-815f-d426b2fe0739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c14aa5c-5753-4904-90b2-530daaebdf28",
        "cursor": {
          "ref": "0fb6a9d3-925b-490b-89a5-f6d29d6a8bfb",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "08b6bbc7-fefc-4f6c-bfeb-ad11b67b517d"
        },
        "item": {
          "id": "5c14aa5c-5753-4904-90b2-530daaebdf28",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b9782530-09c7-4f8b-af8e-3133bd0ceb80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8dc43dd-b803-42ee-a24f-88db8fbaebe9",
        "cursor": {
          "ref": "4e3794e3-d2ca-40f7-b6be-235eb9374b5a",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8c4f621f-8dc6-41ea-a352-25d29d4c5df0"
        },
        "item": {
          "id": "e8dc43dd-b803-42ee-a24f-88db8fbaebe9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "500b1bb1-2db2-4e69-9946-3eac965232ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fbf284-a9b3-442d-a523-97e7051ce8c3",
        "cursor": {
          "ref": "0b4b6b7b-cc55-4b19-a201-ba784d3ac126",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f742ba0a-7da3-4588-b0fb-9abe91652a4d"
        },
        "item": {
          "id": "d1fbf284-a9b3-442d-a523-97e7051ce8c3",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7a55afc8-c89d-424c-8e3c-e024d7a407af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d16524-0712-4335-aefe-d0a398b60781",
        "cursor": {
          "ref": "ed95aace-c85d-4dfb-b1bf-2fc61397564b",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6454e1a3-5f20-4942-b3f5-170819b4c041"
        },
        "item": {
          "id": "e6d16524-0712-4335-aefe-d0a398b60781",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "132bb9ca-5563-4ab4-af8e-1980c91e933a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84417b29-e88b-4b84-a3aa-34d94484bc91",
        "cursor": {
          "ref": "3a85f1ea-ec56-454d-94ef-d8964ca3b975",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "16ef99f5-ff67-4d4d-910b-3d2b82e0e23a"
        },
        "item": {
          "id": "84417b29-e88b-4b84-a3aa-34d94484bc91",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "194107ec-65f5-4ca8-b600-0de6e6307061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654dce9e-e0de-415d-a20d-d4e373ffeaf3",
        "cursor": {
          "ref": "1b97e779-6aaa-4613-ab4d-e92f258d55ce",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "71e1dc9a-2ae8-4b74-bce4-1a90a31300b8"
        },
        "item": {
          "id": "654dce9e-e0de-415d-a20d-d4e373ffeaf3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a2f8c44a-7bd6-4414-98f7-9084087f9b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62dbcb2-457f-41e4-a9bd-969412c13a69",
        "cursor": {
          "ref": "ab41fbd3-5950-4b2c-8e39-fb1d5278fe9c",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "784d4809-3944-4fd0-956d-eaf924ab55b3"
        },
        "item": {
          "id": "a62dbcb2-457f-41e4-a9bd-969412c13a69",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f26166d2-b988-46f8-bdce-3fc8e1d9bd2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fade7830-a35e-4645-9e93-0a9b3c3c6949",
        "cursor": {
          "ref": "f42e67cf-2c43-40d8-b88e-abda5dcce78e",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e658db71-fc22-4393-b7b4-a056c69599fd"
        },
        "item": {
          "id": "fade7830-a35e-4645-9e93-0a9b3c3c6949",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "83b1a6fe-85a5-4b1b-9e67-57783b3f43e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9f71c9-4bb0-4899-9d0a-4acc74ae78cf",
        "cursor": {
          "ref": "c82924bc-4552-44b1-a073-1ff2a51fa1a3",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d4afa329-ba6b-4891-925e-4a66131900aa"
        },
        "item": {
          "id": "2d9f71c9-4bb0-4899-9d0a-4acc74ae78cf",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "89f5588d-e20b-45dd-b812-14c8ea36575d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38c2a5ca-7cac-4a51-8969-083c0733b58f",
        "cursor": {
          "ref": "5d245bb1-8404-4b7d-b4b6-29b30f1def63",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4561f23d-32ce-40ab-bc2b-1212201b9b75"
        },
        "item": {
          "id": "38c2a5ca-7cac-4a51-8969-083c0733b58f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "727d0a92-9565-4200-a894-d18369ef9ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4eb9ee6-46f2-4359-8d5c-71168f650229",
        "cursor": {
          "ref": "a74e5335-f853-4eb7-9022-c29d33b30cd2",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e5c6ae13-84e7-4695-8310-f485d8f6b724"
        },
        "item": {
          "id": "a4eb9ee6-46f2-4359-8d5c-71168f650229",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "379c7b1b-ec71-4898-bfe8-1fb826f48079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96940d7d-3b2f-4729-983d-e14bf99045b6",
        "cursor": {
          "ref": "1a93dcf4-7bfb-4d85-b7d6-7cdc5bbc69d5",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "fdbf31c1-2e19-489a-9ecc-b7c1148fb99c"
        },
        "item": {
          "id": "96940d7d-3b2f-4729-983d-e14bf99045b6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "82977429-4de5-4ea4-9b64-f496d030d4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a78c58c-77fb-47a1-9f52-66bc51536ad7",
        "cursor": {
          "ref": "6385209b-2a35-4475-92ba-e5093d51683b",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e3a122b8-f0df-461b-a418-5549a5f4316a"
        },
        "item": {
          "id": "8a78c58c-77fb-47a1-9f52-66bc51536ad7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "07e81a84-6f8b-48af-a2da-e901e96e8d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b7684c-c209-48a4-a4c4-24390206d02f",
        "cursor": {
          "ref": "99902e8d-b2b7-49c1-8510-47d82eaaed7f",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "be9ea084-a800-4188-8b7c-5e0ab964da34"
        },
        "item": {
          "id": "74b7684c-c209-48a4-a4c4-24390206d02f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b3c02c62-3d1e-486c-9f92-63ec8bb78866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c0551f-137c-4486-9501-cebf7903b6b0",
        "cursor": {
          "ref": "aa9e3c63-50b3-4202-ae09-968676f9f7c7",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "31113700-b060-47ac-8d35-9fa936239963"
        },
        "item": {
          "id": "74c0551f-137c-4486-9501-cebf7903b6b0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "03e9643a-d982-4630-9ece-1bc424555848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 733,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc80815-3a5b-4576-9b18-397218057edf",
        "cursor": {
          "ref": "81ef74ca-a594-4757-951b-3f163139ea55",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7e85a581-8950-4d0e-99c5-d20102af9c3b"
        },
        "item": {
          "id": "4cc80815-3a5b-4576-9b18-397218057edf",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2ac1f6c6-13e8-4fa6-b794-e0680f6060ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec80412-e43c-43d1-920e-37d53bf568f5",
        "cursor": {
          "ref": "ed3c68ef-fafa-452f-b601-e13460d1e9f7",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9b5ce2f0-ae1d-4fe1-bb65-5e6fd0e30be2"
        },
        "item": {
          "id": "2ec80412-e43c-43d1-920e-37d53bf568f5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7ab0edc3-c394-47a4-967c-c0c23667839c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b49fb2c-0cdc-4081-8d95-1bacc9f9fc9d",
        "cursor": {
          "ref": "842fcf3b-2d43-4b84-8603-99d1f153b053",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "54f9ac3f-c83d-48fb-9773-6c3c8c984a45"
        },
        "item": {
          "id": "1b49fb2c-0cdc-4081-8d95-1bacc9f9fc9d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6d89fcaf-5c13-4621-ac02-5ba8a820ee24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e8dd4d-0000-43b5-8f1b-08c7e993c24f",
        "cursor": {
          "ref": "56320f80-3755-4dc6-807b-2e2903d01aec",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "59411b1f-7ff7-4f34-848f-53995976e860"
        },
        "item": {
          "id": "f8e8dd4d-0000-43b5-8f1b-08c7e993c24f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "85920b6b-c62a-4a43-b1b9-9b9a3a59753a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87bdbf90-62a0-4c4b-a039-9e791570851b",
        "cursor": {
          "ref": "85b8026e-5e07-4a6c-a31c-953b6bb1bc0c",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d1557c78-725a-4318-8622-70f822a8a504"
        },
        "item": {
          "id": "87bdbf90-62a0-4c4b-a039-9e791570851b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a0a018d9-97f8-4a49-b01d-aceeec35c679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "047ffee1-d7c5-4605-9a54-f182bfb70677",
        "cursor": {
          "ref": "7640445b-8bd3-4c26-bc9a-4d64ac47507f",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "80dec390-f424-4054-ad87-bd59401d312a"
        },
        "item": {
          "id": "047ffee1-d7c5-4605-9a54-f182bfb70677",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3325f197-884e-49f3-9ae3-8aa8fd3c70d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba95dd7-d6e8-4d25-8c10-20b186382221",
        "cursor": {
          "ref": "fa0c24a6-c79c-4439-bd0e-08050ccf70e3",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bd8f91dd-1632-4fa6-8589-fea38ce32a1e"
        },
        "item": {
          "id": "3ba95dd7-d6e8-4d25-8c10-20b186382221",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5a54a7d6-7984-48ff-8e5c-d648f7f4cef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "178e5ba3-3188-48b8-92ce-80f6f8b680e0",
        "cursor": {
          "ref": "fe2fc1e5-6cdc-44b1-a57a-402a623b7fa9",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "df846ba3-cd96-4176-b6f7-74fc1b96d0e9"
        },
        "item": {
          "id": "178e5ba3-3188-48b8-92ce-80f6f8b680e0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "65627e3e-943d-4404-b04f-6c8e063b39c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068bcaba-db69-4cac-94b6-591dcb4e3815",
        "cursor": {
          "ref": "852fc64a-5d6b-4f05-9852-fa375d35368f",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "17f11277-c9ac-46ec-9273-dc7056f4bdfd"
        },
        "item": {
          "id": "068bcaba-db69-4cac-94b6-591dcb4e3815",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e4d69c97-936d-43b3-9234-9bf47564a867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f02623f-5034-4ded-a737-a743d0032e8c",
        "cursor": {
          "ref": "36514845-3f56-4dd8-b0db-9e568fe40465",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ce74ef94-d4d1-46bf-825d-36a3c3d75158"
        },
        "item": {
          "id": "7f02623f-5034-4ded-a737-a743d0032e8c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a97e60d1-f593-4fa0-8b58-518d4685f4d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b13043-06f4-47a9-b8cc-65d9db42db10",
        "cursor": {
          "ref": "09a1071c-b2db-4bd3-ada9-3977a040df69",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1fe53ae9-a214-4fc2-b08b-938e985e815c"
        },
        "item": {
          "id": "47b13043-06f4-47a9-b8cc-65d9db42db10",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "eeafebce-5967-4849-ab59-94e1bdd449ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a9f41e-5250-41cc-b117-27e62fee7255",
        "cursor": {
          "ref": "afdec8f5-b73b-4d0e-a476-c5b0c58936da",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bc1764c1-be8d-40ac-a8a3-be3c768269b7"
        },
        "item": {
          "id": "10a9f41e-5250-41cc-b117-27e62fee7255",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "bf97f47d-a584-4964-b483-da2e6057c3b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef3e4d2-5045-478b-a24d-dec8adbe361c",
        "cursor": {
          "ref": "d5797055-034c-4c95-b89c-3f7c02f837f7",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2b9244bc-8234-4fa1-b641-f99e13c8dd17"
        },
        "item": {
          "id": "8ef3e4d2-5045-478b-a24d-dec8adbe361c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8b5652a3-e1ae-47fb-8595-68b78174dfeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2b9aad-1cbe-4bfd-bbeb-df00ece66da2",
        "cursor": {
          "ref": "8dba7439-d85b-466e-86cf-bbd1b08c70f5",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0bcc8973-fe10-44cb-b94d-91a7fa59534d"
        },
        "item": {
          "id": "ce2b9aad-1cbe-4bfd-bbeb-df00ece66da2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "460bf7a5-a774-4ced-b262-7025d6ba9275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9d061c-53af-43e5-9ab4-2d120b6d94ac",
        "cursor": {
          "ref": "da935515-1770-41ab-95f7-69e35d9b2efa",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "42b8cebf-99d6-4ed8-a5cf-5c0dd855a611"
        },
        "item": {
          "id": "0e9d061c-53af-43e5-9ab4-2d120b6d94ac",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bbb32ad1-06fb-4802-8199-9daca773abe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522c8c0f-0827-4c23-ae88-c50e258fc706",
        "cursor": {
          "ref": "0fe954de-e3c6-4d93-8864-91d078062366",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "71d0ab2c-cede-4e53-bf63-1753e85b08e6"
        },
        "item": {
          "id": "522c8c0f-0827-4c23-ae88-c50e258fc706",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1eb67243-4670-469f-8fbd-ecd911272297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505f6e61-50da-411e-a6d1-871660054540",
        "cursor": {
          "ref": "ecadbab8-b20d-4446-9074-0eac95185c07",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b7166e45-cd97-4343-8cd6-95a0ab2701e6"
        },
        "item": {
          "id": "505f6e61-50da-411e-a6d1-871660054540",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "55ef6c78-6dbf-4494-8ac2-d9223847d1da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6800da3f-a98e-49c0-8489-9c1a763b8ea3",
        "cursor": {
          "ref": "688d706c-abf2-457a-a712-e0da59c9ac23",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2204bb32-cc51-4286-b183-b919964402f1"
        },
        "item": {
          "id": "6800da3f-a98e-49c0-8489-9c1a763b8ea3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "85c9820c-ef49-4459-8208-7aa7d0a8b0c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf5b655-650f-4d3c-a573-20e1e3e69793",
        "cursor": {
          "ref": "aa2482bb-7ad1-413e-9413-08f5ce128819",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "638350d4-64d0-4c01-b76b-65b4c6fe71fb"
        },
        "item": {
          "id": "8bf5b655-650f-4d3c-a573-20e1e3e69793",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c46ca8cb-1a2e-440f-affb-f8f26d32e4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95741c0a-5f28-4c9f-8f78-27942873285b",
        "cursor": {
          "ref": "9fa0ad39-10ad-485c-8f3c-09d2f7090f53",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "32f42780-3138-4693-af44-b36874e8f570"
        },
        "item": {
          "id": "95741c0a-5f28-4c9f-8f78-27942873285b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "76f8633d-3d2f-4a73-bf74-de8ae8118e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "871469a3-7005-467e-871b-ebaef86f0991",
        "cursor": {
          "ref": "07ecea30-d9ee-4a07-aaff-e33c1fc2cf9a",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a97d43a0-e2b9-49d6-bdf9-f2615c2b503e"
        },
        "item": {
          "id": "871469a3-7005-467e-871b-ebaef86f0991",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e124f085-c5bb-487a-9bf8-5ed02d93efcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a15891-5910-4e6d-b6c1-2f40ba592636",
        "cursor": {
          "ref": "8a9786cb-8211-431f-920f-e76b4467b7df",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a1881ebb-7420-484e-a976-9fd08398ae09"
        },
        "item": {
          "id": "07a15891-5910-4e6d-b6c1-2f40ba592636",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a57cf1cf-38a2-4f52-af0c-4243883e1556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625bff88-b957-4025-a6c6-0a992a796a1c",
        "cursor": {
          "ref": "b1901604-0f19-44a5-8cda-dc058c45517b",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "79f7799f-63a7-42db-8887-1e369be24012"
        },
        "item": {
          "id": "625bff88-b957-4025-a6c6-0a992a796a1c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7fa3b77c-f990-4fe9-b38b-9b4b7a68a4d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b379ce-055d-4ee8-8481-c5e6e031dcb3",
        "cursor": {
          "ref": "91f4a3d0-6a46-4a8b-aa08-618ce6647fd0",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "feacac7f-15eb-4f59-8226-35d89eaab9b2"
        },
        "item": {
          "id": "14b379ce-055d-4ee8-8481-c5e6e031dcb3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1c4311d3-d43d-4f16-a5d2-53c46ef1a4c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc1cbb8-d66f-4ee7-9029-8cff42d5a62e",
        "cursor": {
          "ref": "94a8b1aa-1d4b-4876-a6de-afd2dc150c8f",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bc5061ef-9841-47d5-9ade-b711cc11df4f"
        },
        "item": {
          "id": "fdc1cbb8-d66f-4ee7-9029-8cff42d5a62e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3f0275ac-a2af-460d-91bc-5880afece386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a61994-b44c-4bfd-b7e9-4fe6ee90683b",
        "cursor": {
          "ref": "931e32dc-6cfa-4d26-9193-f4437c3f311a",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d94e9d1f-9658-49d9-a4d7-0516182919ae"
        },
        "item": {
          "id": "96a61994-b44c-4bfd-b7e9-4fe6ee90683b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0a6cb3eb-85c8-4dd4-a4ea-77b885823c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85309de6-9687-439b-92b1-8df9b93fc931",
        "cursor": {
          "ref": "face84ee-a39e-483d-b103-2d8e0245032e",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a094ae0d-5282-40d0-a6b2-9efb639ff019"
        },
        "item": {
          "id": "85309de6-9687-439b-92b1-8df9b93fc931",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "010ab928-551f-41e6-8ea2-8fa2b0121002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0e8f42-ad50-40b4-8450-c8e40e961d1b",
        "cursor": {
          "ref": "3cf633a7-c384-4df2-a5e8-31ec971e6deb",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6d17f574-5aca-477b-9fae-14134d773213"
        },
        "item": {
          "id": "8e0e8f42-ad50-40b4-8450-c8e40e961d1b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8df33c3a-46a5-4e1d-a9d1-0688bf154210",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 238,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "7e85bec4-6bca-45e9-97fe-b01f4ce4d04c",
        "cursor": {
          "ref": "1aef56f3-cf48-45c2-a1ee-beacaedb1474",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4d9e3d56-1e99-4b0f-85e4-eceec4059edb"
        },
        "item": {
          "id": "7e85bec4-6bca-45e9-97fe-b01f4ce4d04c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c0669e8b-6264-4efb-b9b3-f6ec0c75e3ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "fba89e05-f7de-49a9-b0bf-b09bec04ce4a",
        "cursor": {
          "ref": "14b4cd08-ca7a-4d83-b5ad-cf9a901592d1",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8a8bc09e-9687-409a-8115-3729f0d3269b"
        },
        "item": {
          "id": "fba89e05-f7de-49a9-b0bf-b09bec04ce4a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b3ea1220-9623-4ddc-9a81-752c9becb30a",
          "status": "OK",
          "code": 200,
          "responseTime": 373,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "574f6e53-57dd-4c5b-81a6-54884b88749b",
        "cursor": {
          "ref": "4d08efa0-c4ab-4103-b64e-5108521267e8",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d7330592-6e17-49ef-bffa-9aee4ad40b0c"
        },
        "item": {
          "id": "574f6e53-57dd-4c5b-81a6-54884b88749b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "15c3d9a6-140e-48bc-bbcd-f2e669666fad",
          "status": "OK",
          "code": 200,
          "responseTime": 1783,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2d5cf1-04bb-4bbc-ba78-6a067b20811b",
        "cursor": {
          "ref": "b0fcccd8-5aee-4c2f-889d-f5a4c13b5932",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fa2d524c-52b4-472d-b63b-e6548e0aa934"
        },
        "item": {
          "id": "be2d5cf1-04bb-4bbc-ba78-6a067b20811b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "37b72c21-d9a5-49ef-9f7c-32cd3fc67011",
          "status": "OK",
          "code": 200,
          "responseTime": 2400,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65156d5-d03a-4bc4-8b0d-598d944cfbff",
        "cursor": {
          "ref": "1ac8af37-1125-41da-b22f-4222839013e3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9b3489fb-b846-4cd1-b41e-b0fe7153f66f"
        },
        "item": {
          "id": "e65156d5-d03a-4bc4-8b0d-598d944cfbff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4608d9cd-29fa-418b-9a6d-281c7677b273",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "e65156d5-d03a-4bc4-8b0d-598d944cfbff",
        "cursor": {
          "ref": "1ac8af37-1125-41da-b22f-4222839013e3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9b3489fb-b846-4cd1-b41e-b0fe7153f66f"
        },
        "item": {
          "id": "e65156d5-d03a-4bc4-8b0d-598d944cfbff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4608d9cd-29fa-418b-9a6d-281c7677b273",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "e65156d5-d03a-4bc4-8b0d-598d944cfbff",
        "cursor": {
          "ref": "1ac8af37-1125-41da-b22f-4222839013e3",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9b3489fb-b846-4cd1-b41e-b0fe7153f66f"
        },
        "item": {
          "id": "e65156d5-d03a-4bc4-8b0d-598d944cfbff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4608d9cd-29fa-418b-9a6d-281c7677b273",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f79e08c8-5cbd-43fb-889b-62de176984fb",
        "cursor": {
          "ref": "96081479-cbb5-49a3-8a31-72ad9c10a815",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a560cd97-7a46-4e97-8fdd-83d2f1f46c10"
        },
        "item": {
          "id": "f79e08c8-5cbd-43fb-889b-62de176984fb",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "99b08061-d606-4ff3-ad0e-9a74b4eb2601",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "c1f6611a-058c-4df1-b2bb-c06f1968b3b3",
        "cursor": {
          "ref": "3c739765-101a-49a4-a331-0939b8e8ed17",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8a702f65-d2ea-434a-9351-415ba898b7cd"
        },
        "item": {
          "id": "c1f6611a-058c-4df1-b2bb-c06f1968b3b3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7ad25fd3-d858-45dd-a327-2fa2c66e932a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "c1f6611a-058c-4df1-b2bb-c06f1968b3b3",
        "cursor": {
          "ref": "3c739765-101a-49a4-a331-0939b8e8ed17",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8a702f65-d2ea-434a-9351-415ba898b7cd"
        },
        "item": {
          "id": "c1f6611a-058c-4df1-b2bb-c06f1968b3b3",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7ad25fd3-d858-45dd-a327-2fa2c66e932a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "93299cc0-5077-4c1d-8656-0e6553017080",
        "cursor": {
          "ref": "a85db6bf-de10-4f89-98aa-e3be5ceda472",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a4c5486e-3a55-4275-8343-6616e4c49c68"
        },
        "item": {
          "id": "93299cc0-5077-4c1d-8656-0e6553017080",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "8200a3c0-563f-4a32-aecc-96e51db1a171",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 445,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "86ad3097-f7ab-41d8-a9ab-bc1113ab038b",
        "cursor": {
          "ref": "50e3eaec-70b9-4d39-adca-5a54df4f6ad4",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fbd48892-79a1-420c-83f5-c4ad07fba47e"
        },
        "item": {
          "id": "86ad3097-f7ab-41d8-a9ab-bc1113ab038b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7d452a64-b259-4df0-ad9f-f1033e1d5109",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "86ad3097-f7ab-41d8-a9ab-bc1113ab038b",
        "cursor": {
          "ref": "50e3eaec-70b9-4d39-adca-5a54df4f6ad4",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "fbd48892-79a1-420c-83f5-c4ad07fba47e"
        },
        "item": {
          "id": "86ad3097-f7ab-41d8-a9ab-bc1113ab038b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7d452a64-b259-4df0-ad9f-f1033e1d5109",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b549ffe1-479f-4e94-a97a-c9eb668b6490",
        "cursor": {
          "ref": "aebb74a5-be08-428c-92d1-13977a975f9b",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "af0cfea9-2dc7-4c71-9958-7f25c30e6bc8"
        },
        "item": {
          "id": "b549ffe1-479f-4e94-a97a-c9eb668b6490",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "0454304c-c827-480e-84d1-455188b53ca5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 133,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}