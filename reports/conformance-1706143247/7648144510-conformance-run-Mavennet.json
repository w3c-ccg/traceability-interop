{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "95c23baf-bd50-45f8-98f9-e0d3f249a9bc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fca0ae1b-d846-423e-85a3-740b2b99b318",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70e7c61d-3536-47d1-8862-bf5a6fd5b4b2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7dde4e1b-2ada-4a9e-a8a4-98eb4fe8bad8"
                }
              }
            ]
          },
          {
            "id": "0bf5d392-e030-41e1-81ae-396930ba66c5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f20ac8f5-e2f0-4c94-b685-5cdfe873f86b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dcbe2544-cda9-44d7-aafa-110499aab179"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "da579e06-f6e5-4cee-b045-9c9dd2d8d49c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5fdc159b-47fe-4243-a97d-840315ba1dc4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a2eab1f0-5adc-4c6c-8f91-778c84fe7a75",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c282cbf9-031e-4fbd-b952-0e74c176a059",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6063d8e7-1799-41ff-a83d-fcbefaf7f38a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "868f94f7-80cc-4660-bc9f-57e28ad4379b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea577ce1-5d8e-4e2d-a867-556a235ce6b2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6f1b83ed-8253-4688-8a7f-6dc295f8d240",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "26242d9c-f705-4d8c-82c7-2e59f869e751"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "368679e2-dff0-4829-b4eb-bb612ec80e58",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9ab2b620-0ebe-4a49-b6e1-74be7cb05dbc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af21c8ab-683e-497f-9b08-7e4e3c71b2e4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "891908ea-45f8-428f-8a5e-60bb88fb2124"
            }
          }
        ]
      },
      {
        "id": "7345cb91-e272-4cdf-9486-6ad293c1ca4e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "85b3d8d6-2a1c-4007-be88-12b2d61dfb4e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b38d982-0602-471a-8a06-fce7dd53d066",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e50b3b55-bab7-4d61-9b78-027454aa6404",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d540cc8-ba01-49d3-b001-6547810ea54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48797658-6f36-41c6-8c1d-f257ee7d21b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf62e54-d30f-4f30-8233-07a508e08934",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99cbf61-95e3-417f-bfd2-1f6a12bbd849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b36c6663-4d6f-4da9-ae23-79f909bc3a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5752d12e-731e-4862-9492-88863c3e1aff",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2468976-3437-46bd-8fa8-5cf0c33161ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9883ad4-f4e2-4838-84f0-bf28c3651c32"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "acff23ae-30c4-4231-9cc2-96dcf32a749a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db2174c9-da21-4294-bffa-c475dde23566",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b1f2d3-af4e-4643-9073-811c069e5205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "276b1d99-4672-4bf7-b62a-980b49892a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c75cc85-b291-47a3-9222-d3be651640a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef726f9-3f11-4296-8941-db09208d8851"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "781fa931-ec74-48ea-b8f0-36360471adce",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c86446e7-a2f0-46f0-88da-86c8a805f92e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9319af64-7155-4565-a36c-735f4b7d5477",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cbedefec-6a6d-4cb6-b5ec-67fb67003902"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0474936b-b3a7-40b2-b144-c46b395f3972",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1091d2ac-df6c-49f8-b1ff-0bb9c03008ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb712c98-9980-4db1-800f-fd24fb1406d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ecace039-f9d3-476f-a357-add04ab68312"
            }
          }
        ]
      },
      {
        "id": "4b438da9-e545-45c8-933d-38e64b7d7478",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0ff97d12-fb46-4058-9099-894b72579fd6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3229a382-38a4-4d18-ab90-be40a00391c1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2646eae9-1065-48f2-8d17-2b1e0e93428e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a271ee7-b729-406d-ae08-99e42f9097bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ec6cb9-8127-4fc0-a3f2-a299a22ebc36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8397a45c-286a-4810-979a-9b262343478e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3e72332-0d64-493c-8637-d2f38d1d470f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd852b2-a5c9-4295-ad4b-8b22863d16cf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5b0045-ae15-4096-b9d3-3f67aa72be39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30c4d46c-d3bc-4b09-811d-94b6d94121f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6358f4-d9c1-440a-8f3b-2e15cc8c4ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "436733f9-5696-4e27-bfcd-cf40d0beeb70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4999b20d-e130-492b-9d2b-296aee2b93d4",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4de79a-631b-41be-a572-57c8485529f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a2ee2db-fa49-4a57-b359-9f4af88cdd98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f6899b-8204-4396-9310-6bbdc7a33e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffb2e473-5edb-44bb-a7f1-0d0dc0cac077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650afa26-a990-426e-ba2b-1691c206e6f4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816e7db3-1107-4b58-a0b7-0bf21f011daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2ff84b-2d5a-4f9f-ae38-f6f79da93e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17738242-97ae-4949-9993-a561c899d362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11efc283-2c30-4303-9f99-beb3810158a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdbd04a-9951-44fb-9823-d1f462875f69",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa022466-f703-4986-97f9-467a7443d5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1029fdc-cc2c-4396-992f-a804e79afb26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ed283e-a975-4085-a7a7-00e4016832e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83785770-3487-4332-885d-4adbcf4735f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed3f00f-2f74-4ed2-89da-9b8e848b897b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8754e342-b557-4267-9346-8b3b55f66194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a96e2e5-0723-4f9a-8cdc-940300307983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a44c14-36fd-4097-a066-52b3741a1f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3d6b58b-7978-4ca7-a8b3-b4c1a66a829c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f2a7df-c2ee-4951-aae9-b69df37f7684",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17f0c33-ce6e-41e8-9628-9df5579f2487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775e2b3c-a4de-40c9-bbf4-3dd6e1875e23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209c7bd5-47d3-47b1-b8ff-f87c08b8167c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aaccedc1-25f4-4454-971e-68dfe9589f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ad4faa-d6d0-4677-b14a-d38471f06f1e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d367683f-3599-472f-ae63-0b30f026b8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d16227ff-60e4-4cd7-bf2b-377eaa172ede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf87fae-293c-41a0-b4f8-f269f5eb0e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "733e7d78-d960-4a65-8c1c-24ffb615b945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f173b2-5822-4896-8c78-23006003fea0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "000321f5-b300-4b22-b377-92af2f7f33e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd2d32d7-ebfe-464c-94ab-075ea08d97c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7cacd2-3410-4699-a51d-2d1e9e24fdaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55991243-e15c-46ef-9798-cb3c8ffc383b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606af494-30ec-451c-9291-0b69d1742624",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc199700-df25-4fff-877c-1eca1624a2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd99a616-bbbc-4643-bcb5-9e5e9e5c277d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7309917b-fd19-45a3-a162-a91bfc6bc2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28a68e46-7135-4e6a-8037-376365e72263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9f38bf-88b9-4d9a-97ea-23fe6d32f129",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a001901-afc2-4d8e-9657-ea4a5ab26a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8ce96e-1a34-4c54-b4fb-88ed29ebe4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ac73d1-aac1-4bc4-a612-7226cd7652ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a78f96c6-cf41-4cc3-8c5e-4b72a14d38bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72132b6-8c33-4919-a14b-044bd6ec45a8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2f35a5-c559-4cb6-8f0e-7ba54dacbee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d01f1e-7983-494f-a3c2-832c28886175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae922c5-513f-474b-b390-3ac263bf2938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88ef0d70-4da6-4586-b7b8-b6caa589ef44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5a3c99-5bb0-4ddd-9e5e-9c47d24aa987",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2619bec-19e5-4ed3-9cfe-bcc72575b9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d214628-8b60-498e-8061-79322608b145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57136cf2-ecdd-4a97-8ed8-6cd44377c606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec5ab1a1-2867-40b9-a687-3e723c977be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79412905-3ab3-4efa-9b9e-5f33b4b8c133",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b51a91f-ff35-4fbe-9271-b1a03f2ec709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa8d8a8d-40fd-445b-91a3-b292ea42b802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33ac409-c48c-4db9-8cd6-16be9b571459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4764e61d-685c-41d2-a6c2-20c18e27e066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5124867b-7b49-48a8-b616-14ca65a73c23",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fc18b8-616e-4b5b-b458-a171825762b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3665b2d-2e6d-4f45-96d0-7f3b91b50f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3f82e9-e4f0-44dd-97f1-a686f3690a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19e10083-596b-40b0-a864-f5a5187c86df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00d5639-f6f9-40e7-9d15-98bfa3e86de8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247d18d9-0ad7-4530-aaad-101a9e6a6287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac1cade-479e-4d5b-a757-70d3e5ee7b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144cfa4d-d464-4dbd-a8af-ba1ae0de748c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3bd31bd-db25-4085-aa81-5da7e34a3510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2db28c-dbcb-4503-a563-9d61647b5d28",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b28401-6d84-4fe2-bc1b-69c070fd304c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48474c24-c5bc-4bbd-9bfd-c8a074f1eb1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9da8df-ba72-4242-b142-a4feed5bc99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b416d709-8812-4df2-8342-bd0a7ada96f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37687c2a-10f1-43a1-bed7-ab69c9090861",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf96006-aba2-4080-84ae-c5ce24d0df6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b7b602-fe71-4bab-b14d-ed8f31a19ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08315868-155e-4608-bdf8-5f92a72935b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cccb7d0f-7d41-48c7-9c0d-0b738e1195d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78befd20-8720-4b97-8054-c0eb01b5314c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9190dd81-06a0-449f-9af8-007c991b7ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db6a112-4087-454e-8623-6fe43c7fee53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84096976-559a-448f-8644-ac850fe67fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28702405-bd4d-4b24-825e-bd253dbb195e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "affe6fef-c6b4-43ad-8fd9-496b05d28e4c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0073a5-6dc1-452b-b57a-d4ebeff72599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155c702d-f5a4-4c52-a853-94088d711561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d863ab-43e5-4b93-b70e-6cfeabfbc8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a91194a6-df46-43be-8ea2-1a1cdcb46ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d036fb7-d671-4422-afaa-ed43759e787a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e5ece4-e79d-486b-bb9b-f1d8d86651b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f04e82-d69d-44db-b860-1b127f539104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ab1998-0e3b-48dd-9df0-147e017261b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "031fe4cf-2fc5-4df8-9729-6d6f93d5e1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228e55a9-dc24-4ea8-9946-b0a825e203d8",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ab1d37-065c-42a8-ac78-196744784f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf073d4-321b-42db-8698-cb7dc785ac88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820b9eba-866b-4caa-8ea8-96632fbc6307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad5e6596-558f-4a9b-a127-49e2265ef179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8753fa8-da10-41cd-a1a3-4a71b3d67172",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a76c6b1-6771-42b1-832e-2a797294bb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63c3b42-a73e-43d2-b4f6-ff1fd5539f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a96249-02b3-4bb8-bbd3-32a5bb3d41eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "220af855-e39c-486a-ae59-75ebe0cbb3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f511b5b4-aa88-4b36-9ae0-a4dcafbba6cf",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7acc8c9-8036-4eaa-87fd-b574e94ba0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987a378a-40fe-427e-865d-a2c75a88a360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166b8a8b-2e23-4f07-adfe-34d7bf0bdfbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea41116e-b7d0-4122-a502-a2aad957e1c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0480ac-8bcd-4b96-b0ce-7bf3b270d36f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1068bb2f-93aa-4659-a025-2f92ffebe111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e9f57c-0106-40f8-b2fb-50f2be0b0878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d18b669-236a-4f2d-a085-e663a50dd0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b719eec-b10c-494b-9068-b66f91f6c6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2ac625-4207-4b8c-8c7f-81c5a603768c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73db2f3f-c2dc-4451-820d-087f683bf4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd5e8749-c64c-4027-8fad-597f79ab41ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed48346-b39c-4412-8a9d-5b2d8de7f8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbb02d78-f783-47c1-b753-b57e7d2561d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed6b5f2-59da-4e03-9b78-25097256823a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dad3bab-6675-4bed-905b-d674ab25321c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "285b640a-0944-43a8-bcbc-ff233be25e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba323020-425b-45cf-833e-12fcce2b2a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9ab8c7e-80ac-46e1-bc5d-0a3bccfb84ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa45e47-018a-4438-b5ec-cc9a223050ed",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2474a748-6d8c-4d57-a067-fd8fffd76be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e040274-cebf-412f-bad9-5873f7665a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58dd018-e3bc-4e84-9a33-949b60960183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d5e9910-123b-46c9-8af5-135f2c328694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9658e04-f6cf-426d-a403-06c8d28f1f5d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90672217-b365-4c5e-94fa-f9014f682016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d4bfa5-74e3-44e4-ad36-47d723b300d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46127b79-c3c4-49d1-bbc4-7f6d7e42904d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9352aad8-3ca0-4e73-b886-c5436b0fe217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdbcc98-d242-4499-aa96-723f22ff64fd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1fd2ba-d06a-435b-b38d-fa6c20368405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31849d37-96e1-4ca6-9282-82fcc4472072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60eb7f0a-7213-406e-8bf6-e6bf2f35836d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "15ff9491-0d63-44b1-b2d3-00688361928c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf599ab2-683a-4d78-a1da-be80949c29a4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "854d1a2e-8906-4f74-bd31-87d10672bda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b54bc55-63ad-422d-b934-aeb858419642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b3f6fa-d92e-4921-977e-cff89e08a186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "00b2c6e4-27b0-4d60-b203-717ccd322b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7238d221-0f91-4875-aa25-2a6bae0fc4a5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93d0576-9b0c-406d-9d3c-88146de0bb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c26ed0-9d5a-4e4e-b25b-2f6668de8f7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548782d7-c476-406a-ba54-f511961a516c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2dbd9c7c-25b6-49d6-a3c6-f8462a92223b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86edf54-7b38-4dfe-9359-22960a0d51d9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5316eb-1c81-4feb-b13e-c9510ef2fbd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ddf175-6030-422e-8515-cd51ccbb10d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea95a74d-285e-4057-8560-2060590bd132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc3d375-9be5-4598-9939-372a5413502a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858f8e3d-5a8b-4726-ba81-0680d81527f6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e13c58b-d508-473a-8978-4946e54c2736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41142ddc-6fb2-4155-a14e-9878a4036393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbe338a-2bf7-49b5-9fc4-4868a9e42f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5476bf4f-f3c8-4e16-9cdf-41c407d74f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8fdc523-4391-41ee-a1d9-faff261902c9",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0f3047-9b24-4cce-8a07-66ed6c556e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249ca279-6e7e-453f-9d71-2da4b98622cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa46dd14-f12e-4cb5-85d8-bda28dc1157a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "193625a2-eb97-45cd-a46a-e6cbebd11187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b315ab3-f359-46f3-be1c-bcafb14fa9df",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9edbdbc9-bd09-4ce5-b524-ed23f3ff1ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6d08ddb-36bd-431f-9fcc-7ca244046031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d112899-46ea-47b3-a356-c5292a485e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae703ae3-cf05-41f8-8dae-9f7ed157c3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d86895-fd43-4c9c-9c2d-27d7f8b8e614",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f186164e-a2c9-48ec-b55f-562f013f6823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04031abe-07ee-4ce1-89d0-57bcbe5f2e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "338c54bd-fc09-4650-96f0-0158b7665ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae319d7f-86c7-430f-a2c6-8f3f7d6101c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3dccb0-3a2e-4f57-82f7-75f710791682",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1ceec0-83b1-47e1-aff7-5b1782ee0201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd8dabc-8d0e-4baf-9c3f-cf38ce299dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41504661-c728-4eb2-86a3-7c051740e139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee82b941-932b-4d24-b0cb-85183bb3c8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3523e2d-0201-4b64-ab02-641b92c77915",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46466885-4cc5-4775-8b7f-7d0cc9670002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a44763-d011-4389-a0d6-eb06c4fcbe01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1f6f41-2886-4adb-a830-5425924ab677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3197be22-71b6-4e51-8fec-38c619cdbc50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce14cc4a-8574-4505-930e-aedef4d72de2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ecab1d-a745-4371-9748-2b8f9b3573ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10bc1496-ee5d-4f85-aad0-277183903927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec77af8-15d5-443b-8988-d79c510612e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "72f49560-df03-4759-b5b3-859fd3ee0438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96f61e2-0240-4a14-bb32-181ab0485dbd",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b656454c-84d7-4907-a530-869f80042d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da8c2b9f-4496-4c7e-850c-187b28a0eb86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14070116-143e-43dd-94ae-40648ae5681c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba41a76f-cfb4-4b6e-8602-c97bf7a0c9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabcb8ef-d8d9-4441-b1b8-e6d6302e8c7c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a87c2f-63aa-45a5-9d1f-83ad00573fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a632e45e-6ed6-4e78-a454-57b73dc4ec7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c59f64-726d-4413-ba9e-dcee603a90c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "acc66b6f-49f4-4f8b-87b5-65a559d8a2bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80e3132-6d47-4ced-9f32-c1593072e1f2",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "814b16d7-edaa-4bd7-9191-5b8f35f7d213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e67a44f-9403-4765-9c28-9ab5b25fd6dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f8321d-26fc-4690-a531-7abd35645c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "42715034-b211-407e-b2a5-70b918457449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3585ad74-a24c-4760-b279-5413e649a86e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa4d348-ac7c-4b06-b73c-85616555a848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7396f6da-685a-400b-b281-c4aef605f800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e368746-91f4-407a-91d3-fd86df22b8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b724960f-cdb5-465f-bc7d-624124fcc901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc062cb-2309-42ea-ac93-0f8f1ae9b597",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3803099-073f-42ef-bc50-da009d6dbe12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "826b19b5-2c9b-46d0-a55f-318635175f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9532a2-168f-443c-8518-d45aa8652eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f08e3fff-d137-4e54-aff4-6d4b795c6166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a24d0d-0001-467a-a446-3f590577ef20",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd2805c-82ea-4f89-bd1b-8128b26357ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a1df57-78a4-4bea-b18d-f278027396a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85554675-de52-4f74-bd43-c0e2cff35ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "291648de-7e72-4038-9448-78386eff57eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5268fab4-3be3-48d5-870f-10430ebabb3c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be165d44-3964-44ec-949e-7689dcdc9143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ecaad2-c50d-49a2-ba91-8e8da6123c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515adb1b-3d70-416c-bca1-d0deb2b762a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ad88595-e2d0-43da-b1f9-5903c3f6e58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94702a86-9296-40f8-b497-9ac2382e69ca",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45657e51-6405-4d7a-b388-d37ad7ff7b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c36e492-e5aa-4b20-a72c-1977c95e4535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f61c644-fc36-4807-8f1d-0c55a849d73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36c1f324-a56e-4d35-a982-a5bfc0600c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43aad95b-aa2b-4325-9d7e-f83556fb97e6",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05834a9-c876-4544-8e22-1bc7233fdc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044ed0d3-0a38-4ddb-ae66-5b327419317b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a468cf-a53f-4656-9f0f-8d006ff686c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "95b11dad-7173-4395-b215-1a7c367be410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603be424-90fd-4d31-ba26-1d56c1c3ce50",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd35c0b0-f72b-4e68-8acd-452e18a868ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234b1ed5-1a48-4284-8d5e-2e4f9bcc0648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b32760-dced-4d90-baf1-53ae217a1b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb616a7c-7af1-4d3c-a3af-a63f2d90a2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe87f6c-c602-4eb7-aa7c-1d24bb7b8c6a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e7c792-7279-4679-9069-f62894cafe3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce47c39-2afe-4c4c-8050-dc493a6380c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6965debb-30b6-4263-8f6a-9658d9d3c99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "712d31a6-88ac-49d9-a386-4ab2164dc1af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3766a2-762b-4169-8056-6e7fcfd3f3d7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17ee9c8-5325-4d83-818c-cfb2082308a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5fdf6a7-ef76-473e-b462-e8855ec1f874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0970fdb6-336b-410d-af65-6d1ec215a917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "18a99eaa-6469-4eb2-8c6d-cd918064b6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297eb28b-961e-4685-a4bc-e08b90867cea",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8570fa11-c335-49f2-8066-6a2212fcecb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "255e77e7-49c9-4095-b022-dd95d94541f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67632f2c-3fa8-4ebb-94c5-ac50468170df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff5338b7-a5eb-4dd6-9e4c-e16287b2523e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841d81dc-7426-430b-9655-026852d5b66b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c2ff03-08a5-40d5-a047-edd4c3d4f85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f370d7-a386-4421-9bf8-d60a9974b61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ba659c-0eef-4cc5-85c2-0f21484bf427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4589837-ea2c-477b-a921-dfd0cbe8bd11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4165e9-7b67-4aa1-98e7-f46f79e1a810",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e295b0e1-87e5-470c-9d8f-a1aafd9d813c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b1aa30-c884-46b7-8d78-416c0fa8861c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ef9af4-15a3-4ae2-9c2f-34c3fdefe866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7463d1d-f68f-4eb1-862e-519c76fe1f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6a3691-dd6c-4070-9c57-968bdb3edddf",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c87c43-450a-448a-9879-cb9672043305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ca38f2-a58f-4e4e-9d3c-5722b5f67c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcc32d3-e3ea-400c-8b4b-d792fc4cbb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1461e61d-5400-45dd-b2d9-a8023b1e7309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbc83dd-1493-4137-940f-955e181a7676",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7dc5a93-27fa-430f-a54c-8be6862fd0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdfd3a88-5b5d-4f01-9935-786a1d78eaa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc881d6e-ab15-4055-b226-621c8d0875b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6cb549c2-9c19-426c-9441-10fed1ab8eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb14048f-c1ab-4285-85c0-0028d96f77b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95407a1e-c39d-4247-b09f-804c39537710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b6288d-9029-4c7e-946f-aafc59565719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77481c2-df50-4e28-98e7-3892bb5b8eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "da3b1fda-009a-4774-813a-c8b93ef2c28d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5e58be-710c-4221-adee-2251c063ab0c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b645328-ec51-44a1-b640-2a92ced14927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d2e2dfc-29d2-45b8-a0d1-f0cc7bfffa7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebeaafd-d62f-4dcb-8fbb-4d6d3080e117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bac0b5f3-5b9e-4ad9-ab4b-3b68cfdcfee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912d2e6c-c2b0-45b5-a10e-5876c947fb94",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89544446-c7f1-47f9-acf4-7071a13713d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a8a455-762c-4a15-a937-804abbeff50a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35efc358-3664-4abe-9a4b-f72c8a982834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a4dab27-2e48-4cde-a734-a8c8fef9ec60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e83cf09-c1c5-4441-84e7-ecca5ea1b6d4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880e06e8-2e13-4e7f-9796-9c4aeac0ba98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c684f5b-32aa-443b-bf59-f773359e96ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ec8f4e-be1e-44bc-aed8-48a0c7121b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c767eda8-a67c-4669-8ca1-6ae429647de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd703b3-2186-41e9-ab8e-7dc22160ff9d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "546e29ab-84fd-403f-a023-c3c71fcb7dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59db4fbd-1412-40de-8bdf-2d0abd50052a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcd45fc-6d98-401a-85d2-bb45a3a8be64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0856801-c4cd-41f5-9747-c1f172306d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60ea820-c4e2-4834-b0a0-e78f25d89012",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbdbbcb3-bfff-4fe9-9f9e-fd4818625c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ce42a29-71a6-4dd1-8615-75ba17784336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5937979-940a-479b-93c0-470280b8123a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e137ebe-d5a5-4c88-8b4d-90713f87f77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a429d9a7-540a-4c80-ac82-1dd121863dfa",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab07e6e-2699-41c4-a5c7-49194071bd2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5ebdc95-2586-4099-8374-1e358e1daf61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357f6480-c6c4-4199-b754-a15cc3ab9a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27dd49a4-9b50-4a78-a164-b16cadd15a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6931b822-1a32-4506-8ee6-203155c70080",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c79ab45-6c9b-4464-bdab-832f3ab539e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e32516a4-6ddb-4394-b8b7-03ea3b107358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23456e02-b40d-470a-aa23-3bdc13618b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18408ccd-1e72-4a57-ac6e-63da9770b1dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c87aaaa-cdce-4ed0-8f2b-ac631a8c352a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070ecf12-fc07-4905-9b71-ddb931ab13df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efb65c1-13c6-4c33-97a4-3042fe10d170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ce068f-bef9-4072-9e9b-88f1462156db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93fe71c5-f179-4023-bc9f-a1a9c2503e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0dd43f4-a828-4ff6-865a-0447bd71cd69",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64496587-6208-4dbc-9165-1dfe6dda25e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95af1ecf-78e5-42aa-ab52-79fe326913b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc218667-94c9-4729-be76-3d09f4880b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3613da1-cfe8-4075-9292-7b0a9146f4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2090312-43d1-4e42-adef-bcec702187a4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd102cb-2d3e-4f34-bcfa-944e64232547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90ab3bc8-3a7d-4379-bf04-0a6b49db535a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ce3538-e3f8-46d3-9875-92b27837dfac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d90f64a-4051-4aa5-bf79-fcaff1e9b981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e23d66-943f-41a7-9f6f-329e89081f67",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a68fac-855c-4862-8de3-a7c7a0cf966b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc475ec3-b918-4013-a49c-d0753fcdaf72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab3a707-cc10-4d24-b779-03bdea452b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef1db98-c0e8-4d62-a6dc-7ab7e41bb690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b0357b-336b-400f-b131-a7e9e680d451",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16add0fb-886d-4f8b-90f9-528ba8218e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6da0d20-b23a-401f-bc15-c92e30a00aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891537ef-b95a-43a0-8c89-808b5dc3a52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1616e73-d7eb-4967-85f2-71d092d68503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee8fbe3-3cd3-4434-ace8-0ff726c120c5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1d1469-6f45-4829-8bdf-b78a4a63e3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f6b9ca-1ee0-4965-80ec-ab472551b956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4107a965-2767-499e-bf3e-6f2dd699ea33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "829bf6e5-5024-498f-b011-a666c2fd48ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb20ae0-b097-4c47-b209-bdcf01fef839",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6a8441-40fb-4a3c-bbf4-b2421e07d69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e10b8b-bff7-4468-8378-42fefd730256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88b6cde-e349-4e45-b8cf-2ec3bd94ae2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc151fa-9cd4-44f3-a16d-e26d4acaa105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96ba5bd-4d8f-45f9-8f05-cd5fbce8a677",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24aa581-2209-4993-8a31-00a093c34fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1515ea06-bbf3-4809-85f6-ceb35ee78576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959696f0-0997-41d7-af39-83b6987ae280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad54b5c-278a-4c04-bcd3-2e8fa7baf3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66764475-fc2b-4b08-96d9-8caf353f03be",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712d1d1d-a426-4002-958d-0ffc7c49beac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a1d4d42-a2d2-4e43-9463-efea5e54787d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a702b83-0a4e-42d1-bff1-a067c8547277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e07a24db-c5eb-443f-b38d-61c72751a942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a95bb25-766b-4df8-8315-c026da9fce0a",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec8f609-d64d-46dc-abb0-118e6a9fdd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd67d1b-8414-424f-add3-bf090cdd53a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df39af6a-d4d2-4db9-be61-07485590ffaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "46b7866e-147b-4eb4-b7fb-fcc069c8cfb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff90d67-7af6-4b1a-a967-c00e313d0afe",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3c846f-3356-418f-aa59-3b4f1871a09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3400f779-c2b4-4110-a151-9ace10eeafd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5410e5ae-34fe-48e2-b199-f6741965a09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa18453-43cc-46e2-92aa-3d218c968b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0c1ed6-0e80-4c1f-b9fb-93d2ea7329f2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c282d8e-22b4-4913-af42-acc11d88ed88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2bab14-b906-47ab-827a-bf9a71df8b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17bee6a-5716-4815-9ec6-73921730fc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98d22dfa-d4a8-435f-96ae-88cf51b236ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365da3bf-b126-4a9d-b147-8ef2bbf44e9c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267fa94d-0df3-4ddd-9696-6d5b7f544de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deb8bf6f-6f2a-4412-bf7c-5fd294af7129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87eb4b31-76e3-4349-b55a-d4ecc87c7ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b260aa4-e978-42d5-9eb0-278fd17963e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f11fe76-3399-4313-82cd-29757532a7f8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38cf7372-c391-4d41-9381-9cbdafa3ecfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a854bf8-dcf4-4893-b79a-52a81e1d0a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1387146d-7a53-4507-9ba7-c666db805dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eac41802-ff93-4482-808e-6594d96e80df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cead7ad-3229-40ac-ac4f-f7f24d2d20c5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efc625b-ae79-4be5-8b52-57644ee42928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ad55e6-9ce9-4d1a-b998-3abc8baf3425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a000ad-0adb-44a2-b470-cb16aa16ac02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5989285b-b2b2-4b28-ad2e-0440d6fb52fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f28f19-112d-4c01-8f41-1f13e82ef9b3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbf3a29-2054-44e1-ab67-a7abd5fd01ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "798cb115-daee-4d26-88d2-ab6a88085fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccfa3c00-abb1-4863-a996-ec0973017cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d89856ad-f6cd-412f-a8c8-b86af680dc0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c541875a-2380-4db9-b837-ebcff8f07eaf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5febd2dd-cb4a-4fb6-8b6d-b15e38224e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf5bdec-e1a7-46d9-bc72-6062398f486f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72c5ee1-f709-40ab-a12d-8e7d3cb6da2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80b7c05a-08dc-4b6e-973a-db8b6b6ad9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45afba60-fc73-4b63-8198-e6071b7720ff",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafae86a-a9e3-461b-b69e-a18f2e162797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d60ca8-4c68-43e9-976e-c3cf6aedee47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9791a3b-5be0-4614-ae2b-90ad5fba98b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f16c3f0d-cee7-498d-91c6-73d9d4fec8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58553de4-d4e1-452e-8235-2c886d138223",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f69177f-c952-4199-9684-fe07cfa9ec66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75e222f0-6eee-4621-8256-cb3e29fa939d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2257444-2602-4682-87aa-aac2846b8b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "efb8c0c6-202b-44f0-9bee-96eee9d2422a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbdb09a-64a9-4b8b-9f4f-2f4671c0acfe",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f1e0293-87ae-4dac-b0ab-2bf57b5461cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae93f408-fe65-49ec-81ec-57b1c3c02149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3061107-8d88-440c-8a9f-dfeb792ee8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff83108e-ec80-43a6-abb9-1c0046de4b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae1a76c0-5b81-4c25-a48b-c9ca06fa923c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c53d85c1-e6dc-4a25-8629-c4fb4a5699be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e1613df-f660-44ea-ac2f-651d7c464a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cff8aeb-3fe3-4bb2-ad9f-0a70df759f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b67435-e748-4fab-a86e-5669e75c8c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff08d25-5f23-4ae3-b111-bdbd2c8d4fc6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ad5726-fc2c-4ac0-b45e-ed0687eb406c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "295bad0f-f8e0-427e-9c4d-9ba7586aff0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42492eed-f27e-4806-b878-23f89c74079b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ec2262-5511-4e63-8541-f54e0171049a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5afc3af6-d879-4ed9-b9e9-b385abdaf503",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73577a8f-04cf-4791-b8bb-74c9bdcf5914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22fdd19-9231-4185-8621-2f57ed11336d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec4481a-cd2c-4d7e-9421-7fb50b93f1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9af445f5-e114-4695-bb78-1ea20766f00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e320efbe-1dfb-479a-9b48-1543f9349179",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603c2038-d453-493d-9cb4-f306f74585da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6136aba-b0fd-426a-9657-50b6add54c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016c0713-aec5-4f55-9094-b281c2f5726e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dddb648b-71bb-4463-a2b8-fa5f8ad33812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74dc131-1ae5-443b-b1e4-07a91b6ed1e6",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3bb97cd-d8c2-4deb-9365-319c327ed26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7dbd1e6-8c30-428f-af6f-2c6db89d6b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90de00c-ce32-49fd-9eea-39bd7d095c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f0afe6f-067a-4198-94d3-3e94bd9cbd1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3f0400-483d-4f1d-a67e-7824656b554a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c728280-1a80-487a-b6bd-a4a4d0d444d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e613e3-0da7-4709-80fa-3983c1632d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1d5a8b-cc2a-4034-8347-9e534d3add40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8773631-3ac7-4650-859c-e37db22deb82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9adac7a-08ce-4ab5-b94d-ba5bce3b36ae",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2053ad-c22d-4ff7-87e7-00b3cf9d4a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fc3564b1-03e6-4d01-b287-93a8a0580a4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c76701a-8d1a-4741-8037-70fdc360c814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d7edc2a-98db-4fc8-aced-a5807b35e9da"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1757d037-0d85-49fd-9e6e-8674c981bef5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "626e05a9-b42a-49f3-a283-a66c91c6eea4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f7e218-20b5-408e-a740-bf44ff7ba322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "810b6293-2b10-4539-a4cb-e02d75431698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167f8399-2df0-4a7a-b901-36bd53a3a283",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d0fe810-d2d4-4f3e-9675-607e17e2c54e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bd7c7ff-1574-4dd5-b63f-8f1ec137f996",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85df0668-f2fe-4f07-aea6-3e0e7bcef3cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6052831e-7e17-4ed1-9098-d2bc41b92903",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07110a67-883b-45bc-93b8-48902ed061af"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b34c78ce-d3d0-4747-a705-f279bc101d94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b015a184-4b88-4769-8924-0d573ce5ae4e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8931b5d5-0e35-4425-992d-aaad9e5d64ee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2578dc7a-779f-4ab5-9661-f5f9eadf8ad6"
                }
              }
            ]
          },
          {
            "id": "c6466be9-ca25-4a71-8c0c-7505790c58ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7e8eafeb-c40b-4f84-ad91-94f715e40cdf",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "7eb7b97c-2da3-47ac-b455-bdd5aad59d7e",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92956617-f66f-4b7d-90c3-1a847a67fc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9c5cf3b4-b458-49ff-ac60-cdfb5d1866b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8fc31d-1ce5-49c5-b538-9bbbd7f454c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ddbb1b-0dce-42a0-976a-7a85d2597df4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "22e31637-0dfe-4c70-84dd-d217f7138f0d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a09bd92-56b4-42fc-82d8-e2be1ace11ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ca903c0-0d77-43d3-a657-51110325ba73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a62a2e3-9a05-44f9-9274-6bf55aa61a51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "453480ab-b02d-4876-93b8-51a828614c59"
                    }
                  }
                ]
              },
              {
                "id": "8ca0fd60-9dc6-4f08-8888-0dc467b1e9fb",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a39228f-4b88-4e4a-9dd4-e38926ea0a3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c0b4829a-55aa-42b4-b765-21aee47adaf0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7ec2155-653b-4d91-82b2-dcdb0d23e544",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c48bf674-899e-4273-b68f-d8eadc6ebf70"
                    }
                  }
                ]
              },
              {
                "id": "77289cd6-1820-41ee-b0f3-f9eaf5410184",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76c867aa-caf9-4f67-9390-6765a4eca584",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb46fd75-6e04-4462-8dda-48c5b53e80d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ccc6e4b-0145-4916-8643-b8fd9011ed2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c86c4d23-c999-4ca4-afea-fb9acca60f70"
                    }
                  }
                ]
              },
              {
                "id": "e877aa5a-9b3d-48b1-902b-9fec1a81737a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ea9200c-65a4-4191-85ed-89eed2d629f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7b1d34ae-13fd-4fd1-95d7-264146b12dd3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ea2dfe9-fd39-4e9c-a6ea-c80a7b20bb9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b50dd965-ba86-4b6d-a258-bf61aba393cb"
                    }
                  }
                ]
              },
              {
                "id": "37f30795-c344-4f7a-94a9-b6e6cb7973d1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f683a1b0-bddf-4b22-bf71-e786623505c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a79982c5-c484-4b64-8ea0-54efc63d60bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "390e5f67-34bc-487c-8311-d51e6fbc5e73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b0b27fb0-5b11-40cb-8bf5-73866b104975"
                    }
                  }
                ]
              },
              {
                "id": "f8f276ec-e5c6-4d63-83d7-7baf0d782894",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90b03b98-5ece-4881-9f9a-f777428e3b33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8b3a39f3-8211-414e-9774-f7321bbb2419"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ab15e51-fe75-4d30-ad2a-ed9d544474a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a57544ec-015c-4e6c-9756-86fb5d0a6a70"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4564f74d-82e8-456e-bab9-55f18f65319d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "88385193-9a90-44bf-a7ae-c1931290fae6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "09d23cbc-6ba6-45e0-982f-620692395342",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee1b7db1-d11e-47d9-a13b-3dc318e09e65"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21529969-839d-47dd-878b-a7421c437a23",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ad3f3022-b9b8-4dba-8727-a0d6c755c4bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0975703c-aa25-4498-8dba-e1ea31112fbd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2cd98822-00d5-4564-8c2b-c28ccd17203f"
            }
          }
        ]
      },
      {
        "id": "4682d3d5-0d00-4d65-8631-d5a9b6b853ae",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "efeda1a9-d0aa-4ee2-9316-9688a31c5ef6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "858b6105-febd-4d17-aa43-4a5bbef860e5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "612442ab-d615-4ee8-a78b-93062d1bae1d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71094a5a-050f-4683-bbc5-cb42455be685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d5ad072-1877-4c21-b83c-22e99f756216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c34005-8b19-4738-9ebc-e053041dab00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "86cd2d95-de26-41fa-a601-d8ed45b64f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c247ea-483e-4c7d-9ef0-7a2cea1d2201",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd0723d-081f-4342-ab4e-d7939961a67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00637e6-7bd5-41ce-ab91-52537bc83654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42fdb53-beeb-4c44-884e-252756bc97e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f5655e4-323d-499f-b98c-0153b04c3fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be90d93-cffb-4cf0-a3b9-a82441891fea",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20aeb6e3-ed8b-4d0a-9975-8ec182df65ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14b18ce-36e4-489f-952e-a9b9c9cf0414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728c1e81-347a-4717-ab11-f069cd0ef44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33877d41-5967-4d11-93f8-8a47e45ba405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d35d8a-719f-461c-b56e-6b7163982624",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3980e5-4e33-4725-b7f9-a3c5a826b201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b798d6-de0e-4dc5-9cdd-276e0bbde297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64e363a-4169-4831-a9cf-d3a2c909bb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "48d6b8c1-49d9-4871-a0cd-b6f469d71a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d101d616-356f-47bd-ac6b-650d40ef88a1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e0c70d-88c8-4248-ad06-7846909bef74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4902a2-8c7c-47db-af73-7cac62b057e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a23998-05c1-408f-8e85-42695c573600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bccc7c90-9abf-4c7a-909a-c9aa0c52e68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee45c5b5-c2b5-4110-a946-1d72013f8323",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf563e9-21a5-44af-8b88-4e0bc6a04239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333c8e6b-e862-454c-ae20-9a018e71138b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2496d4-69ac-46fb-9aca-406ebcc30ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5173aab-a3cc-4abe-8df0-51055c9da9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f577f7b4-4b5f-4327-9140-007796e383d5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256678e7-1594-4b2a-9f8f-79a2ad969a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "415ed94e-a5e0-43ea-a112-0024bf60fa32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cbecc0-2a73-4484-9506-167903b97e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "54b2420e-15d5-44d8-a1c7-2b0e858a8647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb52ed01-7178-4980-8879-7654a131306c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30168445-1963-406d-85b0-66d43cfebe4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4500870-0f24-44bd-b0b6-70ee7ee45de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fcc68b-ce2d-4e3c-8922-f38990dc13a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c776f381-a367-4d75-bd03-0feff42873c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4961d569-d603-4e13-a841-a4ad5e7aeadb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5eb002f-197c-4583-8d2a-e30210ed9ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc24268-3ea6-4a1f-b8ad-d8f31b3cc6b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51977802-abe6-4bbc-855a-54a32702f4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a74d38e9-9044-4629-8b0c-bcba5696e91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88a776a-3407-489f-99ba-a3bf61b7b1e5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8ec425-7cad-474f-a971-1f4a55e37bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b60bb4b-1888-4f3b-a0b4-b311ae9119a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded81c21-fe43-4dc4-8189-4eac39575662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "460ee324-6408-40d5-a9e3-bff5b98f034f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cee129a-ac3a-41c4-917c-ca285b3edc68",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67dbb87-41de-46ad-bc3c-6ca04b18dcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559199e1-1dd6-429c-93e0-a77497a5cf69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7e9350-26b5-478a-9e46-c7fee6e51db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c23b5edb-79e9-4887-a340-e1d3c21449fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b101ba95-59a6-4008-9ae2-c4cb55c6be72",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a81a100c-6df1-44df-a96f-b0936c0f5fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5c65c7-a124-4465-b04a-8fb5cf7558cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0bb102-b71d-4679-a632-8214873a681f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "933625b5-b478-47ab-8640-49e9426aa5a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c66f20-f0c0-4c38-b371-9b64b498ea12",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6c4bef-2a6b-43d0-a00d-57eb3b82477f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff2d8ef-8430-4afe-80c2-648bac1c13a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d1e282-7e8c-4050-86a8-0e2a4d286245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "099baeb0-2b59-4183-99ac-9981239248d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1351fd-dfd5-47e1-bb99-a3ece6c69381",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90198df8-821d-4712-a526-019a498e0449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6412b504-547b-4ea8-9b31-ff1a6090b57f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c53cb0a-ba7f-4ad7-8b4f-3e6db91f9ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8abc3be2-1ca9-484f-8dff-a291ea297384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfc29c2-4aac-489e-94bc-dd964f288ff1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b55ad06-2c05-477a-b496-2bce1e0d7101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80845d0-11c6-4579-ac1c-2d7bc21396e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114444cf-c396-4cea-b7fb-d1e9846a47eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ed064ba-fa24-4e82-ac8b-3711beee7833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7110e2de-22a3-4311-a093-21a2391badd0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ad106b-f558-4d90-aaa5-2b96636bd822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b517cd7-37cf-4397-ba22-42af8d22fc52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89ee64d-986f-487a-9c52-34d2aa89d804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c878ff47-25df-4222-a2b1-196af8993e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82d10ef-0935-489a-8e07-a08cb61d8fa9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e472d4d-592a-405e-95f1-ad3e54e0260a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72c491e-1d19-4a03-87b0-319d33c05468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289f85b7-8166-4cfb-97f8-07af9200657a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cdbb8f7-aef3-407c-ab6a-326cdb9baaff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a79099-35ed-44ac-b1bf-ae6454ae9a79",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6db9c40-0c71-4a5c-b08f-7c72ab494396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2824425f-c021-4306-b678-f23ea561d71f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67373fb8-18c2-4a91-9206-c93bb4770a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4854719b-725a-42f8-9f01-d5cde020f862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ea28b4-37d7-4242-9aca-b7594d07e533",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67167f0a-ce09-455f-a2c0-9b3a4f465d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a832dbc5-80ea-4759-9be2-6736b50eb14d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cadde527-f20a-48c9-ab17-e11bd2db7ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c988110-464a-4027-b56e-fc6166d1291b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4380a82-5300-484a-9be9-99093d46eb3d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840a71c5-0ffd-40ea-905e-b4eba2631d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5645db7f-f7ea-46df-bf40-c5447f672b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ab3f8e-cacb-4125-b8f6-c82863997383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fcfccf1-f2bc-449f-b2d8-7ed04e6bae47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dee0a71-eae1-49a6-b8d7-e0cb23f37d51",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7287ed97-879a-4111-bc2c-4d8d46a08da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da9136d5-d8c2-476e-a208-92cabea73d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70864a93-6a21-4580-afc5-54dad6eb2591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "708d8094-584e-47b0-a061-08fc5c21594b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296d9efb-4564-46f0-9b9e-035c04ee238c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f733da95-cb25-4f5c-8e1e-1a0349b3a1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1355c08-5888-4e45-8ea1-aab2dc5ac425"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ce4c28-865a-4cfe-849c-dc22726e6682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "039ddd41-7d30-4930-9ba8-b75c3b136860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc3eef0-456a-44c0-b3e1-83dac4d57c26",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6715046-cf50-4e7d-a223-c104279e3d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa987e1-e2cd-48cd-8c6a-417febe7e696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba36987-eb12-4ae4-b017-bb72e0540701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "041a0029-a5d9-4f2b-b1ca-41f8974915dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fda7ae-ddce-4044-92e1-0dde2c644d94",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d103fd-d224-4710-89bf-82a275d60d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa789c5-8a6e-4422-94ba-5952f29288da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea3f8dc-680a-4c39-9245-4f81674e1d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e644baa2-6e56-4531-ac17-427233e19e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770fab0e-2345-4679-8a23-25884abb5812",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93395c65-865d-441c-8e0a-acf16870de59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e42e4d-e751-4850-8426-49028bf2b154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1154043-92b6-468e-8777-8b1e9b0ec5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58ffe043-13ad-45e0-866a-b05aed324161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958da463-fcce-47bd-a6ab-760753d3c427",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a535f221-8e47-4e63-a9a2-6c3e6763d965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc586bfc-d170-48e0-9543-2a66d7fd3875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b63dfa-99c9-450c-b13c-936c41ff3f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1f780f-5fe9-420d-88a7-1f56e208d56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e3e3c3-ac82-479e-8d82-3378901cb577",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a49c21-d3d9-48ea-8fad-86b117c80370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee094cf-6dae-40ae-9323-9c08f5d96f34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea49691-c1c7-4c64-84fd-5f37a6837473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41b0c710-5ea2-4db7-a144-3827ee1d0c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f797b8c9-db2b-4147-95a2-8321bf59b720",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb69878b-6811-4209-8e27-bd6c9750b814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "430f1323-5f34-41ab-a878-d7ac6fa8dafa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a714ec-a3a9-48b2-929b-b634b43e7ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e828349-1403-46a7-b58a-a4e65834f014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404ee999-57c1-40fe-9419-2c1b97e24e01",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ed7d46-a00b-4d73-b993-9eb34ade42fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f12cb88-9710-4459-ad4c-d8ba2b3ad987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d396f844-c45e-4a59-bde7-1442a8992338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abaefdbe-16d2-4101-b9cf-bd073411a719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08deb4bb-bd01-4424-9aee-132765badd58",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb27b7e-c6e8-4cf5-ac2d-d3703cdaefdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10411c37-94e6-4e78-b5ef-ba4b7619da71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50561b26-7520-48ce-997f-57692142e1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed8c4054-d740-4183-937d-687836a5020d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a10bd72-76c9-4c46-948a-c0a4272b9a92",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f30e3b8-32e1-4b65-8302-fc6cb88b3eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d394ee29-9b47-4e72-8019-ae70bb106412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a052cf-0f88-46ec-86bb-189def2c6fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b756a41-5125-437c-80bb-560420e3e019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb69e58e-f45f-4ed8-a475-1b532ca8b2fa",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4c8339-7dec-404a-9f38-c569fa8fa3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365cec7a-7451-469d-8b99-306673287fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e097578e-509f-4a24-b94e-dbaddda97622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60db9b40-04e3-4b78-936c-07c644e82f3b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b7ba7847-82bc-4b7b-92ff-52efd414fb63",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "96161f4d-9d11-43a1-82d3-eeeb165748c0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a368bdb5-b68d-4ce4-8852-8c334909f52b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5e1d796b-f08f-4f57-8d93-f0f522bacacd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0487b55-f28a-4874-839d-05a26c98f5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4fdc459b-9f3b-4a96-a6bb-0b8402e0234a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48cdd6db-4ac2-4711-8afe-a26a74dad477",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b3094ce-899a-4253-a45e-1fc432fa3ea4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3be9a735-03d7-455d-a8f7-3cff7bcce6d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38b57117-622d-42e6-809e-0bc9ecddfa48"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0de8fa23-3b12-49e6-8ed9-e3f4090f3eb7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0d042e3d-a6ed-4b26-be20-d975dd200102"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3a8bb255-153e-47bb-97ea-1adeae859d77",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8d59ffa-c029-4b6d-93ad-84e947068d1e"
            }
          }
        ]
      },
      {
        "id": "cd999d50-fcb4-47fc-ad01-e79e3b2540e9",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "d425aabb-d9e7-4483-948a-1248c12b544d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3992af4c-3fc5-42bd-8872-501a4a3e5dc9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "05ebd5b4-771e-4183-a2ce-7107071b95f9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f2b06a-a605-4138-a32c-1505c7c15182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7362ecc1-26f3-45fb-bde2-b55f013bdbf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa8de5f-7231-46fb-b93d-b651171a1c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8bbf55-5925-435d-af46-3087dbc27422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13194ac-5326-44de-a28c-4bed516d0f30",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b7c8f2-328f-4dc9-a3fc-0de38e848c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028b359c-73d0-4d70-8cee-bb7a1c38507a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b56e57f-baea-460c-be68-8de2966816b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "df5d334a-8f22-499a-83dc-af1d2bbf068a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ed6a53-02c4-48d9-8901-56b7b832b844",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "870318b8-d56c-4582-8182-f6b6c9c030c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "857a6f30-13f9-4f77-ba87-4badc5f6cbe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac70a09-a5f3-40d6-8ddc-f8099e86e6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "edbe287a-fa16-44ed-9e36-55c76b65ca0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823614fc-b381-4c9d-8aba-cf8861ef11cb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243bb7c6-34ca-4569-8254-60e5457ae623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "035f71e7-3e40-415b-a298-045729c6322c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299f8ac7-558f-4aa6-b40d-b43fe5c7b337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c2c1350-dc59-40a6-9636-a7d5cc9925ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71737eb3-de08-4f58-92ab-943cff080b94",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2019c639-4785-4f6b-9b6e-f9dab2274d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b5af396-ce53-4038-893c-fd98d1c53263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4f6196-1017-42b1-8df9-709b15885b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b516d5b-5def-4027-957b-0a7f70fec3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2315e6ac-ad1a-4a2b-b9b0-35687d6cccd4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb0e3b6-afcf-43a9-a726-1282afa4afd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b645717a-31ba-406e-b052-6194337330ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c86e38-dafd-49b8-8db4-ab405a66b8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "13c7e846-306a-4627-8195-a33a7e0100dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90f24fb-a183-4070-a467-83cdc740d8c7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7940deaa-20b3-4423-b011-291ab0048058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665301ed-39b3-4b05-878f-494c1514ddee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6503c7e8-4111-4e46-bd04-2d3d3a678ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7502aa19-f72a-4166-a07f-0bd4ab0a79fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e971e6-ce6f-469a-9e02-410b81f152de",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dafefda-5b44-4b1b-913d-83b76cc4c99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fed0eb0-877d-4c8d-9f8a-b936fd182ff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f944ddc5-c1c9-4790-93bd-7925f9c86067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c466aad9-d89f-42ee-ad6e-9326700de138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fca4279-c912-44d1-b004-93f5f871eaf0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed851f9-8a22-48a6-a297-6b35c80cd5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6782e944-91d0-466b-8d4c-203bc9f601fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0dbaa6-3edf-4560-9630-c109e5c986ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79917252-5cad-4428-9e95-650345028028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f08ae8d-7602-4f29-b5ec-7921443b4639",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1311d64-0118-4e0b-be64-a44c7e0b56d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4ab02ba-258e-4cd7-b2e6-874978215dff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d9b3fc-3f07-42de-879b-7448ba128a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "00bdaf74-c0ef-468f-9894-d8ec7ee066af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9066b8-3722-447f-ae84-d4a3e596cc8f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c635441d-066f-4646-b66a-31d4a88206ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2c6abec-cf29-4cce-9a59-da488a3fa522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28fd2d36-2425-43ce-a54c-9abf6e30429c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8847faa7-20b5-47f2-a0d1-9484d815679a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae793b5-3ab5-4390-a573-fe768cd32035",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3123c796-d6ed-402b-a0ce-db97eaf4da66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f71a63db-2301-4bf5-91f4-05eaec05bde3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f19887f-7d4f-4e2c-b03a-67b8c731fb49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d027b4-27e7-4e05-8f97-fc9e7c544d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16785b84-e7a5-471b-8443-4aa718aeae28",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d950da80-3948-4039-a766-cf1213d01cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a539ed34-de72-4299-bdaf-c8ab7084b463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13afeed-0b75-4f12-acee-c120db08095e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70ed8688-21f7-42b3-8cdf-74114a222194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e43614-ec3d-4584-b0f6-1134a53259c0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15a1753-c44e-48c7-a23d-7c2f13786c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b2e8db-cf15-4be7-b74d-142ca368cd4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b36706-8191-460f-87de-bafe01644249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "30eb2e0f-d428-41d7-9af0-d3f7b0e3b96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19ea240-fe5d-4901-9a25-7f41895320f2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debb9f6f-7a90-40ec-88bc-3f294b8ccb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6eaa5e1-7f6c-45b2-aff8-dffdf2e81af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96477838-5cb4-4864-8040-5916e202481b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f54ae26-f048-4293-9def-77a0088bbcd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f29290-f5e4-4903-b8d1-e7c2406786c2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d485e91-2855-409c-bdc3-2d3741944b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4559e6-4c00-4788-b397-3cd35e592c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e40e568-04ff-4617-87a7-550229539540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a94566e9-3b50-44ef-afa6-74f1f75ff0e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a99359f-d106-4091-8953-cbbdf42517bf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52aca02d-c1d2-438a-8932-fe0babb993c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db34423a-20cd-4283-8ca4-5bf6154736a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89d5da5-9982-44c1-9b1f-866b5eb68492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "72137d7d-3ff9-4c49-81d8-69ae92206c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f27daff-0e96-4edb-917f-1f2471a23a31",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e841a9-51b2-41fe-9330-844b8488b0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e9e17ef-ae9f-4dff-a9e0-cc3ce4913752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8232e099-3e16-4a7c-9dd0-70bee4c74d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eebea69e-4fef-4a29-9913-d7eef59de96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a5cad5-5626-48d7-b1b2-6ce09fa9371e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4eee9dd-5d9b-48de-9e61-8d0de46aaffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da72328f-c3fe-45ae-987e-f3d8663e2fdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf61423-feb7-4b7d-a8ff-13d13fcdc6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa318333-6030-48c8-8e9b-55ef96b05dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363bc07b-1e29-4b12-9a17-0a9a66367084",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349f60c2-d07c-41df-b0c7-2d9cc9127bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb718d40-d90c-439a-8809-555993c8f360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e130c19-449f-4ff6-83a8-e656e083c51e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a17a6795-8129-4825-a2ca-414f17284528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56e5091-3cb1-4cc5-af3e-03a537bc7d3b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b21e33-d50c-4245-8a6b-a69914bf7446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5b12f3b-36b2-49f6-a6ce-f2591cf75484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2ba5a0-936f-4504-8724-c0fe93d719cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00a021db-ad34-479f-8fde-8f2132fb6820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e12ac7-26b8-4d3e-87ea-ddd5144c1287",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd56e41-2ad8-439e-b698-ee453ee1b0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d804d512-5446-4b20-b4e2-d678052d09e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5259f1ff-cd37-4bc7-b133-4d08eda39ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d47ecca-78a2-42ed-b822-62d6d97d8773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e0d14f-4544-4bb8-bec7-3c868daaa832",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedae278-5236-44df-aa86-2de89609ab28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb08bbf5-a655-40f2-bc6b-66bf5ffae627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c165c706-9ed7-410c-ac8f-1574c7f4d02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dffa2b95-a48e-436d-a584-3659f3b72691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e204ad-4ea7-41e7-8246-ac306e92d94e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e877de6b-3fb7-4b75-96c0-72c61b2d6d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10042d8a-8190-4bbe-9ed9-e12e060c72b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58397f42-2f95-4bb6-801c-e4f964ac1080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd846892-e93f-4a05-8ba2-465c19dd66dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096fee49-0d1c-43be-b9ba-95559a055d7c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f49b0c8-a71e-4f8c-a0b1-fdfc781d9b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512608e8-dc19-4c76-8617-9eaee00a908b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6250678-40e5-4978-b945-11146626fb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c70d7686-6ce1-4f7c-9fe4-6b233f5977b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0eb4359-bb9f-4be1-9cc2-03d189f7fbdc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f737042d-53d1-495d-8dae-258a440d6469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46586a85-8794-425c-9796-d6a56193530c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daca4ea3-4cea-4a98-bb30-eab654343cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "161e6d86-2318-4c59-9308-d49caf724fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a74c385-ada3-40aa-99ee-1d8d8eda806e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f631cb93-f594-4f66-b2d0-d25b3667b43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "676a14df-9f79-4910-87cd-29c157a80149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124718b7-8113-4c0a-ad5a-4fa6a32a1816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "028cec52-e260-434c-b2ff-7ade052ae1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4be29b-c7a7-4511-a579-e6b700cf12cd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45593c7a-950e-4cc6-bf5d-cb3e571e1fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a121f8e-efbc-4a36-9c12-f1b7ff73af22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98179133-20ba-43e0-b4e3-cc62575821fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "055ac539-ede5-47eb-b93d-0003f84928a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b7db71-7bb1-4b55-ade5-ec4a431daa3e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527b1a26-a5e5-4e69-9f02-3943e2eeae67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f481269b-ea1d-43f6-a5d7-e82c652159c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8202a2e-41b6-4040-837c-7940595cbd5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e38d478-e84c-49aa-9f30-bf75f1b3b5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae96ee74-8c62-4a5d-8f17-984b645f93ec",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3836bad3-aacf-4324-a5f2-15deb5c2317f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb01ca9a-736b-49cf-93a3-9970c095189d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54dde0b-495d-457b-8bc8-b012feca7426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8059b98-c70e-4805-b068-cf00ebd86b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b8add5-862d-467f-a694-e638d7de02ce",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d164872-60b0-488f-ae2f-f0f3383c0529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b854dc1-5b1f-468b-b60d-a4ff1f7303a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ffa6cc-693d-46a0-bc3f-72304d3a9b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c0ea6d1-e3d6-41ab-b0d3-143dbfe7f7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f66bf3-ec0e-4c3b-aed5-73052fd3f356",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e48aea2-d0a2-4088-a81a-754f656fa54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a0b736-dff5-493a-9b08-ada8552c131e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8f4cc4-6f1c-4ebc-ac75-7dd570dfdf9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2bf3da0-3c59-4939-9b76-0014a60a3d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a691d519-f3d8-41eb-aab9-e5170d6fe8f6",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ccaceb-e245-43b3-912d-688b4b4f195f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4115e3a8-ef0a-42ad-916c-5d39d5d6bfbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37fe97a-8d7f-420c-bcab-cb1378fc38e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddcfa60b-caef-49f6-9bdb-73063d56e00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f351b1e3-75bc-4f2c-9ff1-b2f25bbee64c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3898b557-8e03-48d6-810e-5760f7358daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f69d1c-12f8-435a-bd1b-c63e94c00099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19e9f79-3cd0-42b8-aea7-1525c1bda5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a6f600-034b-49cd-8269-523ff55bf2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9778bd-8214-49e2-b951-72d70b869cd7",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c305932-82fa-4b72-8e25-ae40c45da458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5778b2-ee5d-4a1b-89b3-3181734d2d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "353be96c-2bac-45cc-896e-db90c2215daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b88f1ecb-f56a-4cd4-a611-2866baece568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d670b17-8b23-4d91-ac5c-d5911da990cf",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff071b00-dffe-4f12-a8c5-7288b6be618c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5022cc53-ae7e-4f16-8120-ba5ca1543bd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0819a2-7316-41d0-92a2-c566eb63321a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e6cebd2-ffd2-4971-b376-360737d8adf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df293a9b-bf4a-44ad-bfb2-19c7917750b9",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab46120-8f1f-4337-9f67-612f2551fa13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ba9ccd-e864-43dc-9e16-eec70c00e816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bbdd798-4be8-4f65-a2bc-c41994e18750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1592cb0b-09d0-48fe-b429-b712e6f98d05"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cab27823-e226-4ac5-969f-831e83c73b9f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "39dab138-9e55-47db-a2ed-562af03d83fe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a64d9d-5660-4f0b-9c9f-bfb0dd160e10",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "80818fc4-0f70-40f4-add7-261bde2a0ea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642353ac-d534-43e9-9d47-f3795a0bb80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89bf91ea-acb8-40fd-88b0-7f2bdd6da81c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1766014e-725d-43f7-a064-6cfe5f5fb79f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4df2adb9-4246-4605-bee1-7538b1a87634"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d39599e5-5ffe-4331-8c94-e6948ad938fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99161f7b-d243-4da0-8c03-ecabffe2c89d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9560e05-498e-41b3-a7ed-79235038b0c2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e5e68e9b-803b-4450-825c-8406cdb2b9ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e42b148-9f58-4344-8fe8-61baca88f87a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bef846b7-2fae-482a-8c2b-70133036c1e5"
            }
          }
        ]
      },
      {
        "id": "6657e3ad-fc78-4258-b9ad-df3b8bdbe900",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8ed8a5f2-76c3-4496-b643-38d92de87f44",
            "name": "Negative Testing",
            "item": [
              {
                "id": "48939bfb-2a79-4975-a4f9-76045c65f99a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d26fa5b6-efcc-483f-863a-91d3ec3418ad",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc16a9a9-ebb5-4a48-ad7a-13cca9678bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93490b80-6bc8-4a51-a8a7-1f5539c285f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0626c65-91d9-4e4a-9244-096b14ba3613",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c86898-7305-4f73-adc4-3df36369f9f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb6e9f5-b471-49aa-887a-114223f63c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d27efe-d4ad-4631-ae30-9f86b3f1185a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db9f0a2-c146-4c5b-bb56-e1fd8948a8ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3447af86-a77c-422d-918f-51ac2bc844a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71d652d-7ddc-435c-aa79-224ba90936d2",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1ffb8e-8640-4cf8-9d5c-31264c7b371d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dfa67cb-949d-4966-ae06-622e4d17a455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a91d21-4c9b-43aa-945d-6aaded8f6a46",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4cb3ad3-141c-4173-9f48-5ad55e3b9ee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64476db7-706c-4fe2-b611-e80448bd2404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4fce448-c728-45ad-abcc-fb3a6bd1e709",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9da383-dafc-47de-8c4c-6028a0a64f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48fbbea-f996-46c9-a28b-e33c0881c7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134f4ec8-2af7-49ae-91e0-f74d1fd69d0d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde467b9-bddc-42ea-8f92-ddd0824954cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b3708d-0c6b-43ba-8a3c-97d45d21097f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f579452-83f6-4da6-8fba-f1926e23fd78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9673b44-6f1d-48a7-8cef-ed935ba46227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58bebc9-b03b-4211-b28d-940d30919fe4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cf22ba-36dc-480f-992d-3d9067482270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebb589f4-dc61-4d07-bd58-9dfdc37edee1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b7df4e-23dd-47be-95bc-6b8ab46471da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1598fd24-21d5-4f69-acac-5db749fcc87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4022d6-def0-4ff8-b884-170a6202e02d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a41d5e3-f2bf-44d2-8f77-e88a5300d556",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4082e33-90a7-482e-a0de-97af3c63bc71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ba5f1f-a1bc-402f-8567-c0a02428d9ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e69528-9ccb-45f5-9c34-d5bd71a8f090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352e2ba3-fee5-42d3-8a20-2378ec20d72b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5829894f-7fd4-4cd2-abac-ad79da42058f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c0e4be8-e6de-4340-8186-0d15ed789ced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb481a6-de7c-4b08-92a7-6959db0d623d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f3f4f8-f2c0-458e-8ac9-61f1dcc90a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed0ec51-11e6-4ddb-afd8-8f1e92b37936",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9ecfe9-37ec-41c3-be96-33e9b4b50fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eda19ca-86ca-4e2a-8607-846a362d9679"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e521cb-d21e-473f-ae23-93b578609e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c0840f1-1f61-4261-82ab-620a12ccae68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29dd9035-0304-44fb-96df-a5d37be80230",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da94989b-1764-42f1-95a3-06c9dc89c9e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0993b9-b740-47fb-bdb9-9c4874360cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdd36dc-4170-438d-bf02-a820844b26cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a858c696-2f36-4305-abda-af7d4e4efe06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71044c57-fb1e-4e4b-8e3d-62a17a4c635f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d98bc747-4fcc-4f26-b33e-1ef7fb8808a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b636e17a-6853-4216-847c-85b40378e42f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae060e5-43a0-4e6b-b004-076830001a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "901e7452-56b5-4d03-8180-3cfb64f5fe23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ffeeed-131e-44fc-bc8c-ac511e3f88fd",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c2882c-132b-455e-8e86-30f9861b03d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16da6ed8-35cf-45f5-a045-23f04a7dd09c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd124a5e-6448-454b-a263-9692b8322077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452beaba-0500-4bf3-b0cf-509f57b39464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a295ab61-6726-40a9-8c1e-a31ad465e853",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45392081-5579-4719-b54d-33ac2a53da77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17456374-009f-4540-a566-856a2cc95cda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b689070-ba6c-468f-88a5-d08df5e70ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d072070e-72ce-4177-b65e-5d8e5d5f7670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8500e1d-2da7-40a3-84ab-47699eb17294",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990057d4-2a56-44c3-8348-d9bd0d7e6dbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "399c0943-581c-457a-b5c4-1739e4f908ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7bffd4-4cf1-488b-8d38-f241cfbe3607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e45c2e7-e62a-4dab-b937-dbfd0eb67104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04caffe0-28c5-473a-bd83-26014eeda789",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19575123-3fd4-4c7e-9956-567bb576ca4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a58232f-6793-44ae-8799-fef50f4cceea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "852a6544-c733-420a-afa4-2ce411d899a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cad76c2-ae18-4127-95d0-8508f231e82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd469cf7-0143-4698-b349-2051eddf58ca",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f58fb1-6e9f-4352-b086-2d5fef5c9dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e360963-c95a-4498-92b2-3bb5a3cea28c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a0ca0a-80b5-4fab-8edb-9661a3aeab8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20cff652-cf06-462e-a6c9-c55d43fde29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66cfcbc-d472-4c1d-815f-bbf9018d1f02",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50bdd8cf-6578-4937-ba35-38dccb080692",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca9eca8-7c1c-425f-ad65-7f0a8b1d63fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67b4341-2122-42f3-9037-a6f340365b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f39abea-e84f-47a9-8b1d-aa8bf60c9506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eaa599d-d24a-4971-96db-74aabe112250",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87af505-6df6-492d-8fc7-afb6b64e81ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9865fbd2-89a1-42ca-9c4b-696e17fd71b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "065d8cc4-3e16-4550-92fd-06a581a0eeaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2e4ad0-cb8d-42c6-9a91-ba34f83f0cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a19a744-f805-40a4-9aab-e624d436d36e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae72b07-9a75-445e-af24-cf4370003798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a9917b-18e0-485a-9e47-5a6850abdb0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca39b002-2d86-47cb-8a57-083afa3841fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b589344e-45fd-44f6-b918-b85dba451543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb1ce2f-0b63-4d1d-b77c-471f84b046bd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72ee5a3-b3b6-4b80-adc1-786ec4572a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e92a4f-d2fc-4350-8b99-7b5039df9af6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c882ddac-507d-444b-aaeb-0189e50c7051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22d192c-a4f5-439d-a56f-7984516d7da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e9871d-9b35-4068-bb9f-6f517b3c81e2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a75e8ec-a903-4b89-9f27-c7664de5b251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc0137f-435c-42c7-9749-616ba601ffdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5bc914-4803-453f-bdc2-0cf8197beed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea428874-0bf8-479a-8026-ba9ee1ec7535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eaf81d8-c469-40e2-81b2-f7d13fe7e137",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc910415-6101-4332-8d78-2214ccb47535",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fab57b1d-14db-4fbe-a94f-2c3218153db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5dd6dd-54ec-4295-a3df-00667c6a06de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470e9e2e-bdd2-4cc0-a165-cd7912d22ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c539fb-9567-4a40-95b8-4a30546447f3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28422485-060e-4eb4-b840-e60d8dc2ac67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "729f23b2-a3df-4d59-9cf2-5653824e37dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e899bb7c-5528-4341-8322-27a034961b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96bd58bb-1963-47c8-b427-e87df9c1cfa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccb6fd1-6f3a-497d-a734-020090f6a70f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b5613d-3e2a-4679-af87-bd79de0e4a6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67be61d6-2043-4e94-a39b-4ce9def48559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb464168-a89a-46df-b5c9-008808cf1768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff972e70-b9ab-4fff-a33a-50352dbd0b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfa57f1-293c-4e67-b445-94f234455284",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08bf0751-b78e-4558-bf05-13ba6cdefafd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20b17332-d89e-415d-84a2-0cb674affbe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0351f3-7e41-479f-af18-e7a638b5a75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d7aeb6-0629-430d-b941-fb8544308dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24fced2f-e209-41f0-98ce-2d2a7228673c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e35739-8c63-4c8f-aab8-d8e643beb7a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a89db4-83f9-47a2-b412-eb8b21cf3bbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd3c818-c4ee-4704-991a-c9ec8fedf0f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a9a8e2-ad04-4f22-a3b2-9f166cca4162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1822fc61-c658-4251-8448-7e1651fbf596",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ada3c4c-3c76-4cc2-bae6-570fe353d051",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e272fd8-08b7-4b99-b963-272a8faaddce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b016a1-0ea3-4ecb-ac10-634f5307eec1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e7f94c-0be3-420e-a2ef-b59288551784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b319e167-326d-4e43-926a-5d42a3fd2349",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e8db86-bae6-41cc-adc8-3d80ceca2788",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e766be8-0515-4718-b88e-7e80303d13a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cce7f2-76fe-431e-9caf-46c84888447b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7084c3d-0616-430e-8406-e8d8877731b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7f53c3-2382-4700-b966-4280075d70b9",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2278c4c-5019-47fe-8f22-99b38894f846",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "549f3bbf-875a-426c-b124-6e95f67c5954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c27969c-65fb-48fe-9245-7a1910555c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c858196-7f28-4dbc-b7ed-a9864b236516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a918349-c52b-4392-beba-7656c9ea109a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e790f21d-728e-42f1-8a9c-53723351d208",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bf1d5cb-f87a-403f-930a-493e03049ba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "006316fb-ba22-4650-9ccf-b488c15b3e8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099c88ec-39c2-41ba-8ce3-576f2d2c2225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e022c1a-2f0e-43ca-b408-d6148cabe804",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ca25a9-8acf-4c15-99d8-9ac81fd45236",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38d36dea-af12-42d2-9123-81c19c486f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72525b16-db59-470e-b893-07a48ee9545f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b1f8a4-f18b-47ac-afa3-5fe0893235a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c24edd-4fa3-4df8-8323-2fe7074384d5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d55f1b-6a06-4de1-9a64-a3917cb79d01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fd5a9c0-9772-44a9-b671-213f05dc4d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7facdc43-3cb5-4acc-8d97-30bd368ca9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9436e63-9754-40c0-ac9e-809225d53c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10bd779c-5a95-4886-8099-8b5567aeb703",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043ef787-4cd6-435b-a633-c103e48e99a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57898db8-dd2d-476b-88b0-9aab9b094087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc36707-f9b3-4dbe-8dd0-f2490e3ec795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1a7f9e-6551-4129-bd82-bc0ae4fa33bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed505e3a-8812-4079-8cc3-4e9e4b7389c3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1adbf1-bce3-40d1-be3f-35c3fe2948b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8472ffd5-e6b7-4b1f-86e8-9c383bd84c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73140e58-3d14-4e2a-99d0-30916cf29e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72cc02c2-3889-460b-b054-c024f2f17f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a7acc1-304d-4be0-b6a8-3f3e57216f80",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2e9291-60be-42b5-90c2-9043754e2731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c476f73-90f1-4151-a260-cb1cbbfd622c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6390e6-2133-4ea6-bb88-6a0713155c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a168eff-09d6-4d45-a923-26874c29eb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3418f74d-067a-463a-9b43-17aaca26778e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c45f40-9183-4d0f-b3a9-e0eef3e1cf14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373a8633-9509-406c-a0ed-702eae965010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d8e20b-89aa-47eb-938c-2cac76fa6bad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a47ead51-1f56-4fe3-a3ab-fb89e3a08023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef7efe5-84e9-4a2f-ad64-464cfad99f60",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8b8219-f73d-4cb0-9b4d-fd1d943489f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "015903e9-b146-41ef-92e3-36a334c5668d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109ac278-dce6-49de-9b2e-9cd3e00d0a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe62136-a6ed-4729-bce2-36c05dced46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d5e11dc-2e76-4296-9727-9b17f8142545",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f7a648-9cc0-4dde-a4a3-26e52093a7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "893fc74b-a2c4-4c4b-b4b6-b8658613ab12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f52100-21d9-4eed-976b-9fe5c7342e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2108b5f-0b5e-43d9-901e-452968e9166b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712ec92f-80d0-4524-8143-73a41d3428aa",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb1f576-3d22-44cd-a56f-5d43c658b9e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ea2ef44-03cd-4032-9be3-5cc34a5efbb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09211717-06dd-4719-bca5-6d491de4ac37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7395d92b-d1d8-4e21-9a37-eb59b32d8d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2fbabf-c5f7-42b8-b85a-f84d367a6b6a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3797aadf-d060-490c-b52f-576875a8ce1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15cc04e-994d-4556-9078-482cbad653d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e1799e-d696-448f-ac7c-2fe2ba18a35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77fe98bd-4f91-46e1-85c9-83715c44cc2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060a014e-df4f-47e9-b3f9-c1c51cc3c7e5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c95eeb-e432-4bfd-b066-320deff41ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819a29ec-c626-45fb-aff2-965c14556a55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "707ecf3a-382c-4b5d-8e6d-01bef885b01d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ffad6a-e17b-4c16-8051-d6eb16cec906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06338f92-71c0-4662-9ead-3d01102f2096",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145aa0d0-0fce-4838-80a8-595bab9c15b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8d7155c-6b8f-4934-9acb-55c954350b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da83fcac-4044-49e7-8a68-32f769b23eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62b46bd3-2916-440f-93a1-c3f611e60294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd8d841-10a2-4dfc-8d8f-24fde1a27046",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71b59ee-6606-435e-99ae-8e61305e765c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f541532-442f-433a-86b0-c54ef5777803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9658fda4-767d-4c55-9fe7-b19cb37ea6ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8959993-8c4b-4b44-a4f9-2069d0e90638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4f854f-ab61-4a90-b93d-89d85c25b260",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7415acca-8d76-456e-b462-bc3f3f53802e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ee751d-c279-420c-bc85-a1d2733ab73b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cd22a4-1a94-4953-a01c-60b501d6da06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d8621f0-4c09-41f0-b20c-36e767fe9ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0171135a-dd24-4c84-a7cd-c8167032d91f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e081b1-feb5-4732-b90d-d39928e42464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4639790-cdbf-43ea-bf33-492a91fe2647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a3c086-e8ca-404d-b1b0-6dd5a00708f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2684c78e-66a7-4e7e-8ff0-45e9c135fda9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ae96a5-5afc-46ad-a0bd-2d0033a27ee7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b89afb-b310-409e-9aaa-75dd10eafbed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "211d0bf4-0ae2-4268-b807-24f603a379d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbbaecf4-93e2-4e08-b7cd-03208ab8bc8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1814055b-053d-46e2-8f85-9d79cbae8ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "face9b9b-8435-498e-a0bf-55a75436e88e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9779a5-c4a9-4be4-a68c-e7afd71fda42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e4b427-a24f-427b-bc90-2d341dc6d4a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4d2869-a283-44c2-a52d-21593fde2587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a50aaa14-be05-4f3f-968e-69d380fcfff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56a9bd9-e223-422f-bd77-e789c2f40007",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84146dc7-d8cc-4af5-9881-3f642d7187bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff8cc0e-1b20-4b82-95df-c7119cbb3ae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51160705-d308-4831-8f36-bdae468a027f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb2de01e-71f0-43f7-abb5-62cc2ce923bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0a83b4-207d-4b72-89d6-0ab8970c5ed1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e7c655-01c3-4441-a4f1-5ba9f74f88bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7698e205-570e-4378-8e50-5eaa74832d51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c871ff-d077-4193-bcc6-651b5fb144f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b04428-c5ce-417e-a0a9-dfd98e7dea64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d42296-76c7-4440-b1c0-b1986909a186",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc4a435-0292-4aca-aacd-00935312b9ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6097cda4-cc80-44f4-a621-aa45450528d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e80b392-286a-431c-b0d4-ecab4dee589a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae4e1f3-1926-45f4-b70b-1d1b34fedddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078217d8-32e5-4e18-aace-924972557618",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4251f0-4f41-4430-92ec-eaf3f4197859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec47be0-c17f-48a7-ab86-b7c0596e7cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3e28d8-ac7f-46a9-a5d1-fb931a44f873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35da107b-dcc5-4aa2-9319-2f3d18ca522f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bb664e-5fb0-491b-a97c-73ed76df23c3",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854c3d64-95e9-4854-86cc-827bd6e60411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a16c14f9-6125-4fda-8cfa-1cccb80bb1a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24bd7ab-c317-471a-8e74-1ceb3f3e39e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9790039b-9dd7-4932-8ec2-0ca1f5ffbcb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e8f98d-1da2-4e9c-9971-79ced2d0b9a3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff6e35d-b6d3-4150-81f1-cbef11f55f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb1a594-fe4c-44e1-b9a8-85d271eacb9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d96f440-1836-4454-927f-e72829bc7912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed7760b1-9660-4c30-94d8-454f8631a9b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e85eadb-7297-49b4-a36b-dc594647c2ef",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdd8c1d-f47e-4eb6-8333-89c877b9c46a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7212b945-ae03-40c9-9f44-81a5c7bb326e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6405ce6d-3772-4da4-bc91-f0ab1c2c1aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c0555f-89d2-4f28-a06c-6bd4745317eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7187f02-fd0a-4c6f-9bd5-08da32471da5",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ecf0c4-b3bc-4906-a85e-c48671fdbaf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d42c5f8c-6246-442d-97f0-8449c09dea48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1788b0b-d174-43da-a045-240664230261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d0ba01-f91a-415c-94f3-4cbf7391191d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a2feb4-9cbb-4b79-bf4a-ac90e1e91d09",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80f3317d-f159-4bbe-b796-663cad09ac27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b74d0df8-245c-4396-bf0d-ed40247521e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c038a2-948c-435b-b45d-021c7169a98c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5d27f2-b697-4ccf-b6d6-bef75c4296e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e749cbd-00f8-4c70-810f-5abdb4e4e434",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d80076-8f2b-4d02-a0e4-8ef721dcc66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c13f2f0-001d-46e5-b771-82596b2f1eb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd80f260-2aa5-4d05-ad4f-128e3591819b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f8c281-7ad3-4dca-9ea7-dba6e1500b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba99a492-1bb6-473d-8c71-2c0e7c3911b3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce90411-d5de-4a8d-aefc-9a01c31dc244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df199d3-cb55-4895-9496-8a54365b74ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff7e0c9-9ccc-4d01-ba75-13d2afe3ed05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c53e32c-b224-4336-8fe9-938260f51298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1962e195-b140-477c-96c6-e1906461154e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ceef23-d91b-4f10-92cf-daa2ec7efda4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ac1f6a-5464-4973-b65d-52cbb0876a19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75340d9f-2377-454b-a186-e0dafadd0625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad7d9e78-3ae1-4fa3-85d7-ccf1e6436369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8982eb-024d-4c7a-8c08-f403b7ad89ea",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628e8915-6375-4330-9b80-af07bf85da4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e7d0dcb-3e0a-47cd-a83e-e949d06b3139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9a249d-5f91-46f9-98b0-e8309b55c444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc99f4f4-24f2-4168-bce6-921aa2a1799e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfba8bd-f17e-4105-8634-46a499a9a299",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec519d3c-fe85-42b9-911e-deff88007f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6368b02-e3d7-417f-9281-65d9d41609ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8135cc85-b029-4dc6-a53f-75230133e5db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f8b630-0a53-4746-9f89-d928d52ce874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308f2381-3b40-4375-b8eb-9509628511c9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ae83f8-33f3-4b8a-9697-df11a52b51c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "595b60f1-57c1-43f2-adfa-d41f6e6da0ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c9c501-8389-4282-8ede-cb22fcf68c95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d16824af-928e-4d16-b566-0d8e324d2488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7261c5-82cb-45dc-aa8e-513411ce01ed",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267431ea-3408-47f3-96d1-0ce4129df78f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c595fe1-4f54-4858-8267-f837faeea3dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "583c276c-b40b-4a48-a934-e2cd45f6d1b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e96c2cd-8a9d-487e-9246-c035cc722ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12be0c5e-8b8a-4927-a752-a1654df8d438",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ae3902-6807-441e-9dc9-4566f472dcc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dfaa826-2a92-46b8-aca7-6dfd495d8d87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aaedfe6-2593-4392-b369-71784160f6a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5ae4fc-fa82-4849-92e0-2b3afabf6ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4dc337-c58b-43fd-8e57-58f1b24817f7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f66e0e-eb43-4cd2-9299-21b05cb03a3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ddbcbb5-faa2-42a6-aa3e-ff2788913a03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8612e5-f926-4585-8ddf-2efc301d3b08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb29876f-b2b0-4875-b8fc-1e683aa9b6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e3b0ac-0e95-4a8d-be45-5f04a470050e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adb72f0-5946-4790-8bcc-6e33653f6fd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e70d6b9-f6cd-4ce4-835a-068122f4a480"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45116e8-c24a-4504-adb2-e46df8067a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "088b88da-993a-4d59-a20c-39c9e4a120c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e0dee9-4c8c-4ec7-98c0-57b613ad2a03",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43812dc8-a9c2-4913-88a4-1639acb80907",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1a9c202-4c29-4c22-bf02-3987b3e1e32b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f2d688-8761-4c5d-b605-efd437ec1579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9c9577-ccd0-4d71-a2db-a57d2249988e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1352b600-3c46-42b5-a954-16197cd57688",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a366047-94f8-43de-b5c5-b888c8b4540d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1db8b370-ae48-4543-993e-7ec8bf85ade8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa50757-b1d5-4718-8c54-e7b13fa6b82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbc3aaa-bfb9-440e-985a-67b037b38f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213df1f1-c4d2-4d85-82e8-09c1fa989671",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d7a1bc-d8c2-4c9c-b42c-0b126fc52962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30f48253-e1f3-40b9-adb4-8d2e9c63e6e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64fddfa0-7f90-4c48-83a5-c42485e52c88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b18af54-2f89-4f9e-8fe9-a0af90ac8157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3392a7e8-8c19-4a67-b286-a87d11699fb8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc41714-70f9-4935-88d7-f0dba27b51a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c78efbc1-cd0e-469a-9ba9-ff50be8016dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c3cfae-57be-4125-ac17-e8da72f60641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094293bc-404e-44a8-90f5-f3857b126eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03611603-96ef-4e58-8ac8-b3c290adfc65",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb827ef-e3e1-405f-afba-aed72064a0c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a22a08e-f240-4596-b081-1228042cb101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "469741cd-1f4d-4a3a-9dd3-317ec1680afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef894b8-d849-4d9c-995c-bd454d24d7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf60f7be-1325-48c8-af20-d25f7f435fe9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ca776d-b37e-474c-847e-875644e296fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4b562ec-181b-4c44-8fea-4a16d8ea07e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f3a1f0-1f8c-42a7-ba00-d0ac9c23ba1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e72df4-62e8-4aee-9b93-e88d9e6a42f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6891bc6-70fa-4a8c-9dc2-213a7ffdff7e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef85d785-18d3-4e34-b7de-8f8c684a5343",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b519fd68-cf32-4a62-919f-9ec649af6b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cb2dce-e0dd-4388-87fc-7389e7013f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc038b0-9cc5-4e5a-9368-31bdf6b444be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017c3ab3-53a3-4886-9615-02a0ae4d3af7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a304c3f5-7a4c-4f5b-86d2-8c3e2dc256e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59b632b0-9a6e-45dd-8b30-ca34589e5384"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3145bb-cbbb-4693-b0be-a0571a49b5b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5919ad45-60a3-49c6-960a-bce0d4259681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c85c21-d8c1-4252-a84c-3ed6500a7515",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3abe45-1b45-4210-b4b7-12a5d7dcb33a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfd10f36-e032-435c-b43b-ee443ca7551e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d995969-2725-4e6e-8753-609bd14e26fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb54f5e8-53a1-4e16-afe0-fd4c92a82305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a74fc1-c757-4577-ad47-4598f41ff582",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6407643-6a5c-4d43-96e9-ec6c559f7402",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a34a846-3657-4490-ba1e-a7751e699b9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0347d1-2a34-4a08-a815-895eac582aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a5c6036-cd31-48ac-bde7-7aa8c58de2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b7a1ba5-8695-4cea-b80f-68832e3251b5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4e9386-8ae0-400f-bfff-2777d9a26db5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96f1e5e4-63f6-4617-94b9-2d2426b61aac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b93beb-b413-4725-9a01-7964a8988621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c280141-cfdd-46a6-bb82-21ea95ef9e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45af1842-50f1-476c-b0e0-279588aebb1b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbede06-c4fa-4abb-849c-659f777f09d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afbc4e87-c323-4447-bb4a-8a4e7e6d83a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d273c95f-52b1-42d4-ae3c-0b559b6a48aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a0a730-7770-4d9f-9942-99e0d2cfbb8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4cdaa4-27ef-4793-a200-7c236c444434",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f054b39-77dd-4b4b-9168-09669ec1faf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77506d63-fc54-4f7c-be8d-343232f60966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c36dd51-3079-473e-8435-301fcf8efc10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "243fdd80-8243-436d-9d1c-39372a84f66a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebb97da-fcdb-462f-8e56-c662048c1472",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1bd35c-0be6-4ca1-97f4-79147f7ea606",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97340516-a930-42b0-85a1-5f2e70019cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b401db2-21f3-4a51-898a-b5e9d945cdbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfff61f8-59dd-49c4-8f6f-d18213dd9f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8456ced7-b467-4782-be2e-cff41b8d0c14",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fdec0a-022b-470b-971f-25d4f39fe909",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3d377c2-da12-4e10-ae6e-489a42827818"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f750d82-91eb-4625-ab17-9d2bb8b4f3c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edf92fec-bf37-4676-8c7a-10bd6311dfb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40deeb7b-7594-46f9-bc4e-95aeb33ae50c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696111c3-163c-42da-9398-a95f98c99960",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a39ee73-d500-4de0-9a56-f0509a592d57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba99e7c-7d34-479b-b580-84106f6fe1c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e2229b3-390d-4b5f-8fb4-ae4c59cfd5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c9b02e-5d16-4238-9466-cdc1eb26f989",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbe7ff2-bdb9-48b7-9a37-a839339dbbea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a296b12b-6356-4701-b79f-c770c55cd99e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803e74f6-62b2-4771-aa7c-2a976cb3e191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27dba673-1943-48b9-8bba-e15017f44fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ff0d89-6b0a-4b93-94ad-207d44c84350",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff636df-c682-4c35-9ad5-c27c8c0c73ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b08df3f-3894-436e-ab81-c202fe215f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9c5341-0e2c-40e4-a96f-4bcb354882f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13c1560f-e1a7-4504-b191-bb4cbf826847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c121a0b0-dcd5-48c7-a54f-970dba522c27",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac729692-0fad-4ed2-881f-e70c3b2ab370",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20b0a73e-a157-4889-bf7a-2debc8263225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97018b43-9b6a-4791-9874-b63f2adf6bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "821d2ddd-1e0c-44da-af6a-819490c82b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23e026a-048b-472d-9827-a57bc0c2e222",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d21f54-a6b6-4214-a058-b720c6f78f84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b98ea53d-952f-4343-ae6d-18c548807a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6424a5b1-663e-41d2-9ba4-bceefc422c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9907b06a-4a57-418d-8ec5-47a6c7329bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda91e0a-b3f4-42f8-8215-326f00d0dde2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb15d9ce-c357-4d36-9c35-184939e846a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aae2a02-b39b-483e-973e-9c64489aeb96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f67e285-28cf-4ad3-a8a8-3c969c133d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b0eed6b-4011-4dc8-86c9-4265b98ee6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb9bbb0-caf2-4c0a-b78c-e0dd807568c1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12af1c6-0269-43de-a426-ef625cec192e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ff18a18-9693-46bd-b868-eaa724e88bad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e53402-4f87-4890-b26f-efb1281ddbf2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d05051-8339-40ae-8fd3-658f01690e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b485c31-1f31-4604-ab7c-2fcf16307b29",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc48af4e-c3c2-428e-a20f-4734b94925a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "315ca27d-90ec-46a3-9494-3b8cbb0876c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4601b722-157b-4582-bef4-c03e8f1a3e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbcf5611-e24e-40fd-8cfa-60fe7aab858c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc016b51-4b3d-41a1-88f7-a45e34a2763c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38b3109-11f6-4ae2-9a8c-cb9d79d207ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "229a1a19-a4d7-436a-81b8-9bdf55621429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7695dc54-6bae-40f8-b8c4-bc049b3fbc6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985906be-081b-4c84-92a9-fdd0663d6f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e79cabf-94c1-435b-92ee-f973013d3631",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5236116-508a-449a-b508-98077bdbf344",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fdd4d4c-79e3-4b52-9698-b70c60d77def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37924a18-7152-4c12-a551-deafe966fc74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d2a20e-d2db-4714-b19c-ca1590c4b9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb34803-0122-4195-a7a1-187ca011681e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3855041d-93f7-45b5-8e6b-c4f5d5a5bb33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65c624e3-5b36-4540-b75a-393edbabaac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff9785a-f8be-42a8-9041-5d6b961ee2be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58517998-32de-4956-a0cd-0af5dae44554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d04604a-71df-4c44-9419-b3447fc0978f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e849609-37cd-43ba-a1ab-6d4fc3f11fb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae5b324-f11f-4ac9-9517-cfa2941db1e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ccf2da-d187-463a-a02d-3db090c6bc3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd9ef95c-9e6c-4334-8ce3-61f09e3489f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0197877-0a79-4f5e-ac31-7685ec699551",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1901d3fb-b769-444f-8a1c-b48b398a1ce9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6250dbef-8d45-49ad-9fba-31e974818fec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "006c5f8a-c0b8-4143-a35e-83c34eb37fce",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e310fc19-b1f9-4531-a32e-ad602a69b646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f4005a-531b-4084-a628-6efb694af5e7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e41298-ec43-47fb-bc8c-6780bed24150",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99808075-144d-4c81-a818-ba889a56bc2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e61a63-6a15-4d0b-9de4-1c3c03db66e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cc56b87-7356-49a3-8031-bbf520c8e275"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "280cfe74-b08b-4f89-aeb6-f318f8b93c17",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ebddc7a-45df-425f-91ad-413a2a932da7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "60f4af6f-aee6-40cc-a91c-be67dbc7b660",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "49dd960c-d8b8-4586-a1d2-0a054e9a7dac"
                    }
                  }
                ]
              },
              {
                "id": "fc4c9340-9faa-4cab-9df5-da655cd25653",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "014b4dbd-f37e-4979-90de-be6b76cc2d0a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fced979-7b59-4ab2-873c-eebfae734f2b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3079cdc3-930d-41e6-ba1d-46eacb7d082e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "743c57f8-2ad0-4028-b154-bde9a931e2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38902f67-1a73-48f4-99fb-0f1819e55bc8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "159e5e0b-93e7-4934-b5cd-ab5bf4468694",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0c02258-f62e-4a17-9200-ffd129a39f37"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63b068a8-73a2-4d07-b5e8-420a5e4253d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "504ef111-c3da-4c7f-a6ac-8c031606ce56"
                    }
                  }
                ]
              },
              {
                "id": "8144704d-42cf-4e48-a31e-a3a9410c177e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1f3dce31-edd6-4710-8e51-b29881bb70a5",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83297dd-8a53-417a-ad81-0373f438f179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "62e001b7-6fed-4b99-9fc0-cb80ab075de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e419ba29-c0c9-4d8e-91f5-8ce4973a4a77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22c4191d-41b6-4a3f-96ba-257a99da08be"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0c588e19-4c04-42e2-95c6-dc462d5f8e3c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a9c2bb75-1862-4885-9f5e-f46e1fc7b3e5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be99eba2-25a6-46df-90bd-35da9cf44b65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bd4e988d-c06f-44fb-b59b-64ec92ced17a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9520da84-b0db-457a-9256-7bb867f0992c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8f6a0a3-d333-4d6f-aed9-0a7988582320"
                    }
                  }
                ]
              },
              {
                "id": "e403884d-b209-4d8a-bf6f-c3c96c339606",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5c30bea-04ed-4ff8-9f76-f9da264eb094",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "83fea5ff-b576-4bd9-a358-2865b40105c4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0710dd10-dc25-4d09-b777-ff6766952826",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b027c5b5-2e09-416f-ac2c-7184aae3b56a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c62e58d-1ece-4d94-b0d0-aabc20131fd0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ebb1ec96-7002-4f96-a78c-56de348b3509"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "badc46b9-4b00-47c5-8645-5a8b49aaa560",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5094319d-fa8e-407a-bba1-8335553805cb"
            }
          }
        ]
      },
      {
        "id": "87343753-54d2-4874-ad93-468639285654",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "481e0698-4845-45b2-ad59-f5fe891a8af9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "845a03d5-f3ea-4c01-946c-98a017fdb052",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "42532413-62d3-48be-81b8-3a7b5c463741",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5f06f2-4a61-434e-aa56-1f04c93b937f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1faa927c-393b-46bb-8b9f-8d96cfe2d98f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6ec39d-5acd-453c-894e-0edc16235f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "950491d5-f7a0-4868-9d3d-da9ca563f6b9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfd8526e-3a72-421b-b416-7c5838cc756c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "460428c9-2fd7-4244-b910-23f650bbb67f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9815b8f6-210a-4359-af43-acdbf3ed36dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99fd07b0-7fdd-4dda-a6d3-f94c91939510"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc5d0893-3abf-4423-b902-ba834b56856f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9ff6cbb0-da49-411e-928c-8b5966ce741c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18609fcc-1742-452a-bd73-9225f51a2027",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4c74478d-f70f-48f1-aed0-7ee1d1e6fade"
            }
          }
        ]
      },
      {
        "id": "cd3a9aaf-eae8-4af9-af7b-cfe06e0ca521",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "325dc004-52f2-4468-a595-ddfdc0a8b394",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2af0f6fd-19db-45a2-8754-d16664789907",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d16b53c-65eb-4d09-a184-fdd4e27f8ccb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ded99b6-ad79-4f9b-bc77-e922a0bbce18",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae3d051f-ab15-47e9-9184-c77c3b46d4c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30d90f2-cdc6-4dd8-ac4c-22c548685131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4451d7c3-9521-4a27-b7cd-4266ca6f6a6d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66db4df6-a2ce-47bb-9ce5-759ee4478f01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5fd4a0f-8b7c-4c11-90c5-402fad53133a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "62544843-9371-4d74-bca7-a9d466d8378c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96c8292a-4251-4c2b-b008-e4c62c2e8f42"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "097d434d-ebb1-476f-9c50-606a20c4c2d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9a7fbf7b-1694-492b-96cd-11433b543bab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c732ff64-22de-48ea-a256-e75b6ec8e35b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a27d382a-92af-4787-aa2e-7bf895452b1a"
            }
          }
        ]
      },
      {
        "id": "8157cac7-7671-4ee4-826a-d645fd9a24f4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3936641a-9085-44c9-b52c-1025d0615207",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f0ddefb5-b60d-4fc4-aed7-59ba49ee4f88",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8031cfa1-e5b6-491b-a35a-4f822bb1e0ea",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0cf42f-aeeb-4bfa-b45d-37f96cc583d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca6773f6-8d1f-41e9-92ba-2f5c8d2945e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81403c88-13d5-4c3d-a277-3a725e37b760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "667c0f54-6944-4e06-9486-0ee4decc4069"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7f134bb-6628-49b7-8bc1-09dd0779edfa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b8a0646-3d9b-4351-bf8a-3c052605d23c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06cd6f37-458d-4419-a198-08a8cdc9567a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5952ecf8-890b-40d2-80e1-07d776151634"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "236e4d11-e0dd-4353-89d5-04a5f32c3d89",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "63109369-6428-450f-8cf8-75ce1b3cb44b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01b4c8b3-f930-42d1-a464-1eef4b04d846",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ae6e7f9-fa17-4822-9283-5a095fe417cc"
            }
          }
        ]
      },
      {
        "id": "5f04452d-6923-4b02-9ac8-4792ce215644",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af5c66cf-f2cc-4067-84ba-2f8d3693488a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03431eec-9a36-459a-82b9-39c1b01fdb6b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e70ad826-0c9f-4364-b5ba-30dad54ca435",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e25a1ad-491a-4bc7-affc-3d43f0824cbe",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae7df13d-8b57-49b4-bf52-5ef6238a2873",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 63.68771929824561,
      "responseMin": 5,
      "responseMax": 592,
      "responseSd": 70.3521270396917,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706143024513,
      "completed": 1706143051823
    },
    "executions": [
      {
        "id": "fca0ae1b-d846-423e-85a3-740b2b99b318",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b619b09c-14a8-4497-bc8b-c774469e37d9",
          "httpRequestId": "f58d2e7e-45ef-439e-8b24-be6ca5e677af"
        },
        "item": {
          "id": "fca0ae1b-d846-423e-85a3-740b2b99b318",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "743fdb4c-5358-46ab-99b7-6627b7646f4e",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 0
        }
      },
      {
        "id": "0bf5d392-e030-41e1-81ae-396930ba66c5",
        "cursor": {
          "ref": "115f2fda-d83b-4998-a1b5-8b97b1ad4657",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7241b3a2-02c8-46b0-a44f-c94435149efc"
        },
        "item": {
          "id": "0bf5d392-e030-41e1-81ae-396930ba66c5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "50f3b837-d2ee-4c08-a40e-8b14626eee96",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "a2eab1f0-5adc-4c6c-8f91-778c84fe7a75",
        "cursor": {
          "ref": "d12d4a4f-d78f-4014-ba00-62e51ddb9f32",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7b180d69-47e8-483b-a9d9-506770cdf9ad"
        },
        "item": {
          "id": "a2eab1f0-5adc-4c6c-8f91-778c84fe7a75",
          "name": "did_json"
        },
        "response": {
          "id": "8d68e230-0c60-4245-be3d-28f4bee4af0a",
          "status": "OK",
          "code": 200,
          "responseTime": 252,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50b3b55-bab7-4d61-9b78-027454aa6404",
        "cursor": {
          "ref": "f2b48f40-32ae-4f19-906d-5c32eea32cbd",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "987b08a9-4fc0-4040-96af-daef4ef17aa1"
        },
        "item": {
          "id": "e50b3b55-bab7-4d61-9b78-027454aa6404",
          "name": "did:invalid"
        },
        "response": {
          "id": "4874f89c-9814-4b94-8ef7-3ad25c89aedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50b3b55-bab7-4d61-9b78-027454aa6404",
        "cursor": {
          "ref": "f2b48f40-32ae-4f19-906d-5c32eea32cbd",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "987b08a9-4fc0-4040-96af-daef4ef17aa1"
        },
        "item": {
          "id": "e50b3b55-bab7-4d61-9b78-027454aa6404",
          "name": "did:invalid"
        },
        "response": {
          "id": "4874f89c-9814-4b94-8ef7-3ad25c89aedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf62e54-d30f-4f30-8233-07a508e08934",
        "cursor": {
          "ref": "5c0d4a20-642f-44e7-94dd-e16cd839334b",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "720f36bd-437f-4e58-a9bc-d433f83083ad"
        },
        "item": {
          "id": "2bf62e54-d30f-4f30-8233-07a508e08934",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "620c2bd7-c20b-4425-a381-676430ac35e9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 307,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5752d12e-731e-4862-9492-88863c3e1aff",
        "cursor": {
          "ref": "7703f55c-56ff-433b-af69-150eb441f067",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9f6e8792-8e65-4d4e-9039-e71609622640"
        },
        "item": {
          "id": "5752d12e-731e-4862-9492-88863c3e1aff",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b39c83af-c166-42de-b921-6a317e1fa245",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2174c9-da21-4294-bffa-c475dde23566",
        "cursor": {
          "ref": "62ec6829-14a0-4574-9688-d22607821b7e",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b4f914a8-9097-420f-8bd1-4893fd081cee"
        },
        "item": {
          "id": "db2174c9-da21-4294-bffa-c475dde23566",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "780e0926-7d0d-4814-8138-aea813103cfb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86446e7-a2f0-46f0-88da-86c8a805f92e",
        "cursor": {
          "ref": "0866a9d1-b845-4274-869b-c264b6150d5a",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6a8edcc4-9938-4cb4-9133-b44c40691f5d"
        },
        "item": {
          "id": "c86446e7-a2f0-46f0-88da-86c8a805f92e",
          "name": "identifiers"
        },
        "response": {
          "id": "d36f16ac-de33-400e-8b4d-619e9b7c6ee5",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2646eae9-1065-48f2-8d17-2b1e0e93428e",
        "cursor": {
          "ref": "d2ab8c7d-5e1c-4b6b-8a0a-572fb2ed21ba",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "af2bca73-a473-4969-9a92-86d848f9ba22"
        },
        "item": {
          "id": "2646eae9-1065-48f2-8d17-2b1e0e93428e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6f67df96-2f68-484c-9e24-f4e3050dcce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd852b2-a5c9-4295-ad4b-8b22863d16cf",
        "cursor": {
          "ref": "79d24129-8514-4008-bc36-faf2a1afa23b",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "160649eb-7982-49c9-99e8-67bdff1f169a"
        },
        "item": {
          "id": "9cd852b2-a5c9-4295-ad4b-8b22863d16cf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b69e66ed-b761-4602-8bf2-f2455a50c4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4999b20d-e130-492b-9d2b-296aee2b93d4",
        "cursor": {
          "ref": "b851e15b-1c9d-4a55-b9d9-e2084c7cf100",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ab404405-15d8-4ac2-b3cb-df89e6156241"
        },
        "item": {
          "id": "4999b20d-e130-492b-9d2b-296aee2b93d4",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "6dec1814-36fc-4e32-a5b3-98fd4397150e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650afa26-a990-426e-ba2b-1691c206e6f4",
        "cursor": {
          "ref": "c883fd56-5bf7-445b-a734-599a3834effb",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ba75dbf7-7cd4-4476-8196-56cb817ada96"
        },
        "item": {
          "id": "650afa26-a990-426e-ba2b-1691c206e6f4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0f41c85a-0657-41cc-90f9-7681eb14a82e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffdbd04a-9951-44fb-9823-d1f462875f69",
        "cursor": {
          "ref": "dfb0c693-8930-423d-8d24-2d8e749e2cba",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c62cc94e-1535-4f3d-a304-51239042f484"
        },
        "item": {
          "id": "ffdbd04a-9951-44fb-9823-d1f462875f69",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fae7da4e-cf4c-436c-89b9-2a1a6e19eff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed3f00f-2f74-4ed2-89da-9b8e848b897b",
        "cursor": {
          "ref": "1d03786f-e924-43f8-b603-d935ada00977",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "45969508-6b58-4d6a-9cde-0b0e6c3e155a"
        },
        "item": {
          "id": "5ed3f00f-2f74-4ed2-89da-9b8e848b897b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "def03ef2-4e41-47b4-8d44-55b03fbcd092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f2a7df-c2ee-4951-aae9-b69df37f7684",
        "cursor": {
          "ref": "fd97b168-f2fc-4257-8baf-43081d0e6d9a",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "29f88228-7e27-4b3a-9f0b-a4b21b238332"
        },
        "item": {
          "id": "81f2a7df-c2ee-4951-aae9-b69df37f7684",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3604df35-5938-4383-bc28-f2c36df025f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ad4faa-d6d0-4677-b14a-d38471f06f1e",
        "cursor": {
          "ref": "8a5edadb-833a-4137-afb3-5e29ef51919b",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c01e2d16-df23-4657-9f02-90aa70363b3c"
        },
        "item": {
          "id": "11ad4faa-d6d0-4677-b14a-d38471f06f1e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4a24822a-e781-465b-ab12-f31b157c245e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f173b2-5822-4896-8c78-23006003fea0",
        "cursor": {
          "ref": "cc46938a-084b-4dfa-bf98-ab511d828ddb",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bdaa80fa-857f-40e7-9c91-844093020907"
        },
        "item": {
          "id": "96f173b2-5822-4896-8c78-23006003fea0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "940adadc-92ce-4b1d-bcd3-0011937208c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606af494-30ec-451c-9291-0b69d1742624",
        "cursor": {
          "ref": "adb5fa5f-3196-466d-9f80-7cbc62f35e87",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e467a7dc-6063-412f-8810-55a49314b9fe"
        },
        "item": {
          "id": "606af494-30ec-451c-9291-0b69d1742624",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "96704663-69c6-42ad-a35c-33c100697bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9f38bf-88b9-4d9a-97ea-23fe6d32f129",
        "cursor": {
          "ref": "51a12994-460e-4ace-9f0e-65a5fd0c73ee",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "398fb03c-2648-46e4-8039-0360270e9415"
        },
        "item": {
          "id": "0d9f38bf-88b9-4d9a-97ea-23fe6d32f129",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "cf917323-8933-430a-b6c4-d9b29c7f0840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72132b6-8c33-4919-a14b-044bd6ec45a8",
        "cursor": {
          "ref": "19f8cb69-bd89-48b0-956c-e2364c78906f",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "376a47ce-e8ab-4d5f-bb45-f31ac96177ee"
        },
        "item": {
          "id": "f72132b6-8c33-4919-a14b-044bd6ec45a8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "935f27d3-e7c4-4b96-b773-ec11b445367c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5a3c99-5bb0-4ddd-9e5e-9c47d24aa987",
        "cursor": {
          "ref": "471e2a1b-d666-498b-afd8-b009bb258bc1",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "92c5273a-808e-49ae-94f7-3137986b0de9"
        },
        "item": {
          "id": "3a5a3c99-5bb0-4ddd-9e5e-9c47d24aa987",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "0c9b9444-15bd-4955-8803-744731b9e678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79412905-3ab3-4efa-9b9e-5f33b4b8c133",
        "cursor": {
          "ref": "8823ba88-dc2f-49ae-a345-155d93758d2a",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9ea3f475-1407-40df-9a9e-13487af1a961"
        },
        "item": {
          "id": "79412905-3ab3-4efa-9b9e-5f33b4b8c133",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3d5ecd42-ba16-4255-b6d1-cea87eaec40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5124867b-7b49-48a8-b616-14ca65a73c23",
        "cursor": {
          "ref": "97531cdf-6421-42ab-9cad-5327a4f1e941",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "809ba16f-86f8-47a4-8c7b-57b2a9f9af85"
        },
        "item": {
          "id": "5124867b-7b49-48a8-b616-14ca65a73c23",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3b2768c7-adda-4f4e-9101-7dc9d9e26bde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00d5639-f6f9-40e7-9d15-98bfa3e86de8",
        "cursor": {
          "ref": "245dcf3c-23ae-478b-8bd6-7447f213c6f5",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0afd7077-a51a-49c3-88e7-7ef63ead715b"
        },
        "item": {
          "id": "a00d5639-f6f9-40e7-9d15-98bfa3e86de8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "18bfb718-970d-4005-9189-a7e1b2540120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2db28c-dbcb-4503-a563-9d61647b5d28",
        "cursor": {
          "ref": "73fc49e8-b92a-4d8b-b91d-82ae95e8330d",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bd13ad6a-d1f6-4ca3-bf9b-a04ba1410743"
        },
        "item": {
          "id": "fd2db28c-dbcb-4503-a563-9d61647b5d28",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5649258b-33c4-415f-aa23-8df9bcc2cfb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37687c2a-10f1-43a1-bed7-ab69c9090861",
        "cursor": {
          "ref": "04dd7f72-a4d1-4575-a35d-d806d227ce67",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0d48a6a3-47e4-401b-bd9c-0d672e510f62"
        },
        "item": {
          "id": "37687c2a-10f1-43a1-bed7-ab69c9090861",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b74aa000-7c90-45ad-984c-ea3023def2c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78befd20-8720-4b97-8054-c0eb01b5314c",
        "cursor": {
          "ref": "d36a4718-d8ec-4ff7-a295-f8cdabe9afd0",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e362d1e5-1df4-4768-84b9-653f5c4fe9a3"
        },
        "item": {
          "id": "78befd20-8720-4b97-8054-c0eb01b5314c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3386f3d5-e01c-46ad-8a7e-b1ff073ba38f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "affe6fef-c6b4-43ad-8fd9-496b05d28e4c",
        "cursor": {
          "ref": "ba54176a-212d-4717-8a88-9cb7d254f39a",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d589e9c6-bb98-4758-a781-af6c8bda25c5"
        },
        "item": {
          "id": "affe6fef-c6b4-43ad-8fd9-496b05d28e4c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9253a05e-8f7d-48c5-ae47-8edc1d479882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d036fb7-d671-4422-afaa-ed43759e787a",
        "cursor": {
          "ref": "39a4b2e1-9314-4d39-a3d7-246757559881",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "eff8b796-fad4-4101-8c71-3f33b9a9f7a0"
        },
        "item": {
          "id": "9d036fb7-d671-4422-afaa-ed43759e787a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "38044caf-be12-4800-aa40-e2ebf099a10e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228e55a9-dc24-4ea8-9946-b0a825e203d8",
        "cursor": {
          "ref": "e6086203-a9cd-4d7f-8cf6-f7ea413d8927",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0ed74c0f-8138-48c0-b91d-a95f19e58722"
        },
        "item": {
          "id": "228e55a9-dc24-4ea8-9946-b0a825e203d8",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6e109e88-01cc-4ff8-87a5-bf81d280fc99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8753fa8-da10-41cd-a1a3-4a71b3d67172",
        "cursor": {
          "ref": "15ba9f52-015e-4d93-8712-b475bc8ff1fe",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d772b60f-6c9c-4663-bdc2-af06227dc661"
        },
        "item": {
          "id": "f8753fa8-da10-41cd-a1a3-4a71b3d67172",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b351e17e-b7d7-49de-b9ef-e70873bc3106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f511b5b4-aa88-4b36-9ae0-a4dcafbba6cf",
        "cursor": {
          "ref": "018f03f3-63a3-423e-b8c7-3665bcd15cbd",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "72460395-71ee-44db-87bb-d046711fafdb"
        },
        "item": {
          "id": "f511b5b4-aa88-4b36-9ae0-a4dcafbba6cf",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "79222b80-56f7-4e28-9622-1601ce7038c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0480ac-8bcd-4b96-b0ce-7bf3b270d36f",
        "cursor": {
          "ref": "6d3c2d81-fdad-496f-a112-b82c26957295",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7e718f5a-8269-402d-b3fd-212e50c3ae60"
        },
        "item": {
          "id": "dd0480ac-8bcd-4b96-b0ce-7bf3b270d36f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "17cd33af-7904-48f5-b531-fc9ec2799c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2ac625-4207-4b8c-8c7f-81c5a603768c",
        "cursor": {
          "ref": "aa55a8f5-51ef-421d-af67-36859fcc3d68",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "078eb367-48bd-4eef-abbf-39d31528801c"
        },
        "item": {
          "id": "dc2ac625-4207-4b8c-8c7f-81c5a603768c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a325df51-6317-46b8-83da-c46be532e03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed6b5f2-59da-4e03-9b78-25097256823a",
        "cursor": {
          "ref": "d0fdb5ef-817a-46cd-aecf-9ce63dee1d9c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5adfbc14-d17d-4bb4-a649-c839fbef7dfb"
        },
        "item": {
          "id": "fed6b5f2-59da-4e03-9b78-25097256823a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5913e566-6304-42c1-ae2f-8e74097fe0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa45e47-018a-4438-b5ec-cc9a223050ed",
        "cursor": {
          "ref": "cb7f4e9a-94d2-42c9-b14a-dbe783b6a243",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "dded4192-0593-4c2f-ac8f-f23708a4f85a"
        },
        "item": {
          "id": "7fa45e47-018a-4438-b5ec-cc9a223050ed",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3377aeef-1e71-411e-af30-9bac3010e2f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9658e04-f6cf-426d-a403-06c8d28f1f5d",
        "cursor": {
          "ref": "2d20bc3c-9eb9-4a36-8394-904e8d6612ec",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3eda1617-6fc6-4483-9e24-f0249f31616d"
        },
        "item": {
          "id": "d9658e04-f6cf-426d-a403-06c8d28f1f5d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "54a3637b-2507-41ae-a80d-0b0b8cb511cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bdbcc98-d242-4499-aa96-723f22ff64fd",
        "cursor": {
          "ref": "7e31ff0c-4618-454a-9a8e-0a6f7fa2bb67",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8607f81b-bded-48c5-869f-802c4edd75d2"
        },
        "item": {
          "id": "3bdbcc98-d242-4499-aa96-723f22ff64fd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ae80c950-77f6-483d-ae14-0bba324b7b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf599ab2-683a-4d78-a1da-be80949c29a4",
        "cursor": {
          "ref": "1bcd5774-5f01-4888-ba39-347280077f74",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "731f4362-052f-45d8-b36b-dbf03d7664a1"
        },
        "item": {
          "id": "cf599ab2-683a-4d78-a1da-be80949c29a4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1b5623cb-06d8-4502-a085-f488aa763287",
          "status": "Created",
          "code": 201,
          "responseTime": 592,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "7238d221-0f91-4875-aa25-2a6bae0fc4a5",
        "cursor": {
          "ref": "9b5545ee-ccdc-45c3-b571-2bddb18482d7",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8fcedf5f-fc63-455a-9b7a-e5bf21a8899e"
        },
        "item": {
          "id": "7238d221-0f91-4875-aa25-2a6bae0fc4a5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "19263838-75e0-4516-be78-a44e9af6e641",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "a86edf54-7b38-4dfe-9359-22960a0d51d9",
        "cursor": {
          "ref": "35425a8c-c802-467d-b516-b5e0cb8a8afd",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9cd10f4a-dde2-46bc-a7b0-275c17c3657e"
        },
        "item": {
          "id": "a86edf54-7b38-4dfe-9359-22960a0d51d9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8404c764-97f8-4d92-97c6-9e04fb13c260",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "858f8e3d-5a8b-4726-ba81-0680d81527f6",
        "cursor": {
          "ref": "62a263cf-7788-46b7-bb1a-3532d16e20aa",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9bae07fb-ea28-48fe-8703-28ec333d5ff2"
        },
        "item": {
          "id": "858f8e3d-5a8b-4726-ba81-0680d81527f6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "77a6bac2-6374-4b28-9392-446298ee7c2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8fdc523-4391-41ee-a1d9-faff261902c9",
        "cursor": {
          "ref": "c79ef992-dbf5-4a43-813f-f3a55d72611f",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "35d5d1ed-ba48-4ec1-9a83-880825d25a04"
        },
        "item": {
          "id": "d8fdc523-4391-41ee-a1d9-faff261902c9",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ac189b56-8191-4d11-9def-a1524f1e84c5",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3b315ab3-f359-46f3-be1c-bcafb14fa9df",
        "cursor": {
          "ref": "952265ee-5f3c-4609-87a6-3e6e3fb6d5d8",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "587c2b59-ac5a-4183-9161-23111068b493"
        },
        "item": {
          "id": "3b315ab3-f359-46f3-be1c-bcafb14fa9df",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "32da8bb5-9788-41f5-837a-73d105f49e2c",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e6d86895-fd43-4c9c-9c2d-27d7f8b8e614",
        "cursor": {
          "ref": "8128edb6-3614-478d-9aed-eddfb7ff37bb",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cbe767e1-fba3-46f8-8183-ca900e02617b"
        },
        "item": {
          "id": "e6d86895-fd43-4c9c-9c2d-27d7f8b8e614",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7217d9c8-e4c7-4d8e-80f0-4ad626f19683",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ad3dccb0-3a2e-4f57-82f7-75f710791682",
        "cursor": {
          "ref": "64014f55-2251-4709-8e94-ef9c02bb3f43",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "eb121acd-63bb-432e-b918-2d656d33ee50"
        },
        "item": {
          "id": "ad3dccb0-3a2e-4f57-82f7-75f710791682",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "dcdd959b-5d82-42b7-b033-bb15753d673b",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c3523e2d-0201-4b64-ab02-641b92c77915",
        "cursor": {
          "ref": "7be5c83d-9b0d-49c6-bace-37d50e425b1a",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2a13052d-4809-44d8-b5e1-a9101f57fa95"
        },
        "item": {
          "id": "c3523e2d-0201-4b64-ab02-641b92c77915",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "75b171d6-c9c6-4ce7-873e-d7ac7a0de520",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ce14cc4a-8574-4505-930e-aedef4d72de2",
        "cursor": {
          "ref": "5c432967-63b8-4887-b605-8b72321de9be",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9227bf7c-e0f1-48f7-b9c7-f785f2a821bd"
        },
        "item": {
          "id": "ce14cc4a-8574-4505-930e-aedef4d72de2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5b8ef980-09de-410f-9c63-715e5a76f664",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d96f61e2-0240-4a14-bb32-181ab0485dbd",
        "cursor": {
          "ref": "34ffbce3-9d74-488a-8c4a-aa3253685e54",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "23a4e71f-af5b-4ce5-8d2e-0e301464d9be"
        },
        "item": {
          "id": "d96f61e2-0240-4a14-bb32-181ab0485dbd",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a4e2561a-da49-40e5-b35c-831597f0b860",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "eabcb8ef-d8d9-4441-b1b8-e6d6302e8c7c",
        "cursor": {
          "ref": "3f39199b-4043-4b5c-b93e-5bfbae63dc79",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6ff7c92c-a676-4b48-9d37-e00f96254160"
        },
        "item": {
          "id": "eabcb8ef-d8d9-4441-b1b8-e6d6302e8c7c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "88bd929e-f5c5-4f6e-a1df-fe3afe5d24fc",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b80e3132-6d47-4ced-9f32-c1593072e1f2",
        "cursor": {
          "ref": "f14f0418-0e34-40be-b935-827e33c45358",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a74bad84-58a9-4d4e-88d1-cf9af77873f8"
        },
        "item": {
          "id": "b80e3132-6d47-4ced-9f32-c1593072e1f2",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a24f3a18-ba3e-424f-bc2b-3a25b1e4250f",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3585ad74-a24c-4760-b279-5413e649a86e",
        "cursor": {
          "ref": "a857943f-51f5-42f7-bd35-2a3b1015af5b",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bbbddac2-1994-4287-a455-e0670bb97295"
        },
        "item": {
          "id": "3585ad74-a24c-4760-b279-5413e649a86e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fc5435d6-f000-4269-a172-515653e4f76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc062cb-2309-42ea-ac93-0f8f1ae9b597",
        "cursor": {
          "ref": "ea3af7b2-ccf8-4045-87e8-0df44abb892b",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "55e642be-4d77-4559-a19b-d32f0017bfe7"
        },
        "item": {
          "id": "3bc062cb-2309-42ea-ac93-0f8f1ae9b597",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8a9bc1ee-b75b-406e-bd74-06a6d5c90856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a24d0d-0001-467a-a446-3f590577ef20",
        "cursor": {
          "ref": "239a431e-07d6-4b84-8465-b5daa5103b6c",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bc9403e5-aa32-429b-a31e-d43408a26f9a"
        },
        "item": {
          "id": "a1a24d0d-0001-467a-a446-3f590577ef20",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "609f66f7-c486-4506-a30b-bee712c07de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5268fab4-3be3-48d5-870f-10430ebabb3c",
        "cursor": {
          "ref": "4ced70ea-567c-4c0d-a986-51230ad400f5",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "36c78e4c-4825-4c6a-9a64-6ae00bc422e8"
        },
        "item": {
          "id": "5268fab4-3be3-48d5-870f-10430ebabb3c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8433a033-b83b-4f55-94b9-b82b7310182b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94702a86-9296-40f8-b497-9ac2382e69ca",
        "cursor": {
          "ref": "4240525a-a087-47e5-bd53-6c98d8164a8c",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fef6cfbf-f4f0-49d2-a89d-5b9d568bb736"
        },
        "item": {
          "id": "94702a86-9296-40f8-b497-9ac2382e69ca",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ec2f0e2b-ecf1-4e80-84f9-fff7eca8d21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43aad95b-aa2b-4325-9d7e-f83556fb97e6",
        "cursor": {
          "ref": "355a89f6-b1c5-42f0-8c8b-73d7af496eae",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0a9f40ec-1fe1-477e-a258-b0f7ffbf0f03"
        },
        "item": {
          "id": "43aad95b-aa2b-4325-9d7e-f83556fb97e6",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0e698da0-e172-464f-9ff9-39c2dbd17739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603be424-90fd-4d31-ba26-1d56c1c3ce50",
        "cursor": {
          "ref": "1dfdd04f-e906-4269-8baa-c3567341f096",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3339f276-5733-46f5-8c24-b4afd8071552"
        },
        "item": {
          "id": "603be424-90fd-4d31-ba26-1d56c1c3ce50",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "7c85ff1d-5a7e-468a-a319-002d89966e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe87f6c-c602-4eb7-aa7c-1d24bb7b8c6a",
        "cursor": {
          "ref": "9e167164-7581-4468-a81a-20a62e49b00c",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "72145b3f-1792-4e52-8c60-970bc7247c91"
        },
        "item": {
          "id": "abe87f6c-c602-4eb7-aa7c-1d24bb7b8c6a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "91b454b4-9d10-4170-9f7b-8d35c22f246f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3766a2-762b-4169-8056-6e7fcfd3f3d7",
        "cursor": {
          "ref": "87b782de-cc53-46e2-86dd-bd16dfed20cf",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "c6c05faf-44e9-45ad-8e73-de21c79040e9"
        },
        "item": {
          "id": "ec3766a2-762b-4169-8056-6e7fcfd3f3d7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2779578f-44bf-4aa8-a0be-8cdd427fb0f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297eb28b-961e-4685-a4bc-e08b90867cea",
        "cursor": {
          "ref": "22077465-4a49-4577-acf0-221633f9d62d",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b8132901-8a0d-428c-b32c-48e477e108b7"
        },
        "item": {
          "id": "297eb28b-961e-4685-a4bc-e08b90867cea",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cde5aa31-d2f3-4ccb-9832-6f0d0da38f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841d81dc-7426-430b-9655-026852d5b66b",
        "cursor": {
          "ref": "eb617c6e-071e-4bf1-89c9-1e3888cdc15f",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "efb23276-e5b8-4849-8621-74dca66c1aba"
        },
        "item": {
          "id": "841d81dc-7426-430b-9655-026852d5b66b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "95286a08-364c-442f-b04c-fee527373563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f4165e9-7b67-4aa1-98e7-f46f79e1a810",
        "cursor": {
          "ref": "b9a7a80a-f1b1-4f22-894a-a213062011a8",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ec8b9d42-2a7b-47a4-b515-8fb9456c2262"
        },
        "item": {
          "id": "7f4165e9-7b67-4aa1-98e7-f46f79e1a810",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e3679225-4074-4af7-92a4-dc94356dd0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6a3691-dd6c-4070-9c57-968bdb3edddf",
        "cursor": {
          "ref": "0ef99107-6888-4521-bbca-f7e7c10a4af9",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ce64b933-fafa-4a29-baf2-782900c549f5"
        },
        "item": {
          "id": "7d6a3691-dd6c-4070-9c57-968bdb3edddf",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "18a50e93-17a9-4b7e-a34d-e650af5f8f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbc83dd-1493-4137-940f-955e181a7676",
        "cursor": {
          "ref": "e46a8353-9653-4e60-a51b-cf8a80fb6266",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "218f7206-53ed-4746-ae87-0fe806b8816f"
        },
        "item": {
          "id": "bfbc83dd-1493-4137-940f-955e181a7676",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f2275e87-d6c4-42b8-a028-2dd532abe4a8",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "eb14048f-c1ab-4285-85c0-0028d96f77b9",
        "cursor": {
          "ref": "ea83f3bf-2d7f-4a04-bace-e13d089cde87",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ee52899c-331d-4e23-958b-67ae3f3426dd"
        },
        "item": {
          "id": "eb14048f-c1ab-4285-85c0-0028d96f77b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4a030f86-139a-4a8d-9944-f299750a06d6",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "9e5e58be-710c-4221-adee-2251c063ab0c",
        "cursor": {
          "ref": "4ec43df3-a563-410b-a1bb-17b0e7fe75c2",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3ca5721b-d19a-49b2-a1a1-344c9a71265f"
        },
        "item": {
          "id": "9e5e58be-710c-4221-adee-2251c063ab0c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "aea11f88-665c-4a8c-aaad-41849af44c3b",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "912d2e6c-c2b0-45b5-a10e-5876c947fb94",
        "cursor": {
          "ref": "78fc39c1-22e4-48d9-972b-407b902a09fc",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a52349e9-0ce8-45a7-b9ba-3703860bbd21"
        },
        "item": {
          "id": "912d2e6c-c2b0-45b5-a10e-5876c947fb94",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0079396f-98f8-4a41-824d-1d3f84adb274",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "6e83cf09-c1c5-4441-84e7-ecca5ea1b6d4",
        "cursor": {
          "ref": "9ad2848b-25a3-45d3-aa93-6c61d43ae68c",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "bc0ff8bb-b1a0-49de-8fab-ba026fe49ebc"
        },
        "item": {
          "id": "6e83cf09-c1c5-4441-84e7-ecca5ea1b6d4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a15503aa-5c29-42e5-a2ed-9d5220349c47",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "ddd703b3-2186-41e9-ab8e-7dc22160ff9d",
        "cursor": {
          "ref": "0c7bac18-5da0-4f23-af30-b403ecbfb3a7",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a0e1f193-ad30-4787-a017-9ca09a3b6715"
        },
        "item": {
          "id": "ddd703b3-2186-41e9-ab8e-7dc22160ff9d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "607a7ea0-4f33-4b7c-ab90-516009e8901c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60ea820-c4e2-4834-b0a0-e78f25d89012",
        "cursor": {
          "ref": "90809aa9-2d59-4277-8530-c714d9c608d2",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7dde958d-483d-47bb-ab45-fce926ed6583"
        },
        "item": {
          "id": "b60ea820-c4e2-4834-b0a0-e78f25d89012",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5c0b2c0c-1673-4603-876b-0c6a004c65f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a429d9a7-540a-4c80-ac82-1dd121863dfa",
        "cursor": {
          "ref": "95151fc2-0a61-414a-af43-4a19bd74be85",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c8dc9ddd-9a84-4c43-a905-def5163c0a4f"
        },
        "item": {
          "id": "a429d9a7-540a-4c80-ac82-1dd121863dfa",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a1beb447-f523-4397-9462-82938403941c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6931b822-1a32-4506-8ee6-203155c70080",
        "cursor": {
          "ref": "25b0f35f-657a-4c39-bbb9-7425b00dee23",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "32dc4c3e-98c9-47b1-a8d6-8922ea285c83"
        },
        "item": {
          "id": "6931b822-1a32-4506-8ee6-203155c70080",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fedd8c65-5c9c-4c5e-a400-2284d922a04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c87aaaa-cdce-4ed0-8f2b-ac631a8c352a",
        "cursor": {
          "ref": "9148ddaf-b073-438f-a459-6550a68d0bc9",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "253e0db4-5795-42e4-8e4d-8be0b41f13f0"
        },
        "item": {
          "id": "8c87aaaa-cdce-4ed0-8f2b-ac631a8c352a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1ec113bb-cb90-4507-9282-42fce818672a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0dd43f4-a828-4ff6-865a-0447bd71cd69",
        "cursor": {
          "ref": "1ef6c333-ea45-4df1-bbf8-78309afc989a",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "86f3a2f7-83c0-4144-87f3-9d7f7916cadf"
        },
        "item": {
          "id": "a0dd43f4-a828-4ff6-865a-0447bd71cd69",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d6622d2d-4c1b-4734-a8c6-f4845a213cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2090312-43d1-4e42-adef-bcec702187a4",
        "cursor": {
          "ref": "a3742f55-0a73-4417-8444-5bfb522f8415",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "850cb487-65f3-4e8e-a631-c56e4b6c4ab4"
        },
        "item": {
          "id": "a2090312-43d1-4e42-adef-bcec702187a4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6e22e161-8c21-4ac5-b870-90f00cb738fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e23d66-943f-41a7-9f6f-329e89081f67",
        "cursor": {
          "ref": "e7d9a9c1-1d8e-4579-9439-d156558e4d73",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5ea92359-998d-4fd3-bba8-3983402c7937"
        },
        "item": {
          "id": "f7e23d66-943f-41a7-9f6f-329e89081f67",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "429b14b2-20a4-49bd-bae3-180aaf1a1182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b0357b-336b-400f-b131-a7e9e680d451",
        "cursor": {
          "ref": "9defe991-cc4f-49d1-8f9d-64ff22dce861",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "debed606-18bf-4d37-8caf-d504ddfc7e35"
        },
        "item": {
          "id": "b0b0357b-336b-400f-b131-a7e9e680d451",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "24160e41-3e4f-4d79-bbb1-e671e571db6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee8fbe3-3cd3-4434-ace8-0ff726c120c5",
        "cursor": {
          "ref": "b5e85c41-cf75-4934-bba5-a5800a8ed742",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9af430ae-a9f4-49d8-8f80-144bd4b51119"
        },
        "item": {
          "id": "aee8fbe3-3cd3-4434-ace8-0ff726c120c5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d0f73f31-98d1-4645-844c-06e2f230347f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb20ae0-b097-4c47-b209-bdcf01fef839",
        "cursor": {
          "ref": "96724b73-6a06-4e77-8e15-af510f91a170",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "44ec4c9f-2d5d-43ca-bcd0-0ce53ba7869a"
        },
        "item": {
          "id": "feb20ae0-b097-4c47-b209-bdcf01fef839",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "1afca40f-279a-4f5d-9ee8-4ea0e532a2e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96ba5bd-4d8f-45f9-8f05-cd5fbce8a677",
        "cursor": {
          "ref": "5e7d0f45-ab48-40bd-aac0-560df05c1675",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2bcb86cd-9cb5-482f-81d6-e57c0c18d812"
        },
        "item": {
          "id": "c96ba5bd-4d8f-45f9-8f05-cd5fbce8a677",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bcdb0856-1f19-47fe-b848-6ba329cff9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66764475-fc2b-4b08-96d9-8caf353f03be",
        "cursor": {
          "ref": "1c1a4d25-0058-46db-93b0-660da8f6bad5",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b15743bd-27cd-4f8a-ac9e-59ac1e717909"
        },
        "item": {
          "id": "66764475-fc2b-4b08-96d9-8caf353f03be",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dbc53232-9e52-416f-a185-b5cecfe3ab8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a95bb25-766b-4df8-8315-c026da9fce0a",
        "cursor": {
          "ref": "a8551076-4ff7-43a2-a6cf-24ae219b262f",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f41259aa-6d51-4cfa-9490-0fb118495c42"
        },
        "item": {
          "id": "5a95bb25-766b-4df8-8315-c026da9fce0a",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ca09f8b1-0d6b-4735-9176-f880ef4fce88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff90d67-7af6-4b1a-a967-c00e313d0afe",
        "cursor": {
          "ref": "0e59a08c-cd80-4400-8def-628e8690c94d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "098160ea-d934-48f6-ab90-fe2beabd4873"
        },
        "item": {
          "id": "2ff90d67-7af6-4b1a-a967-c00e313d0afe",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5c29d0d5-8555-4a2a-a543-f34a2ad13dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b0c1ed6-0e80-4c1f-b9fb-93d2ea7329f2",
        "cursor": {
          "ref": "1097edd7-3660-45de-9929-28dcd04f68c7",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "34aa8cbb-0431-4d8a-84de-66dd77033354"
        },
        "item": {
          "id": "6b0c1ed6-0e80-4c1f-b9fb-93d2ea7329f2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4258d215-8ca1-4887-9279-a6739adee2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365da3bf-b126-4a9d-b147-8ef2bbf44e9c",
        "cursor": {
          "ref": "cdd483f5-3cdc-46f0-86ce-b9459ba07f26",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "65b79b34-f1ff-417e-a66f-f60c237c9728"
        },
        "item": {
          "id": "365da3bf-b126-4a9d-b147-8ef2bbf44e9c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3734c115-29dd-4340-8338-d5bc1a1ed871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f11fe76-3399-4313-82cd-29757532a7f8",
        "cursor": {
          "ref": "cc766ea8-9159-408f-9124-1e507b92c274",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d12e7977-3f9e-4162-95c2-3108eca90c0a"
        },
        "item": {
          "id": "3f11fe76-3399-4313-82cd-29757532a7f8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "74e13a15-5314-415f-8e72-5e6e231bd141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cead7ad-3229-40ac-ac4f-f7f24d2d20c5",
        "cursor": {
          "ref": "9aff2823-f2ae-4c72-8fd7-5f3ab85c28db",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b9fa2c8c-75ce-439a-aa51-f5dc7ef5c8a3"
        },
        "item": {
          "id": "4cead7ad-3229-40ac-ac4f-f7f24d2d20c5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a0f68909-32d4-4676-a70c-f4be528dd388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f28f19-112d-4c01-8f41-1f13e82ef9b3",
        "cursor": {
          "ref": "75b703de-1d0c-4ebc-87bf-b58b40d33389",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7a2afea4-68ed-48db-971f-5c7246b679bc"
        },
        "item": {
          "id": "a6f28f19-112d-4c01-8f41-1f13e82ef9b3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0f2ec47a-10f4-4bd1-9612-cedea4c14178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c541875a-2380-4db9-b837-ebcff8f07eaf",
        "cursor": {
          "ref": "8e326951-cfc0-48b2-8cd6-72acd14cc73e",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8fcaeb84-095c-491d-a330-0e4a6963e1b7"
        },
        "item": {
          "id": "c541875a-2380-4db9-b837-ebcff8f07eaf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e9e91aea-acd5-4144-aa57-ba21fdb963b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45afba60-fc73-4b63-8198-e6071b7720ff",
        "cursor": {
          "ref": "84faa019-35fe-44c9-b9d0-86afd1974e94",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ddfa4205-b25e-48ad-b5a0-a85c45b0eac7"
        },
        "item": {
          "id": "45afba60-fc73-4b63-8198-e6071b7720ff",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4ac3844e-6fd0-4b61-a8b7-69dfb05b6408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58553de4-d4e1-452e-8235-2c886d138223",
        "cursor": {
          "ref": "471764a9-cd2e-48e3-9ec0-9825d6fa5ae3",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3803c7a4-e60d-4618-8e70-78e45ed703ab"
        },
        "item": {
          "id": "58553de4-d4e1-452e-8235-2c886d138223",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cd956c7a-8bbe-4a3a-ac27-86261e76eec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbdb09a-64a9-4b8b-9f4f-2f4671c0acfe",
        "cursor": {
          "ref": "0ad2f336-d1a1-45a5-b7e4-d85c7ea41469",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d2c0827c-0814-4942-a519-0d8fa61f9a23"
        },
        "item": {
          "id": "6cbdb09a-64a9-4b8b-9f4f-2f4671c0acfe",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8e69379e-2e87-431f-95f5-340f11ea3b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1a76c0-5b81-4c25-a48b-c9ca06fa923c",
        "cursor": {
          "ref": "6adc3a82-b8d3-4d40-81f6-2f49bd23244f",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4896bf42-0c24-49cd-a3b5-a6b808a249b4"
        },
        "item": {
          "id": "ae1a76c0-5b81-4c25-a48b-c9ca06fa923c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2719539c-9203-4298-b92f-96ee207f54c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff08d25-5f23-4ae3-b111-bdbd2c8d4fc6",
        "cursor": {
          "ref": "bd78f28f-f2ec-4f47-9ed6-3300373190b4",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "07398d89-d9cc-4b44-960e-c7fdcdaaaf51"
        },
        "item": {
          "id": "eff08d25-5f23-4ae3-b111-bdbd2c8d4fc6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e51d9583-e436-478b-8492-46fc36fbcd46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5afc3af6-d879-4ed9-b9e9-b385abdaf503",
        "cursor": {
          "ref": "31be7ddf-838b-4c1e-b4bf-7fb1b29634ac",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bebf9a86-c672-45ab-9a26-5880b66d0c02"
        },
        "item": {
          "id": "5afc3af6-d879-4ed9-b9e9-b385abdaf503",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "60e1e84d-ea89-4452-9b6f-a931835ae04d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e320efbe-1dfb-479a-9b48-1543f9349179",
        "cursor": {
          "ref": "0153791c-271f-4b04-bc90-0b0b297b0fba",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "af529154-42d3-44ff-8c17-ac0d1b63fee6"
        },
        "item": {
          "id": "e320efbe-1dfb-479a-9b48-1543f9349179",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0bab0d42-2c59-429a-9a7c-29cd47ef979b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e74dc131-1ae5-443b-b1e4-07a91b6ed1e6",
        "cursor": {
          "ref": "d2353188-662e-4130-a54e-9eba97392f48",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d78726c6-f173-47ae-9cdf-177ac48ee702"
        },
        "item": {
          "id": "e74dc131-1ae5-443b-b1e4-07a91b6ed1e6",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a8f0b91c-cf6e-4ecc-b080-d0a9ff57c193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3f0400-483d-4f1d-a67e-7824656b554a",
        "cursor": {
          "ref": "10f948b9-6c17-4e9a-beef-f98e3e0edb37",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "37fd10a1-e3a0-483d-bfef-e3d6b3b8505a"
        },
        "item": {
          "id": "db3f0400-483d-4f1d-a67e-7824656b554a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b6164e40-08c5-43f5-84be-15bf872e88d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9adac7a-08ce-4ab5-b94d-ba5bce3b36ae",
        "cursor": {
          "ref": "e67f3a53-cb45-4303-8eda-d6926237d85d",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7c91bcc3-6695-4e15-9fc4-9778ef7e5334"
        },
        "item": {
          "id": "c9adac7a-08ce-4ab5-b94d-ba5bce3b36ae",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "de443fe5-ca78-4a2c-8717-a43d2c58f079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626e05a9-b42a-49f3-a283-a66c91c6eea4",
        "cursor": {
          "ref": "d35ced4f-e592-4e11-a612-ca60c70b8a06",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "331d6e6b-c0df-418e-957c-b6a46ae91b7b"
        },
        "item": {
          "id": "626e05a9-b42a-49f3-a283-a66c91c6eea4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4cea6c3d-9862-4aeb-93d8-026289830055",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb7b97c-2da3-47ac-b455-bdd5aad59d7e",
        "cursor": {
          "ref": "b2948f98-3fa6-4875-be17-1850420b511e",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f6e4fb16-c062-4efd-9941-26b1782e1190"
        },
        "item": {
          "id": "7eb7b97c-2da3-47ac-b455-bdd5aad59d7e",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8d7c4b4a-006e-4475-9dba-5a5af8776176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "22e31637-0dfe-4c70-84dd-d217f7138f0d",
        "cursor": {
          "ref": "d46fa7d8-ea6d-4382-be75-ef8cabe71ffc",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "94aab879-e7c3-4c39-b4fd-47f93cae23db"
        },
        "item": {
          "id": "22e31637-0dfe-4c70-84dd-d217f7138f0d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "df8af8a7-722f-40ad-8346-2315c0d6d30e",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca0fd60-9dc6-4f08-8888-0dc467b1e9fb",
        "cursor": {
          "ref": "973e984e-d433-4030-9a2d-823d907dd67f",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1ca2c88b-dffd-45a8-bab2-b50c7e11aaf5"
        },
        "item": {
          "id": "8ca0fd60-9dc6-4f08-8888-0dc467b1e9fb",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "af45928f-f286-4274-9a23-d47a5c3fb30a",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "77289cd6-1820-41ee-b0f3-f9eaf5410184",
        "cursor": {
          "ref": "e7bd853e-e10b-44ab-a245-c4dfce200511",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "304f0d1f-e8bc-4e3c-bfd8-9d669f8a8bab"
        },
        "item": {
          "id": "77289cd6-1820-41ee-b0f3-f9eaf5410184",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b132d694-36c2-4777-b142-09422660a582",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e877aa5a-9b3d-48b1-902b-9fec1a81737a",
        "cursor": {
          "ref": "534a55b9-e2f3-4fbd-ab87-25527f2cf2c3",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "45440ffb-3207-47ee-a53f-cffefb1d74fe"
        },
        "item": {
          "id": "e877aa5a-9b3d-48b1-902b-9fec1a81737a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ee4f6cf3-9444-4b5d-9374-d8366bd734e1",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f30795-c344-4f7a-94a9-b6e6cb7973d1",
        "cursor": {
          "ref": "d480f7e1-8af6-4171-8631-b2b01613dab0",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6610b826-477f-4788-b10d-416eace27d0b"
        },
        "item": {
          "id": "37f30795-c344-4f7a-94a9-b6e6cb7973d1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "84eb6345-b360-41c4-b2f0-bf6fe17f0722",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-25T00:37:18.169Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-25T00:37:18.169Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f8f276ec-e5c6-4d63-83d7-7baf0d782894",
        "cursor": {
          "ref": "63b2405a-4d49-428c-ac0f-6b1e5c5ee92d",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d0afea5f-25bc-4017-8433-161b0b0044a4"
        },
        "item": {
          "id": "f8f276ec-e5c6-4d63-83d7-7baf0d782894",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6e9975ab-23f8-469b-85e0-ab6386ae9d71",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612442ab-d615-4ee8-a78b-93062d1bae1d",
        "cursor": {
          "ref": "ee872cfb-c31d-46fb-a772-2ab82da849bf",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d24e475c-f039-4f2b-8b9f-7a1d2d91027e"
        },
        "item": {
          "id": "612442ab-d615-4ee8-a78b-93062d1bae1d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "380522b4-9e02-41e6-b22e-3c7843b8b6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c247ea-483e-4c7d-9ef0-7a2cea1d2201",
        "cursor": {
          "ref": "db0aa79b-6f8c-40fe-ac45-8c47b07a785a",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "96df22d1-a0bc-4c1f-b5fb-1f35d9b84057"
        },
        "item": {
          "id": "52c247ea-483e-4c7d-9ef0-7a2cea1d2201",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0bfd8c7e-f659-4485-81f3-cded128f7d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be90d93-cffb-4cf0-a3b9-a82441891fea",
        "cursor": {
          "ref": "62cbc190-a7b1-439c-a7cb-94a6fa9f85ca",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "56fe0724-197d-47c8-8a96-8a86ad920ac7"
        },
        "item": {
          "id": "6be90d93-cffb-4cf0-a3b9-a82441891fea",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6dd3501d-5aa2-408a-8fc6-f2ca8f0fafca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d35d8a-719f-461c-b56e-6b7163982624",
        "cursor": {
          "ref": "c1859a69-b19f-46dc-8e36-e717a57685a0",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9daf06c4-68e6-430b-a25a-a310a191e994"
        },
        "item": {
          "id": "b7d35d8a-719f-461c-b56e-6b7163982624",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1622fd5f-6e1a-4e13-9084-d8f179497c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d101d616-356f-47bd-ac6b-650d40ef88a1",
        "cursor": {
          "ref": "0b7437eb-48ec-43d8-8b01-c9ae888b2fb2",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ca900e55-fc4f-44fd-87ad-9d9c765b7c1a"
        },
        "item": {
          "id": "d101d616-356f-47bd-ac6b-650d40ef88a1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "114cbb2c-8bc3-4180-9b0e-ae67e76341c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee45c5b5-c2b5-4110-a946-1d72013f8323",
        "cursor": {
          "ref": "2d9de2c7-1c92-48fc-8a19-74eb69d0c158",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "49075382-d66d-402b-9177-92a736bc8549"
        },
        "item": {
          "id": "ee45c5b5-c2b5-4110-a946-1d72013f8323",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f81eecf2-751c-4609-b724-8a0c7534c17f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f577f7b4-4b5f-4327-9140-007796e383d5",
        "cursor": {
          "ref": "6c60c244-f3e0-44da-babf-1a5269936c35",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "bf4e667a-ec8c-45aa-ad69-78ea913366fb"
        },
        "item": {
          "id": "f577f7b4-4b5f-4327-9140-007796e383d5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7a6f4296-d29c-4726-a69a-d1e1ac0b9c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb52ed01-7178-4980-8879-7654a131306c",
        "cursor": {
          "ref": "00ab0b86-4936-40fc-a71b-f586f987bed8",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fca032e0-a80e-40d0-b810-c2e481578e98"
        },
        "item": {
          "id": "bb52ed01-7178-4980-8879-7654a131306c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a1127cb1-f72f-433a-8d49-9d9a246b8e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4961d569-d603-4e13-a841-a4ad5e7aeadb",
        "cursor": {
          "ref": "25a48952-91d0-4524-a69f-3fea2a0a447e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2217fdf0-6205-4e66-97cd-57c2b449351a"
        },
        "item": {
          "id": "4961d569-d603-4e13-a841-a4ad5e7aeadb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "88b7e827-6882-4c5d-903c-0a7bf73e78ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88a776a-3407-489f-99ba-a3bf61b7b1e5",
        "cursor": {
          "ref": "a04adc20-2b21-4a28-8310-0fd4c277dd73",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4a8134e5-d7ec-4481-aeee-6f85a9ab6848"
        },
        "item": {
          "id": "e88a776a-3407-489f-99ba-a3bf61b7b1e5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cd31e5a9-c286-468a-9bdd-ef50047c5f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cee129a-ac3a-41c4-917c-ca285b3edc68",
        "cursor": {
          "ref": "55e1f862-a3e8-4916-90c7-75bd758ae94e",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "585b2efa-412b-4aeb-ae47-45b10b36efe8"
        },
        "item": {
          "id": "7cee129a-ac3a-41c4-917c-ca285b3edc68",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "94310545-7b46-4358-b99e-b56e33b20b0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b101ba95-59a6-4008-9ae2-c4cb55c6be72",
        "cursor": {
          "ref": "fd2f1b74-27e4-414e-a764-550e423c42e8",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9058c807-0c55-4242-b161-8117500234dd"
        },
        "item": {
          "id": "b101ba95-59a6-4008-9ae2-c4cb55c6be72",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "65d9f5ee-8893-4219-8368-2f793874e6e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c66f20-f0c0-4c38-b371-9b64b498ea12",
        "cursor": {
          "ref": "f79dd303-f49b-488a-89cc-78a09f76e670",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "90afc881-3d92-41fa-a391-f988c9d78d7a"
        },
        "item": {
          "id": "e0c66f20-f0c0-4c38-b371-9b64b498ea12",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "860a7b9c-02dc-4255-a2f9-74f70f3fc8f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "be1351fd-dfd5-47e1-bb99-a3ece6c69381",
        "cursor": {
          "ref": "43aef28b-b55d-4f28-9f24-624d644778f3",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "29767d1b-ea3a-40a3-8886-c96b78b72a7b"
        },
        "item": {
          "id": "be1351fd-dfd5-47e1-bb99-a3ece6c69381",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c859a03b-68e9-4d22-a710-47a449462c1c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 130,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9cfc29c2-4aac-489e-94bc-dd964f288ff1",
        "cursor": {
          "ref": "dab18cdf-0a04-4ee4-94c1-ec6b48c26fe1",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "89420d05-b04f-4ebd-9ff9-5676f406e05a"
        },
        "item": {
          "id": "9cfc29c2-4aac-489e-94bc-dd964f288ff1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a1b93eda-95c9-4a6b-ac66-9fda70a32b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7110e2de-22a3-4311-a093-21a2391badd0",
        "cursor": {
          "ref": "ea61ac40-1263-413e-be28-ff0e5a0a405f",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "944df6b9-053a-40a5-8a98-9fb222a1ae95"
        },
        "item": {
          "id": "7110e2de-22a3-4311-a093-21a2391badd0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7bc97605-7f99-46dc-846d-63ac97bd7b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82d10ef-0935-489a-8e07-a08cb61d8fa9",
        "cursor": {
          "ref": "e934ad94-df08-4667-9cea-6a1002592720",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c760ff01-aab8-4eea-81a0-9ea8ec6209a9"
        },
        "item": {
          "id": "e82d10ef-0935-489a-8e07-a08cb61d8fa9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0cd91072-8ed6-4673-ae31-652580742f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a79099-35ed-44ac-b1bf-ae6454ae9a79",
        "cursor": {
          "ref": "8127e42d-2b78-4a7a-9f48-8e5ed64d32fc",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1208fbfe-d7cc-49b1-ab31-37e5e9c9d184"
        },
        "item": {
          "id": "05a79099-35ed-44ac-b1bf-ae6454ae9a79",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ee21f1f6-a2be-4290-8e7a-8242fcf15e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ea28b4-37d7-4242-9aca-b7594d07e533",
        "cursor": {
          "ref": "42917bb6-23b0-4806-8a46-9742da3eedac",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4f5e7e5e-e7cd-4b00-ab62-4ab5bb18fea5"
        },
        "item": {
          "id": "19ea28b4-37d7-4242-9aca-b7594d07e533",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "57cb2028-a161-4cca-872c-51af38ac79d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4380a82-5300-484a-9be9-99093d46eb3d",
        "cursor": {
          "ref": "dbaac27c-1cfa-4206-9de3-cffa35138406",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8565c02e-e2a4-416b-9a05-44f4618da7b2"
        },
        "item": {
          "id": "a4380a82-5300-484a-9be9-99093d46eb3d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "94897065-30e3-4dd5-8dd7-806b359031a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dee0a71-eae1-49a6-b8d7-e0cb23f37d51",
        "cursor": {
          "ref": "37570c43-89d2-42fe-8417-58dcce8275a8",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "95126b60-a051-4e18-b08e-ae9cebbb2886"
        },
        "item": {
          "id": "9dee0a71-eae1-49a6-b8d7-e0cb23f37d51",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "532ab432-1873-4b32-a7e8-d175b63ba81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296d9efb-4564-46f0-9b9e-035c04ee238c",
        "cursor": {
          "ref": "8e75268f-fa66-4b99-b9e9-45c634b8e2bd",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "277794cf-decc-4108-b293-cdbd101ef7b4"
        },
        "item": {
          "id": "296d9efb-4564-46f0-9b9e-035c04ee238c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "bb5f264b-a255-448f-ab93-51808352b64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc3eef0-456a-44c0-b3e1-83dac4d57c26",
        "cursor": {
          "ref": "33d8b7ce-61b2-40bb-be71-19baac301408",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "782a7488-1b70-4917-86a6-7e7d53d780ea"
        },
        "item": {
          "id": "fdc3eef0-456a-44c0-b3e1-83dac4d57c26",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2560275b-2136-43ad-baca-d08d8c37704d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fda7ae-ddce-4044-92e1-0dde2c644d94",
        "cursor": {
          "ref": "7029db23-f79d-4e5b-a682-261e5b250d5a",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "32aa23c2-4308-42d6-acc5-b94c2de1b785"
        },
        "item": {
          "id": "45fda7ae-ddce-4044-92e1-0dde2c644d94",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8d091e9c-2c2b-40fc-a4f3-8a29bcb268fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770fab0e-2345-4679-8a23-25884abb5812",
        "cursor": {
          "ref": "23039a1a-1632-4cfd-9007-f3f1a1ded0c7",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f8af8f98-7cba-4a44-96a5-e8a5a81211c2"
        },
        "item": {
          "id": "770fab0e-2345-4679-8a23-25884abb5812",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "343ca4a1-dfef-4c31-bf3c-4dc2675984e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958da463-fcce-47bd-a6ab-760753d3c427",
        "cursor": {
          "ref": "0fb3cfc5-de4b-4bb9-a503-38d57a84f200",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0a1c197b-cc38-4719-8811-fa86188e9e6d"
        },
        "item": {
          "id": "958da463-fcce-47bd-a6ab-760753d3c427",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0c982e4f-6b83-459b-b9f0-fb6cd3cce488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e3e3c3-ac82-479e-8d82-3378901cb577",
        "cursor": {
          "ref": "0dcecb98-6d94-4d80-bf1a-522ef4d47328",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "219f04dc-f563-4d4f-a923-31be0b80159e"
        },
        "item": {
          "id": "80e3e3c3-ac82-479e-8d82-3378901cb577",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fe86c552-ad8b-4424-865b-f95939c173d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f797b8c9-db2b-4147-95a2-8321bf59b720",
        "cursor": {
          "ref": "007bfc1a-2b7e-49e6-8f8a-ec47ee439c0c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "59abae21-afd3-40dd-a14f-dd324ad04b38"
        },
        "item": {
          "id": "f797b8c9-db2b-4147-95a2-8321bf59b720",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ab9f7841-9b0f-41fa-82a9-c3437b3c8bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404ee999-57c1-40fe-9419-2c1b97e24e01",
        "cursor": {
          "ref": "5b697e1b-310b-4193-bb8f-d75d27ca00c0",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a5041ca7-5e95-4401-8db7-28e12f82ca1e"
        },
        "item": {
          "id": "404ee999-57c1-40fe-9419-2c1b97e24e01",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e9b297a2-c0b0-4af8-969f-809848ad9e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08deb4bb-bd01-4424-9aee-132765badd58",
        "cursor": {
          "ref": "5bcf49b6-0fa6-47ac-b0d1-a5ba4127a5a9",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "228a031a-d753-4951-85ab-2e860bf0f4dc"
        },
        "item": {
          "id": "08deb4bb-bd01-4424-9aee-132765badd58",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3b2107c5-8b4f-4964-83f5-2e38ed1e8a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a10bd72-76c9-4c46-948a-c0a4272b9a92",
        "cursor": {
          "ref": "db0bebd9-83a4-43e9-bf42-a6605b32448f",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8d7db50e-9d4f-4c1f-967f-20ecf859009c"
        },
        "item": {
          "id": "5a10bd72-76c9-4c46-948a-c0a4272b9a92",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "99d5fbeb-6b9a-4603-af00-2d7229b01649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb69e58e-f45f-4ed8-a475-1b532ca8b2fa",
        "cursor": {
          "ref": "2962ba25-f983-499d-82c3-1f2f78323a46",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fbbf1234-ead0-4197-bbbe-999687f177f0"
        },
        "item": {
          "id": "cb69e58e-f45f-4ed8-a475-1b532ca8b2fa",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2afaa4aa-bd11-4440-8111-94074f47c42b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "96161f4d-9d11-43a1-82d3-eeeb165748c0",
        "cursor": {
          "ref": "877a93e2-76fb-4e0f-83d6-2ad29b7cc2cf",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3e7bc248-8cf0-4e64-9e3b-8981ac99b0fa"
        },
        "item": {
          "id": "96161f4d-9d11-43a1-82d3-eeeb165748c0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3ff1f4dd-c37a-4895-8d93-3c45b3d677a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ebd5b4-771e-4183-a2ce-7107071b95f9",
        "cursor": {
          "ref": "ba8e075e-d523-4ec0-be77-e8f4de5bb8e1",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1e9444f3-0104-4e3c-9346-7403fc59897a"
        },
        "item": {
          "id": "05ebd5b4-771e-4183-a2ce-7107071b95f9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "05198c2b-cfa8-4086-999b-21128e8a376b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13194ac-5326-44de-a28c-4bed516d0f30",
        "cursor": {
          "ref": "f5b54b39-7ffd-4fa4-9742-713baca34adf",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "52edaa0f-c3d5-464c-9af5-8c62c3ed989a"
        },
        "item": {
          "id": "a13194ac-5326-44de-a28c-4bed516d0f30",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "33cc4c8a-edf9-480c-8f56-8f8e381a1811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18ed6a53-02c4-48d9-8901-56b7b832b844",
        "cursor": {
          "ref": "695e16f9-1990-4207-a777-751e9f73a8b6",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3daa90fe-3f30-4659-a38b-23acc7fc6e73"
        },
        "item": {
          "id": "18ed6a53-02c4-48d9-8901-56b7b832b844",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "29a0eb84-690d-4501-a74e-f276573ec6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823614fc-b381-4c9d-8aba-cf8861ef11cb",
        "cursor": {
          "ref": "f7b371d8-4394-4ef8-80a7-7b0bdd6235c9",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e865a6ad-1ead-4aeb-87b7-a62dd07929b6"
        },
        "item": {
          "id": "823614fc-b381-4c9d-8aba-cf8861ef11cb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "fed248a3-5215-460a-9e94-1b41964a7369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71737eb3-de08-4f58-92ab-943cff080b94",
        "cursor": {
          "ref": "905b6eec-d404-4979-be3f-f15450878b50",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "88216824-be63-4ee9-9e0e-066d63f327cb"
        },
        "item": {
          "id": "71737eb3-de08-4f58-92ab-943cff080b94",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5d78efe5-0170-46ef-a76c-45730e6b9837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2315e6ac-ad1a-4a2b-b9b0-35687d6cccd4",
        "cursor": {
          "ref": "c92eb769-2f27-43ea-b8c7-774bda1489f6",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "23effb63-c2b1-4cab-a206-01751948f230"
        },
        "item": {
          "id": "2315e6ac-ad1a-4a2b-b9b0-35687d6cccd4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c583a75f-8eec-4d14-bf28-1408283fd197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90f24fb-a183-4070-a467-83cdc740d8c7",
        "cursor": {
          "ref": "c2e674fe-b0ba-404c-9982-e2c41ab3ede8",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "794e8a4a-71f0-4311-819f-b9b47fcbb36e"
        },
        "item": {
          "id": "c90f24fb-a183-4070-a467-83cdc740d8c7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e4bc6f4e-cef4-4c90-ae48-a227f1e27723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e971e6-ce6f-469a-9e02-410b81f152de",
        "cursor": {
          "ref": "34cf7aaf-70ff-4139-892c-27445fb29f2b",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2184123f-9e8a-456e-bbef-5b3d11810ed2"
        },
        "item": {
          "id": "b4e971e6-ce6f-469a-9e02-410b81f152de",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "764340c8-991e-4809-9d83-b133cceca181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fca4279-c912-44d1-b004-93f5f871eaf0",
        "cursor": {
          "ref": "7716ac35-c4cb-4a43-8415-c3ec25b726b9",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d83ab3cb-f642-4c49-9fa2-3f85915192f3"
        },
        "item": {
          "id": "2fca4279-c912-44d1-b004-93f5f871eaf0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3598dc4a-3a6a-4f38-9894-96366a71d8af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f08ae8d-7602-4f29-b5ec-7921443b4639",
        "cursor": {
          "ref": "af0af594-8109-4cf5-8d1b-92c964354f8f",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "212da01e-9a61-42b4-9c72-0133c96bd7b1"
        },
        "item": {
          "id": "0f08ae8d-7602-4f29-b5ec-7921443b4639",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2f78f22f-f283-485c-bcb9-4937f9611c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9066b8-3722-447f-ae84-d4a3e596cc8f",
        "cursor": {
          "ref": "b51b7157-8777-476c-94c7-0d5d9ed2fb36",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6944593a-ba8a-44fa-8a19-b5215bc0faa2"
        },
        "item": {
          "id": "eb9066b8-3722-447f-ae84-d4a3e596cc8f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "08e084f6-85dd-42fd-bc44-f6f1b55cc720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae793b5-3ab5-4390-a573-fe768cd32035",
        "cursor": {
          "ref": "1265d9f5-ba2f-44b1-9446-175686e449a5",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7708f6a1-8242-47eb-b57a-9357be2ff2f2"
        },
        "item": {
          "id": "2ae793b5-3ab5-4390-a573-fe768cd32035",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a9c9f829-4a66-4efd-88a5-321547c9cf9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16785b84-e7a5-471b-8443-4aa718aeae28",
        "cursor": {
          "ref": "4d69c89b-950f-49c8-bedf-987ba9c68f97",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "197f5e77-8ba8-4e37-9a94-71a96141c575"
        },
        "item": {
          "id": "16785b84-e7a5-471b-8443-4aa718aeae28",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c3c4f945-8385-4838-ba0d-389a2a6ed26b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e43614-ec3d-4584-b0f6-1134a53259c0",
        "cursor": {
          "ref": "733a45ae-113d-47a1-91f9-78ea36822a76",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "32ad1ed1-3f99-4bfc-89fa-4fcb3487f552"
        },
        "item": {
          "id": "e9e43614-ec3d-4584-b0f6-1134a53259c0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c89dae5c-7505-4194-8584-3b46a3291cf2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "b19ea240-fe5d-4901-9a25-7f41895320f2",
        "cursor": {
          "ref": "506393a6-cf30-41a1-94ad-579611205360",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "bc42ac32-5d11-427b-a9a7-b1cfb552d5c1"
        },
        "item": {
          "id": "b19ea240-fe5d-4901-9a25-7f41895320f2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "53fa2d3a-d801-4151-b15c-bf5a36ea7b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f29290-f5e4-4903-b8d1-e7c2406786c2",
        "cursor": {
          "ref": "792aa800-238a-4bd7-99e6-6c386f03441e",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "671e479e-3870-4ffe-99c7-ca4c9963469c"
        },
        "item": {
          "id": "c5f29290-f5e4-4903-b8d1-e7c2406786c2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a055c86a-a387-4357-b8bd-2c8ef96fb6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a99359f-d106-4091-8953-cbbdf42517bf",
        "cursor": {
          "ref": "523e0ef0-8a08-4955-acf6-46a216ab46a0",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "55d12103-3000-4bdc-9a24-dfe0d2ffc039"
        },
        "item": {
          "id": "2a99359f-d106-4091-8953-cbbdf42517bf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2591e940-be98-40ff-bcab-943b96c1d31a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f27daff-0e96-4edb-917f-1f2471a23a31",
        "cursor": {
          "ref": "35e4f59d-f298-4a2f-abd7-5d410da41c7a",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d4fef7b0-3d44-40b5-b5d5-dc0c2eac9314"
        },
        "item": {
          "id": "8f27daff-0e96-4edb-917f-1f2471a23a31",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "488ca841-3983-46c3-9b4e-55a0989494d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a5cad5-5626-48d7-b1b2-6ce09fa9371e",
        "cursor": {
          "ref": "ca9f91cf-f79e-4c9b-952f-1a452ab22bd7",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6a17aa66-ffa0-45ea-918d-1355c93ab0af"
        },
        "item": {
          "id": "33a5cad5-5626-48d7-b1b2-6ce09fa9371e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f3f49892-af5d-4e0a-91b4-670b29af034b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363bc07b-1e29-4b12-9a17-0a9a66367084",
        "cursor": {
          "ref": "6a3c1eb6-884d-4453-9e44-41935febdab1",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d4ea8857-c044-48c0-9087-4d989f6029be"
        },
        "item": {
          "id": "363bc07b-1e29-4b12-9a17-0a9a66367084",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f1da33f6-5832-41e3-b26d-54e8f0194cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56e5091-3cb1-4cc5-af3e-03a537bc7d3b",
        "cursor": {
          "ref": "36bf6366-925d-4371-9797-d6d7d1c43c7a",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "dd21ac5b-c68a-4cfe-9642-9841912869ae"
        },
        "item": {
          "id": "e56e5091-3cb1-4cc5-af3e-03a537bc7d3b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4c49246a-9daa-4fbc-8f6f-1068268bc548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e12ac7-26b8-4d3e-87ea-ddd5144c1287",
        "cursor": {
          "ref": "f4b37011-7ff7-49b9-a5a4-b2015087b0e6",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "62d847fc-c981-41d9-b460-fd6e55692bab"
        },
        "item": {
          "id": "a4e12ac7-26b8-4d3e-87ea-ddd5144c1287",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8343ca32-16f8-4dfa-8a45-879f77bfb10c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5e0d14f-4544-4bb8-bec7-3c868daaa832",
        "cursor": {
          "ref": "e06a52d6-3912-423e-aeac-618c990e3b67",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "11d2cf7a-074a-4ed2-85ad-16d1b50a9229"
        },
        "item": {
          "id": "b5e0d14f-4544-4bb8-bec7-3c868daaa832",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6e6a533a-8837-4af7-8b63-beffc03c23c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e204ad-4ea7-41e7-8246-ac306e92d94e",
        "cursor": {
          "ref": "eb986fc7-204e-4a6e-8665-d44291f35153",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a9c17787-33c8-44c3-9bd5-2f121176807b"
        },
        "item": {
          "id": "b2e204ad-4ea7-41e7-8246-ac306e92d94e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "04bc41be-0851-4737-91b0-1f346b420880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096fee49-0d1c-43be-b9ba-95559a055d7c",
        "cursor": {
          "ref": "89ff52a2-37ca-4a38-8072-5d2f808d6ea7",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b81c9a2e-fabc-4c65-b2b1-c448bfffd6b3"
        },
        "item": {
          "id": "096fee49-0d1c-43be-b9ba-95559a055d7c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ba9e6281-ee55-4452-84f2-59e671254d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0eb4359-bb9f-4be1-9cc2-03d189f7fbdc",
        "cursor": {
          "ref": "13a4bf48-102d-4004-b0e3-7368c244cd5d",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "238ec8b1-0013-4330-8217-eb21d3448c53"
        },
        "item": {
          "id": "d0eb4359-bb9f-4be1-9cc2-03d189f7fbdc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b14b8ff7-0a1f-4062-bc78-ac956959083b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a74c385-ada3-40aa-99ee-1d8d8eda806e",
        "cursor": {
          "ref": "29750f73-03b6-4470-a008-246dccc15a79",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "aad05098-efc4-43cc-8264-bf6ea9735e29"
        },
        "item": {
          "id": "1a74c385-ada3-40aa-99ee-1d8d8eda806e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a0762d97-1073-4140-82b3-a3318907d1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4be29b-c7a7-4511-a579-e6b700cf12cd",
        "cursor": {
          "ref": "1524800e-67de-482a-a439-6fc0244b1b28",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3dec2c8e-7d3a-477d-8966-d8022d757e79"
        },
        "item": {
          "id": "fd4be29b-c7a7-4511-a579-e6b700cf12cd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2b73c174-79ef-4d9b-89f6-ad5ed0128acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b7db71-7bb1-4b55-ade5-ec4a431daa3e",
        "cursor": {
          "ref": "2ec2a1d4-193a-4367-bdcc-b8d8b7a50df0",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "09368713-5620-4952-ae50-b3606d73cf92"
        },
        "item": {
          "id": "44b7db71-7bb1-4b55-ade5-ec4a431daa3e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3e485616-fa1d-40c1-bda8-f167b0153654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae96ee74-8c62-4a5d-8f17-984b645f93ec",
        "cursor": {
          "ref": "965b9d42-c14d-450b-a12b-a89bf5bfe200",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4a1006a0-24ae-43e1-9f4d-dae261df1c7d"
        },
        "item": {
          "id": "ae96ee74-8c62-4a5d-8f17-984b645f93ec",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6eedd8c5-2d1e-44d4-8f87-64b5e445824b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b8add5-862d-467f-a694-e638d7de02ce",
        "cursor": {
          "ref": "a9731d92-769d-43dd-9b2a-134d32747480",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0aea91a8-bc4a-48e4-bee1-65e7d158afaa"
        },
        "item": {
          "id": "80b8add5-862d-467f-a694-e638d7de02ce",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e94dbf0d-8ce5-4c4b-9496-85ffa5743d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f66bf3-ec0e-4c3b-aed5-73052fd3f356",
        "cursor": {
          "ref": "707dddc0-b287-4f73-9bb4-e0ed3a65b554",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d39ab900-935d-4925-8464-83eb073a7877"
        },
        "item": {
          "id": "37f66bf3-ec0e-4c3b-aed5-73052fd3f356",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ddfd4e71-eb6c-4468-a895-97079e5bec08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a691d519-f3d8-41eb-aab9-e5170d6fe8f6",
        "cursor": {
          "ref": "c7256afe-4520-4456-b24e-e7038e7e490a",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2f66668e-3d2f-4e22-b61a-2797b6729feb"
        },
        "item": {
          "id": "a691d519-f3d8-41eb-aab9-e5170d6fe8f6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "49b84484-f62e-4564-b546-ae1a4bbd75dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f351b1e3-75bc-4f2c-9ff1-b2f25bbee64c",
        "cursor": {
          "ref": "7db9fd2d-e8ac-4425-827c-8aa1da9ada9e",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5d100007-9cf3-4518-9a7b-1ecddd9bc47a"
        },
        "item": {
          "id": "f351b1e3-75bc-4f2c-9ff1-b2f25bbee64c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7b473deb-75f7-464a-816b-fd27111be77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9778bd-8214-49e2-b951-72d70b869cd7",
        "cursor": {
          "ref": "2e3d68bb-6c3f-4e11-a7b2-8e3f8796e0bd",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9b6dc2d3-20be-41c2-942d-7cf84ff0d50b"
        },
        "item": {
          "id": "db9778bd-8214-49e2-b951-72d70b869cd7",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e3d0533b-2f0c-4b6f-abf9-97c8a684afe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d670b17-8b23-4d91-ac5c-d5911da990cf",
        "cursor": {
          "ref": "74f8a239-dc90-4f81-8150-1ec70dce0001",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ab798a1e-2c7d-4a57-9d5a-ccce618e8569"
        },
        "item": {
          "id": "6d670b17-8b23-4d91-ac5c-d5911da990cf",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b4c0f85a-0af2-4fce-a21b-13a439a0e87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df293a9b-bf4a-44ad-bfb2-19c7917750b9",
        "cursor": {
          "ref": "df6fc5fe-b808-4fee-b1a1-dd9a54cb765b",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "63726186-7df4-4d90-9f28-f3cfea064c7e"
        },
        "item": {
          "id": "df293a9b-bf4a-44ad-bfb2-19c7917750b9",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "73ff6559-99a1-4c7c-9a4a-2bc5b5ea4a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39dab138-9e55-47db-a2ed-562af03d83fe",
        "cursor": {
          "ref": "33af1965-50fc-4403-90c3-f7c606111574",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bbc35766-cb49-4d53-9ce1-906c13e61074"
        },
        "item": {
          "id": "39dab138-9e55-47db-a2ed-562af03d83fe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3828d9cd-2bee-464f-ad22-39e3a255f2fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d26fa5b6-efcc-483f-863a-91d3ec3418ad",
        "cursor": {
          "ref": "6f39a5e7-dac4-499e-9c7d-d85d67384d84",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a53069dd-178c-46e6-9bdf-8a227f316664"
        },
        "item": {
          "id": "d26fa5b6-efcc-483f-863a-91d3ec3418ad",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4f840097-768b-4488-afe7-b2fb45a60d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0626c65-91d9-4e4a-9244-096b14ba3613",
        "cursor": {
          "ref": "18b68dfc-de90-4b52-85cd-29735f66a817",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1d5b3050-86a6-4ff4-9030-00955ec11b5f"
        },
        "item": {
          "id": "b0626c65-91d9-4e4a-9244-096b14ba3613",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b0b9711f-a3f8-4f2e-931f-ed72e61aa0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d27efe-d4ad-4631-ae30-9f86b3f1185a",
        "cursor": {
          "ref": "c8d42ee5-f848-4010-a9bf-93a589650600",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ec17d2bf-028a-4144-bac2-44e7efcc15ce"
        },
        "item": {
          "id": "30d27efe-d4ad-4631-ae30-9f86b3f1185a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "70584d04-6232-4b8c-8a86-57837e7d90d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71d652d-7ddc-435c-aa79-224ba90936d2",
        "cursor": {
          "ref": "1d639fcb-87c6-4bdf-aa5b-66eca78dd04f",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b0300fa7-7df4-4d07-aaa9-ea949501f027"
        },
        "item": {
          "id": "d71d652d-7ddc-435c-aa79-224ba90936d2",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "63d8d503-1c85-4f35-b463-c06c840a386d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a91d21-4c9b-43aa-945d-6aaded8f6a46",
        "cursor": {
          "ref": "26cacdce-2682-4332-ad3a-5157143a1b12",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "57b53bf6-aaa7-4c1d-972d-4bddbb3f759f"
        },
        "item": {
          "id": "b9a91d21-4c9b-43aa-945d-6aaded8f6a46",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "47b4427b-cf89-4f80-b840-829986e6f775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4fce448-c728-45ad-abcc-fb3a6bd1e709",
        "cursor": {
          "ref": "bcaac81d-9c16-4855-bf88-a2b14a49f1f6",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3ec19de3-0675-4768-a23b-14a494d33185"
        },
        "item": {
          "id": "c4fce448-c728-45ad-abcc-fb3a6bd1e709",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e7102656-234f-46e2-87fc-e9c3abf9bf86",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "134f4ec8-2af7-49ae-91e0-f74d1fd69d0d",
        "cursor": {
          "ref": "5a5e0fe8-02f7-4260-b3bc-bb08326ac15b",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "65a48d98-1c06-4f1c-8299-a431c31dadf8"
        },
        "item": {
          "id": "134f4ec8-2af7-49ae-91e0-f74d1fd69d0d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c618bc3a-513b-4905-8a1d-1a1db2b457e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58bebc9-b03b-4211-b28d-940d30919fe4",
        "cursor": {
          "ref": "96ad886c-bd05-4a00-98f0-72b5efd1da97",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a0d28e69-4f3e-4d89-8c33-f95dafb07269"
        },
        "item": {
          "id": "a58bebc9-b03b-4211-b28d-940d30919fe4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "db96ab6e-7d72-4dc7-b766-e642817c3f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4022d6-def0-4ff8-b884-170a6202e02d",
        "cursor": {
          "ref": "2a14dfc4-f0b3-4434-bedb-87c5c7030d9e",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3ae22fdb-c1f8-4697-9777-981b24fd59ab"
        },
        "item": {
          "id": "df4022d6-def0-4ff8-b884-170a6202e02d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3fabc762-05e2-4243-b6f6-d549f4b6a59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352e2ba3-fee5-42d3-8a20-2378ec20d72b",
        "cursor": {
          "ref": "b68e83b2-8681-4fd3-93ab-36e6d00a3b59",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9e237417-74d5-42cc-8a7c-c62fe60d09d6"
        },
        "item": {
          "id": "352e2ba3-fee5-42d3-8a20-2378ec20d72b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f1ab01a3-50ff-4fa0-9efc-f728d8547c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed0ec51-11e6-4ddb-afd8-8f1e92b37936",
        "cursor": {
          "ref": "99d756ae-438b-4eef-87f8-6a6faaf133b4",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "394da6dd-2c6d-4d25-85b5-b507666e677e"
        },
        "item": {
          "id": "5ed0ec51-11e6-4ddb-afd8-8f1e92b37936",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f90c61ec-037b-4cc5-bd77-94950bb56272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29dd9035-0304-44fb-96df-a5d37be80230",
        "cursor": {
          "ref": "57184643-ffff-4c4d-840d-f73e90690d13",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e339f77a-bc5a-4997-93f9-f05d13fdaffc"
        },
        "item": {
          "id": "29dd9035-0304-44fb-96df-a5d37be80230",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "43b75b33-4fe0-447e-a775-444fdf159bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71044c57-fb1e-4e4b-8e3d-62a17a4c635f",
        "cursor": {
          "ref": "78e86530-bde9-4dbf-9f1d-6653d0d1f7bc",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0f3f7a6d-4d06-4821-bebb-8f02c1e290e8"
        },
        "item": {
          "id": "71044c57-fb1e-4e4b-8e3d-62a17a4c635f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a1b80460-18d6-4ca6-b3ef-8716a52e5db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ffeeed-131e-44fc-bc8c-ac511e3f88fd",
        "cursor": {
          "ref": "132df013-896b-479e-8ead-976e8b85f4a6",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f9900d6c-d04f-4666-8590-d87486857876"
        },
        "item": {
          "id": "e9ffeeed-131e-44fc-bc8c-ac511e3f88fd",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3f0c5270-ef1a-45ec-b33b-04053f8c2f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a295ab61-6726-40a9-8c1e-a31ad465e853",
        "cursor": {
          "ref": "ea207c76-d3a7-45b0-b721-0296c0c0f65f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "822976db-b844-4235-8e82-e2ed5011ce5f"
        },
        "item": {
          "id": "a295ab61-6726-40a9-8c1e-a31ad465e853",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5ce53270-379f-4729-9786-7c6e84bab597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8500e1d-2da7-40a3-84ab-47699eb17294",
        "cursor": {
          "ref": "9e05f048-676e-4811-a9ac-5bd27acec7d2",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "99411109-f484-4de8-8c9e-6cd401a4be9f"
        },
        "item": {
          "id": "a8500e1d-2da7-40a3-84ab-47699eb17294",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c903c8ea-7cef-407a-824c-fe9e68f69829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04caffe0-28c5-473a-bd83-26014eeda789",
        "cursor": {
          "ref": "d718a6e4-0af0-49ee-8fa6-81d117c2a31e",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3ab0c307-ec5b-446d-af3b-1196978bc62d"
        },
        "item": {
          "id": "04caffe0-28c5-473a-bd83-26014eeda789",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "43b6d2cf-f5f1-44cd-98fe-ddd3780d42fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd469cf7-0143-4698-b349-2051eddf58ca",
        "cursor": {
          "ref": "01b06ebb-aff2-4148-98a2-3d9f3ab18348",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "62183c9d-f500-421c-9f7e-58d32b739741"
        },
        "item": {
          "id": "bd469cf7-0143-4698-b349-2051eddf58ca",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b63d1ecd-08a7-4179-820e-09ccc7d1f36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66cfcbc-d472-4c1d-815f-bbf9018d1f02",
        "cursor": {
          "ref": "d3a41263-22d1-4235-9a0d-f077789f2a81",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e0609079-e71f-4697-b9dc-b0846d1c8408"
        },
        "item": {
          "id": "e66cfcbc-d472-4c1d-815f-bbf9018d1f02",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "964c4553-c27b-47f7-af22-b000c15cb14a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eaa599d-d24a-4971-96db-74aabe112250",
        "cursor": {
          "ref": "5688b923-4dc8-4c2f-8511-b3f79405c779",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "aa75c0dc-490c-4fb0-91ea-b300f28d26d3"
        },
        "item": {
          "id": "1eaa599d-d24a-4971-96db-74aabe112250",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5658e5e8-b309-4147-acc8-5c558176ba5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a19a744-f805-40a4-9aab-e624d436d36e",
        "cursor": {
          "ref": "c374ca2f-1c86-42c2-b002-a6104f919e30",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3f971505-8b60-46a3-9fb5-ebc798b6b166"
        },
        "item": {
          "id": "5a19a744-f805-40a4-9aab-e624d436d36e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9b836aa7-38b2-4028-b25f-cf57b1b61401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb1ce2f-0b63-4d1d-b77c-471f84b046bd",
        "cursor": {
          "ref": "61ac2cfe-e7f3-488a-b8c6-433b14d2c6bf",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "050fffa1-0599-4873-8c60-80cdd6888664"
        },
        "item": {
          "id": "1eb1ce2f-0b63-4d1d-b77c-471f84b046bd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "730dd177-78f9-465a-8957-0ca2c1400942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e9871d-9b35-4068-bb9f-6f517b3c81e2",
        "cursor": {
          "ref": "15c6ec47-2152-40c2-b91d-9c7d6db6b1cc",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7db5e7b2-bdb4-4ab5-96fe-3862e1b45861"
        },
        "item": {
          "id": "b2e9871d-9b35-4068-bb9f-6f517b3c81e2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "14b6f06b-ed3b-4193-acac-cb3f1349d57e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eaf81d8-c469-40e2-81b2-f7d13fe7e137",
        "cursor": {
          "ref": "6f9c04b9-791f-493d-bf44-ebfaaca6ec0e",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2794f86c-3943-45f0-9fc1-220090e28fac"
        },
        "item": {
          "id": "3eaf81d8-c469-40e2-81b2-f7d13fe7e137",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4b6423f8-26a0-4566-8668-478cc4988576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c539fb-9567-4a40-95b8-4a30546447f3",
        "cursor": {
          "ref": "8dc3c0a9-371f-4734-864a-ac3b163fefc0",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "45a15655-db01-4753-8446-694da8ac69fe"
        },
        "item": {
          "id": "54c539fb-9567-4a40-95b8-4a30546447f3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2b24a787-d95b-4eb1-86ea-b64f9d22a057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ccb6fd1-6f3a-497d-a734-020090f6a70f",
        "cursor": {
          "ref": "5e8f1ceb-131a-43e2-844f-2095c4f7d232",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c57622af-153d-4fae-bf31-555ac4e9c36b"
        },
        "item": {
          "id": "5ccb6fd1-6f3a-497d-a734-020090f6a70f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "613a6817-88d0-46f9-846e-a0d22eb592e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfa57f1-293c-4e67-b445-94f234455284",
        "cursor": {
          "ref": "2d049d0a-9341-4a7c-94bc-15ed43af045c",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0b3e729c-bdfc-412d-bf6d-d854a073dbd0"
        },
        "item": {
          "id": "3bfa57f1-293c-4e67-b445-94f234455284",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5adec809-635a-44fb-bc8e-f7fa87f18569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24fced2f-e209-41f0-98ce-2d2a7228673c",
        "cursor": {
          "ref": "49ba95bc-02da-4f66-8106-c8dde7043387",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "822a9359-fee9-48f6-acdd-78f6eea5f1ff"
        },
        "item": {
          "id": "24fced2f-e209-41f0-98ce-2d2a7228673c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "57aa9d3d-34e9-49a9-9b7a-05a361147ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1822fc61-c658-4251-8448-7e1651fbf596",
        "cursor": {
          "ref": "d4673dba-7f46-461e-ba91-d94567a53af8",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2cccc39a-0a2a-4312-a3e8-f7ca3fcc82b7"
        },
        "item": {
          "id": "1822fc61-c658-4251-8448-7e1651fbf596",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f9db5286-3875-4cf1-8ba1-db9f79ba3701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b319e167-326d-4e43-926a-5d42a3fd2349",
        "cursor": {
          "ref": "ae4dd29a-11c6-41a8-bb69-f16285c02f19",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4dddfd48-72cd-4154-9d5f-9c182f7eeb13"
        },
        "item": {
          "id": "b319e167-326d-4e43-926a-5d42a3fd2349",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5d5b689f-6512-4367-a1fd-74e53bfc185a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7f53c3-2382-4700-b966-4280075d70b9",
        "cursor": {
          "ref": "105c765d-c99a-4382-b22b-11884cacf819",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0492390a-d923-40ca-b9f1-0fbeac686748"
        },
        "item": {
          "id": "be7f53c3-2382-4700-b966-4280075d70b9",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "32e0a40f-ada5-43ba-9017-ea018d757890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a918349-c52b-4392-beba-7656c9ea109a",
        "cursor": {
          "ref": "32a932d6-b931-4672-9215-b73aab9ef5cd",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8633187e-9f2c-49f0-971d-fb5d6dc03320"
        },
        "item": {
          "id": "2a918349-c52b-4392-beba-7656c9ea109a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5c674596-c5dd-4086-8732-2a0b24e7dac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e022c1a-2f0e-43ca-b408-d6148cabe804",
        "cursor": {
          "ref": "36a68a0f-c007-420c-afff-b7a6edd99caf",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c3558bb1-c940-4358-8b0c-2173807c4e6f"
        },
        "item": {
          "id": "4e022c1a-2f0e-43ca-b408-d6148cabe804",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e3d58226-157e-4389-bef3-612fbc67592e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c24edd-4fa3-4df8-8323-2fe7074384d5",
        "cursor": {
          "ref": "f3b8114d-1113-4044-9db5-d729d2a644b9",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "dc8ec405-0213-46b7-a2c3-294699b02b52"
        },
        "item": {
          "id": "f4c24edd-4fa3-4df8-8323-2fe7074384d5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d7213724-0c00-4e51-b106-cba421da62f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10bd779c-5a95-4886-8099-8b5567aeb703",
        "cursor": {
          "ref": "b5f8bcb9-61bf-4b0b-a6a5-ff982fd3b422",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9dac37ad-4d06-4200-abb8-47f89500b6a4"
        },
        "item": {
          "id": "10bd779c-5a95-4886-8099-8b5567aeb703",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b7c8f6a9-2414-48e8-8244-4d1bc0cc76b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed505e3a-8812-4079-8cc3-4e9e4b7389c3",
        "cursor": {
          "ref": "293d5961-8ce5-46ea-b575-3943f1c65cc4",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2ca9e11d-c4fe-4945-9159-76e940544708"
        },
        "item": {
          "id": "ed505e3a-8812-4079-8cc3-4e9e4b7389c3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c1b0a9f9-ab77-4280-880b-b4f759573b5b",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "85a7acc1-304d-4be0-b6a8-3f3e57216f80",
        "cursor": {
          "ref": "b992ee1e-73a7-42d9-bc11-655be5b55f5f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9a288f17-37a6-4fe2-8f1b-e27dd726dd90"
        },
        "item": {
          "id": "85a7acc1-304d-4be0-b6a8-3f3e57216f80",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7937373a-1928-4268-bfa6-9b9c5603fcd0",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "3418f74d-067a-463a-9b43-17aaca26778e",
        "cursor": {
          "ref": "e2ca9d5d-832e-42c8-846b-f8a07fc395aa",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f7fdfb39-559c-4428-9cd0-5ab31f5e95da"
        },
        "item": {
          "id": "3418f74d-067a-463a-9b43-17aaca26778e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "780614ec-5d18-40ab-a840-9feb72f72329",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "6ef7efe5-84e9-4a2f-ad64-464cfad99f60",
        "cursor": {
          "ref": "4709be2b-7c10-42df-bd74-cdf9bb8b33be",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "27a40877-c30a-4fc7-a76c-edbeb5618ac0"
        },
        "item": {
          "id": "6ef7efe5-84e9-4a2f-ad64-464cfad99f60",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6f8ff73e-7f4f-47eb-88bc-839fa330c255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d5e11dc-2e76-4296-9727-9b17f8142545",
        "cursor": {
          "ref": "8256480d-af3a-4384-83bc-bdfe791ec279",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "cc0c02b5-0ec9-4aa7-aa10-1cf92dc75d8c"
        },
        "item": {
          "id": "0d5e11dc-2e76-4296-9727-9b17f8142545",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bb2435d0-39e4-422c-bd01-f852c1b43894",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "712ec92f-80d0-4524-8143-73a41d3428aa",
        "cursor": {
          "ref": "94c0d16b-e816-4798-889d-ae217b05954d",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "14340fbc-0c2b-4d83-b85e-482d83c8f0a0"
        },
        "item": {
          "id": "712ec92f-80d0-4524-8143-73a41d3428aa",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ec2f4c43-676e-4cb9-90ba-9b2d25dc895f",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "2b2fbabf-c5f7-42b8-b85a-f84d367a6b6a",
        "cursor": {
          "ref": "d85e4671-c7b9-4015-9329-6e1658e3e2b5",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4144ae72-f977-4495-a57d-f209b54a5897"
        },
        "item": {
          "id": "2b2fbabf-c5f7-42b8-b85a-f84d367a6b6a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1443717f-28c2-4dfc-9be8-0e516611af2b",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "060a014e-df4f-47e9-b3f9-c1c51cc3c7e5",
        "cursor": {
          "ref": "4497a711-b8d5-4986-a46f-6b21aec19579",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "89ec5c14-6e9d-4464-b182-9820b25bbbba"
        },
        "item": {
          "id": "060a014e-df4f-47e9-b3f9-c1c51cc3c7e5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "36b86bde-ac21-413f-ad40-ba46d57dac95",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "06338f92-71c0-4662-9ead-3d01102f2096",
        "cursor": {
          "ref": "06b3818e-453f-4484-b06d-dc213103fe3b",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d7b866e7-a0bf-4e6d-b597-157b61fe9d48"
        },
        "item": {
          "id": "06338f92-71c0-4662-9ead-3d01102f2096",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "640eb063-f9d5-443d-b3ab-b32961b16d9d",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "0fd8d841-10a2-4dfc-8d8f-24fde1a27046",
        "cursor": {
          "ref": "104253b0-9dfe-4f06-b85a-bec57f1df39b",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "12e5356d-4568-4b4f-9d75-9dd7872e86ab"
        },
        "item": {
          "id": "0fd8d841-10a2-4dfc-8d8f-24fde1a27046",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c0dd01e2-ff7e-421e-aa6e-c9821ba26b98",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "0b4f854f-ab61-4a90-b93d-89d85c25b260",
        "cursor": {
          "ref": "509b085c-0c2d-40db-887a-bdfb3ec670fa",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a9a2952a-b0bf-4e18-a828-b40c8b058f64"
        },
        "item": {
          "id": "0b4f854f-ab61-4a90-b93d-89d85c25b260",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "69bdc447-7564-4077-b187-05f5f645c96a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0171135a-dd24-4c84-a7cd-c8167032d91f",
        "cursor": {
          "ref": "c94dd110-31ea-4f5a-9b75-16ead44e5a7d",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6635e0de-adef-48ac-a505-88c7db4d55d5"
        },
        "item": {
          "id": "0171135a-dd24-4c84-a7cd-c8167032d91f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6532e360-d944-453b-8885-4fde4959e304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ae96a5-5afc-46ad-a0bd-2d0033a27ee7",
        "cursor": {
          "ref": "b481a691-a324-4b31-bb03-d4e86db0b8ba",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d005ad9b-8f5a-434f-94e8-8ff305a15887"
        },
        "item": {
          "id": "f6ae96a5-5afc-46ad-a0bd-2d0033a27ee7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2b0cfcb8-5c24-4b6f-b7f1-6f6011a5d822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "face9b9b-8435-498e-a0bf-55a75436e88e",
        "cursor": {
          "ref": "e348dfc6-7af8-4cb2-88b0-1508617784f1",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8bba75cb-b919-4b42-8757-da681fbd4d6a"
        },
        "item": {
          "id": "face9b9b-8435-498e-a0bf-55a75436e88e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b2d49b4e-c053-4a8b-9a64-326bd505cb7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56a9bd9-e223-422f-bd77-e789c2f40007",
        "cursor": {
          "ref": "a12f42be-8d1d-4390-bf99-36da38b69b77",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0c94b124-432f-4b8a-9e08-13a0f8b6aa26"
        },
        "item": {
          "id": "c56a9bd9-e223-422f-bd77-e789c2f40007",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "82e3c552-aae7-4d87-8a92-2611a414b08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0a83b4-207d-4b72-89d6-0ab8970c5ed1",
        "cursor": {
          "ref": "63e15382-8e65-4298-b205-17af3e5cadc7",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "df695c86-15d8-41a5-8597-344521caa1a3"
        },
        "item": {
          "id": "1d0a83b4-207d-4b72-89d6-0ab8970c5ed1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "14e2fbb8-08c8-4650-bf6f-80035d508be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d42296-76c7-4440-b1c0-b1986909a186",
        "cursor": {
          "ref": "6d94c0a1-06bd-4f0a-b557-428d92b1f324",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "404eb31d-aee9-4f76-84c8-2f32b0b680a3"
        },
        "item": {
          "id": "b8d42296-76c7-4440-b1c0-b1986909a186",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "bd20bc6a-7867-406b-b4de-21440535519d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078217d8-32e5-4e18-aace-924972557618",
        "cursor": {
          "ref": "bfe9b37d-27fb-4c50-8464-8122924474d7",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e304d468-1499-4f30-9dfe-f588cda05be7"
        },
        "item": {
          "id": "078217d8-32e5-4e18-aace-924972557618",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6054d76b-5647-41c1-ac37-09417f7181e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bb664e-5fb0-491b-a97c-73ed76df23c3",
        "cursor": {
          "ref": "aa857123-3323-45d2-ba1f-ed84ca1ccbdd",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "aa374a20-d27f-468f-9491-6bae080cef08"
        },
        "item": {
          "id": "77bb664e-5fb0-491b-a97c-73ed76df23c3",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8d59b87e-298c-491d-a466-51098210da06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e8f98d-1da2-4e9c-9971-79ced2d0b9a3",
        "cursor": {
          "ref": "b9a9c3be-622c-4c4e-86e9-61ad2c19fa99",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3f84b9ee-4b17-436c-8644-88c163e10fc0"
        },
        "item": {
          "id": "72e8f98d-1da2-4e9c-9971-79ced2d0b9a3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "34afa048-a8e6-4e92-854f-17fd93a131f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e85eadb-7297-49b4-a36b-dc594647c2ef",
        "cursor": {
          "ref": "2370306d-aa9f-449a-b89a-3ac8e07b472c",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8ef694e0-34d1-45fc-b14e-d1f425d76199"
        },
        "item": {
          "id": "0e85eadb-7297-49b4-a36b-dc594647c2ef",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7559f536-1f67-49e9-9788-ec858415b6a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7187f02-fd0a-4c6f-9bd5-08da32471da5",
        "cursor": {
          "ref": "949a9a1d-8b49-467d-b237-f25929b55cf1",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b6a081b9-2c6e-4142-a972-1103b8919289"
        },
        "item": {
          "id": "d7187f02-fd0a-4c6f-9bd5-08da32471da5",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1ad393d7-18d2-4e83-b89a-6859616d9129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a2feb4-9cbb-4b79-bf4a-ac90e1e91d09",
        "cursor": {
          "ref": "b5f5d74f-e49f-46cf-be28-8f0588eeb7f6",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ebf61cb4-9a4e-4ce8-843c-bb02560c2eca"
        },
        "item": {
          "id": "f9a2feb4-9cbb-4b79-bf4a-ac90e1e91d09",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ee0d16d6-f60f-4a25-ad4a-b8db4f2057df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e749cbd-00f8-4c70-810f-5abdb4e4e434",
        "cursor": {
          "ref": "b616475c-bd78-4f80-a398-6bf52910054d",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ada5b25d-5824-4cb1-9e38-2f2b8c4dd3b4"
        },
        "item": {
          "id": "9e749cbd-00f8-4c70-810f-5abdb4e4e434",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "980ce7fa-56d8-473c-ac0a-ad49ddbdb34c",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "ba99a492-1bb6-473d-8c71-2c0e7c3911b3",
        "cursor": {
          "ref": "08afa3b0-3c8a-467a-958e-229e1f60fa66",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4a5638ea-df43-401c-959f-046d8acc4a18"
        },
        "item": {
          "id": "ba99a492-1bb6-473d-8c71-2c0e7c3911b3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ddfab283-d701-4105-b450-79756c27ea6f",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "1962e195-b140-477c-96c6-e1906461154e",
        "cursor": {
          "ref": "aa8682d4-2314-4548-b3f4-f0cb0598cfb1",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d5601266-df72-4c7e-a5c1-6f73f9d69efd"
        },
        "item": {
          "id": "1962e195-b140-477c-96c6-e1906461154e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4f142dab-7e9a-456d-a843-174de388b10d",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "6c8982eb-024d-4c7a-8c08-f403b7ad89ea",
        "cursor": {
          "ref": "1dd34c49-beaa-4b9b-a08f-d47addf15518",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f45cedcc-15f2-43e2-a80e-d4641de210b6"
        },
        "item": {
          "id": "6c8982eb-024d-4c7a-8c08-f403b7ad89ea",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8cc31e50-5f36-4b35-8c30-76d8bcf191d9",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "7cfba8bd-f17e-4105-8634-46a499a9a299",
        "cursor": {
          "ref": "7bdea553-cdaa-485b-b365-ea8128c38b5d",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "46608e83-fdeb-41e2-95e7-8d7b6f1c1c9e"
        },
        "item": {
          "id": "7cfba8bd-f17e-4105-8634-46a499a9a299",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a5e9cbf8-9e2b-4162-8ee1-21140da79c5e",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "308f2381-3b40-4375-b8eb-9509628511c9",
        "cursor": {
          "ref": "f24af811-bde8-4881-ba6d-e333404a2438",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5a139bfc-d7ee-4b3f-8269-d163c8092999"
        },
        "item": {
          "id": "308f2381-3b40-4375-b8eb-9509628511c9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "40b8f83c-f89d-43ab-ba36-19adfbcaba64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7261c5-82cb-45dc-aa8e-513411ce01ed",
        "cursor": {
          "ref": "0cd4196a-2bfd-4a5a-a782-cba13df88ea2",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2bd03e64-d640-4de5-9f27-e4f48a77bf63"
        },
        "item": {
          "id": "9f7261c5-82cb-45dc-aa8e-513411ce01ed",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "552943eb-6fe2-4324-af0f-f9aff739d762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12be0c5e-8b8a-4927-a752-a1654df8d438",
        "cursor": {
          "ref": "b18ab57a-d334-4a59-9f2f-cd39ed0ac3a3",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "4f483daf-ca18-4e48-86d6-f649187e0b2f"
        },
        "item": {
          "id": "12be0c5e-8b8a-4927-a752-a1654df8d438",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1d24e8ec-3084-4204-9b3f-98bb9f5823d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4dc337-c58b-43fd-8e57-58f1b24817f7",
        "cursor": {
          "ref": "09f735a0-c569-426f-8738-9d75f0f2bf2c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8c59cf80-747e-45cb-b216-00ce755df800"
        },
        "item": {
          "id": "fe4dc337-c58b-43fd-8e57-58f1b24817f7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8b7c2b0e-01af-4d44-89cf-9ec3d381f307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e3b0ac-0e95-4a8d-be45-5f04a470050e",
        "cursor": {
          "ref": "9638a661-b28f-410e-8222-905a832ae4a5",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a0b2920b-3b13-44cc-8a6d-bfac785f48d5"
        },
        "item": {
          "id": "99e3b0ac-0e95-4a8d-be45-5f04a470050e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1cf9572a-9a09-4ba3-a5b3-ae3e41632f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e0dee9-4c8c-4ec7-98c0-57b613ad2a03",
        "cursor": {
          "ref": "06e21795-078b-4355-b869-2b9bc4ab9387",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8beec197-48e7-44e3-9103-97254e66dcd0"
        },
        "item": {
          "id": "46e0dee9-4c8c-4ec7-98c0-57b613ad2a03",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4edf6241-96db-404d-a6a6-698cb8010009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1352b600-3c46-42b5-a954-16197cd57688",
        "cursor": {
          "ref": "e263b7a1-7404-4ca0-8004-ad983baf3dc8",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f432338e-dd4b-47ca-9c04-207adac92c1e"
        },
        "item": {
          "id": "1352b600-3c46-42b5-a954-16197cd57688",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "82bb7e58-5785-4baf-a8ae-f0fa01da01a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213df1f1-c4d2-4d85-82e8-09c1fa989671",
        "cursor": {
          "ref": "d4515e68-d0f7-4502-8e2b-0c13c33f7cec",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "67ef80e9-8ba4-4141-9d13-4f143628098d"
        },
        "item": {
          "id": "213df1f1-c4d2-4d85-82e8-09c1fa989671",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "005aad05-3bf5-422c-96c3-752ca2c4e6b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3392a7e8-8c19-4a67-b286-a87d11699fb8",
        "cursor": {
          "ref": "94aba62b-8888-412e-9056-7f1d14fc450b",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f6021593-0a0e-4f9d-9c4a-d6ee0f7313a8"
        },
        "item": {
          "id": "3392a7e8-8c19-4a67-b286-a87d11699fb8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3b2d789d-ee6f-45af-ba5a-e4c03e5978bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03611603-96ef-4e58-8ac8-b3c290adfc65",
        "cursor": {
          "ref": "6524b198-9c08-4d98-8de1-6fa7a65bbc43",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "f2f4a90d-ca91-4157-9942-7b9b9b2d42dd"
        },
        "item": {
          "id": "03611603-96ef-4e58-8ac8-b3c290adfc65",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e7696bb4-b6c6-4fe4-8c6d-c95c49aa4eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf60f7be-1325-48c8-af20-d25f7f435fe9",
        "cursor": {
          "ref": "0c84dbf7-a1e3-4eba-aebf-3c6d73f9dd10",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "eba2ff25-32ec-4e7a-b140-794d01db13a6"
        },
        "item": {
          "id": "cf60f7be-1325-48c8-af20-d25f7f435fe9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "38a2b01d-e31b-4c49-b2c9-691eb9c0dc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6891bc6-70fa-4a8c-9dc2-213a7ffdff7e",
        "cursor": {
          "ref": "73a4b354-2a2f-4331-9cbb-36604e07159d",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "68eb0627-cc7c-46a3-af89-ab3dd7bff95b"
        },
        "item": {
          "id": "b6891bc6-70fa-4a8c-9dc2-213a7ffdff7e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "71f5e59c-1bb7-48d5-950b-b3a74bf9f33a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017c3ab3-53a3-4886-9615-02a0ae4d3af7",
        "cursor": {
          "ref": "0074c78e-7e0b-490f-a7a9-728f06224b87",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "77d5e251-cab0-4ddb-89fb-7bdc806cb202"
        },
        "item": {
          "id": "017c3ab3-53a3-4886-9615-02a0ae4d3af7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "409bac49-a7c8-437c-a96a-84bdea0f62dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c85c21-d8c1-4252-a84c-3ed6500a7515",
        "cursor": {
          "ref": "b8740b39-5cc1-42b0-8377-19dcf1ca3656",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f70d63ff-0a77-41f9-9c37-67f915aaa156"
        },
        "item": {
          "id": "88c85c21-d8c1-4252-a84c-3ed6500a7515",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "9739b6bb-8bc5-4947-a9dc-ec3eb25f4bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a74fc1-c757-4577-ad47-4598f41ff582",
        "cursor": {
          "ref": "fc80e91f-535f-495a-8456-f574b6586322",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "5a6d54ca-02f0-4079-b0f4-3bedf3a48cf6"
        },
        "item": {
          "id": "26a74fc1-c757-4577-ad47-4598f41ff582",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "001aae44-e632-4b05-a5cb-728d1e6ec77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b7a1ba5-8695-4cea-b80f-68832e3251b5",
        "cursor": {
          "ref": "fddb1e64-201b-44a6-b432-985d58d70203",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "9724909b-3d5c-46d3-8bdf-229152fd4a4c"
        },
        "item": {
          "id": "6b7a1ba5-8695-4cea-b80f-68832e3251b5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b574d460-151f-43fa-86bd-f7bb7254e0a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45af1842-50f1-476c-b0e0-279588aebb1b",
        "cursor": {
          "ref": "89c85501-9595-49c7-af88-692abe03e7be",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "1dfb2a90-65ae-450e-b5d5-2ccb6ca6919b"
        },
        "item": {
          "id": "45af1842-50f1-476c-b0e0-279588aebb1b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3f687768-94b0-4f1c-9033-633e05f0f168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4cdaa4-27ef-4793-a200-7c236c444434",
        "cursor": {
          "ref": "e1add5fb-2350-4f7c-b324-26d98dd720a7",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "9f2de550-d8d7-4be3-8442-319672b549a5"
        },
        "item": {
          "id": "9f4cdaa4-27ef-4793-a200-7c236c444434",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c6d2a385-0ed0-4ad9-be43-a509b9714c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebb97da-fcdb-462f-8e56-c662048c1472",
        "cursor": {
          "ref": "0cf497c6-d169-4141-b048-97de70954d55",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "2bf3e758-7f49-4e5a-99c8-7e05ab595758"
        },
        "item": {
          "id": "3ebb97da-fcdb-462f-8e56-c662048c1472",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6f5835f0-4559-45b0-9b36-9b49469b8dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8456ced7-b467-4782-be2e-cff41b8d0c14",
        "cursor": {
          "ref": "80348480-d607-4974-88e8-0989cb80e538",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "259b4225-bc0c-491e-844e-c62065a2045f"
        },
        "item": {
          "id": "8456ced7-b467-4782-be2e-cff41b8d0c14",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "144b4c60-b2d6-4684-88de-40c22fb5dcde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40deeb7b-7594-46f9-bc4e-95aeb33ae50c",
        "cursor": {
          "ref": "c24db7d4-912e-4dc3-8bdf-c7390e41013f",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "4cbc464e-065d-4228-bee9-23e4dad570cf"
        },
        "item": {
          "id": "40deeb7b-7594-46f9-bc4e-95aeb33ae50c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2357391c-d343-42b5-bb53-f589f6a4d260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c9b02e-5d16-4238-9466-cdc1eb26f989",
        "cursor": {
          "ref": "6a6b2819-aa2b-4bb7-b6ba-ba9729727726",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "2ffcd021-f182-4506-8a75-b58dac4da8b8"
        },
        "item": {
          "id": "e5c9b02e-5d16-4238-9466-cdc1eb26f989",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fabe567c-847a-41b0-abcb-fafccc63f6b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27ff0d89-6b0a-4b93-94ad-207d44c84350",
        "cursor": {
          "ref": "8c2b579b-b769-4dd7-a79f-ab5a6bd84327",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "7360288d-93f7-4575-a941-ef428f6c2ef4"
        },
        "item": {
          "id": "27ff0d89-6b0a-4b93-94ad-207d44c84350",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "80fa5742-40e2-43a1-86fe-0b0a25cfcc92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c121a0b0-dcd5-48c7-a54f-970dba522c27",
        "cursor": {
          "ref": "7da7dc09-cb37-4557-bc6c-390640ddda86",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e45157e8-2109-4d09-98e3-36401f8bc01c"
        },
        "item": {
          "id": "c121a0b0-dcd5-48c7-a54f-970dba522c27",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "87437dfa-02b1-4188-9537-a053f7bd62f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23e026a-048b-472d-9827-a57bc0c2e222",
        "cursor": {
          "ref": "c07ef911-f0b1-4bd4-a44a-8f10e375299b",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "11a303e2-1752-4b62-9a08-a0ac3e49477f"
        },
        "item": {
          "id": "a23e026a-048b-472d-9827-a57bc0c2e222",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6b42670f-ae16-4a77-856b-a424f8ea0a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda91e0a-b3f4-42f8-8215-326f00d0dde2",
        "cursor": {
          "ref": "88b31e36-2784-485d-b381-b4d318d30009",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "c1964507-a0c5-4450-b573-d52052ee62c7"
        },
        "item": {
          "id": "eda91e0a-b3f4-42f8-8215-326f00d0dde2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a93c99b2-c3fc-42cc-87a5-64299bc8d17e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb9bbb0-caf2-4c0a-b78c-e0dd807568c1",
        "cursor": {
          "ref": "65a4e89c-b8a9-4795-a196-3d51d94aa964",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "06a1b285-9b2c-4c0a-b022-5b31247f34f2"
        },
        "item": {
          "id": "5bb9bbb0-caf2-4c0a-b78c-e0dd807568c1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0da6f089-6dac-472a-8209-4eac2a3adc63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b485c31-1f31-4604-ab7c-2fcf16307b29",
        "cursor": {
          "ref": "a17a8b1a-c8cb-42bc-8e72-e7f2ff9d50b1",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "bfa5309d-3a76-4117-a1cb-85de60c76467"
        },
        "item": {
          "id": "2b485c31-1f31-4604-ab7c-2fcf16307b29",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "669f23c8-ee62-44bd-9653-188b5d8f2ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc016b51-4b3d-41a1-88f7-a45e34a2763c",
        "cursor": {
          "ref": "30a32beb-fe5b-4380-95dd-c2a4134abcaa",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e008e996-8869-497c-a6d5-ea0532f70592"
        },
        "item": {
          "id": "cc016b51-4b3d-41a1-88f7-a45e34a2763c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "31111bc4-0aca-4008-8e3b-2aee97fba8cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e79cabf-94c1-435b-92ee-f973013d3631",
        "cursor": {
          "ref": "8ac98a48-aa3e-4e2f-a1c1-e7385507c7ad",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "87b22ef8-2657-4982-8793-0997de43f8ca"
        },
        "item": {
          "id": "2e79cabf-94c1-435b-92ee-f973013d3631",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "299cfe19-53bc-4180-b62d-2db343c6adb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb34803-0122-4195-a7a1-187ca011681e",
        "cursor": {
          "ref": "d0cfa603-34e2-4baf-920d-f95821a73629",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "853dca34-d37a-477c-9823-bf19dc06fcb0"
        },
        "item": {
          "id": "beb34803-0122-4195-a7a1-187ca011681e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2c83c9ff-1187-411a-9d8d-bec6efb29da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d04604a-71df-4c44-9419-b3447fc0978f",
        "cursor": {
          "ref": "5d58b5e9-343b-4b0a-8c18-627e14a127c3",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "6e57e6c5-a838-415d-ae50-0731214fb63a"
        },
        "item": {
          "id": "0d04604a-71df-4c44-9419-b3447fc0978f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b73ba342-eb34-46b7-8afa-0423a0f2737a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0197877-0a79-4f5e-ac31-7685ec699551",
        "cursor": {
          "ref": "31a16734-98df-47f7-83df-0be5ce1cb7a0",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2b462f26-8a8e-429e-a151-7971af27b400"
        },
        "item": {
          "id": "a0197877-0a79-4f5e-ac31-7685ec699551",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "73522eb0-043b-4dee-824e-5d8ac796e12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f4005a-531b-4084-a628-6efb694af5e7",
        "cursor": {
          "ref": "52fcd161-d0e0-49f4-ab54-a1e36eefe046",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "1c8a138f-c21d-447e-965d-0110bd37a6c5"
        },
        "item": {
          "id": "95f4005a-531b-4084-a628-6efb694af5e7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c0330a76-4e68-485b-9a29-0ecd79ba0e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014b4dbd-f37e-4979-90de-be6b76cc2d0a",
        "cursor": {
          "ref": "429d272e-7a38-4a7b-99ae-23556f73b53f",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "09525683-1c59-4996-97f5-41702d515fd6"
        },
        "item": {
          "id": "014b4dbd-f37e-4979-90de-be6b76cc2d0a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b7983a25-b6f8-4440-916f-c99f722845fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3dce31-edd6-4710-8e51-b29881bb70a5",
        "cursor": {
          "ref": "418a7811-3e0f-4436-b8d4-fc3bccbdba9b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "7f9d349b-0e78-4663-beff-d64f27c7bf4f"
        },
        "item": {
          "id": "1f3dce31-edd6-4710-8e51-b29881bb70a5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "77309b6b-c06a-4890-a92e-93e72b21ebf3",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "a9c2bb75-1862-4885-9f5e-f46e1fc7b3e5",
        "cursor": {
          "ref": "ba37c2fc-8e7e-4ad1-b20f-e091ed26e4f7",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "4f2b5cd9-ec51-4d72-b40a-227513623411"
        },
        "item": {
          "id": "a9c2bb75-1862-4885-9f5e-f46e1fc7b3e5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d2c4b456-0208-4233-bdcf-bb618355eb7e",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e403884d-b209-4d8a-bf6f-c3c96c339606",
        "cursor": {
          "ref": "940aa324-0c4c-4c6c-a515-4512854d6688",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "94166466-a8a3-4347-8e21-d44385c18461"
        },
        "item": {
          "id": "e403884d-b209-4d8a-bf6f-c3c96c339606",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ba20ce00-a282-47ff-8aca-96d0ede68ec3",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "42532413-62d3-48be-81b8-3a7b5c463741",
        "cursor": {
          "ref": "21e827ca-1962-450c-8659-1be5e296825c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c41671ed-ce11-49a3-b659-45778c735c80"
        },
        "item": {
          "id": "42532413-62d3-48be-81b8-3a7b5c463741",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5eaaa759-0236-4789-95ec-703953c7bf26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42532413-62d3-48be-81b8-3a7b5c463741",
        "cursor": {
          "ref": "21e827ca-1962-450c-8659-1be5e296825c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c41671ed-ce11-49a3-b659-45778c735c80"
        },
        "item": {
          "id": "42532413-62d3-48be-81b8-3a7b5c463741",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5eaaa759-0236-4789-95ec-703953c7bf26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d16b53c-65eb-4d09-a184-fdd4e27f8ccb",
        "cursor": {
          "ref": "91755a73-28cb-4fb4-a6ab-b51b1cdf7db9",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "d0b688e2-1296-4c5e-98ba-0eb6881fac7b"
        },
        "item": {
          "id": "8d16b53c-65eb-4d09-a184-fdd4e27f8ccb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0c833c84-6abf-4981-ac36-1e6bfc487dd1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8031cfa1-e5b6-491b-a35a-4f822bb1e0ea",
        "cursor": {
          "ref": "71fec364-0780-4f5d-82ee-fb314412e1cb",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "a411a3de-48ea-46fc-97a0-05b3b18ff4f1"
        },
        "item": {
          "id": "8031cfa1-e5b6-491b-a35a-4f822bb1e0ea",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "430f47bf-3057-4867-9ef4-f7a32900efe9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}