{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9c5ceb2d-1cd0-4513-9d97-7240a43e156e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "64bc31cb-c291-423e-b62c-33001950cd2f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b25803a-9708-4956-b344-87c25dae3200",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "50a7ac4a-70b7-417a-9c70-46d6e5e07ed4"
                }
              }
            ]
          },
          {
            "id": "71f55288-5d11-4220-ad8c-9c09b8b27ec0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "12555c42-28ce-47a3-87fb-f3cf0d73cb93",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "be63d8fa-3e93-4661-94df-d1837526244c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dcfc4839-fd19-43f9-a8b3-d0e1819f636a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "fc1edfb2-af53-40dc-9bce-0d84e20e1a8d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "14b3b054-4e00-4fab-b7a2-5d2be6233c08",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "deb368ae-2beb-4030-9f6d-69bd9a5ad92f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "77d5d3ee-de13-478c-8850-3881d32e2c9a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "60516e37-8a72-4476-b554-a7c948409321",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aaf44c37-8105-496e-9ae9-d2f16186b4a8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1167d423-1d72-4810-abf3-532200e375e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5bc28112-d9a1-4756-a9a3-f9196630b960"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91cb5b4c-7b5d-413a-aa51-d414c1c75219",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4dce2d78-9e0c-48f2-bdf4-19bdab15ade3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c812fee-3c60-42dc-a616-a0fdcdced66c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc845562-59f1-4fff-a456-b419a6a9ae09"
            }
          }
        ]
      },
      {
        "id": "f6940ef3-1cc9-490a-a7d0-a2ee40e7c29d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7ad7dfa1-4ec1-4136-bed1-7e0b369f605a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f41c440f-049d-43b1-aa46-08f747841c56",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c53fc707-4dbd-4755-b975-0694b2267748",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e2ba05-ecc8-461e-a3b3-13582f4152c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c1857fc-8adc-4271-a208-b2c4a5782a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51de96b-5f49-442b-94bc-93dd529fe3f2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8162e8-3055-4014-a47e-15a3edb99eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "858941cb-f1aa-4529-9a0c-5bceb7912792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d564cd6-68a0-409b-9552-3fb9fb0debf7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fadb9350-4cac-4f8f-a281-a581245a781f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9aef527f-f991-41f5-b29a-83b28dd669d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9117d732-35e8-4070-9709-557c8adb62b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e33c496-03ab-460f-ab81-0fc47e2edf52",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da8e997-cf69-4a04-83ef-7a09fc36773b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ae290af-4771-49e5-9fd3-196a2e081d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5864666-810f-46d7-8ca1-6c67202e7b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab3ad40-5ef7-4acb-b790-42dd5a6e507a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9a51d877-3201-41d4-b44f-41d69aabfb08",
            "name": "Positive Testing",
            "item": [
              {
                "id": "92f7c2cd-a208-4a68-8285-4a893b9edcf5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68b311fa-10a0-4224-beda-6c7e895fd441",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "263b2a92-4b0e-4963-a458-1f5877c0de60"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b255a4da-292d-4962-9b9b-258792d5f0e8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1e09f399-12a6-447b-b723-296fa46306a2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "943063d2-97b7-412d-bffb-de5562d2075c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76c8b108-d6c7-4799-84c7-17880a5d5f36"
            }
          }
        ]
      },
      {
        "id": "4b67e922-f91c-415f-bd72-520a400d4fb6",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "aeea82a5-3c42-4224-ad00-ec1cd43a75cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ea76fca-797b-469a-b01a-05be0fc5cd8d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "01f7432a-743c-44f5-b5fb-6988486e9138",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eceff98c-d825-4a5d-a111-b1bb5fd27388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282d1c25-8197-4cd0-be8e-c58d37e15f55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccceb32c-2ba9-4aa9-a615-cc425ffa173b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2ca69e5-85c9-4e9e-bfc2-15af5abfd109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59c563e-41b7-4573-932d-988fb44750bc",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf67fe6c-1291-434f-a2c5-7dab489e5ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa7c245c-5dd5-466b-aec5-53c14b22ef02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9e411c-a791-40e5-953f-0fdc66bfe506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "769199b5-5ebd-4b66-8d40-4416178ab3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515cedf4-ea82-4225-856f-49c88a8c992c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd17198-1e0a-40b9-bcef-d8bec772e570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e9500b-4218-477d-ab67-f337ecd40c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fcd5f3d-48cb-4c74-bb23-95a0fdd330cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e5d1b97-9357-4d0a-acaa-7a4425315f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1a8911-f846-410c-8d05-15482994069a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76202fb-6975-405e-b132-fc50b547eb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "407dbb2c-eb8c-439d-a857-4500a23f1879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b6e6c4-6379-4799-bfea-4c85b87399ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2edb9b0c-7479-4a2a-a004-748d0a0ffa8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb74890-a27d-43f8-9f8a-f1fdd1a0af85",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66a1d51-0d0d-4887-a912-ac346c244fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf92bb86-1694-45f0-887c-2bb9b1e11faa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "768b6d14-81ce-49d0-a840-9c0fd411d4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a67b9f93-cdf1-4c31-a750-1dc63d04d3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "878e687e-ca44-403d-b0de-93580c411f09",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30074ba5-609a-40ab-be2a-9644d61c4f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271ec104-037a-4b5e-a25a-8c6d50c7ead5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5034a61-583d-4965-8652-83e39c0039c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e15f79e4-2453-4884-be50-daab50bf8703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc72ebd-6687-40c1-885c-38156636671d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9590c957-9365-4a5f-b7c5-028dcfc239d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48a3f81-3172-42a2-84b3-0024eed6b4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa914477-7d16-4f70-838e-78b10e547bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e58bcb2a-9c0d-4334-9ccd-bb4fdab950fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979ac68e-8016-483b-b935-1e79e01346a6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9eff2c-ca9b-412e-88c7-8dba1c46683b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dbaee8f-95c9-4952-bb17-de1acce4b485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1d8dad-8b22-48e3-9e30-6fa91f035f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9f1f127-7b89-4cc8-b490-8a126ab0de7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1df966-4fde-4068-a96a-096a7c2e89c7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a650cdd9-2a8c-4a27-8436-63fbefd7e605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4136edd-3434-4d2b-816f-c1f4d0bbf73d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc97110-2bb8-4cbf-aaf7-58d7cfba57e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90f29f0c-44f4-4079-aa58-a5cc3fd8f8f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c02244ca-0089-403f-a082-c3f0721a5009",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53a0dcb-105c-40b6-ba6d-88a09e8775a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd74a1af-3ebc-4f5e-aab2-9032e7ec4347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a484cadd-5378-4ed9-b16a-0854320d4a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25244bde-09ac-4fa7-9178-2a3b4b929ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619158ab-6234-4bca-a189-2ae99b42db7a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd73957-9ad6-4f91-aad4-fa86a1be6eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dad197eb-ecd6-4a5c-9df8-83b9f42c5062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4352c56e-ceec-44d7-802c-b506fababae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ac5732b-12d8-4955-87c3-3aa696da19e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e441acd-b280-4582-85c3-192e0f1652f3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567f23e0-e350-49ae-a622-85cbd066092e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e3e837-1544-4542-a744-9bca3e71bf2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06940d63-1283-419e-9697-c9ca97fe76cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44e74866-2b15-4d93-b2ba-e81ae3fa5d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0068d3d-6c77-40ad-8e95-36ca70e3c2f9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde65fd8-01b2-4eaf-bf42-f75c8c36afa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ca11d7-835b-46bf-b6b9-b53cfc11934a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f865307d-1425-40b2-9bd9-e84671e485b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55bd3dd9-6496-4711-aaf6-846535952e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df922dad-d204-45a7-bf1e-de622cf351a7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426a5d73-f74f-4016-ab1e-4acad4dd04b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136dabcd-0264-4b06-a28a-1da94ef42fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2863a7-af20-46bb-8913-385e00230fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbfbcb75-a7ef-4e29-866e-8ae2a6b513f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68245131-3741-4de5-8da3-828db7c346ab",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f8c108-6a33-4490-83ef-93cdf8885cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90da47fb-fba4-4eab-a0d2-4f24fbf8bc56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9254f7af-5e3c-4fb6-a06b-0d5a1f82b22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23293fc4-0fcf-4cac-a4ad-b33306188697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1bb52a-6a3d-44ea-ab38-ebefe2926ec3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3536b3-1928-4241-9b58-c775eb1b3b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63091617-7247-4a6f-bd45-23d3fe91b17b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e9c14e-37b6-4890-bc37-01e446f9fb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "480856df-1f98-411e-ac96-3d9e06b80f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f39ed0-fd6a-4ae4-8da4-fd023b6ffbff",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0361cac-522c-4532-bc9c-84dbcc63a3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "175fc852-5992-4132-91b8-9725da537e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b744c73-6765-4948-82dd-a48011373219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3788a9e3-e065-40c1-9d57-4be9ef342fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f18f3b-f0f8-4b79-99e9-3bd090f8dbe4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b9e026-5e90-4af0-ba68-9fd969cbb35e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fc04e41-4691-4e41-955c-10b12968abcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5f7f3f-243c-457e-a0b4-da9a1686e2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4cc52f3-8b5d-486f-958f-d84f44092cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c59eb0-9b27-4729-8514-88926f76d2ec",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f5957c-bebe-426d-9ef5-28ce28656a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a150fbfc-4b7b-465c-9aa4-a1e9e12cea26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3e58da-4f60-41bd-82ed-da548acfc387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfae0dc2-c757-4766-a632-deec47bec1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd68c41f-b9bc-4075-b161-5db540a162cb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15614960-3ef0-4bbb-bc4a-2ab8db97a1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d21312-c062-4ad2-8f30-3b82bae15d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9826cd00-95dd-4136-b58b-4ba13c308da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd3ab5ee-ab1f-45d3-821c-5e920c3f6c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a28d31-b9bf-4175-8dc9-60b358dab7e4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c73a4cf-b6ec-4491-8110-9919185e53be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80443577-7f8e-43af-8d3d-960c45aef0f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd63b5bd-2e5f-4cb9-a889-525980494bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc40647-116b-4f5e-a9ed-f6ecca7740e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126a8d80-4600-4802-9ab0-867a9440a674",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fceb2093-97c2-4217-b075-6659c9a07ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef2e409-a0f6-4eb7-9844-fa736c08a27f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51bdf64-510a-4f35-b0db-9d9176c76b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6af0109f-872a-45e6-a863-8225350e0e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6da930-17df-4592-8daa-969a2b74aa1c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "276d0330-8607-427d-a051-7c8733942c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd52d8e-19be-4f44-afeb-20f7006c8c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c31b431-e8d0-4ca4-901a-2b8a38c5826f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2e13bfde-c1f3-41d9-8995-c697fa6c63a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22b7dd3-0a5b-4464-8c46-e8f52923146b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "542ca2d8-0f79-4172-b19a-90c6946c9069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e995268-21bc-49f8-865e-1c9426704e38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d19725-035b-4add-b805-9aee46d83c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "71d58a0e-f8ff-48cc-a2f0-a9dc056a6cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a92c15-7560-4996-a4d5-39252fd0b435",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "311b9a0b-3afc-428e-ac46-ab28bb9a0f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2e8630-6534-4987-b7d6-0b3381a85363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f373f55d-b42d-4a78-9885-55d8353d0e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a43e72a-4b7c-4907-98a5-caf4f7496cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a767f9-e9d4-4a1c-89f8-6264c1699fda",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b593c6b0-74d3-4d27-8d40-c13e05b24e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27095d87-053b-42ee-9ce4-6f4951dc0b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43909faf-96f6-42b6-b676-21dde5081030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aca9b30a-a88e-489d-9b93-9db596f9147d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbd1e0e8-0491-42e3-b7da-45a4fb2833b1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3790fe70-d7a5-4def-b4ec-e7edbe7ae726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24063d4-4eba-490b-a331-e319015ef640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2947a8e4-e69b-4506-adfe-6922b59be1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "804b6329-69cd-4a69-97f7-7bb6abe4f733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "439c5a38-f560-4f34-bee5-7c97b4cea71a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "364d1b4d-7484-47a3-bdc9-6dfe3f357831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da7e92b-8557-456a-9cf2-246251237a62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3934e4-afee-44a4-910a-da4e1b42fc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fed91d30-e63a-41e7-a03f-33426291aa5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636bdac2-9477-4526-b617-0b82a856748f",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea31b6f-6934-4d44-8131-4ae42a603067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be4a9714-7df3-4dc4-8217-98b2e8be8b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c37c0df-a032-4e16-9908-4acf2d0b3b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4e79342-c045-45f4-ac01-4dcb5b1d538d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f844bf0-acf5-4679-a9f6-e367b9cf71fe",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425db214-e6c9-4ec7-9eb5-4b2523318d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3452c8cb-985d-488a-9eeb-b01d15916fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96614ce4-24f0-4f6a-b325-d4f97a172b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "40451529-7dfd-4e63-8682-fd7ff9df4ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443185b5-eeee-447e-a5d9-319fa163d2d4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5533e7eb-cbbc-4ae3-9a02-5c4c0a33c836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2423f7-da44-4b11-bcca-c6fa60f301cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d10833-c0d7-42a0-8115-5776d9d9dc85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f14b7816-1d23-4a3e-8caf-234b33595f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783a4557-1759-4178-9641-6b2762e40b12",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da94bb74-18da-472c-b383-a772d6287832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab120e40-6a4d-4279-b283-037eef36a848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9842cd3f-9769-4a05-9e3f-2ac99896537c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d071fb2b-4859-4e86-b711-ba89e61559c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfbea20-5ec6-4c0f-be68-9f6e394ce81d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c844c22-dc28-4af9-b92d-6ca91027e744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ea045b-1991-4e41-a1c5-d47682aaceaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e25bb5-8b5f-4bd2-b46c-fb5d154246d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc851295-1842-47b2-8958-588205e628d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e810edcf-8249-4521-987a-a2c4dddb4c31",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f207a70c-458b-4d61-ab1d-ebade97dc7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4176f50-049c-4f54-bd06-9f64bd841c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2508ca16-2f2e-4def-8205-2572ec3ee1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b278bda0-d7d0-4b22-83a3-b17c51939a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ac01ab-16c3-48c8-a5a0-cbd1be9ea7df",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194da944-2e68-4860-88e0-4da3cc441450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0c5fe3-1fcc-4555-8b68-357982bab39e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6447fb6-97a6-417f-bfb9-88cd0508fb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "99451f27-5b66-4f9d-bbab-0c814403b27c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b6bc4e-69f4-431c-8539-0ccccc45726c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b1d698-3d05-4e71-851c-4bedf14516a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5ed93b1-66cb-44be-942d-3fdcccd5290d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce144dbe-94c7-4815-9038-3f5c53219747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac243ba0-42b9-4fb4-a231-93ef6e786281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bdf5c4a-5908-4d41-8a2c-92f74ddfb3b5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea893495-1d39-460d-a10c-2cbed58f2b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6861a471-1424-4825-a50c-277121cbeb5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d16f538-5ca8-4622-b666-c054f1e1c247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb8e2a7-0362-4ebe-90d5-163088f5c8ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7fc1f0-e393-4c5e-8923-0374ca9db9ed",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5afc2a8b-9e8f-403b-814c-0b0d66c81bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c7203ae-3cc2-4813-8c92-1c846bb08646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ffa809-aa15-43c7-90fa-7aa4675ad674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba2daa42-9ee1-4007-be1a-468ec5df4366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d4e8b6-baa5-4161-9c72-d5d0471848c2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b6fc10-668f-4486-ab4c-e547a0cee3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "060bc411-6606-4d43-8fd2-0a63f433fa60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90abd628-f048-4f12-a6a3-62eca2e6ec1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6908ff61-9d47-483c-82d7-0f3d5860a327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2cd2ff-5926-458e-8b33-b9acd4f80b44",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96883ce2-31af-470e-b90e-c36071d6ec78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b318582-4d26-4e3b-92ae-942b4b8e2746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e294013-ef33-4e8c-b7c5-359a40477a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "584d1f68-855f-40a2-a634-c86e37e99721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701389cf-ac4e-45c0-8e83-a24fa47a6f0c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a8b318-969a-4e91-93fa-6ead91bebfd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8efb50-8c71-4a08-997e-1ca5c4fe43d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b705d012-2c85-49b0-8291-6a2ab2b6bfe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "50ca23fd-d73e-4884-b215-8cb2d11fed89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7485d36-1034-4e2c-b386-0a8ff1a28218",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8cf226-cd93-4f35-a030-e1d7a39fdab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "054774d8-cad8-49b2-ad58-174c4d492e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648535a5-c803-424a-ac46-3b5d5c9039fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "575b8606-4caa-43d6-9ce6-7f69b896834d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6090cbcf-e372-44a5-8f2c-baec50016906",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e067b772-d8f2-4a4a-9a40-2a53d22526e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "107ea3f1-dc71-4da1-900b-c7a77a110ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3f6d04-690f-46bd-95c9-7eae318a16dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "82054887-9253-48e7-a614-2e2eebe36b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a77b452-bdd3-4d2c-bd79-7bfab3b5725f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fcebe40-939c-48c7-9295-035cd1ed990e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ee6fe3-341f-4edd-9ed1-5bc597258398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba39d9c-cfa1-4658-b1c5-98937a959ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "925d990f-4081-455e-b295-96c1c023032b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89cac49f-eed6-48a2-b1f1-e7061e887b0d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93eafe46-3a9e-4a76-b24c-81a2c93c3c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5db0b07b-08f9-4d1a-98f9-c61bc04ac0c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781cbad2-26f0-4817-9ff5-5e540c43d6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f13ffe95-aff3-4140-930e-2006f4e4ebe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d790bdb8-beac-48fd-a059-475a86a16563",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "436afc77-ea1a-4562-a5b1-7da2ccdad6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ec8c0a-f003-4ee9-b200-66611850b451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270f69aa-73db-4de7-b8fe-ce0a72e7bc18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a771514e-bae3-4aa6-91bd-144dfe45a432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dcf6a95-c218-4148-9bed-beeddc3dfdf5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb8c216-4f66-410f-9406-75fab1c629aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e47bdc-9830-4d40-b8aa-84d7cd7e8532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e3ad26-6b62-4d28-82ea-81326bb53c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a065d21-8176-4636-a5ca-6f15eb9509f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabeb829-7a72-483e-888e-2795f736ce7d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57a9370-5c32-4aaf-839b-e95efe593dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c68a732-1074-4687-b782-1c49e32f1049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cc8f66-1a71-42f3-aeb7-9b9fa8a901a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f6f9d27-0cce-4fe5-80b0-ce6694bbe38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7b27da-6a5f-4520-8985-69659f9f1da1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "640d83a9-7d8a-4f47-bc1d-610294d0b5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c6c930-abb3-489c-898b-ea373a6f9a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee75c17-a109-4ece-bac5-2f976631d235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "47b37cd2-b4a1-40ed-9a43-d072c931956e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01facd60-d91f-490a-9ce6-499496e85e6d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76992db8-4180-4dff-b30b-55f13edd124a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2a7710-fc8e-453e-8d21-86d4f538b5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34be1945-b640-46ca-ba2a-b0b215e14a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4b4c34-1b57-4ebc-818d-2d31a0bb5722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd70d39f-9a53-42c9-8c4c-2a077f216bee",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "363feb64-0507-4ad8-9cb5-286cb70020ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd501417-09dc-4d40-b5b8-ddac2776b0be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7371372d-bcb4-4128-9dd5-942e686fcb84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "de199754-248c-47a0-bd11-17d20c2b4777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965a6d83-9b23-4b8c-9342-971ee1e057ec",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef858571-f59e-4c27-b105-f578da1851ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c247c331-8834-49b0-87a0-0737ae963a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7dc6eb-fdf1-4176-9d63-b30557d776ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8edc31aa-f85c-4071-8849-53bb1027d30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74cc837-eaab-464f-b58b-28283a8227b2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63a4c6a-4c76-4f02-94a1-b2603856dfb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1458266f-9d96-431f-a17f-ffbbb5de7667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36d343b6-80a2-4e2d-acca-5c4972fd76c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76ffffcd-0df4-4273-883b-8627dfc0f07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2b2f5b-8891-4d20-be91-fffc9f1eccf3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085fb554-3b97-4435-8471-0cf63bd00d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93b5bd13-4fb6-4850-849a-f91beb571d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4b12ec-2c75-4d97-893c-6b7dede0b22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d0797b-3bfd-4572-9ab7-5dbedb0ec0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251880c3-c698-41b5-a26c-b2fbb74bb709",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1922f84-7284-41dd-8283-6155b0278371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10764220-3655-4bd1-aef4-ff23c5aad669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24dad6e5-e95b-4b53-8738-ccb6185f8fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5120525-5baf-4cba-a824-523efbb5ec96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e84875-4a78-4cb7-96f9-a9f91743a617",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9449b19-fbd4-419f-ab6b-16b848ddac2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8b27ac-1ea6-4f8e-846c-f77c69074e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98b789b-841f-44a1-bc07-619e5bf3a383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "aabe5570-fc12-4b51-9309-a9a0b1c432aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca17910-2dcd-4a1c-9cc8-9eef04acc3b3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8603f5f0-e4a6-48c2-98e2-50b37e0d58e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "466865e3-edc1-4b0a-b7e4-7c407647b7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615dd040-0013-41fd-a097-c62f6fff23ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2605f98-af91-47eb-b0d0-de03f1c120ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642fc05e-3d9c-4f40-8679-787484a5e561",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc819739-8cee-4885-a041-b4838d176a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee5689ed-580b-4841-91de-cb5c57c3c14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed82cd43-97f8-4a0a-9ab1-fa6035642f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ade6e35e-045d-4d5e-b45d-73439b54e666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99524429-153d-43b0-a11f-c82d58ba79fa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b498dc-0a3f-42e6-8500-7866ead9d5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb7b8d0-3552-4ebf-ad35-9d0f8fa5a78d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0289e05-2747-4715-b8fb-6dcc30615b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe957aa8-1a61-4108-a5e0-fd8a5ab7971f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1216c0-4e62-42f6-87eb-c945e2f46e76",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d538b93-3a1d-4dc9-a4c5-47a5eaaaeeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "908b1e86-4521-48d7-91ba-3306538e796d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "375072da-b537-4963-a7f2-a7cb0089325b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "939c5d48-fb42-4ae8-bfa9-69b41c3e4a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b69396-f13e-4f02-bae7-1345a34e3c87",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8856c68-9854-42b1-94f7-9fcaee8be83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3dcbb05-aaee-4d83-abfd-80450e11240e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58beee2d-15f7-4097-9e06-c6ab787ecd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "548443c2-1de6-4f77-b586-22f87ca07cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f62be3-2884-4214-a1b5-b956c60271c4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae42423-be6f-46f6-ab66-397c818173eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13dd5898-7b35-4ffe-9e09-1dbc282f037b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca22d365-9b87-44c4-8a1e-ac315182cf38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f4fd1e5-039f-4856-8389-d822c300369a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5608d6-c57e-40d7-8780-253dbb1472df",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a6e9953-ed42-447a-b5eb-1429a398c098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de0399c9-a070-4aa0-9214-118200fac08b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8076dfa-3536-418f-81f4-74923827f3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9a0d46-c900-445b-88da-94fb3f9a6b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ca1cb6-ba2f-42af-bd81-4f33f6010d63",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c51088-a3da-4ac2-bf33-834c4d543dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d279473-1f20-4839-83d0-4fee3cc6647c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e82ffe-9f25-4b7b-9db7-99e2e226f430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5860283e-0f5e-45f7-bafd-8308c489d853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760bfd1d-543d-46fc-98c7-7d6a77f147a3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3b1d49-7947-4dc4-b16d-b9209fe4bcda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e597f761-0b70-457b-b54a-0d1c5650026b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c78d9f9-b042-485c-a6c7-8a09a635c2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "33f47994-636d-43c7-ace4-fc2c5ce55031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae54b3fc-5c28-4387-8ce6-d059c711335a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff568ebd-70e2-4fe5-a590-fc8886d4c34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26191bf2-08ff-4f4e-b838-64106e60fbd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a31f26-f66b-405c-8d0a-f1db18af5ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1119a142-3e9a-437d-8b63-e2608f79feea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34451e35-7fd6-4329-9831-cfbb4d3142f9",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f580c1-ede8-441e-a637-4c43857faa75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a333e37-b4b6-446c-9837-b06676b3a394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "741c7724-f4e6-44d8-bf93-d055d9094163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ea9e4a-481d-4896-8ac5-64b041599115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebb5a0c-c3ef-42c4-8118-9f0df9ac703c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de0a81c-bb2b-4286-be79-196e7c578027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c360e2d-fafa-47f5-ad6b-93706c8b05e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5192ec-88e6-43e2-8156-3645193f80c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "287dbf8d-4c88-459b-896b-7fb5ece4e61d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f261eebf-56f3-4837-a962-bd8a4c26b6f2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656e4edd-0972-45e5-9e79-c9c786414a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da4b6123-1a55-4a01-a69b-3973fffae8f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8eb49c-310b-4120-8a78-245ad7a4039b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "14ba5fd4-f27b-46ae-a279-ab3e0415dff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2471238-5ae9-4da2-ad1a-20b6bcd3f88b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9036ee9c-52f6-4e7b-8113-5bc7a72ebdd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166b84e4-1ac9-4d02-b639-8f25e590b7b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf239e61-7326-4889-97df-88e8ae3ab8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "750838db-2ea3-4012-9981-3be89eb6eb11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8a37b0-1f30-4c6e-bdaf-90f710e50150",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc07695-83dc-42ca-a2a1-62769fd5ee4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d93fc3e1-8bfc-4a58-8d22-07417ab8b7c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68777a19-e0ba-4305-a795-5f4f71de0104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cabdc50-586a-4faf-9a61-1a8a1afd31f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad573aed-d144-47a8-af6d-48c2dba2ee56",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02b585a-e57a-44e5-b10a-1f5e4a58ff92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "836c328e-5fdd-4ebe-a1b1-1464c4813547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255baa98-5750-4f23-a292-6d8872f1eaa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cffd3d3-9101-4d59-9d37-c97acb050458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de2644f-3c19-4f5c-86a1-f19672bd39e5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91de4049-a4b5-47a1-86f0-53c836a5c2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4ceba0-2bfd-42f8-9bce-3da9b27fc9b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587ae462-2c72-45b0-ae77-2f771434e867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bee3c99-2791-4944-91ef-d204abcfc9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d532ee-26d0-409c-b864-7d6601392d49",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ada2fa-5eff-4e3b-a367-33db0bc2f997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c71b38-fc62-4adc-a051-5c92202767c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ca0816-bac3-4750-aa6d-48c3c503fd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57fb79c2-cccd-47d3-a780-fc0665394854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17ab191-b0e2-4bea-923b-9d188dc208c4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "535b54d2-22a4-4487-9b26-4af09460d7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf532b1e-8066-43ff-9257-f3a378577123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84d20e8-e9ad-4a82-b5ae-4e1f8c6c28f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f286756-da02-40aa-b2cf-33825f2bdc34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24331d0e-c399-4a6a-ab3d-4d03442faf5f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa3ae54-f0d3-4f8a-9344-68c224deaebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6b002e-d6dd-4da7-9e99-2c893579fafa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320b7837-7cc9-435f-9473-e5118284aab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "784b6f92-f819-48fe-918a-a27e24f2442d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca60f572-e260-41eb-bcae-ed1a305c33e1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c2a843-5e8a-4ce6-84ae-c2e81a107dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf91006-25e7-4a11-8d44-4b7386150ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22230ac-f1b8-458e-8afb-cec1c914c363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8360a65a-ed32-4c87-b975-a77983af248d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fd4d9f-5e90-464b-af11-811be2af9c86",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ddc064f-c869-45b8-883b-bd20bd1a8734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4520e8-32d5-48ad-97c4-e5ea48447fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ff4c13-ffa7-4001-b9dd-ed3496829560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5878348b-d1aa-4532-843c-89e7a3411741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08484119-a949-40d0-aab9-0d72c3f222d8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35d0bb5-1c87-42c3-9e56-ef1afcbe0716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e35812-c0d5-4361-a7bd-e4b751396a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d632530f-7895-4492-84b0-856f8e5cef45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55460a64-fcca-4b31-b705-15f09d38987d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550ec972-0058-4690-bf2b-097bddbace75",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "528d2e9c-b144-42c3-893a-5bd55cf5b4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1786d86-7de2-4bdc-9163-5fbb9b480ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e0543e-d813-433a-bc01-3859ca25aade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa2f79f-0663-4cfb-a958-98c6e96c10a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df97085-b8f2-4322-8844-6a95382b37b7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b843ed72-f0a5-4ac2-86e3-47a9cff2adc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff2956f9-77c1-45c5-b3b0-e9c9d2199885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635330fc-b1ab-4923-a059-34baf32156e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "59702bee-511f-40bd-a3dc-5252b5b6acf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8abb492-ddfa-4b36-bf72-4550ee622bb5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f2eea6-1451-4781-aef9-d8fd29097f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b54405-866c-4487-9792-e6d7720e8be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc230168-9d10-4846-9a74-2599ce56383f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de3e95c5-0e74-4ca5-8671-43d258a2d611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb58ef4-c6d7-45f4-9ce9-1e7892646e16",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56244193-87b5-4640-bce7-12b950bfafd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3124f209-0bcc-45d4-b94c-729d555d2dd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f17591-1ebd-4996-a32a-e260e633c4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd18b3c-ff47-43bc-b508-8680a1c74f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc4192b-46f3-48b0-803d-631db4c9bf20",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6475b8eb-c077-4cbc-8221-a6a9746282af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ca3595-83d6-4761-b6ee-8147f1d4cdf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422799e0-b645-44c3-8a79-ab30b90f164b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad4cda1-7175-4dbf-bc85-75cc2b624b44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b59d3d-f20c-4284-b2ab-79d14b0d08c5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81cad397-75b1-43d4-a882-b2ec814ec1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d7a4ce7-d1fa-45ad-9e71-12ee749c237e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857b5971-3ad1-49c6-bbb3-1391c7ff8fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d6e2ec8c-3d49-401f-ae85-4ea20cc09ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03ce852-2703-4ad4-9c32-82576af67deb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20627ee9-c778-455b-ae59-16c3da8fdc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ee81daf-9310-4c6e-bfa1-cfbabf23e474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fef32e-81e3-4773-94de-d1afdc31b8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "69ddd70e-39b2-49fc-af31-aff6a0fa7abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5de5c9-9620-4618-9582-3e58eecdc016",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc7bcf4-3cd2-4e3c-a9de-d07d433bc3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f9fe8b-ba5c-47d5-934a-cfdff3e139dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36fd9da0-5fb3-4165-8539-be8403404857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b30fd0b7-a418-455c-9d38-8e2beaa1f237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69fde715-cdd8-4a09-9077-ecca305e407b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "941cbcc6-90ed-49e9-8e92-8d1529b0428a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34b88f78-252b-4a6e-8e49-52cf8577b8ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d777fb09-f3c2-4e4e-b8b9-ab8a69121e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f00df6dc-dcb8-4e72-95ec-65197b70e726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869ce9b9-5486-4ddb-80da-3b7b0ba6ef04",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e57bc6-ed29-4264-925e-33448f2a4e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec23655-578b-4083-b1f0-5b1886feba25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20299c2b-a9a0-4d47-af34-f55d12b7317b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8dca50-28bd-47d9-8797-63d458a44112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395ee15f-e205-4cb6-86d2-562121735548",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf538fd-5448-4f00-8524-54a3fd45a752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7466c9a-061c-4f1f-b26e-082f5832829f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa5ade3-38b4-4797-8684-f3e62feeec64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f625564d-6cdd-4ab8-b7a2-367a3ff9c457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e09587c-e3e3-4f96-ad69-743dae89c8dd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f10fd45-ab30-48c8-9f4c-7e8874e0991e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fceb27d0-cd3b-4514-abb9-7ebe9bab08ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce81e39b-537a-4277-a343-bdc0808437b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "42a34db2-a86b-4333-881d-13c1984e3d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2673dc4-7817-49a7-a9a0-60e3753aa505",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e72cb5-fd92-4215-bb97-bfc38e0d3633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "55d42a49-574c-49b2-8d17-c6a019e361c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4818278-1a69-41e2-89e8-481f027168aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f889169b-40c1-4055-920a-14086f424569"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f086249d-56a6-4fa2-8223-5f3dfa3f551e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "289cf235-903b-49e1-8800-f5444c486364",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf89a5cd-3373-4581-a340-1a7f00fd0f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67b8b5f4-3872-4850-854d-a4775fcd1968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7915da2-992b-401b-a21c-0c4fc331eb73",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7db0afa9-89ab-4383-b541-e5f50e0b8cb3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d95dfe2-4723-4067-bfd8-848424324d53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0f65b1e-9072-4d85-aa5e-4843f33a48c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "871739af-c20f-4984-81f8-2e16cebbc788",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e88f4c9-9f8e-449f-8234-160b489ac5bd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7ad01440-e4c9-495f-82ff-c9b4774e506f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0b116a63-7636-49cd-b040-ec5f3f4a17a0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9354a436-3b7b-4c60-a81c-d55aa3ee5cf8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd87009d-8de0-4e31-91a1-d99a49e27e6e"
                }
              }
            ]
          },
          {
            "id": "7b7d2764-133c-4b4a-9f91-6d4bb0b24c73",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b3602423-c4aa-4648-8f16-ab685bc7c4ed",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e24bb428-bacf-4a27-97fd-d0119cc39569",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7aad1b-78a4-4061-8ce8-5e39b142c56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6a4a59fe-57b8-4791-b210-32cbc24c5b32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe51341-f33d-468e-865d-1a9bd5c8dd95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5d1b0b-3aa7-4314-b333-8a757780e512"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9cbe6ea7-baff-4f12-b8ff-d574097136a9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f78f290-2fe2-4af2-bbf7-7559703232ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5cd49dc5-fef3-4555-bd5c-af86b745cdc7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a17cf09f-dff3-4c70-a11e-3bff8565e71f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1fef4ca9-dea1-42e0-bb3f-c52ba961f374"
                    }
                  }
                ]
              },
              {
                "id": "aa0eb60e-57f4-4594-8c28-de8f18a98287",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "857d6321-5d42-4f1b-99e1-1285bdae648c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9cd6b709-bc51-4222-9655-d137f6cd1e26"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6443a7c-d235-4a71-af72-a6a205e8bd44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7a6e82da-9cbe-4954-a764-c33561bd0f26"
                    }
                  }
                ]
              },
              {
                "id": "058928f8-9233-428c-a560-fd4216143dea",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24419a16-b517-4afe-a823-ed9085132f4b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7da74ebe-e92b-41bc-94e1-df5ab3c9c38d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c36e8b7-3589-4f77-af7a-c7df9ae1b6ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "57bcf419-72b6-4354-b733-9d747f27b29b"
                    }
                  }
                ]
              },
              {
                "id": "b0d3453a-4939-430c-9776-8fe8689425bc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69c8c67e-2258-445c-972c-538afa9ee1ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "00c6a75b-8d20-4f2d-9001-f8f44420d639"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce1b71f8-d258-4f80-bedd-d1f6c61c2c5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c480d036-f7ab-4f7c-a48e-c14ba5301677"
                    }
                  }
                ]
              },
              {
                "id": "d4fc3e1d-5484-4f13-b37b-2bceb28581f5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "194d3030-61f7-48d4-be35-1d1dadb387de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "382f806e-da6c-4c67-869e-7fd19668f781"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06310416-3276-4f9d-b2c8-3cb9af2ee482",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "bc564d36-b1d6-436d-a094-30eba55fbe87"
                    }
                  }
                ]
              },
              {
                "id": "68a1f53d-eda2-40ef-b0ec-181f11a1728f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d95443d-6816-4974-add0-b47c73be31f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71688ed8-34a1-40eb-9b2d-acdb1402a61f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18df6836-fb35-45eb-8aed-a71c81254205",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7d128716-e3e7-4c00-a3a8-96eff8091e7e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bb9232f1-2853-4483-9dac-cec905617fd3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d892f1a0-17ee-4d04-b491-639d9b65f67b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6289ce75-465f-4844-a207-a5cb53e06b61",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8ea9edc-76fc-44f4-9813-f4c37ed436b2"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a11e438b-95fc-4684-b780-cd723284f3db",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "60a7a987-6522-435f-98c2-83301fdb223f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b8a9229-f867-4370-ba64-f2a361a71ba3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4704bf2e-46c4-4a86-9508-a9645367aacd"
            }
          }
        ]
      },
      {
        "id": "42ce054f-854e-4aa7-9eef-863e20272ce0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "81bdae1a-7777-4445-bf5c-0c032c706240",
            "name": "Negative Testing",
            "item": [
              {
                "id": "38d638aa-235c-41d7-915e-ab44eba30ce0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1e9f71a4-3441-445b-b269-4e02581a895b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fabe57-96d3-4df5-8169-f22388841677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f48cb06-a48e-474b-9858-74ce3cb96d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e009d7-14ab-4f6a-a0e4-aa2a0d816411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "eba5737f-d271-4552-ab8b-9118a57a1b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60cbd684-aebf-4f8b-9038-811067355be0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6556214-a0fd-448c-bbaf-bad11e5753e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa09798e-f4be-4de3-a19f-e42e3d27e850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea99d2dd-3430-4a5c-8f4b-667b803c8e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d531f7b-4b3c-4c22-95a0-f0e3d11a3bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce7516b-fc8c-473b-9203-cf028f68c3f7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb27695-4464-4a7b-9fda-c30da3bfba9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eefddcbb-ebf3-497e-8bf1-2587ecb9ba4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d835f6cb-1ad9-4154-a930-e6a7892f1738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d22aa4f9-5118-4059-be32-416e8e8326df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1efffbb7-8f35-4755-bd65-33e4086d5d08",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543b28b9-3d9e-4bc3-afda-c8e880a5eb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28dba075-5d66-44c7-b5a4-42febad484c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb09b266-ba2c-41bf-90b4-2a37d280d52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ab35c9e-d45d-45af-be72-fa840f6cfb8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4195922e-cc65-4531-aae1-e0f3f90d8ec9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe35bee-11bc-4eb2-a969-9e5d674cc04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3f5259-2da2-40b3-adaf-f7f4e28e899f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "099de9d1-c17f-4a38-bd81-8d12f28e897b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "360fc73f-479b-4271-950c-3eff7686a4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a408986f-46dc-4d19-9b05-db752292cea8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1079bd91-f3bf-4d60-a34a-00897b36fea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b81a89d6-acf7-4313-ada5-75a05c0cc457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08850a2f-b75e-4bea-8bfd-84246be6f5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9362c686-5587-4211-af0e-da0a45f693e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa8b51e-09c0-499e-ae02-4d7226f19770",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d41c84-4ade-429d-9cc4-3639ab0af022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2324350-5c8d-4726-86de-67fe2f6a458f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2726ce1e-cd64-4dbd-88b3-b913c11ad96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c1ea8ce-7881-48fa-92e2-697307a7b85e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9369f122-e740-45c7-ba6c-b31fb00e0a6e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5b128c-0d86-4c5d-b235-27e050e9c1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266b1071-b541-47d4-a466-777cd77d7307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd490d2-3a05-4e38-a083-741ff5163d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2058d945-ae7c-48b1-bff5-11a516329d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014ecd96-9496-4535-ad91-1e0be9e70e2d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5bf49a-6f27-49a2-858b-ea20f0c4a26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8986f6df-e434-4ec9-a3da-1ff7da1385ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07942496-83c9-4b71-ba8c-31fa85153d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f73b5276-50d3-4656-bfa8-06a69f10c0c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49142a4-7124-4a7e-b9d4-1dad6e16e0d7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c688fd3-a3c6-4299-a007-b9ea0dd958ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57001b1-9e13-4dc1-96a7-ca7ec7119060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0595d151-a78a-49d9-8396-92fcbcb7a662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e94c126c-f69a-4a9b-a584-91854f8233a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11069421-c1fb-401f-90b0-b0469c3ea7a1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d4c556-a9ca-41f8-89bc-b4e9faa1e95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61fe98f4-9a9b-47f9-bfd9-7a8691e96845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "febfd301-3ee2-401a-aa27-d0bf11d8684d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9f5a2a77-8f54-4969-ba1b-32433d630a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da50969f-f6d7-4d4b-8c3b-c3a56916d002",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ed5f6c-cba6-49cb-a86c-69f98b2f2262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e7591a0-6ec7-41a9-b5a0-7225a12fc085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6a6fb2-e328-46de-9084-cb1e4aae7fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f17d5da3-7493-4152-95f0-ff3083065809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19765f5c-1477-421a-8565-02b159493fd3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea2d83bf-80a9-4220-9aee-ee9b717e975c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6cf927-5a17-441a-8d7a-4ed261b0bead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6820825e-8846-4286-959f-359480eae396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c43a7af5-5c11-4ada-a8b0-7e73b3a0b468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e26f2e-8eea-4110-a884-b0a24bc9641c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a88b93-4e30-4a33-955a-31317a66c484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de8322d3-bbe8-498b-b7f1-754fe3c66721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6b3585-0410-488b-a882-751fe17e0f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3652cd2d-0d0f-48ed-b794-c87f4f7d76ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f976859f-a7ad-4971-9d28-6f0bf47ef075",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebeaf9d-dc9a-4d6a-87b9-74f128e9ede6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6035e06-a9c3-4835-a14c-dd9a7b7933f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef4d94c-a1ad-4f34-add6-93f45b6a28bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9d8f118-80b4-441d-ba5b-e63a9197087f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373e7f22-dcc3-49f5-b5e9-e352f8120d28",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a169f13-6202-49c9-b239-29e0770071aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c74036eb-b404-48c6-9fea-f0bf3e0b7c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0792df-4b10-4754-9ea0-338e645af42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c9c127-24dd-40b8-8803-8fe7402821ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7af9cd7-a307-448d-b7d7-e14787f1df8e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6c570e-707a-4505-83bc-9dc245f99f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1385eb92-eb4b-4f59-8b22-bab028542532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7fbb97a-d2a3-44ab-b94f-ad76e7b87475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d3fd195-f338-491d-b3df-23fbf6890e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a2c972-36ab-436e-ab40-6b676ddbc65c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "647d88a7-e49f-45b2-bf18-f3fe20d33a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5af2e3a-22fb-4048-a0fc-1fe598f88522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a217bf-3a20-453d-888d-a33ddb9c5ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "adf64c7c-5a48-4c5d-be13-798fdc78092f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516590dd-26bc-4551-ba44-850cd80868c4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22bd90e-fbf8-47aa-b350-f4961d97662e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da07aa4a-0592-400d-9f80-f8291485c320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b46b0c-f5d2-4d53-ae80-1b1ed25c75bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b2f7319-39c8-48d1-a4b6-766b6dcd31c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e34a046-9e16-410f-82d0-e3a957d1d459",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efaaf1f2-5f1a-4585-a25d-b585d0438591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192d15ff-b4a8-48a5-9f79-e79452a45794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aee0fb7-e7d4-43d9-802d-99f399137a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68451aaa-6f19-4eb1-b38f-41fa590e3098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da257707-29cb-4732-a16a-028ae8fc1472",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e2d5ae-d53a-4f9d-a9f8-e44ac9a4a346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3232c652-3b66-4829-89e9-726ab470c590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2275af-ba58-4294-983a-013c1a66f59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46781c9e-563c-44d3-ae32-3e9e0b5b2028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab949ed-7f31-436c-81ee-8d87a33bf45d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac04940-83c5-44c0-aed6-fd90a9a4644e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e2392e-64c3-4341-8cab-a47e4c502aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e216c802-9350-4b58-9b4d-d638856f2417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd908cf-02ba-4ebc-a198-a2921f79e991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4760e620-df36-4455-a9ce-e446292493db",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73db2a65-6699-4345-bf5f-c62a01cdbc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f37db7-751c-4838-a634-4bb079845f9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc87cdc-3017-4d0c-bb3e-071eb4be1f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9011d40-e11b-4b38-92c2-9dcb3ca56fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b46776a-209a-461a-b954-b3476335d443",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a3765e-9e14-4e8c-9542-c03405e3dc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b013f361-4b9b-4b3d-ab9d-0a44b4eac6bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ad9258-e675-4c50-9d3c-232d02d6f971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e928963-1ed7-454f-aa04-56691c722614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6853ee4f-f61d-45eb-ac78-a234609a9966",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6939aac7-d232-4705-8d8b-b28a8cfc2420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0afdff16-b40f-49ca-82fb-d88773ee2f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5419010-79cb-4d98-b19f-2239d7c9e985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "000cfd12-7dc9-4415-84e7-813737be9ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639a0797-447a-4957-8a9d-38b2c5e0cddc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9979977a-d25c-48f1-a4e6-9e520de6c184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfcbc5f-4356-4acb-82f5-81942cd3cddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebce5667-b13b-4cdf-992c-4873c98e0d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06ecaef0-f5ee-41a1-a548-fc2684c3af33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7355da-c033-47c6-bd22-d1c4ebcd47af",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26812f68-8143-4f2e-96a3-840745c643b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40eaa9e8-a47c-461c-bbad-a9cff57ab2a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4caa2ea7-a4b3-4642-b06c-00997daf0c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "286bc375-ded8-4916-bc4c-b7cee2abf1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db8e688-3708-4c2d-ac36-e4a4ecb89686",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8333713f-ae27-43f5-aa00-bde7c4954b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb3f133-e909-423f-a975-1107fb5d020e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ada2aa-7532-401f-99dd-752ad9eeb173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b289fe2-2528-48cd-90b0-1913f8ac5605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4f6b50-dbde-4b7d-b612-954c72fe4704",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088f4cd2-fb20-4a03-a494-a0d25d4e9d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b833073c-bcd2-499d-b36d-d95861594cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9a74ef-b226-419f-8cc4-c84a3254bd5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "947a9761-f4a3-4a8c-8de1-a8cb48020e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee88617-8266-4908-acf6-b9088ca5c565",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14067310-b4a6-4fe6-a751-874fa306e684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "587046aa-f5fe-4ac3-9734-67bd353e95d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45f24ff-1f7e-4d22-8c9a-e4b88b736940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fd397aa-815e-43f1-a2ad-242ed87b60ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10795819-bc53-44bd-a3bb-0fbfc35d0bce",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf2d2c2-62f9-4c1b-8060-5e8b2ccd55c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca283f78-8024-41b7-bb4e-c7131077c14c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb6a5c7-b276-4f6d-9595-ef235bed11ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f0f06ad-9e07-496f-a16f-2736a28b9b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a99786-4bb7-47dc-b249-05a00a622338",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3006b37a-51c4-4400-8fb2-07c7fe582cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05551928-92e6-4a44-a58d-67fb4d1bc019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd852c7-2676-48fd-91d6-e7b74cc0742a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e281324e-b56f-43b3-8359-5a9b6e2d2512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0e1c15-0f4b-425b-9d89-7617630f90f2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1385611b-856b-4564-9d85-a6bd811fb5bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552af048-b116-4450-aef1-372cf76e3e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6726663f-9c6c-4634-a900-dc685f7f7883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef22621f-4728-4da5-8912-56ca29a6833a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfd89e9-f7aa-4f4e-83bf-9406490c28ea",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f83b86f-38be-46a3-bac5-86ec0e1258cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2465058a-8503-4b41-839f-3aee7360072e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f7a5b2-5096-4346-990e-728ac58b8154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "860f6acc-a9d9-4bff-86c6-c18a14ce7bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee904bd4-a7f4-4bf2-91c1-a0073c9d1461",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64f814e-6508-47a3-a10e-669e5b568edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b63e44a-bb81-4dcb-9b28-829b5086a263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f06aa5f-ea6c-4b57-8e05-da2feca2e3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "481adfd6-0ee0-401d-a3ad-d7331a04bd0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea71221-ab09-4673-a434-25d573d968aa",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "943dce15-2855-4729-9b40-90ce7d4f057b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3227ef26-5031-469f-b45a-b95028746d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035727d7-baf1-4c17-a617-73ca2e229e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "054105db-9d20-4d9b-b77c-49984b7145d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c258a0f-dbaf-4958-982e-aff6afa3a65d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f07f4f7-5d58-430c-bc07-c57bc4c86969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00728362-8bad-4f46-83b7-5c1c84faf675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f716e2a0-712b-4c02-9ac0-7644d4845cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb24eac1-633c-468d-91ec-4d94b115a8ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f15a0c4c-682c-44dc-b4f8-7d3c175c4fce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a7058fc3-843e-495b-9187-be22e9975493",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c6c65b-67a8-4c90-8ed7-2790396fbd62",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "23eeff83-1dd6-436d-a8bc-a40f4057763c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc8a64b-d6c3-41ec-bc76-d95cd2db2dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4cf2159-cb62-4c86-bdeb-09a1277f78b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9f3a934-71bd-494a-aa8f-2431c27b77b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "255ea385-e0ce-4171-aa35-3fed6f090a26"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2799b982-d66c-42a0-a6c5-89b80232b41e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "963c3b8f-0500-42f2-903c-174875d7c063"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be7b56a8-437e-4fdd-93ae-1909ad443c41",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "36fbe565-a57c-46d6-b3b6-9a590181d98b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f2037ad-9761-43e4-a5c0-01191ee99599",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb4b87db-4519-49df-a67e-3200615cd624"
            }
          }
        ]
      },
      {
        "id": "731775f9-db7f-4e21-bae5-094b4507e8c0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bedd5fe6-ee9c-464e-ac89-e0f72af5b410",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21fd15b2-d34d-4ad2-9b5a-8317688301ef",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e64b2eda-1b82-4e16-9cfe-9c17ff6063af",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055fb860-fcbb-46e0-b884-7e4a4428eff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ceffa6-8b94-45d6-ad64-b4d0a2454444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56bce920-a3dc-4f01-921a-50aea17f95c7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cb0b65-deaa-4bf0-8a34-71b1fa1761f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f660467-fe87-42c7-a5cc-509e43492321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f25850-e148-4a56-a4b9-75a8bd400f06",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd2cc4c-ba72-49ee-a545-c54e33403d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "941d9822-8931-44c8-be12-291617dfc34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1835148-a857-4c93-8646-a0944a1150b0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cd88e4-3bd1-4026-bb21-b4cb01e872a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d2a1c50-2277-4fd2-b5e9-994ff2c8d58a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb492e79-a68f-4269-8054-6088363bd437",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423c1084-7f4a-4813-be5c-c777094504ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43bd5425-636e-43c5-9207-29b1572dab28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15851855-6b40-4e9d-b774-b629e76739e3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f1807e-262f-4b36-a272-59e6264f6454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa200ea8-e048-4319-bfa9-64cc58fc7a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3143300-2536-4d26-a99b-534702b715a7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01001f33-d820-46db-be5e-e3860682b64c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede482d3-0d58-459f-82b4-0b7f23b2821a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48112431-fc5b-4530-9b9a-5c12c3495ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e911441c-6e49-442c-9ecf-d3c50bd5b942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354e2f70-17c6-422f-8d8a-c9c170452057",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd0b1f9-8d2c-415c-bbf7-ebb5b8fcc1b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "287fa29d-43c3-4ca3-8b7a-129aea548c65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0620a1-e024-49ac-9f9b-ff242492bb32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8085aeaa-a74b-4949-8499-ac671890d45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9781b56-dc5b-449a-82da-6026c0ea1a3b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129e642a-f829-4276-8806-b995f118c2df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f06e445-a237-4932-8fae-719de3c7a8f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d1419d-583c-429f-a3ec-4b4e8dcd51d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aaa9e24-5cf7-47ff-add1-c4286166bf11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84ba10d-76a5-470f-a4b8-95a3888871cd",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ccd242-76c6-4493-b8e6-02be34ce5e23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "690de118-e19f-4f56-9a55-503b9769214b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "908880db-28db-4687-94c5-58ced369c75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "092970f4-67e6-4d61-ae7e-7b655da05278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b0fb6d-4aa9-4543-850f-c5c3cb49f435",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a164bc9-5680-4e8f-bda9-9a479619ceba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bce8d4ee-fb62-47e6-a865-b596e2bd5c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1492c0-8ed6-4939-bf37-3f08e022095d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9579053e-7dc3-4758-9a11-baeb93854f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16ce8a7-8088-4b18-ba0c-dfddfad65003",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cae3272-5b3d-46d0-a264-158b6eab0e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80537322-b08e-4be8-8f55-11a59336d582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34304cac-1809-4f11-b4a5-9416e8ff2874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28145e5b-128e-40ad-89a1-d4f3fbb29fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bab58ab-379b-499d-b24f-2b9045a1c74c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cc6063-3859-4ef2-931c-fcdbdf70ca1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b15523f9-b03b-4ade-9be8-da6ad52e406e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fc0da2-4dbc-48b9-8bff-2930a54b8a8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a89c657d-4a81-4a8e-9635-111b95395cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0a4a77-e31d-476f-a26d-212a118bf5cd",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b3495d-1a39-4854-86f5-db77940e3584",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01fbcd8d-399b-44b3-a434-bd55ba433490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f6be88-c76f-40df-97aa-335e93a4be7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e744a6de-b1bc-4aef-868f-b12869764d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5bb099-3603-48c0-96b5-a7e0cdd3c731",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6cc86ef-9286-49cc-84bb-0ea97671a35b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "367af61f-f99b-4d40-a891-aeb16e7b7f55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f8d8b9-8bb5-49d6-8fed-6a2512391a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d971f56-e560-47cd-b682-c0ac55721750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6946c5-4646-454f-9481-f89b0914387c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3a0345-6182-4fc8-bcb5-39167b36bc0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77f102b7-168d-4fab-a90f-4b92a5b27a60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "149ca593-82b2-4e38-95ac-fd364b2dc6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111529e5-cb20-4d0d-85c7-5b5176ed3a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ccdc4b-2c5c-4eda-b26d-82de03b06b71",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7172b1-8402-49bb-9f9d-bc449515aa8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "035558a2-d775-4c90-8a8c-fab197b0734c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6b90c3-7e07-4aa3-8312-ffa01bc7ee30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac3311f-4b76-49b6-8514-71f1a5fbf9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f60e5da-8d80-4338-a745-e68ea34de2b0",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73afc56b-8498-4402-b5e9-78b409c88202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30dfa6a8-3690-4648-8221-308a8fd583f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc89753c-0eef-4661-897e-f87e07fd91ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0817e412-9251-45cd-a4e9-0037da3164eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcaca9ec-d611-4181-9ca5-4016a144cbdb",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c583e79b-7f3d-40ba-b00e-63ca2477d706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38725618-b40c-414d-bee8-0be63d5db2bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51aea01e-94c5-4a19-8946-172d04af60fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de104647-80d3-437c-aa37-1367694e5c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933f5573-b159-44a4-b2e3-3508078f9115",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efacc54-5886-4869-b206-75851fc7b55d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ab7ad6-dd4d-4638-a852-be46c765b608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27407a72-a2df-49fc-9828-485c74c206dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d3cefcc-1e25-4a29-8880-eb0060d787f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51defd4a-c2e0-455b-a4f2-aa8277eaf555",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46ce812-765a-417a-94b8-879779062b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c83459-3fae-4511-b133-b52b6cc022e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e46c87f-2a3b-4faa-804e-2a883c7a3bb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46aac2f3-765b-4e6a-9c5c-48554520103c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5469a2d9-f000-4080-957c-881a229a3478",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85f3dcc-509b-401a-adb0-0df60a4954db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d755a9d-3e32-426c-b282-4b532714fccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f250805b-695b-434e-b5dd-9087fa9f90f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f6e019-9843-4500-909f-c50f2bde41c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c3d1ed-7e4e-4417-a965-0b5e7cc2f9e5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f232e0-414f-4495-82af-5ed4a65f699b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22aa2031-99b5-45f2-ae45-f19aba60b20f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa1c8a7-85a2-4625-8ae4-b5dfe0b99d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9563c717-1d55-4eb0-91f8-912d8feefe0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157d70ac-f2bb-4e5f-a18c-e2cbd9b74f3b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01232644-9e43-42fc-81a7-936fdaa12118",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a785a766-b10b-402a-adc6-7e5786cfaab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "742bfb17-4932-4660-ad13-27417e9ab05c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8023cae7-d277-49df-8f22-d8cce25247f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09051a87-23f9-46f5-9e95-76ebb1b37b3f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d41723-9b9c-4940-9b43-2892e3accea0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74439a0e-3763-499d-ba75-01b201f67e55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "848ecb82-1902-4464-bb03-29c7a5d64aca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c3b01ce-8a58-4aa8-8deb-f65b3bca9f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a6af0f-bcb8-4532-89ea-873a6e437b27",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a965bd5a-a195-4acc-ab0e-0d70454fb51c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcde687a-33fb-47a7-b202-a803e2e10bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6557315-ee4c-4507-aa31-2a1e1d11d37c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322f702d-927e-4431-9187-74e133386903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968235f5-873c-4faf-9359-c5204a78e601",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0a60a1-d479-4417-bc4a-35fd380cb9ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d27254db-5565-4ba7-a3a4-61593a0f7339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ef7e3a-dbc4-44d6-b258-241539231096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83d80ad7-5b15-463e-8716-8f5cc7a9cc0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebf60a3-971b-4579-b389-794fae3bc4d6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79333a8b-37b1-4ad4-add8-5c656c8546db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f13ba8-97ce-485b-8aca-4ce250d9e943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "990cad71-2e0b-4f79-b322-93531ffa351f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc67ca3-372c-48c2-80e0-4fffeac46342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab447df4-48a3-4050-bb5c-5c077e831161",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9600c952-9369-4fef-9a27-aff46b86f670",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5048bc83-9a10-419b-ab05-35f1b8b3ee89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed04edcd-7e94-4c13-a215-561c34292803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bab25cfe-11e8-4581-bb03-f856ec3e6ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7aae05-ae2e-4ee3-acd3-8381b2819ae5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92356013-5f29-4283-9743-87d2485c5736",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84b84f9b-b742-47c3-8121-039f6da92ba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ff6eab-5b19-4b72-850d-c0c63b6a035e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dba29a4-b9a5-4c23-8fb3-068a21e0bd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a339d6-288a-4544-9355-c1dad88dc45d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a059a6-8780-497e-bb6f-58014cd5af1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00799ce7-bd66-466f-8f7d-2ec9db15d3aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90eb7f22-2f9d-40f8-86ef-9d2f62738f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf7c7f75-7f48-497d-ba74-13728e9912ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4f4f97-882e-464c-9f20-e157a88148b3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfdabf58-5cee-4f79-9966-98e06dd89674",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62d98dad-aea0-4b5f-ac88-2691d916985e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "217ac9cc-3039-40de-be2c-1b0151fe3e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d50e53f-357e-454f-8356-3c11146a0810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88787f7-a023-4bd6-b9e5-f869e112b5d3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7a20ca-763b-459c-b454-aa7070a145f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4da46846-f0bf-4e89-be54-5e1b7b724066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cc908c-6624-4239-afad-9677a072d5fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca812bed-d660-49c7-ad60-0e19c571c400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1d6b15-9090-463e-95d5-01ae86b3a96b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e1e997-879b-42aa-901f-ba16eca71057",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c3ceb2e-7f5a-4ae1-a4b8-9a9aca1e232f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7f8909-30cc-4e46-ba13-192f7d75391e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c05357ad-1c8f-40fc-b1a8-25f589312c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36036711-49e2-48e3-9b9f-1d1ba4246909",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c338145e-978e-4c46-ba12-005f57b209a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d537f0e5-6c2a-4131-8b89-975acdb72df7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21145abb-2bb9-4ebd-b1f8-f0e088c288d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd82636-26bc-485f-9b79-e3de23137359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51d358a-28c3-4504-b4bb-18dbf95fd196",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea67f9b3-8b64-4a8b-b8b4-de71847c61e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e0a46b5-a292-4a27-81c9-4c6f2c65bfd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "988abbe9-dca7-43af-abbe-75a9bbf738eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd40fbf-b718-4624-819c-d7bfd9a2c2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574ce579-c1d0-401b-8340-b217c8e6be1f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc947a8-8681-44c5-85a9-81137da98376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7818d58-7486-468e-9854-01ba6af61909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0374c0a1-c71d-4df5-a5a5-fcd5365df471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa023e5-d544-4d1a-8f8d-5d18d52241a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24de4b0e-e6f6-4718-a4e7-9bd82452da4d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5714d7ae-bf23-4b6e-bca8-39970526d7e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73b0ca39-de48-4541-8a7f-66bd46a71be4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa3614c-c1ca-4547-ae0a-46fcf8fb9722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faef7afb-86ed-4782-a82f-29de830320a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94de1299-462e-4cc9-9682-53b383bba3d1",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0c7be6-31dc-4126-9ae9-b24d58521588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd9c001c-746b-4390-a14e-8456e752932f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74409495-838b-4dd0-ab38-1af5e7fcb6c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b83ea89-dd90-4713-9f06-fc8226bde749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8736fe3-7f75-48af-8d13-8acaa31f154e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62545219-43fe-4244-a3ac-f557b71d3b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f2564a-43de-40d2-939d-df43864c0776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd8a415-b285-448e-b848-570a963c888e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19750ec7-8988-4380-b534-9bc72b90eb03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e247b729-5aa7-4a7f-9282-72a3970ea685",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081a1cd1-da6f-4b4c-92de-acefaa65ebdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "159e3007-8dea-4874-8aa7-cf4c603134f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ece82ce-ff61-46df-b189-69ea48668499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fbbe557-2201-466a-a4de-f2ed7da80979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78aa57f-50c9-43e1-82a6-e3ef4c72349d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2fb673b-390d-42f0-b98c-184377bd2352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e469f45-8bee-46b7-8764-1166e712b48b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99406aa3-30e0-4efd-8aef-6be30a2220cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39dad3fa-632c-40b6-8f76-eabe6309a50d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be48154-89f2-4a7c-8439-390b150378ef",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749d6223-224c-4fbb-bff0-69fdd8269b4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1bc9fb4-eb96-4509-9ed9-fa6c79bdd87d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "368c5d25-99da-422a-a3fa-826ba0adeb21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8afe0f-5f8b-467b-a962-fbe30762c3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b690abdb-7d6e-4e23-8349-78c78a665d38",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3875499-6be2-402a-b2be-d7a91f2797d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab2f551-846f-4d5d-8fd2-aca79583b5c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e508243-c481-40c6-a4e2-921e4ad84c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f768a2cb-4d9e-48ed-bffb-ce3f0126ad3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dae7125-685a-495a-9588-ceb6f3530c86",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbf9748-5ff0-4476-9271-477d18636e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57016200-d5d4-4341-adb5-2b88d9d08a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "613d3ed4-30ea-4b8f-a62c-2d576e3d9653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c146646-f84b-4878-ace3-fe03729187cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5916ef-b171-46cc-8f9d-c8d437b842c8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0830bf-3bef-46d0-a36c-68bc86ee54c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3188373d-3ace-439f-885d-74806d9094c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6014f523-43f3-4e20-a18c-729ec6ff2aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef147e82-610f-4040-8332-c4c37d97fa57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71778f39-c8e8-4069-ac37-38130df37aa8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ff42bb-e795-4f2c-ba8f-d94591348e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cbc1f1f-a8fb-4bc5-95bc-3ec95c54ac3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62f9cdc-4dc3-4fc4-a04c-01ba34431c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db0f3a0-7b8e-457b-86b8-1176af351da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92179fb-5861-4239-8243-1d699bc4f2dd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02bb3a43-b3d7-4352-82d2-ae0ff9106640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b015232f-6f4c-4b66-9d20-ef7cd7c92a57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c05d014-d775-471d-878b-9686da83ecb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "935af199-f1be-4748-b36b-a506dd701d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34e5a67-aba1-4564-b7a8-f7189a562e75",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c117900a-a2af-4d3a-a768-23abc75411b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cda3386a-999a-48df-ac04-9077cbbe232d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c089cbe8-0525-4d5d-8144-da469736907f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b976683-c8f1-46be-ab7d-247047ba4381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca05df1-edb3-4975-b91e-2570afb16d69",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308b6335-f458-448b-b871-7d4b6167b07a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806f3fe2-2fbc-4774-9f3a-e270e998c1bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbf2e03-5e50-4bb2-a954-005aec31dd68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b6a67c5-7643-4cbc-a598-6c78b7914f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1addc673-134b-4d43-964c-499ab987e3e1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d4231f-0de1-4578-8e68-3b83532ad43d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73859cc7-9e73-4b93-9249-1a4d4c23abe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f71b24f-bc9b-4d75-95c3-87fb25726564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a0944d9-56db-47b2-a85c-da518fd57fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157e5236-d456-4612-a0fc-fa05eb2c1cae",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c4d158-15eb-42b8-95ee-ccc31f5f03e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e03840bf-4955-4425-b724-571786f4bed0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b31845-d708-424f-87dd-53eab520d80d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c73060fc-f7e4-4fab-b21c-0972a87c6a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7843fba4-5017-4b41-8628-7312e94d9eb1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585ce029-1582-40a2-9521-a2f90c70a069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ffe267-1f55-4795-b1e1-6a6725e9b155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5f7f51-947d-46a9-bcab-bd24a8df2715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d451273a-06d2-48b2-9335-93e75d200ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19368ffa-7c88-4b11-a180-234c0c0a6b8b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7867463b-43b5-4642-891f-7fc1b636e729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a776627d-d7e0-4c31-8139-639afc7c69a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8da687e-4f7b-4b08-9977-3c1f60951b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88ab6019-4fdf-4593-a286-e48fc878404c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599e536a-eb1b-4da0-9fcf-9320e41c9819",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2cc248-f8a3-4ba3-9679-7f0d9c2aacac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15af8c8b-9b21-4037-99c1-7845315ae4f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3b1242-0f4e-4f13-9fe2-a9072620e45d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8152e1a6-4dd6-46a5-8135-e77316badf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e68916-6ac0-4afb-b939-36e1005b3ad8",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd42d0d1-1534-4dd1-8353-8c62ed665f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a312712-6d3b-4712-90b7-56cf1362d5a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb76446-36ed-4e59-8242-a9fa2ac47741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3593437-f125-4536-8bd9-8c64ac78f4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcca77be-4d03-4d8c-9a1e-c11c94fa5a9b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063c252f-d400-49c3-b7c7-d0e0b283ccb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc4e5f3-134a-4f6d-bcae-1abe00bfedf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa5a161-05dc-4aec-9fde-79a39f358492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f1c4e0-c413-4a78-ad08-e298991d697b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20dac590-ab95-472e-b81e-bf7452eb5f7c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226fb348-326f-4106-88a9-87579f23cce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dbf7821-4ca3-493d-bf67-74eefad6d193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ab8451-2bea-47f1-8fd4-ad2cb217b1cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db25e292-f892-4259-8945-a062fa768de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec93b4ef-96c9-4baa-9156-d1802c5cbe21",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653177c5-7dc4-4869-9fb4-565493b14dcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca6b4a2-107d-435b-8706-ea438cadfaa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5c75ff-7a8f-44bf-8a77-2f5181c1d23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6520ef2-ddb3-46ae-9214-8ed3b5a7a290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913e7418-576a-4a97-92be-ecf344f153ba",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50800b40-2ecb-4005-9a55-4a92551093b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a4a7bc4-8c3d-4a26-98d7-ec9973f7eea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9262539-dcce-4ec5-86b4-3e6ffe5b9df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b545e94-c278-4ab5-9ffa-db1a06fdb164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55d7971-e019-4e0d-9c8f-94b44cd47418",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f388937f-82ff-4abf-afc7-adf61f539225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec15d8d8-3757-4761-a42a-0ab7c0cff4e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1d65c1-ff32-408c-8154-865b4d5b20f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f483ffb-9490-47ea-a689-3f2d19b590a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e2e3d6-1b30-4dec-aaca-8e0c9027345f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71472478-f1d9-4a3a-8005-85ae8c753087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae937670-0b9e-4c7c-9b4d-276f1d13d1cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38f4485-f6b1-485b-a370-e97147dc8283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f03576-6fda-4fdb-8ee5-6e2d44efa625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa96d0f-aa0c-4904-8208-b1c01d0bc7f2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cffa4a0e-46e9-4f8b-8ecd-452d99881210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ffea9c7-16e6-4c52-af0b-9ec623355ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58f213a4-a1ab-44b1-99d7-c4b67bc7d212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "589140dc-a416-4401-866d-9ecb3fe9c08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85a91bb-1f17-4d4b-a03e-a7d7b38973fa",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7cdcb4a-4665-4870-b8cf-1fcc999e9bad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f213c35c-e333-451b-ada3-518c3aa975a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d6c3f66-a6cd-4dca-b071-aab045fe3780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ba38cf-d49a-417b-b83c-2cd1b962dc4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df23b980-60a3-4647-8628-140bb78bba8a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10fd9288-c795-4d9b-8d98-a7aefd705008",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f26e463-98a2-4709-97f9-6e565c59d592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f138ce1-e2d4-484e-bfeb-5e2cb147c344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12c5ad6-02a5-47f4-8e6e-2c03fd79d35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c41e2e-6a9e-45a1-96fe-ba59a8144c28",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110f2a86-19c0-4477-9c90-0af6caeb59d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbf194be-b31c-4ef4-8e6d-bec7047f985e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49deb6db-1e1e-4b1b-b3d7-2a2591e0d99d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f10dfe8-eb6c-4b83-98e8-a514f8e2ef19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae51357a-4c97-42da-b214-21fa746773d7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c622c2-edac-4794-b579-2250b83dfd68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85eaa6bd-7175-45e1-a934-812f105c95bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15d86a9-cd37-455d-9b2a-380ad28cc7b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737ce01b-7347-496b-b31c-2c33385a9fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d575b48-46e5-4eb5-b375-dc987c077dfd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9842396a-2390-4f17-9c95-1970384424d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1596736-508b-4153-9f8d-154695dee318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4c910a-244f-431d-b87d-e3e3c7b2080a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67824b03-0605-4af8-98fc-713d949d3c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1393e9f2-bf19-4a5c-9b6b-245a9652dd6f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c06f5bd-acf3-4496-89c2-71debaea3bfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "365f00d7-06ed-4dc3-ba2e-426f7e851716"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d56824-b4d8-4b77-988c-edb4e9594a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "525823fa-e6f8-4f66-ae3c-896c90c66bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28afa48f-77e2-46f2-9af3-0d744d2eb4c0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98747785-be22-47db-86d4-b409e8dce8f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf99c98b-5052-4398-af7b-87ec8c5ea844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70498c1f-87b8-4b4d-b84e-fb23a53584ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a051c70-82e0-4017-9398-b80643798d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d3be5b-97b3-4ee3-82b1-092ba527dda9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33b4dd4-8aa6-4240-ada2-44adb49f2dc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7086c280-3b27-4624-8aae-0409bece7e4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c32fb8-26d7-417e-b238-978f051df9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecfeaa27-6c00-41ed-bb43-d78988b372a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f83adc-a469-4377-ab45-db2b395e0cf8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587d7899-3f2e-4e61-b090-823096350f98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b1972ac-988d-4458-adbe-59c49ea9208e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "921bad00-67bd-45fe-948e-a6f97b9dd9a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6debc9-2a04-460e-9d3c-50adcceda325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1d8d5f-6b50-4ac7-bb0a-f842cf199c95",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d65af90-497e-43b6-81b9-04bc024f2f1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "371af8d3-308e-4b83-959f-67e337bdbe0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ec0f87-51d1-4931-824f-058666a69ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40a61d4-3def-4d23-9467-a16a32d7b7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d3ffb5-1b2e-433a-a2c8-33dcd987f0be",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc614f5-8ab4-4869-bd31-90ddeb9434ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b96a167c-0136-4739-ad45-5bd40fe86cf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2e2a22-1162-4757-963c-45675b67f3ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42355d7e-96d7-4f24-b81d-6a17406c4e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053d8245-d142-4c53-a54a-f89bc84a6e38",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7aa209d-b071-4e32-8060-a0f9d5837b82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a3d8419-2498-4f9b-b723-ce529df5ce11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3901688-a56a-4594-9b70-06c0e35b2381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93051723-bb6e-4068-a6a2-ad2456554983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e3b2b0-2de4-48cd-a477-972fc123fa84",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de0d184-92f7-401a-bcf4-39078f687f0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec301a58-ce24-477a-965d-f7bcc0926909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d51984-9e0b-428e-99bc-59c9e6f47793",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0338de2-275d-42e4-b2fd-c06c79d2a25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb7f6c7-9246-4a44-93e0-101000b25764",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47645ce-db58-423f-9929-3a55ff0052e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "192358f1-31ed-42ad-8680-9ee802f40464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f15a43-8422-4432-9240-1d28897432ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45626a7-013e-4aae-92cb-9dac96d20a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ef38ee-1383-434e-9965-0c62a6a5da80",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f8847c-e1c4-46e1-8d92-e42a0642af7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f373662b-8145-4d81-8ad8-cbd7dc39c1b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e708529-d3fa-4ade-bc1c-605c937437fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623b069c-bb54-4606-bc0d-1199de1bc3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048c152d-b171-44c3-b22d-93a773fe7493",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4f20b8-4664-4184-9260-6fee6019886c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ada913ba-8c7e-45df-ba45-2ecc547e5652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "414682ec-d5f2-4616-861c-e63651e9a72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05440c40-74a0-43e0-aad1-5b7b5182d138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0aaedc-e5f8-40d8-a495-0d80e4108891",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a820276a-49fa-4cd7-8df6-d3da26d13cc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46d93925-9c58-438d-900b-c30dc36ab877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df97312-994e-4181-afc1-c2f3f2a394fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e47912e-7955-48a6-9111-4f99b44da689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7ff1b5-5ea1-4661-8541-c14f8921f303",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab22bf3-17b0-4e48-8013-e3890c4708f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c0480c6-df5f-4ff4-940c-9ca236edd031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f735aa-53fa-4fd3-8e05-46277394cb96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32bcc2e2-a3c9-4559-adfe-58978a383191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1374620b-2840-48fc-ad8e-e301c9c8f486",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2ea946-3940-4d63-ac4a-988325914494",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "215bc745-3d49-4b95-96b5-ddef97467e36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe76a6ae-2e0d-4fa2-b033-f70f237c9149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d09278f9-a99b-489e-bc40-97693db7c00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8afbb4e-9ac0-49e6-9c95-11b0bfe9ead4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0219e2d6-9b65-471c-a710-0c0e121f3f60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8150cf69-b8ab-4ba1-b65e-3583fa7d5574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4aa8f8-c053-4742-aa68-54dca84031cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac21c5b1-7441-4641-96d8-10467b07ab8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa086611-7f77-4c6c-aaa9-4f7dbd66a0e5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9f070b-5410-4e84-8390-01baffa6edb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddb8b140-de41-40e8-88e2-12a53284836c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e38706-b9f7-4ceb-9b8a-425c16d5663f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d339188c-1002-42a3-8015-cac2418d8d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132da4ea-0755-44cc-9d07-8a5953cc4790",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c267c401-be61-4337-98b1-bddfe02bf1c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68da5919-85dc-404e-aa73-dcd731df5f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84260974-55af-4345-af51-2e3105d66c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526a1898-a802-4426-82dc-987f13416f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994fdc6b-c4e7-446b-9a2c-841cd4df7006",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f70d5c0-95cc-4223-8f78-ef0c7307e11d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "232d5262-b2e8-4bf5-9534-188ca5d5dcfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13150e5-1492-4d20-96c2-be95ecaf4aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0852d773-d1c2-43a8-9c76-37f6240b891a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34b9021-78a1-485f-8225-bd3297926782",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e1e3df-5d8b-4b8d-83d8-b05b6261b922",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7597e170-e8e9-4de6-ad23-e7fe24debfe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a030343-1014-44ea-8d4f-25acbe71052c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e7ecd3-95d1-4e19-9dc1-31a326c36d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a79aec9-d017-4d47-8e9c-f1bfcc269d9b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a302355-1e88-425b-8eb1-c91774a60946",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8acf2166-5355-4148-923b-5ac97f90b265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49a9dcc-71f1-4112-832c-b873c92f287b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39efdc1d-0115-4da6-bcd1-94108f7a38c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc23ca08-509c-4cd4-bae7-f181c19c9255",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ab2a21-3783-43dd-a7ca-6f60d85d7cf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14e5057f-231d-4569-93e8-7553efdba5a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2acd89-06af-4e0f-b1d5-4f9667fff1f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3c8eca-addc-4a86-b89b-93342a20b6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8872691-91e2-4817-a370-45273204757b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ae73ae-d8f8-4760-bd19-407b84d3fa7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9ac8bc3-94b3-465b-832e-528bbd5def04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6608c7d2-5e00-46f8-ba59-aa68b6c88d0a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a82cda2-0a62-48d9-b0e7-05611a412749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e406d159-a74a-4ba5-b8c0-461c4f18d6f0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319e250c-166f-4b85-95f3-077cd1b6110f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c378bc2-1866-4cdd-9468-dbcf9a1bb01d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c9b748-9a3b-48ac-8d3a-c0da0b404249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95df1bb7-67fb-4fde-bec2-cec60a87b6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799cebbd-d219-4618-8969-d7bfb4fb62d4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40563b06-b556-4c8c-a8b3-168157a6c74e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b30efff-8f6b-4a7b-8078-40903dd4ee57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef3a355-8e23-4d33-9d6c-62893080253a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a51393d-c40c-4e59-ba06-3c9eb24cdf08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22006b8e-5c8f-4367-8887-1bcd548a55e7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88902d3-db3b-4323-8d81-7d9258c04459",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caa21fad-ed15-44bf-9a8c-b5ff2fa84604"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ddf35e2-2a03-4392-a9df-a75a5a52066c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "525b29e9-720b-463d-908f-944c511fadce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b750a01-e97d-409e-aaeb-44e1fd2dfaf0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88239d0-fff7-41ab-867a-f484324e108d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "185b8c55-a519-436d-8d91-b0dfadc739fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee0fcb5-77f9-4d31-bf92-b9744b4c5abc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac619c5b-af48-4a45-a2ee-8c21a33ab6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b892cdc-3d3b-4c9d-8317-6e7690d42e0a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fbdd12-147d-4a38-895d-ed00e21500f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af1ce304-e01a-4d70-b9f8-74cd47c50658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea58c143-4652-463f-ac05-1d0164dc9cdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d468e25f-87d9-41cf-bca3-629f058d7c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74cf3701-19ee-4c2e-82f5-7c99d0158cff",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e768cef8-2d85-45f0-9f37-61cf57836a18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75ce699c-1a16-465d-a2e2-91300d708724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "536018c1-8616-44ff-b352-bf623c33f5ce",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9eaad8-420f-4a32-9021-f172e142bb0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578798c3-afaa-491b-9ece-ba799775a2b8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d89b0c-12d6-4ef6-9d42-3bced39ed9f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9032632f-1a36-4393-b53c-ff34293c3ee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc14ed05-4e19-4aa6-9d52-5146ac612d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a79fda3-3734-4cc0-aabd-d57bce461490"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64205a96-5138-46df-a700-01337317ff0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bbcf02a8-c587-4e63-aa35-ceae8dfea957"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c876694-6ecf-419a-bb46-ab847ef885f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95da07b0-52f0-4cd1-a367-e4d0e76d7f8b"
                    }
                  }
                ]
              },
              {
                "id": "6cd95a53-5ef1-4980-9160-8a6fdcc3a61f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a961c852-e132-478e-bf36-782806e290b4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc79051-2587-4293-8afe-afa6c2ffd9d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "528fa9c5-6552-4c21-b802-bd0073b0553b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab770856-e2cd-4c0d-afb6-7bda5072d0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4232bd3-801f-4d96-8a76-004fa569f0c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8d5ea98-2265-47a2-b789-226d097cb5b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2aa94d3e-0beb-44fd-addc-c495643d28ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4840b7b-1b1c-4a86-9b8b-cc2dc4a76038",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "025b35a2-fb22-4cc7-bb6a-56cdae89cf54"
                    }
                  }
                ]
              },
              {
                "id": "2f5965b0-6021-4cba-83ae-a2cf38bf916a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "721cc078-b0fa-4dc4-8371-a08740d126af",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1e431b-83cc-4c55-8a51-d2cf59565ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7cfce608-8ad9-4c7a-8935-523df5fb6b24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66403c1a-7f6e-43a9-829b-19f11433ad6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696bbe8b-0a1a-43bc-bc3c-ae3655941911"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1c6dd0de-2bc3-4c18-bcb6-e9f3fb864ea5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "99ffe17c-22cc-40da-bca9-a9101d225562",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "883b3680-1e2e-4af6-b97f-9714bcb6f752",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0554d389-4a4c-4f52-b9b6-09068ce5d9e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a440ca1b-a60a-480f-ac49-6a5da12ce083",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f647d9c-6cde-4f85-a724-0199a147c100"
                    }
                  }
                ]
              },
              {
                "id": "12861238-14e6-4d75-99a2-35ecd0ba86b4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0be56a8-9b6c-4a47-9ba7-3a29b3f69106",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "510a3254-def7-42ce-9a40-4e7762ee03a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e69c37a-16b9-42e9-9f5a-e8a145005779",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2af0e65d-6b76-4d0d-b50e-bb0276629bca"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b9c3ffb-6c06-4391-99d2-f039337ed248",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d49f62a7-f39c-45e9-8020-43de5cd80692"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c966077d-6f6d-400a-8822-eadd2d0db95d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "960daf4d-e28c-431e-bc1d-dd9e13d7ebf6"
            }
          }
        ]
      },
      {
        "id": "02e9ca4d-eeed-44b3-884c-881d510c24b2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8ee59dd8-aad2-40dd-a867-109e34e7d908",
            "name": "Negative Testing",
            "item": [
              {
                "id": "71cac37c-5f0c-4f38-9476-36b48624db30",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "da3478f6-674c-44ee-994b-ff04adb08485",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2bec954-2238-4ee3-bfc4-e9ed4ae3af8f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c74d4d39-69ab-4913-ae31-aa4d854fed5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cd2d10-4517-4655-b048-7778f6172e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2f3845b-5d4c-4815-8012-a230f2478dec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17d224bb-f10d-4521-a855-29064650ea3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e71c98fb-e59c-47d1-a20c-a05f227fbdd7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1381b302-ec9d-4287-bb81-ca95fb345db2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e6a7b00-46aa-4461-8393-4d2f73a47caf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e84ae292-3272-43ba-b1f0-bb01ca9c4298",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "478d3d6d-8b15-49c5-aaf9-b90e4f520337"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37550a12-d230-4a48-b724-a84e02064596",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7397765e-2082-4da5-9008-d20e3b80fdb5"
            }
          }
        ]
      },
      {
        "id": "f9aa6039-35de-460b-b473-45495a4f0802",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8ffe928a-3eca-4734-8346-b18d426c2425",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e889b227-cfb7-4fa5-91eb-ea9889722554",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "377ac0c4-392e-4fdf-8c7c-a77871f6b7f8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfeb31a-e53b-4a5c-9288-b34300d7a275",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "213865f8-06d1-42a7-9304-042c656ea32e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b8d85b-c8d8-4c35-98e2-d0fc71304797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b1e74b1-1a78-4e4c-b225-307ff47e7fc9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82e29283-45da-44f3-b030-dad472e19a1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6244308-9dee-4b3e-bc09-246bb5a876f9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "271b21c7-bc90-4740-a06a-4c221ddb9bf1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "470560ae-54fb-4554-be72-b6bde469f44f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9dcc0b50-cd49-4de5-88ba-e7f4078da83c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d8a685f0-6308-45dc-a2b9-93d862eab147"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "844d923d-ffed-4300-8012-99236e9c7b21",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c5d97ab-ae78-4211-a401-681d9ee0235e"
            }
          }
        ]
      },
      {
        "id": "d3907658-3a6b-4ac7-82aa-450dcd04e0fe",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "af2b6466-1d44-4572-b99e-919340129d6b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1b296f47-241b-46c9-aed1-e557ad0e2743",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3edef5f0-ced4-40da-8c10-5e3313b3f1d5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5983d8e4-20ea-42e7-86bb-a5c1132c4423",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a275d6c-e0bb-4c0f-9e06-2c64dd17f12a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7286b54-dd55-40a5-9def-b24f27e15def",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc995599-7a25-43e7-82a7-357f43a6a89c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f5fa5eb5-c2da-4bc2-bdac-bd3f31c3cfa2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38250c40-575b-4a24-b2f9-3341c9befd89"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "371fecee-49ad-4b73-9427-526183ec2fbd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bc32e67-ccc1-411d-94b9-899509b43c34"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7cb54567-543f-43b9-9dbd-5d0f23343f2e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "28d01c4f-4cd3-4ae4-a386-2659f2554e2b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12b4d7c9-3fa7-4e59-a102-36e72107633a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ff33d7b-c54b-4291-be9d-8d6776c94e5c"
            }
          }
        ]
      },
      {
        "id": "265ff67f-cd28-42e2-81c0-e8e20bf1ef93",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98e223ca-ecce-4834-9914-e5d107b19c3c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a916ba59-9283-4c0e-8ae9-0f68771ecb82",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2905e2df-f7dc-473f-8a15-a3ad51432760",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c756c3b-73d5-4c58-a595-1cb7559d1fa2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61c6c268-6988-4c03-bb99-364cdf1e9a15",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 112.16666666666659,
      "responseMin": 5,
      "responseMax": 544,
      "responseSd": 70.2976946493686,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714782916917,
      "completed": 1714782953882
    },
    "executions": [
      {
        "id": "64bc31cb-c291-423e-b62c-33001950cd2f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "01248c4b-b385-4cf5-9868-7875c089fdf5",
          "httpRequestId": "29d6f6e8-4092-4142-847e-02ae32bc1131"
        },
        "item": {
          "id": "64bc31cb-c291-423e-b62c-33001950cd2f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0f838273-21b9-4773-b8b1-39c0ebd79984",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "71f55288-5d11-4220-ad8c-9c09b8b27ec0",
        "cursor": {
          "ref": "df546207-0302-4587-a636-b67955ecf480",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ca21f579-9028-49b2-8b7b-d852efda753c"
        },
        "item": {
          "id": "71f55288-5d11-4220-ad8c-9c09b8b27ec0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6c0326ad-ae27-4fb8-b54b-89fcf7227cac",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "14b3b054-4e00-4fab-b7a2-5d2be6233c08",
        "cursor": {
          "ref": "32c77752-e987-44e6-ae8f-ca4b97033d31",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "38c230b9-1818-42c1-b7a9-896c72143440"
        },
        "item": {
          "id": "14b3b054-4e00-4fab-b7a2-5d2be6233c08",
          "name": "did_json"
        },
        "response": {
          "id": "f15dcc11-8ee7-4bda-9c24-fca4dbac180d",
          "status": "OK",
          "code": 200,
          "responseTime": 255,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53fc707-4dbd-4755-b975-0694b2267748",
        "cursor": {
          "ref": "5bfde031-4dee-42de-ae43-5f07532aec28",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48989c37-733d-4c8e-8764-e1c99eabb9bf"
        },
        "item": {
          "id": "c53fc707-4dbd-4755-b975-0694b2267748",
          "name": "did:invalid"
        },
        "response": {
          "id": "195cc837-242f-4b39-9dbd-fee7dfd6b297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53fc707-4dbd-4755-b975-0694b2267748",
        "cursor": {
          "ref": "5bfde031-4dee-42de-ae43-5f07532aec28",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48989c37-733d-4c8e-8764-e1c99eabb9bf"
        },
        "item": {
          "id": "c53fc707-4dbd-4755-b975-0694b2267748",
          "name": "did:invalid"
        },
        "response": {
          "id": "195cc837-242f-4b39-9dbd-fee7dfd6b297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 154,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c51de96b-5f49-442b-94bc-93dd529fe3f2",
        "cursor": {
          "ref": "81324447-62b4-457b-a163-cc73e64d6e4f",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5916ecde-66ad-4b43-a85f-a6e4c434eeb1"
        },
        "item": {
          "id": "c51de96b-5f49-442b-94bc-93dd529fe3f2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9b11ad25-67c9-4f04-b146-9884dda7d19d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 204,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d564cd6-68a0-409b-9552-3fb9fb0debf7",
        "cursor": {
          "ref": "81f1f938-9a05-48b6-bbf7-2cf242ad101a",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e883b261-90fe-4b4c-809c-df19d4495d6c"
        },
        "item": {
          "id": "9d564cd6-68a0-409b-9552-3fb9fb0debf7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "307dec31-b91e-4826-a26c-1bf5167fe99e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 102,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e33c496-03ab-460f-ab81-0fc47e2edf52",
        "cursor": {
          "ref": "216fa235-8955-4a36-84bd-e3e65e1d627c",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "30109efe-d725-4bea-8108-4d296f5a2847"
        },
        "item": {
          "id": "1e33c496-03ab-460f-ab81-0fc47e2edf52",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "55f9ceec-d03b-4cd1-b77d-aa2dcb9dcf19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f7c2cd-a208-4a68-8285-4a893b9edcf5",
        "cursor": {
          "ref": "9fb23932-f9da-4d2d-8a04-7048a5e72003",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "51b71e7a-fdea-4225-ad1b-949f2a31e8eb"
        },
        "item": {
          "id": "92f7c2cd-a208-4a68-8285-4a893b9edcf5",
          "name": "identifiers"
        },
        "response": {
          "id": "4662b15f-af26-4446-b61e-b535bcf02c80",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f7432a-743c-44f5-b5fb-6988486e9138",
        "cursor": {
          "ref": "68c6ba43-6e42-4bbd-a142-cf4ca609d581",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c409cf71-b23f-45c6-84b2-18fc9055d8aa"
        },
        "item": {
          "id": "01f7432a-743c-44f5-b5fb-6988486e9138",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6dce0894-f4d5-4e8e-bcfb-396d859ae8b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59c563e-41b7-4573-932d-988fb44750bc",
        "cursor": {
          "ref": "9c983aa0-a8c9-4380-879a-c30600f6e1ad",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f176f7fa-a7c2-4b0f-b3c7-2b7fd6139b47"
        },
        "item": {
          "id": "c59c563e-41b7-4573-932d-988fb44750bc",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "058badb7-f291-48b6-9f95-3ed2af84a0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515cedf4-ea82-4225-856f-49c88a8c992c",
        "cursor": {
          "ref": "1e81b45a-6bb1-478f-b65b-e10d922f77cb",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "22faac80-b195-458a-be49-923e54ca65e3"
        },
        "item": {
          "id": "515cedf4-ea82-4225-856f-49c88a8c992c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "10eee67a-b6da-4a43-a59d-8b25c31595e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1a8911-f846-410c-8d05-15482994069a",
        "cursor": {
          "ref": "d246ebdd-ddda-4849-b7eb-9be86f3f9830",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ae72b379-fbd4-4a73-ad08-9b58f54e0fac"
        },
        "item": {
          "id": "df1a8911-f846-410c-8d05-15482994069a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "bd6c077d-d42c-4f71-8001-74448a8b4706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb74890-a27d-43f8-9f8a-f1fdd1a0af85",
        "cursor": {
          "ref": "518b7aaa-aca1-4a48-b4e6-b6764641c536",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "594f0393-59f3-4745-a559-c2a053ac9ca8"
        },
        "item": {
          "id": "0bb74890-a27d-43f8-9f8a-f1fdd1a0af85",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "69c21936-ab8d-4cf9-a6fa-0d8dfc6b5501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "878e687e-ca44-403d-b0de-93580c411f09",
        "cursor": {
          "ref": "222014ff-2321-4315-aa05-a037ec5d6634",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3fd54d96-fdf2-46c1-962b-d142daef002e"
        },
        "item": {
          "id": "878e687e-ca44-403d-b0de-93580c411f09",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "47d66382-918c-43cf-bf48-8e574ff2c0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc72ebd-6687-40c1-885c-38156636671d",
        "cursor": {
          "ref": "cca63556-9bb1-4ffb-b3ce-2f43c18f9ede",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3b8dc8c7-b16f-4409-91d2-40f5b8db020d"
        },
        "item": {
          "id": "4cc72ebd-6687-40c1-885c-38156636671d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ad47c47c-ad58-4602-b184-78770e727b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979ac68e-8016-483b-b935-1e79e01346a6",
        "cursor": {
          "ref": "1b236445-2401-4bbe-95ec-e6c995c314cf",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "74f4ee8d-73f4-45de-b727-bcd3684344e4"
        },
        "item": {
          "id": "979ac68e-8016-483b-b935-1e79e01346a6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "a42eba57-c9dd-450d-b961-c6ed382f067a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1df966-4fde-4068-a96a-096a7c2e89c7",
        "cursor": {
          "ref": "521917f8-2e65-4e74-a791-5bdae1f8de9a",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "336ee3fe-8acc-4ffc-abb7-cbf50a8a189f"
        },
        "item": {
          "id": "2f1df966-4fde-4068-a96a-096a7c2e89c7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "57445d08-ace5-4257-b82a-4e97fce384ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c02244ca-0089-403f-a082-c3f0721a5009",
        "cursor": {
          "ref": "948173c6-a7c3-496d-b9af-3ce8c61a2857",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5ca11a20-b930-44b3-826c-0a30335b9435"
        },
        "item": {
          "id": "c02244ca-0089-403f-a082-c3f0721a5009",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "91b690a7-5d76-40b0-9b44-6aa064426e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619158ab-6234-4bca-a189-2ae99b42db7a",
        "cursor": {
          "ref": "9ce22126-4c54-4b98-b4b7-51f9cc2fb4f3",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "67a5a856-b165-4e46-ad35-a393c6cbeeb8"
        },
        "item": {
          "id": "619158ab-6234-4bca-a189-2ae99b42db7a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5cd0c7ab-e5eb-4113-ab66-c37fa87edc59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e441acd-b280-4582-85c3-192e0f1652f3",
        "cursor": {
          "ref": "da6d2505-e9df-4ff7-96bc-97230c770449",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "528b389e-8661-493c-91e0-ac5da2ce5abb"
        },
        "item": {
          "id": "8e441acd-b280-4582-85c3-192e0f1652f3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6b467fd9-0e9e-48aa-b445-f40932279792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0068d3d-6c77-40ad-8e95-36ca70e3c2f9",
        "cursor": {
          "ref": "26203ad3-d5dc-4a72-8af6-131b410c226b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6207d203-66dd-46e7-a43c-c0edcca3a66d"
        },
        "item": {
          "id": "d0068d3d-6c77-40ad-8e95-36ca70e3c2f9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "85cf830b-be6a-4f7c-b90a-92d340eb0c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df922dad-d204-45a7-bf1e-de622cf351a7",
        "cursor": {
          "ref": "ba805e28-f630-470f-aba3-6731998d10c8",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "23e7adaf-7f96-495d-9f0f-7d775c5c3dac"
        },
        "item": {
          "id": "df922dad-d204-45a7-bf1e-de622cf351a7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "96a1563f-42c6-48e2-aeed-b6b9b5f104a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68245131-3741-4de5-8da3-828db7c346ab",
        "cursor": {
          "ref": "7fc0d9f8-3d0b-45f0-91a1-46055ec2be5e",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "13a82c0d-bca9-4d55-a0b6-4eec752063e4"
        },
        "item": {
          "id": "68245131-3741-4de5-8da3-828db7c346ab",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "bc3c4f42-0220-462e-8aca-6e2e852249d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1bb52a-6a3d-44ea-ab38-ebefe2926ec3",
        "cursor": {
          "ref": "c40ab4b3-a1ef-402e-9105-443d65c7a940",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "34e0ecd7-0f1c-46d4-8ca5-1bc87ac68220"
        },
        "item": {
          "id": "ce1bb52a-6a3d-44ea-ab38-ebefe2926ec3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "88617dad-5ad4-4573-b7bb-021e92a1fb35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f39ed0-fd6a-4ae4-8da4-fd023b6ffbff",
        "cursor": {
          "ref": "ab683ba2-f44b-49d2-9111-55cd0e4630dc",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5b7448a9-7b22-422d-85de-ddd286da2443"
        },
        "item": {
          "id": "d1f39ed0-fd6a-4ae4-8da4-fd023b6ffbff",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a0b5321d-abe4-4359-84bc-a649f722f7cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f18f3b-f0f8-4b79-99e9-3bd090f8dbe4",
        "cursor": {
          "ref": "5db1023b-4411-4267-995a-3a147e9821fd",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "996497ed-c186-4167-8ccb-9dc8a1876c53"
        },
        "item": {
          "id": "97f18f3b-f0f8-4b79-99e9-3bd090f8dbe4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "538b8a51-e704-409f-9ff7-77f1ba02c640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c59eb0-9b27-4729-8514-88926f76d2ec",
        "cursor": {
          "ref": "4dcb25e4-2622-43aa-a3ce-6d3054f2fa0e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "39e1e6cf-f30f-4a3b-8aaf-69c8f7fc7d0c"
        },
        "item": {
          "id": "29c59eb0-9b27-4729-8514-88926f76d2ec",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a4002c00-e3f6-43c6-a4b0-415457d007fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd68c41f-b9bc-4075-b161-5db540a162cb",
        "cursor": {
          "ref": "52a697a6-6a71-4dbb-a4c5-031065f8ac88",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6d627d31-6592-4867-939f-f32467b74b9b"
        },
        "item": {
          "id": "bd68c41f-b9bc-4075-b161-5db540a162cb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e75a2c6a-15bf-4834-b930-0287acccd1cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a28d31-b9bf-4175-8dc9-60b358dab7e4",
        "cursor": {
          "ref": "f37b32f4-2132-4bae-87b9-c6ef5af7e81f",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6a6d16fb-2b8a-4c1c-91fa-e2b5ddf54506"
        },
        "item": {
          "id": "e1a28d31-b9bf-4175-8dc9-60b358dab7e4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "06fd352c-6505-4784-a466-1a704b869f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126a8d80-4600-4802-9ab0-867a9440a674",
        "cursor": {
          "ref": "4860cf93-91c4-400a-91ea-b736f662628a",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "04042fad-f229-4e04-8cf4-525f706c37a2"
        },
        "item": {
          "id": "126a8d80-4600-4802-9ab0-867a9440a674",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "43c0549b-bd67-46fc-88a7-4fa4f15a139c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6da930-17df-4592-8daa-969a2b74aa1c",
        "cursor": {
          "ref": "9f573fea-81a6-4173-87e5-13e302f49109",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "783df79d-fb38-467f-8f60-11d5aa59622c"
        },
        "item": {
          "id": "9c6da930-17df-4592-8daa-969a2b74aa1c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7e64b7ff-e6e6-4326-afac-814763bfd917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22b7dd3-0a5b-4464-8c46-e8f52923146b",
        "cursor": {
          "ref": "b981dd44-ae43-4b6a-ae54-02214e481720",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cf15b16e-6428-4cfe-b57e-f2e24ace3b33"
        },
        "item": {
          "id": "d22b7dd3-0a5b-4464-8c46-e8f52923146b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "73ae9e2b-b5ab-49e3-aeae-9c6c313cf6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a92c15-7560-4996-a4d5-39252fd0b435",
        "cursor": {
          "ref": "4d522653-5ddd-484c-b3b1-fa4a4cb658b9",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "aa6ad8de-afda-42fc-803d-0d672d7723af"
        },
        "item": {
          "id": "92a92c15-7560-4996-a4d5-39252fd0b435",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fa070d6f-3c74-41ed-a9ec-c7ebe9ee3e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a767f9-e9d4-4a1c-89f8-6264c1699fda",
        "cursor": {
          "ref": "965120a3-b056-4765-ace5-da540d40cf10",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e33fc685-f7e8-4fa2-bb8a-ef234d5f16a8"
        },
        "item": {
          "id": "93a767f9-e9d4-4a1c-89f8-6264c1699fda",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4c863b24-7e50-47a5-a70d-e9fe61be81c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbd1e0e8-0491-42e3-b7da-45a4fb2833b1",
        "cursor": {
          "ref": "9a543e44-6f55-4310-9e0c-ba6d1caa3fd5",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "623eb658-5ed0-4fcf-b08d-acfd8a3e757c"
        },
        "item": {
          "id": "dbd1e0e8-0491-42e3-b7da-45a4fb2833b1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "78459eaa-affc-4b01-8712-07393c96b372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "439c5a38-f560-4f34-bee5-7c97b4cea71a",
        "cursor": {
          "ref": "0b3de630-ab49-4407-8cbf-76eaa5fdc012",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "844ed2aa-146e-4a98-8247-004b5aa08de4"
        },
        "item": {
          "id": "439c5a38-f560-4f34-bee5-7c97b4cea71a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f58124dd-a277-4a23-893c-db99ef6af622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636bdac2-9477-4526-b617-0b82a856748f",
        "cursor": {
          "ref": "b6f2210c-4a45-4bbb-bf28-f5247a692ef7",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1997331d-4456-49f1-b5d8-a036d3b891c6"
        },
        "item": {
          "id": "636bdac2-9477-4526-b617-0b82a856748f",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3e5e86cb-78a3-48bc-96f3-087eb2631745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f844bf0-acf5-4679-a9f6-e367b9cf71fe",
        "cursor": {
          "ref": "857cbb53-f446-480c-bef9-07607cac1a8a",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e64be2a4-b24a-4f25-b957-45d8d1514d2d"
        },
        "item": {
          "id": "2f844bf0-acf5-4679-a9f6-e367b9cf71fe",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d6f38d61-4fbb-4f44-9dce-775d6334b8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443185b5-eeee-447e-a5d9-319fa163d2d4",
        "cursor": {
          "ref": "6fb8f4bb-a1e7-460f-81d0-d00967936cef",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2618ea70-1f94-4825-ae94-a8f66beda11d"
        },
        "item": {
          "id": "443185b5-eeee-447e-a5d9-319fa163d2d4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f82ac810-560d-4805-801d-45f6a80ab15b",
          "status": "Created",
          "code": 201,
          "responseTime": 544,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "783a4557-1759-4178-9641-6b2762e40b12",
        "cursor": {
          "ref": "b7e2d006-1f0d-430d-836f-3727ea40ba22",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4151c739-68f1-4be7-af25-f12efc2f0388"
        },
        "item": {
          "id": "783a4557-1759-4178-9641-6b2762e40b12",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "84a579ac-e840-4dc9-a820-b3f29aa1b2aa",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1bfbea20-5ec6-4c0f-be68-9f6e394ce81d",
        "cursor": {
          "ref": "226102e7-91d6-4241-9cb7-9610cdd3f7dc",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b3c239ac-01d8-427e-a693-e8f74583cb10"
        },
        "item": {
          "id": "1bfbea20-5ec6-4c0f-be68-9f6e394ce81d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c8980b45-cdf9-44d8-bf1b-d91b4676d692",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e810edcf-8249-4521-987a-a2c4dddb4c31",
        "cursor": {
          "ref": "86d22e1a-098b-4f25-9853-cb822dd4bdfd",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "26d36f06-596a-4f47-952f-1be69f510dd3"
        },
        "item": {
          "id": "e810edcf-8249-4521-987a-a2c4dddb4c31",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6b3029a1-adeb-48cc-9e8e-e42c0aa930bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ac01ab-16c3-48c8-a5a0-cbd1be9ea7df",
        "cursor": {
          "ref": "ec1d8688-b013-4cfe-8338-c896a0e29c33",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "926d0daa-1029-4dde-9de5-104b615f539b"
        },
        "item": {
          "id": "98ac01ab-16c3-48c8-a5a0-cbd1be9ea7df",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cca0f466-50da-4245-800d-31662c8cf1b4",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "15b6bc4e-69f4-431c-8539-0ccccc45726c",
        "cursor": {
          "ref": "2765dbab-db97-457c-a60f-4697a1331cba",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f6004fd6-dc04-4b74-b44f-cd9a2f092234"
        },
        "item": {
          "id": "15b6bc4e-69f4-431c-8539-0ccccc45726c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "80310c44-5cb0-44f0-b596-48207945e62d",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4bdf5c4a-5908-4d41-8a2c-92f74ddfb3b5",
        "cursor": {
          "ref": "8cd316cc-3c36-4c03-80fc-7748d3bbf81c",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d483a5d5-7c8f-4997-bdad-2c339e3a174b"
        },
        "item": {
          "id": "4bdf5c4a-5908-4d41-8a2c-92f74ddfb3b5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "60a36fb3-3ac4-454a-9aaa-0255573c0d94",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "3a7fc1f0-e393-4c5e-8923-0374ca9db9ed",
        "cursor": {
          "ref": "76f2ee5f-6140-4238-8e86-239a5d1bb3c8",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "99735888-e9d4-4a2c-a44d-bbda6bf63f6b"
        },
        "item": {
          "id": "3a7fc1f0-e393-4c5e-8923-0374ca9db9ed",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2fc77220-3d99-4484-9263-bb70a4f9bb77",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "70d4e8b6-baa5-4161-9c72-d5d0471848c2",
        "cursor": {
          "ref": "bfd8f7c8-09c7-4cf0-b766-eeb106d41a2e",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ba3e0d1d-6ad5-4a71-a95d-2ce8140ba03b"
        },
        "item": {
          "id": "70d4e8b6-baa5-4161-9c72-d5d0471848c2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "305665dd-0619-4104-937a-7798cfd91639",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ff2cd2ff-5926-458e-8b33-b9acd4f80b44",
        "cursor": {
          "ref": "5e13ea2c-ea4b-408f-b257-edb3ce2e28e7",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "af3dc82f-8207-4f3a-b745-851784aa10ba"
        },
        "item": {
          "id": "ff2cd2ff-5926-458e-8b33-b9acd4f80b44",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cfa81aa9-7708-4b4e-98fe-3c9fa017c66c",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "701389cf-ac4e-45c0-8e83-a24fa47a6f0c",
        "cursor": {
          "ref": "18a55082-f8c0-4315-9d6d-9ef1e9c91726",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "013f037b-9748-46a2-9762-a00bb65d9bb3"
        },
        "item": {
          "id": "701389cf-ac4e-45c0-8e83-a24fa47a6f0c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "504b68b9-c805-4a42-b60f-e2808849aea1",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d7485d36-1034-4e2c-b386-0a8ff1a28218",
        "cursor": {
          "ref": "5c6c8881-0b59-4de4-ad33-fd96ea0702f0",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "89a06b71-8ff7-4450-ba98-b5b21ab6f56e"
        },
        "item": {
          "id": "d7485d36-1034-4e2c-b386-0a8ff1a28218",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a9f19a0e-64be-4bd2-b8bf-df27a6703696",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6090cbcf-e372-44a5-8f2c-baec50016906",
        "cursor": {
          "ref": "bb624164-f7e4-473a-9638-5c71a1ebfdaa",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6074896a-420c-45de-b7d9-69750cad315f"
        },
        "item": {
          "id": "6090cbcf-e372-44a5-8f2c-baec50016906",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "15983d7a-d1b0-46f1-a910-53807cf9cbf8",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3a77b452-bdd3-4d2c-bd79-7bfab3b5725f",
        "cursor": {
          "ref": "cd146d78-7476-4c2a-a7b0-558bd458d0ed",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c0d88698-9fbe-4367-accf-6522252d68be"
        },
        "item": {
          "id": "3a77b452-bdd3-4d2c-bd79-7bfab3b5725f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "36b7157a-9b0e-4fe5-b88a-c4fcf303678a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89cac49f-eed6-48a2-b1f1-e7061e887b0d",
        "cursor": {
          "ref": "0cdcd984-1fe7-4493-9c46-eed447eabe78",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "89e53fa8-1e14-47ef-bbcc-981d45de880c"
        },
        "item": {
          "id": "89cac49f-eed6-48a2-b1f1-e7061e887b0d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "eeb0e7a2-d24b-4405-b94a-25de1cd57268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d790bdb8-beac-48fd-a059-475a86a16563",
        "cursor": {
          "ref": "00cd7a4b-c594-4bcf-b7ec-fc64e28c8da7",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "91d1a2bd-da98-4465-998b-05b254fc2210"
        },
        "item": {
          "id": "d790bdb8-beac-48fd-a059-475a86a16563",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "425f4635-649e-4562-bd5b-5fa0e8a904b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dcf6a95-c218-4148-9bed-beeddc3dfdf5",
        "cursor": {
          "ref": "d49689a6-43cc-474f-9384-738e5b694ab7",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "af61de75-1962-40e8-a6ee-9959c2142cb0"
        },
        "item": {
          "id": "2dcf6a95-c218-4148-9bed-beeddc3dfdf5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "979b09d2-c63e-4be9-9816-44f6587b76c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabeb829-7a72-483e-888e-2795f736ce7d",
        "cursor": {
          "ref": "c408cdec-3b52-4024-9c1c-3c412633d7c3",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2f163b66-fc97-4c40-a85e-71a1dc7df112"
        },
        "item": {
          "id": "dabeb829-7a72-483e-888e-2795f736ce7d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7db0e302-5e98-4a73-88db-5e5e5944bd86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7b27da-6a5f-4520-8985-69659f9f1da1",
        "cursor": {
          "ref": "df786f0e-7325-4c55-a3a2-455ee8fe2708",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "91c82f28-dafe-499d-8047-6b26f055c602"
        },
        "item": {
          "id": "eb7b27da-6a5f-4520-8985-69659f9f1da1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9930dc57-7248-4caa-bbc8-4e3ab34cb5e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01facd60-d91f-490a-9ce6-499496e85e6d",
        "cursor": {
          "ref": "a10a4d96-f886-44fc-9909-47b85efe7e93",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ddc1b223-4355-4e29-8976-70e1316f5a08"
        },
        "item": {
          "id": "01facd60-d91f-490a-9ce6-499496e85e6d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "eb778a84-885a-47b4-9f04-cf1bb2d0ecb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd70d39f-9a53-42c9-8c4c-2a077f216bee",
        "cursor": {
          "ref": "aac562d9-0678-4173-9ea5-2a765e3a1ff7",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "66104a1f-94cf-403e-93f7-cbcbba41a36a"
        },
        "item": {
          "id": "cd70d39f-9a53-42c9-8c4c-2a077f216bee",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "91c0d6cc-f27c-4d0e-8ad2-56157a196d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "965a6d83-9b23-4b8c-9342-971ee1e057ec",
        "cursor": {
          "ref": "f9a621ee-3098-4848-b68b-a27c918a2274",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b7e39d97-254a-4574-b72c-c7689356dd83"
        },
        "item": {
          "id": "965a6d83-9b23-4b8c-9342-971ee1e057ec",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "51c9a55e-ef39-46b8-9bc2-9cdc0b1ff5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74cc837-eaab-464f-b58b-28283a8227b2",
        "cursor": {
          "ref": "4cb37bb7-241e-4829-b073-b909a2c1db4b",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0992c02e-efce-420f-8f3e-b3549304b494"
        },
        "item": {
          "id": "f74cc837-eaab-464f-b58b-28283a8227b2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e6d9d35a-9128-4ef6-a767-9b624dd6da47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2b2f5b-8891-4d20-be91-fffc9f1eccf3",
        "cursor": {
          "ref": "1087ac90-ca9e-4c9b-a7d7-232c272b6519",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "dbd92602-4e85-4439-8e68-d9222d0a52b8"
        },
        "item": {
          "id": "fb2b2f5b-8891-4d20-be91-fffc9f1eccf3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c41403c2-d3c9-4ec4-8582-3913e0ae326a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251880c3-c698-41b5-a26c-b2fbb74bb709",
        "cursor": {
          "ref": "ff09e9df-a060-49f2-bb27-a04a90a4d464",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1c173440-3a78-4038-b3d0-98175409cde2"
        },
        "item": {
          "id": "251880c3-c698-41b5-a26c-b2fbb74bb709",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e51ebca6-ecd3-4c24-b345-6db538b0cc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e84875-4a78-4cb7-96f9-a9f91743a617",
        "cursor": {
          "ref": "ae71af06-dfbf-4a39-95c4-2eba99593365",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "42426e8f-03b1-485e-828e-09dced488e71"
        },
        "item": {
          "id": "43e84875-4a78-4cb7-96f9-a9f91743a617",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "da5126ab-7ea4-48e1-b921-9e09921acd8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca17910-2dcd-4a1c-9cc8-9eef04acc3b3",
        "cursor": {
          "ref": "c32999f7-f597-45f0-a577-50c56711b060",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "3b87fc67-d83c-4680-a0e7-a19d85cca082"
        },
        "item": {
          "id": "dca17910-2dcd-4a1c-9cc8-9eef04acc3b3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0371c7b7-081b-4f86-a68e-f79732b0ea33",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "642fc05e-3d9c-4f40-8679-787484a5e561",
        "cursor": {
          "ref": "15f01570-25de-44d2-a2e1-8462e467793c",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "61f7d9a0-f3fc-490a-9251-88743310eecf"
        },
        "item": {
          "id": "642fc05e-3d9c-4f40-8679-787484a5e561",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "33812a36-6235-4833-8608-3a0fff8ac2a6",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "99524429-153d-43b0-a11f-c82d58ba79fa",
        "cursor": {
          "ref": "3a60f484-22c2-4828-98ef-71302aa4cfb8",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7b31272e-8561-491c-9840-75a05504a050"
        },
        "item": {
          "id": "99524429-153d-43b0-a11f-c82d58ba79fa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0931ca07-0cd4-47ca-9cd3-8f5c4c027b5b",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "ba1216c0-4e62-42f6-87eb-c945e2f46e76",
        "cursor": {
          "ref": "95bb748e-6b1f-4655-ad5e-ecde778e9aba",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d8936a89-99f5-4bc6-8007-b472f9d0a5e5"
        },
        "item": {
          "id": "ba1216c0-4e62-42f6-87eb-c945e2f46e76",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c30289d7-b8ea-439a-8a6b-e0c10747d2ea",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "21b69396-f13e-4f02-bae7-1345a34e3c87",
        "cursor": {
          "ref": "fae8fca3-f11a-475e-8a4d-9a084debbb31",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "06d99eaf-657e-4e17-94c6-7af0a70fb1d9"
        },
        "item": {
          "id": "21b69396-f13e-4f02-bae7-1345a34e3c87",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "75ce5434-c498-4a1e-8874-5a6d0ac0ee62",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d0f62be3-2884-4214-a1b5-b956c60271c4",
        "cursor": {
          "ref": "38fe28b2-b46b-4471-b464-75180e5b80c1",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "87314692-6202-4994-a891-80b566a8d2c3"
        },
        "item": {
          "id": "d0f62be3-2884-4214-a1b5-b956c60271c4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "84738791-4923-4099-8873-5071e8c59967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5608d6-c57e-40d7-8780-253dbb1472df",
        "cursor": {
          "ref": "39b078c3-b7c4-4f33-a061-9aa85fcadb10",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b9b71307-64e6-452a-9e05-35360aca303f"
        },
        "item": {
          "id": "2f5608d6-c57e-40d7-8780-253dbb1472df",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "68ae443d-adf0-43ca-9345-d3366a2dedeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ca1cb6-ba2f-42af-bd81-4f33f6010d63",
        "cursor": {
          "ref": "5ef58a00-8d25-4c60-82a0-896529a93a3d",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "69a824fb-dddf-44e6-a2f0-3257c3ed2358"
        },
        "item": {
          "id": "44ca1cb6-ba2f-42af-bd81-4f33f6010d63",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0d767a20-0840-4a1e-a438-f0e3a24d580b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760bfd1d-543d-46fc-98c7-7d6a77f147a3",
        "cursor": {
          "ref": "90e6bb70-a4c6-464c-b07e-1cc501f2010b",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "55915f87-c7d8-44e2-a1c3-043da3e526e9"
        },
        "item": {
          "id": "760bfd1d-543d-46fc-98c7-7d6a77f147a3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a354b166-9ba9-48ed-aaa3-d8f3a65cef6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae54b3fc-5c28-4387-8ce6-d059c711335a",
        "cursor": {
          "ref": "7673ad06-2b89-4936-a359-901dceb30b83",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "db22c37b-4d8e-45fb-a5e7-eb4ae2c163cd"
        },
        "item": {
          "id": "ae54b3fc-5c28-4387-8ce6-d059c711335a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "96605638-9e52-4fa3-b3f5-a059ccbb4ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34451e35-7fd6-4329-9831-cfbb4d3142f9",
        "cursor": {
          "ref": "7948881e-bb13-4a0a-9343-56f7fe0a37d5",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "513a3a60-0722-4e51-a257-3e7054fafc4c"
        },
        "item": {
          "id": "34451e35-7fd6-4329-9831-cfbb4d3142f9",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f305e47c-40cf-4b66-a124-3f4ef6215b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ebb5a0c-c3ef-42c4-8118-9f0df9ac703c",
        "cursor": {
          "ref": "1752a4e0-663e-4545-8ee9-1328a07046aa",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "df2bee7c-2288-4351-ae50-f70107cc657d"
        },
        "item": {
          "id": "3ebb5a0c-c3ef-42c4-8118-9f0df9ac703c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f7945282-c18f-4240-8111-1de8e126c299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f261eebf-56f3-4837-a962-bd8a4c26b6f2",
        "cursor": {
          "ref": "ffe33b66-88c0-428f-9b8f-fcdb54542638",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "469119a5-55fa-4cee-8503-b5f6f9addf99"
        },
        "item": {
          "id": "f261eebf-56f3-4837-a962-bd8a4c26b6f2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0f33b660-7d6c-425a-bfde-6a050c7d7d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2471238-5ae9-4da2-ad1a-20b6bcd3f88b",
        "cursor": {
          "ref": "6449b0ef-02b0-4951-80eb-451d9283a2ea",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f810663a-0926-4836-b249-4661bc51511e"
        },
        "item": {
          "id": "d2471238-5ae9-4da2-ad1a-20b6bcd3f88b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "98a45837-918e-408a-a0ee-695afe855eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8a37b0-1f30-4c6e-bdaf-90f710e50150",
        "cursor": {
          "ref": "0fcff514-d787-4214-bb66-9ac0a1c58fb6",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ede7899a-bd99-4ea3-9a60-0a3efaf12f0e"
        },
        "item": {
          "id": "6f8a37b0-1f30-4c6e-bdaf-90f710e50150",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7a73980b-0e2b-4036-820d-758de491616e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad573aed-d144-47a8-af6d-48c2dba2ee56",
        "cursor": {
          "ref": "79e269a4-dd7d-43ed-bfa5-918379c0cb84",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a8563398-130d-443e-9099-aeb097a95f73"
        },
        "item": {
          "id": "ad573aed-d144-47a8-af6d-48c2dba2ee56",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b70dbd5b-03e0-432c-9c74-74e726eeb4dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de2644f-3c19-4f5c-86a1-f19672bd39e5",
        "cursor": {
          "ref": "647d8a86-30b4-44f8-9d3d-3a58cd528309",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "79705e3e-051d-4aee-a182-671d03b36469"
        },
        "item": {
          "id": "6de2644f-3c19-4f5c-86a1-f19672bd39e5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "0baa94c3-d7f0-46de-8460-f59ffcbe97bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d532ee-26d0-409c-b864-7d6601392d49",
        "cursor": {
          "ref": "49d57a08-af56-486c-9619-323488d62025",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8a60b327-0bdd-4026-b3ea-a68bc5b508da"
        },
        "item": {
          "id": "28d532ee-26d0-409c-b864-7d6601392d49",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "788c4d30-51c8-45eb-86dc-8ebe64b51b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17ab191-b0e2-4bea-923b-9d188dc208c4",
        "cursor": {
          "ref": "4d220c14-5fcf-44c7-a16b-6189d64b1544",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c7de65f8-02ef-4be9-a9b0-cc512ba1feff"
        },
        "item": {
          "id": "c17ab191-b0e2-4bea-923b-9d188dc208c4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "851e37d9-6ff3-425e-b6eb-e5ea8af9a398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24331d0e-c399-4a6a-ab3d-4d03442faf5f",
        "cursor": {
          "ref": "d6721e50-3cfd-4d95-b7c9-a6f176a88d47",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ec6f9f6c-c9d8-43c2-bb1c-aed9f89797e5"
        },
        "item": {
          "id": "24331d0e-c399-4a6a-ab3d-4d03442faf5f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "dc24fd07-3600-49c2-b0be-4e06c22b767a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca60f572-e260-41eb-bcae-ed1a305c33e1",
        "cursor": {
          "ref": "b21a6232-5ffd-4934-9113-4281ebe2aa35",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7bd108da-b188-4ee9-b92d-4823bab4ed20"
        },
        "item": {
          "id": "ca60f572-e260-41eb-bcae-ed1a305c33e1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6243b4c2-0b49-4c9e-a8bc-7c6653f7473c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fd4d9f-5e90-464b-af11-811be2af9c86",
        "cursor": {
          "ref": "372d28dc-f8f6-4b1e-9f50-e33cc9ce8e87",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0d0e198e-fd00-45f6-9bda-66a7db6f8bc6"
        },
        "item": {
          "id": "f9fd4d9f-5e90-464b-af11-811be2af9c86",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "12fc61f7-6c5c-49d5-a461-67df8974c712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08484119-a949-40d0-aab9-0d72c3f222d8",
        "cursor": {
          "ref": "87159503-18ba-4831-b406-38a52a3ff1b4",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e23e184b-a1ca-463f-bba0-23b3d0161bba"
        },
        "item": {
          "id": "08484119-a949-40d0-aab9-0d72c3f222d8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2aa90a03-828b-40dc-aa39-7ec89aa4bf64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550ec972-0058-4690-bf2b-097bddbace75",
        "cursor": {
          "ref": "0f416c15-3340-4415-84d7-207720b939cd",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3c49cfc7-bc16-46cf-bb2f-e6996ad15cab"
        },
        "item": {
          "id": "550ec972-0058-4690-bf2b-097bddbace75",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "52a55306-462d-43de-9bd9-6c0c289fed36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df97085-b8f2-4322-8844-6a95382b37b7",
        "cursor": {
          "ref": "32b4a4e0-de2a-4721-9a92-982d9dfaac4a",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "293d990c-397e-4630-8d55-adb6acc61a4d"
        },
        "item": {
          "id": "5df97085-b8f2-4322-8844-6a95382b37b7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3c91feef-5301-44c9-97f6-21fb82ce1e9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8abb492-ddfa-4b36-bf72-4550ee622bb5",
        "cursor": {
          "ref": "4b23733f-a876-41a0-aa38-ce9d30ae494b",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "03b57cdc-6e86-4d6c-b6c3-8cd7b166353a"
        },
        "item": {
          "id": "f8abb492-ddfa-4b36-bf72-4550ee622bb5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c464ad30-16eb-48a2-add7-463c850e7183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb58ef4-c6d7-45f4-9ce9-1e7892646e16",
        "cursor": {
          "ref": "339c8a32-1d9e-482a-bcd7-04c564bb6271",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "37eb456a-c9ae-4c76-b11a-67ee384d690a"
        },
        "item": {
          "id": "ceb58ef4-c6d7-45f4-9ce9-1e7892646e16",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8b977177-6719-4152-bf87-af68e241742d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc4192b-46f3-48b0-803d-631db4c9bf20",
        "cursor": {
          "ref": "8610618c-cfac-4fbe-a293-01c05d96ca72",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "35d9e65f-e114-43ca-abe3-661c463187d2"
        },
        "item": {
          "id": "4dc4192b-46f3-48b0-803d-631db4c9bf20",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9a50fef2-556e-4e32-a861-9ebc4d3e838d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b59d3d-f20c-4284-b2ab-79d14b0d08c5",
        "cursor": {
          "ref": "66b74f02-e0a6-48bf-9e5f-d9024326aec8",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2986e1d2-3e8b-4689-a15d-09ff84b83c42"
        },
        "item": {
          "id": "76b59d3d-f20c-4284-b2ab-79d14b0d08c5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e910da24-e26f-4054-9513-93edd50eb5a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03ce852-2703-4ad4-9c32-82576af67deb",
        "cursor": {
          "ref": "59c159ef-7100-4f4e-8de3-28baf884ca0d",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "696660ad-9651-4a2c-b517-2d70bf5cdcdd"
        },
        "item": {
          "id": "d03ce852-2703-4ad4-9c32-82576af67deb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d1961d13-51f9-461d-81bf-eab4bbfb96a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5de5c9-9620-4618-9582-3e58eecdc016",
        "cursor": {
          "ref": "28cfcce7-83da-451a-bcf6-938c890e2b49",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0e0622f4-ad20-49b1-ae7b-ef688d6bb341"
        },
        "item": {
          "id": "bd5de5c9-9620-4618-9582-3e58eecdc016",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5e9b85ea-b0b0-4c9a-ace1-18d934f844ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69fde715-cdd8-4a09-9077-ecca305e407b",
        "cursor": {
          "ref": "a55b4702-f968-4aac-9f0c-877dcfe6d177",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bb9796e0-b567-4b09-a550-ef3be6199a9a"
        },
        "item": {
          "id": "69fde715-cdd8-4a09-9077-ecca305e407b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5c7914f1-cd24-4184-b5f1-c88160bc1c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869ce9b9-5486-4ddb-80da-3b7b0ba6ef04",
        "cursor": {
          "ref": "a5241177-37d6-4d10-a775-a61e9541d693",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a4e2efda-e602-4a79-8655-cf67fd7d09e1"
        },
        "item": {
          "id": "869ce9b9-5486-4ddb-80da-3b7b0ba6ef04",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "14500942-e2d4-45ea-843f-54f0a3f08f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "395ee15f-e205-4cb6-86d2-562121735548",
        "cursor": {
          "ref": "75af7c43-cf56-4166-b7dd-708c06301232",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "fb7d0fe7-ed1d-43d3-b546-94f60c8ad657"
        },
        "item": {
          "id": "395ee15f-e205-4cb6-86d2-562121735548",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "473166da-1cde-4d09-b815-e124480ec6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e09587c-e3e3-4f96-ad69-743dae89c8dd",
        "cursor": {
          "ref": "216658f6-bdd8-4b56-8b02-10fc936b2566",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5bdd7a69-14a1-4f20-923b-e7a3bd625251"
        },
        "item": {
          "id": "7e09587c-e3e3-4f96-ad69-743dae89c8dd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8dec0660-a0ec-43c3-b127-7e1c3175a641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2673dc4-7817-49a7-a9a0-60e3753aa505",
        "cursor": {
          "ref": "85e2645a-5f87-4542-8f3f-ab1585822dca",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "642b3041-5589-4740-a7ef-d090c72db2e5"
        },
        "item": {
          "id": "a2673dc4-7817-49a7-a9a0-60e3753aa505",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "344c228c-e261-43ed-a803-f6e1c577d537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289cf235-903b-49e1-8800-f5444c486364",
        "cursor": {
          "ref": "686dac15-9fcc-44c0-b8f9-006117903436",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "971b2402-f77a-4509-96c6-0cf6fcca7c7b"
        },
        "item": {
          "id": "289cf235-903b-49e1-8800-f5444c486364",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8e7eacb9-7ca5-4389-9e0c-d675307b7b00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24bb428-bacf-4a27-97fd-d0119cc39569",
        "cursor": {
          "ref": "b302d5c2-bcb4-49eb-bc64-42e6193a4255",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8eea10a7-0368-4f6d-a858-aa38ba13fc8c"
        },
        "item": {
          "id": "e24bb428-bacf-4a27-97fd-d0119cc39569",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "1e6ddf31-2288-44b2-bbd2-84f4771e326a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9cbe6ea7-baff-4f12-b8ff-d574097136a9",
        "cursor": {
          "ref": "9a15e287-ea4c-4bce-af82-4a7fa7f1277b",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "74260f95-c4e7-41d0-ad3a-cdd079ffea0a"
        },
        "item": {
          "id": "9cbe6ea7-baff-4f12-b8ff-d574097136a9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "25a49c27-6425-47a5-b3c4-3987ab81de15",
          "status": "Created",
          "code": 201,
          "responseTime": 413,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0eb60e-57f4-4594-8c28-de8f18a98287",
        "cursor": {
          "ref": "44e0dfe2-4543-45de-a8aa-21ba7bc7be69",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c48870e6-c494-48ee-aab6-d8e280fa99f8"
        },
        "item": {
          "id": "aa0eb60e-57f4-4594-8c28-de8f18a98287",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "286f295a-8be8-4494-a4a8-fea2981c6086",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "058928f8-9233-428c-a560-fd4216143dea",
        "cursor": {
          "ref": "d31715ed-1ad3-4b0a-845f-1e60dc3947f5",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "999978a1-e176-4b3b-843e-ea2d44a86bf9"
        },
        "item": {
          "id": "058928f8-9233-428c-a560-fd4216143dea",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3601a58a-93d0-47b2-bb1e-9f5ba5dcb20f",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d3453a-4939-430c-9776-8fe8689425bc",
        "cursor": {
          "ref": "22daf130-13c6-4bcc-bc72-299051a1061b",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "88920145-657d-40a0-b007-66d236f51a70"
        },
        "item": {
          "id": "b0d3453a-4939-430c-9776-8fe8689425bc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fa38c467-72f3-4f30-92fa-0d3385f3dcc4",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4fc3e1d-5484-4f13-b37b-2bceb28581f5",
        "cursor": {
          "ref": "7393377c-4d0e-4bba-be97-e8352efd1d9b",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d5183951-c7a5-4cab-a33b-6c6a697b747b"
        },
        "item": {
          "id": "d4fc3e1d-5484-4f13-b37b-2bceb28581f5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "56ed9475-2861-4427-9f9b-bd5b1a485428",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-04T00:35:35.527Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-04T00:35:35.527Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "68a1f53d-eda2-40ef-b0ec-181f11a1728f",
        "cursor": {
          "ref": "71ff4b2b-d9f6-4f19-b855-3ae03c671bc0",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0a93c065-622a-4839-b50c-515b70d596ea"
        },
        "item": {
          "id": "68a1f53d-eda2-40ef-b0ec-181f11a1728f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0d893d2a-b291-40c4-b326-d966223c310b",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9f71a4-3441-445b-b269-4e02581a895b",
        "cursor": {
          "ref": "05fce0a6-32e4-4db7-a88d-4667bf719322",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "82c2ea41-cca6-40f5-802e-e50b7217a231"
        },
        "item": {
          "id": "1e9f71a4-3441-445b-b269-4e02581a895b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3e6bf55d-af9b-453f-a3cf-530f0de039d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60cbd684-aebf-4f8b-9038-811067355be0",
        "cursor": {
          "ref": "e3fdfaf4-becb-4ff1-9e44-b7bfbd0bd7fe",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9b3b1219-2ffe-4a4d-9b74-f737edd64bd0"
        },
        "item": {
          "id": "60cbd684-aebf-4f8b-9038-811067355be0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b6e2c009-0931-40bd-8eda-f4f5b962707e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce7516b-fc8c-473b-9203-cf028f68c3f7",
        "cursor": {
          "ref": "6d520c47-a3d2-413c-9ec9-39fc06b2d2e5",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f43905b9-65e4-4bcb-8285-b0e61d5f0d27"
        },
        "item": {
          "id": "8ce7516b-fc8c-473b-9203-cf028f68c3f7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1f60b6cb-7491-46a7-af7c-af22f49e7426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1efffbb7-8f35-4755-bd65-33e4086d5d08",
        "cursor": {
          "ref": "41c8605c-02a6-4b51-823c-7713a6b69252",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d518c536-ef5c-4209-8ccb-8ff36d8f08fa"
        },
        "item": {
          "id": "1efffbb7-8f35-4755-bd65-33e4086d5d08",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ec398459-1760-4a2c-b507-1d488b38e12b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4195922e-cc65-4531-aae1-e0f3f90d8ec9",
        "cursor": {
          "ref": "6e72372e-9b04-49c0-a6c9-b62d2896e39b",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c9295266-0172-4aa2-9b74-60086ac8f3ca"
        },
        "item": {
          "id": "4195922e-cc65-4531-aae1-e0f3f90d8ec9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a76d97cf-8313-4eea-b52b-8f0f82d41a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a408986f-46dc-4d19-9b05-db752292cea8",
        "cursor": {
          "ref": "711736dd-3acd-46ab-849e-b4ca56e72285",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e988c522-a140-481c-941a-28571f2502a5"
        },
        "item": {
          "id": "a408986f-46dc-4d19-9b05-db752292cea8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "833cc09c-d20b-4ba6-827e-2095b25b9345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa8b51e-09c0-499e-ae02-4d7226f19770",
        "cursor": {
          "ref": "3a604b45-3b77-4cf3-a3d3-41b805344ab7",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "76ee1520-c73d-477d-993a-b45127fbdcfc"
        },
        "item": {
          "id": "4fa8b51e-09c0-499e-ae02-4d7226f19770",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b914233e-99e7-4c59-b498-ff3cb9dccf48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9369f122-e740-45c7-ba6c-b31fb00e0a6e",
        "cursor": {
          "ref": "53895d13-043d-4db9-9c0e-9a856dad7b2d",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9900de61-fa94-41b5-b7da-32a2dd9cc263"
        },
        "item": {
          "id": "9369f122-e740-45c7-ba6c-b31fb00e0a6e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2783bdc8-93bd-4f15-bdde-9feb0b106a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014ecd96-9496-4535-ad91-1e0be9e70e2d",
        "cursor": {
          "ref": "1bfa3029-95c6-4c19-9e6a-30364ade48f0",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "13e39c72-a119-4d20-94a9-a3f15aa42546"
        },
        "item": {
          "id": "014ecd96-9496-4535-ad91-1e0be9e70e2d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d86ca05f-eda2-442b-bb7a-539f64450933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49142a4-7124-4a7e-b9d4-1dad6e16e0d7",
        "cursor": {
          "ref": "fe1385ef-e7bc-45c6-9611-212789722943",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "59342b28-c68a-4a1a-b04e-6432a84e5596"
        },
        "item": {
          "id": "f49142a4-7124-4a7e-b9d4-1dad6e16e0d7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "41562b08-a71d-414e-8f70-f20a153eedca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11069421-c1fb-401f-90b0-b0469c3ea7a1",
        "cursor": {
          "ref": "6c210e5c-59b1-4d3c-8252-5e805f36ce88",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a08fdd6d-a2b1-4804-b201-aa0f4ce6d367"
        },
        "item": {
          "id": "11069421-c1fb-401f-90b0-b0469c3ea7a1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3a0271fc-f879-4112-9985-e365fb5541e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da50969f-f6d7-4d4b-8c3b-c3a56916d002",
        "cursor": {
          "ref": "41b1cb61-4b66-409b-8c5b-aaef3237662a",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b0cd4130-3b64-403e-810f-9e2227b87c8f"
        },
        "item": {
          "id": "da50969f-f6d7-4d4b-8c3b-c3a56916d002",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c819f730-c6ce-4718-9e68-ecacab442915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19765f5c-1477-421a-8565-02b159493fd3",
        "cursor": {
          "ref": "c0de551c-4064-4e18-8041-147d08f443d2",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7a48bd17-2f52-4254-98e5-837ab19f4c3c"
        },
        "item": {
          "id": "19765f5c-1477-421a-8565-02b159493fd3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "690e77d0-7a21-47cf-9e30-d6def2702127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e26f2e-8eea-4110-a884-b0a24bc9641c",
        "cursor": {
          "ref": "8bf95d47-dba7-4a40-9f3d-5240f65c0b2d",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6a877f68-3981-4054-8aeb-a8292f741fd0"
        },
        "item": {
          "id": "71e26f2e-8eea-4110-a884-b0a24bc9641c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6e55fdf6-68ab-437d-8713-1314767a2bf3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f976859f-a7ad-4971-9d28-6f0bf47ef075",
        "cursor": {
          "ref": "7abe6029-4623-445d-af51-f30ee2cf49b1",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "23a21b48-29b7-4fe6-ae5b-01dc01b9d769"
        },
        "item": {
          "id": "f976859f-a7ad-4971-9d28-6f0bf47ef075",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "625bfb65-f20f-4b72-85fa-b2f74661ca49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373e7f22-dcc3-49f5-b5e9-e352f8120d28",
        "cursor": {
          "ref": "0fef24bb-117c-45ea-9d7b-885676ae2bd6",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "55716d6d-e183-4241-bf58-1bd2b195e64a"
        },
        "item": {
          "id": "373e7f22-dcc3-49f5-b5e9-e352f8120d28",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "371b9268-854e-4402-bbe7-f10e98c553da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7af9cd7-a307-448d-b7d7-e14787f1df8e",
        "cursor": {
          "ref": "411c1123-3442-43c5-ac49-163a0f119aa4",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9f88d574-46f0-4b10-a32d-4104fb04ae44"
        },
        "item": {
          "id": "e7af9cd7-a307-448d-b7d7-e14787f1df8e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5c28848d-b787-45a6-9e64-b7d5b7a724dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a2c972-36ab-436e-ab40-6b676ddbc65c",
        "cursor": {
          "ref": "bfa20920-859d-4b4c-a9a2-1d6abcbbed26",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5eeb671e-9085-4383-b0ed-c481c4e97137"
        },
        "item": {
          "id": "c0a2c972-36ab-436e-ab40-6b676ddbc65c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1012b954-c263-4d86-a8c2-4c485f33f36e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516590dd-26bc-4551-ba44-850cd80868c4",
        "cursor": {
          "ref": "c90cb295-0c3e-4166-93b6-da7d368e64d5",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8e0edbbe-03d6-48ae-a245-b0527cb35615"
        },
        "item": {
          "id": "516590dd-26bc-4551-ba44-850cd80868c4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "72ab325d-1764-46fd-a93f-eea03a129f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e34a046-9e16-410f-82d0-e3a957d1d459",
        "cursor": {
          "ref": "5e9cfec4-1a71-40fb-89b1-9192c5b0d278",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "f7a58fa3-28d7-4786-bc0d-c8176100bd7e"
        },
        "item": {
          "id": "1e34a046-9e16-410f-82d0-e3a957d1d459",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fede0dcc-441f-48ee-b230-bc60f1df8aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da257707-29cb-4732-a16a-028ae8fc1472",
        "cursor": {
          "ref": "c0ca0b5d-03b4-4fe3-87da-657e9d291313",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "feb79817-b3d3-47b0-bd30-d5a7ff3594a7"
        },
        "item": {
          "id": "da257707-29cb-4732-a16a-028ae8fc1472",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fbeab8bf-f612-4b2b-8301-3490c18fac50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab949ed-7f31-436c-81ee-8d87a33bf45d",
        "cursor": {
          "ref": "7849f825-206a-4fd2-a3f7-2ccd66e88c35",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ea51d775-d44f-438b-8094-16c0d8873594"
        },
        "item": {
          "id": "4ab949ed-7f31-436c-81ee-8d87a33bf45d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "299102db-18ba-4e31-a491-30d6a8364782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4760e620-df36-4455-a9ce-e446292493db",
        "cursor": {
          "ref": "b4d2911c-95ab-4bd3-986f-31504c167fc0",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3fec4cf1-90b1-44d5-81bd-a30e7efe16fe"
        },
        "item": {
          "id": "4760e620-df36-4455-a9ce-e446292493db",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "79b21288-5087-4cbf-af19-6fa8d6a3e2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b46776a-209a-461a-b954-b3476335d443",
        "cursor": {
          "ref": "eb5bc552-ec67-4cf2-a38b-3cbfb69b7dce",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "78c3c7db-f18d-45c2-a4b2-66bbc27d0db2"
        },
        "item": {
          "id": "7b46776a-209a-461a-b954-b3476335d443",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "63fd5e75-2bdc-4828-afd8-2687b798d392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6853ee4f-f61d-45eb-ac78-a234609a9966",
        "cursor": {
          "ref": "6f9301ff-b6ca-4627-829f-85908ae88a95",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "70226e33-29e2-4d04-ae6f-1a57a91836b9"
        },
        "item": {
          "id": "6853ee4f-f61d-45eb-ac78-a234609a9966",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8a335dbc-d220-4ba2-a3f3-5c09f9758e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639a0797-447a-4957-8a9d-38b2c5e0cddc",
        "cursor": {
          "ref": "7b8621cc-dd89-4e9f-a756-44f1e236f6d5",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "23617c24-e4ed-4586-a75c-38c21341291d"
        },
        "item": {
          "id": "639a0797-447a-4957-8a9d-38b2c5e0cddc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "54bf174f-0378-48ac-9bad-a6e5ecb3a206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7355da-c033-47c6-bd22-d1c4ebcd47af",
        "cursor": {
          "ref": "32d492ee-6143-4ddf-8dd9-3fe1585d94f8",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "faba778a-e4f8-4cfc-95ff-fdf709061994"
        },
        "item": {
          "id": "fa7355da-c033-47c6-bd22-d1c4ebcd47af",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "28724c60-e8e6-4c8a-a086-c849c6e479ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db8e688-3708-4c2d-ac36-e4a4ecb89686",
        "cursor": {
          "ref": "caae7170-fc35-4e25-852c-63c69cf7147c",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "66b0cf87-ade8-480e-b8d1-2dd6ac997d93"
        },
        "item": {
          "id": "7db8e688-3708-4c2d-ac36-e4a4ecb89686",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1d948059-2d00-46fc-83c4-d622f1b5c978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4f6b50-dbde-4b7d-b612-954c72fe4704",
        "cursor": {
          "ref": "46918baf-d5b5-4b85-b8ba-97f9db5a3b89",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6fdadab8-8e8f-4226-9049-01d7b2463128"
        },
        "item": {
          "id": "1a4f6b50-dbde-4b7d-b612-954c72fe4704",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "648fdfeb-37b8-4a49-a259-7ca149745521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee88617-8266-4908-acf6-b9088ca5c565",
        "cursor": {
          "ref": "a1dcbcd2-b0ce-4206-854b-480514983aec",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1ba3d44d-942e-479f-92da-8211d89881e9"
        },
        "item": {
          "id": "1ee88617-8266-4908-acf6-b9088ca5c565",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c09a66bb-f973-49b8-8adc-2856365dadbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10795819-bc53-44bd-a3bb-0fbfc35d0bce",
        "cursor": {
          "ref": "4f6dbefe-1f13-4224-afb0-0ddd25ab6bdf",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0680504b-fd02-4614-a33c-682eec7f2193"
        },
        "item": {
          "id": "10795819-bc53-44bd-a3bb-0fbfc35d0bce",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "294eb277-6dfa-4792-b715-7212de982029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a99786-4bb7-47dc-b249-05a00a622338",
        "cursor": {
          "ref": "254c0b65-490e-4f3c-a126-fa6347576783",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "984e3cde-402d-4dad-a849-1cd07287967a"
        },
        "item": {
          "id": "c8a99786-4bb7-47dc-b249-05a00a622338",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f14fc20a-2bf6-44b1-b4a3-18f073ce2397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0e1c15-0f4b-425b-9d89-7617630f90f2",
        "cursor": {
          "ref": "4ef08759-fd7f-4ead-b11e-ce4cc8bb8702",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "815a0f46-941d-4a66-a2f1-49c7bc879fe2"
        },
        "item": {
          "id": "3b0e1c15-0f4b-425b-9d89-7617630f90f2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8dfe06a5-1a91-4301-bdc8-a277f95df196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccfd89e9-f7aa-4f4e-83bf-9406490c28ea",
        "cursor": {
          "ref": "bd330f0e-ff00-42de-b3c5-9ab0f8b7d813",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0f97837e-0114-463d-885f-c80bbb8ddf61"
        },
        "item": {
          "id": "ccfd89e9-f7aa-4f4e-83bf-9406490c28ea",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3b7a267b-9922-40e1-957e-9ab32f231fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee904bd4-a7f4-4bf2-91c1-a0073c9d1461",
        "cursor": {
          "ref": "ae57457a-51ee-4be3-a966-c7b751e36f68",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "384dc068-1bed-4360-850a-7844fc88aa38"
        },
        "item": {
          "id": "ee904bd4-a7f4-4bf2-91c1-a0073c9d1461",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "14965539-69a1-4c99-a46f-bf666fbeaf9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea71221-ab09-4673-a434-25d573d968aa",
        "cursor": {
          "ref": "f633073b-acf8-470d-abd1-6aa4417fcc55",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2f80fa19-b984-4bea-b7e2-c78f0e87ef84"
        },
        "item": {
          "id": "fea71221-ab09-4673-a434-25d573d968aa",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "16e669aa-8604-4848-a186-d7dd18ba65c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c258a0f-dbaf-4958-982e-aff6afa3a65d",
        "cursor": {
          "ref": "2acaff94-0af9-4707-a7d2-4c9ce97176f7",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "545e2816-f7e2-44ea-a357-66e058ed0cd6"
        },
        "item": {
          "id": "3c258a0f-dbaf-4958-982e-aff6afa3a65d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2acdcf93-a881-4bbf-a2f2-cd34245f17dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7058fc3-843e-495b-9187-be22e9975493",
        "cursor": {
          "ref": "3cd61aeb-fbaf-498c-a25f-6a3d36281bbc",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c9eeda9c-135e-4ddd-b35b-89f5a5e8d7ae"
        },
        "item": {
          "id": "a7058fc3-843e-495b-9187-be22e9975493",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ed297c96-fec4-434f-aafd-720ce543cfba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64b2eda-1b82-4e16-9cfe-9c17ff6063af",
        "cursor": {
          "ref": "2d662324-a026-421d-b916-54338480776f",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "21ff5e96-6a16-468d-80ec-84d77b1d65b5"
        },
        "item": {
          "id": "e64b2eda-1b82-4e16-9cfe-9c17ff6063af",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a65e4665-f087-46c2-a699-30f6ea5b7e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56bce920-a3dc-4f01-921a-50aea17f95c7",
        "cursor": {
          "ref": "7f2f46ad-ca47-4b77-8f6d-406870760e23",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e031115e-d4ce-409d-9c6e-a5f2eb4812ef"
        },
        "item": {
          "id": "56bce920-a3dc-4f01-921a-50aea17f95c7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0384f39c-3e18-45f1-9636-368e6ae58f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f25850-e148-4a56-a4b9-75a8bd400f06",
        "cursor": {
          "ref": "2a1aa96d-c219-40f5-967b-2b10585d649b",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7508d7df-0998-47bd-b678-101fa02c75b8"
        },
        "item": {
          "id": "52f25850-e148-4a56-a4b9-75a8bd400f06",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9b0d5751-dfd1-453b-9430-7df2bb3c47e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1835148-a857-4c93-8646-a0944a1150b0",
        "cursor": {
          "ref": "026004dc-2f6f-43d8-a87e-6edd304990fd",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8f5dd494-7635-46a3-bd0a-cad7e6ea7b92"
        },
        "item": {
          "id": "a1835148-a857-4c93-8646-a0944a1150b0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "3849a21b-2d1b-4629-a4c2-80cd94f846ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb492e79-a68f-4269-8054-6088363bd437",
        "cursor": {
          "ref": "435f78e7-40cd-4313-93ce-a7dbfee80367",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "63e73e11-2f9a-4b39-9c32-7fe91fa23712"
        },
        "item": {
          "id": "eb492e79-a68f-4269-8054-6088363bd437",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1c69b88d-b3eb-4311-8fd7-10eb17b11ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15851855-6b40-4e9d-b774-b629e76739e3",
        "cursor": {
          "ref": "0fd940d4-c331-4576-971f-0a45cae22722",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0831575a-c28c-4ad3-b2ac-11f860776741"
        },
        "item": {
          "id": "15851855-6b40-4e9d-b774-b629e76739e3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ef4e6098-e544-4aba-a4d4-583d565cd097",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "e3143300-2536-4d26-a99b-534702b715a7",
        "cursor": {
          "ref": "f6ee3916-cc4f-4ec3-8a1a-38616fb7e58d",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f171a058-ace5-418f-ad73-72a9e96d0fc8"
        },
        "item": {
          "id": "e3143300-2536-4d26-a99b-534702b715a7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "390bc62b-7d20-4840-8dc7-1bc78977f0d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354e2f70-17c6-422f-8d8a-c9c170452057",
        "cursor": {
          "ref": "bd4f33e0-85e0-4159-976f-214f00ebcef2",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fcf8ae6a-ac9d-4df5-a3dc-27310cd6a95a"
        },
        "item": {
          "id": "354e2f70-17c6-422f-8d8a-c9c170452057",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "592715ce-db1c-479b-9088-770b73ff605c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9781b56-dc5b-449a-82da-6026c0ea1a3b",
        "cursor": {
          "ref": "bc239835-7aae-461a-99f9-8d4ad935d16b",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ae1b7525-e2b0-4439-98a4-34924d0fc1db"
        },
        "item": {
          "id": "d9781b56-dc5b-449a-82da-6026c0ea1a3b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4a7119a4-41d3-4e8d-9159-a30cd8fbc7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84ba10d-76a5-470f-a4b8-95a3888871cd",
        "cursor": {
          "ref": "a5bd4439-9cdd-402c-997f-32832203038f",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a154eb92-d5e4-4ee5-91fb-5c77f642a628"
        },
        "item": {
          "id": "d84ba10d-76a5-470f-a4b8-95a3888871cd",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bcd6766c-3bde-4161-a65e-febb2e77e89f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b0fb6d-4aa9-4543-850f-c5c3cb49f435",
        "cursor": {
          "ref": "312bbbb6-87b2-44c8-8801-5040a63f099f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "784764b1-de02-4de5-b983-c3b8cc299a39"
        },
        "item": {
          "id": "49b0fb6d-4aa9-4543-850f-c5c3cb49f435",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2c881fc3-27f6-43e4-a9e4-a2c650303ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16ce8a7-8088-4b18-ba0c-dfddfad65003",
        "cursor": {
          "ref": "06b41a84-2dbc-4749-af43-ec41aa2e2594",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ae42c2e4-7e44-4456-9f98-9d89aeefc74e"
        },
        "item": {
          "id": "c16ce8a7-8088-4b18-ba0c-dfddfad65003",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9b148a96-550d-4f81-8721-b10a5cb03805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bab58ab-379b-499d-b24f-2b9045a1c74c",
        "cursor": {
          "ref": "eeeb5aa0-22c8-4b81-95c5-3438bd73462f",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a45ba8e7-45db-459e-8c60-74a1e919299f"
        },
        "item": {
          "id": "8bab58ab-379b-499d-b24f-2b9045a1c74c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9d7ffe24-aa06-44f8-b3b0-17d16508d70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0a4a77-e31d-476f-a26d-212a118bf5cd",
        "cursor": {
          "ref": "f621f4c9-f8c9-4738-bdfe-0eae79650bbf",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "bd38a555-2d5a-4494-8738-f97dca3ec3e2"
        },
        "item": {
          "id": "ce0a4a77-e31d-476f-a26d-212a118bf5cd",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f457006e-7b47-45f0-83ec-950b3181dd4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5bb099-3603-48c0-96b5-a7e0cdd3c731",
        "cursor": {
          "ref": "3b637690-b3b7-44c4-a2dc-09fcd20d0518",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9f622a83-1517-42bd-a8c3-30950ab62b3e"
        },
        "item": {
          "id": "ec5bb099-3603-48c0-96b5-a7e0cdd3c731",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "dc13f957-7096-4a7b-84cd-b938b4344ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6946c5-4646-454f-9481-f89b0914387c",
        "cursor": {
          "ref": "842c5aaa-ecb2-4f0a-9730-fbb55d064af0",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c5ea02cf-4490-4e35-8fb3-4edebc458d8c"
        },
        "item": {
          "id": "5b6946c5-4646-454f-9481-f89b0914387c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fc047dd8-d8dd-467d-bb83-2368a198cbcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ccdc4b-2c5c-4eda-b26d-82de03b06b71",
        "cursor": {
          "ref": "c1dfcd50-a288-4868-8e99-eea8163a415a",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4709be9b-1f93-432b-befb-c57276c862dd"
        },
        "item": {
          "id": "e9ccdc4b-2c5c-4eda-b26d-82de03b06b71",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4af53914-14c9-4a33-9883-3d6635db1145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f60e5da-8d80-4338-a745-e68ea34de2b0",
        "cursor": {
          "ref": "335923bd-790d-462c-8983-789fe52659e4",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c26b8fad-59fe-4b78-a87d-505db749bad6"
        },
        "item": {
          "id": "4f60e5da-8d80-4338-a745-e68ea34de2b0",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0973ca89-d5de-4d88-82e7-53019da7c3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcaca9ec-d611-4181-9ca5-4016a144cbdb",
        "cursor": {
          "ref": "fea8c119-a9f6-4340-b8e2-8d8905f1f895",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ea9b7a91-a422-44f2-b5c2-70624f23a02f"
        },
        "item": {
          "id": "dcaca9ec-d611-4181-9ca5-4016a144cbdb",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ab5e2576-da7d-4995-848e-620d57d473da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933f5573-b159-44a4-b2e3-3508078f9115",
        "cursor": {
          "ref": "941bcc87-52c6-445e-bd4f-31eb59993d3b",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4581522a-81ef-4b64-a6de-3b15727c661b"
        },
        "item": {
          "id": "933f5573-b159-44a4-b2e3-3508078f9115",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "59c7700c-03ec-4cd3-8f8e-70d410181485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51defd4a-c2e0-455b-a4f2-aa8277eaf555",
        "cursor": {
          "ref": "f8ef89f5-bad7-48d6-8f62-54b93648f3dc",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "9a9f2180-0f51-43b9-b911-adfd71dded39"
        },
        "item": {
          "id": "51defd4a-c2e0-455b-a4f2-aa8277eaf555",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "faeac26a-228f-408a-beb6-f9e6bc136620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5469a2d9-f000-4080-957c-881a229a3478",
        "cursor": {
          "ref": "cf04c50e-aa0f-42b5-817e-55d98743e705",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a449d439-8161-4d8b-852f-ee0e2e99d326"
        },
        "item": {
          "id": "5469a2d9-f000-4080-957c-881a229a3478",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2e834438-9270-4ce5-8b58-59d13cf0e9e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c3d1ed-7e4e-4417-a965-0b5e7cc2f9e5",
        "cursor": {
          "ref": "71fdd693-0fd7-4990-96b0-53a49bdd84a5",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "dfb679b0-c7cb-4048-becd-087ca90113ad"
        },
        "item": {
          "id": "63c3d1ed-7e4e-4417-a965-0b5e7cc2f9e5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fdb85901-d26b-4b5d-9ece-03bbc0e707f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157d70ac-f2bb-4e5f-a18c-e2cbd9b74f3b",
        "cursor": {
          "ref": "4bc38a8d-21b8-45df-a5ae-e566242afddc",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "21f5047b-b9f2-48dc-ab43-e09f50517a72"
        },
        "item": {
          "id": "157d70ac-f2bb-4e5f-a18c-e2cbd9b74f3b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "68a3658a-cb86-4543-a2ad-a20f8a1ba61a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09051a87-23f9-46f5-9e95-76ebb1b37b3f",
        "cursor": {
          "ref": "1755bb13-a6bd-4941-a898-0bcacf803382",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "86b95122-2ce1-4698-bfa0-35a83f7d55c5"
        },
        "item": {
          "id": "09051a87-23f9-46f5-9e95-76ebb1b37b3f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "87e213f1-86cb-4a36-9d4c-9d344de2dcd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a6af0f-bcb8-4532-89ea-873a6e437b27",
        "cursor": {
          "ref": "2b458619-ddbe-4c53-8cf8-4f5fe4ee5358",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "533f2d50-a5f9-44b3-a233-2940e3d59cde"
        },
        "item": {
          "id": "60a6af0f-bcb8-4532-89ea-873a6e437b27",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a4f2b8fd-cec5-4e88-90d7-7c48cbe09650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968235f5-873c-4faf-9359-c5204a78e601",
        "cursor": {
          "ref": "65833334-272b-4e1a-b943-1232dfecb452",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7c2644cd-199b-4714-ac1a-3e9ee84efb10"
        },
        "item": {
          "id": "968235f5-873c-4faf-9359-c5204a78e601",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "35aa8fa0-ee94-4603-8f04-4a3e194abc97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebf60a3-971b-4579-b389-794fae3bc4d6",
        "cursor": {
          "ref": "1d4855a7-50dc-461b-94bc-ad06a61f8ab2",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1bf351d2-26f3-40e5-b98a-8b8d295a0b72"
        },
        "item": {
          "id": "0ebf60a3-971b-4579-b389-794fae3bc4d6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f5109534-b9ba-48be-a09a-8313776668c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab447df4-48a3-4050-bb5c-5c077e831161",
        "cursor": {
          "ref": "6575e727-8c9f-477b-a69b-77c2da82b9d7",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0c1076ed-45f0-4595-80cc-b921be587500"
        },
        "item": {
          "id": "ab447df4-48a3-4050-bb5c-5c077e831161",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b2ca94f0-4287-4936-8ed5-c9d61d406492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e7aae05-ae2e-4ee3-acd3-8381b2819ae5",
        "cursor": {
          "ref": "24123b48-eb4d-45bd-add3-bced58d29ae5",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c2497f02-94cc-4dbf-8efd-51ad5e10dadd"
        },
        "item": {
          "id": "1e7aae05-ae2e-4ee3-acd3-8381b2819ae5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2ca16baf-204e-45c5-a10d-144d87a044c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a339d6-288a-4544-9355-c1dad88dc45d",
        "cursor": {
          "ref": "8f0476d3-a603-467a-9128-2a05c332e57e",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0a2b72ea-fc42-4d49-a08d-760927e0dca4"
        },
        "item": {
          "id": "71a339d6-288a-4544-9355-c1dad88dc45d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e342c257-7e0a-4e5a-b5d4-eb646a6efdb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4f4f97-882e-464c-9f20-e157a88148b3",
        "cursor": {
          "ref": "21743317-6c88-4706-a6fd-3f810026ea91",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "33c24250-b06a-4b72-b9e8-1a28592d8e56"
        },
        "item": {
          "id": "7a4f4f97-882e-464c-9f20-e157a88148b3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f9b5c1b9-e693-4516-acfb-5648f532ecf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88787f7-a023-4bd6-b9e5-f869e112b5d3",
        "cursor": {
          "ref": "02585c58-9598-4d7d-9de3-e0b21e01bea9",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2c4f72f9-c6fa-48a0-baf6-40693367c71e"
        },
        "item": {
          "id": "a88787f7-a023-4bd6-b9e5-f869e112b5d3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cd60c295-e616-4aef-ae99-82fbed0a14c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1d6b15-9090-463e-95d5-01ae86b3a96b",
        "cursor": {
          "ref": "79b3e6c3-012a-48c4-b464-d8b8af51cff2",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2d1090c4-1e93-4d13-a59d-5d6114e603b9"
        },
        "item": {
          "id": "6d1d6b15-9090-463e-95d5-01ae86b3a96b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "87359446-04c4-4822-8b63-748472e578ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36036711-49e2-48e3-9b9f-1d1ba4246909",
        "cursor": {
          "ref": "623848a4-643c-4582-ad29-38e60ede9fce",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0ea49694-caec-4902-af55-e58df044f13d"
        },
        "item": {
          "id": "36036711-49e2-48e3-9b9f-1d1ba4246909",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "cf620023-6181-440f-87fd-fe690186a09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51d358a-28c3-4504-b4bb-18dbf95fd196",
        "cursor": {
          "ref": "61f13c48-901f-45ca-b63a-2fe89669c96c",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5f37cab9-33cb-4c6a-afc3-277dc8fb43c4"
        },
        "item": {
          "id": "b51d358a-28c3-4504-b4bb-18dbf95fd196",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8aecf129-7056-46b1-8bf4-6c34668b3c30",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "574ce579-c1d0-401b-8340-b217c8e6be1f",
        "cursor": {
          "ref": "e494a1fa-5778-43fb-a5dc-56a111466709",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4adcc50d-5224-4e72-8ae1-ec6f08182fe5"
        },
        "item": {
          "id": "574ce579-c1d0-401b-8340-b217c8e6be1f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1a6b0cf6-e51a-434a-af3b-46cf23c96206",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "24de4b0e-e6f6-4718-a4e7-9bd82452da4d",
        "cursor": {
          "ref": "4bea5d38-d040-4edf-bff5-d58ac640a94f",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ecdb8865-1d04-4f84-95da-e6b3e1107e1d"
        },
        "item": {
          "id": "24de4b0e-e6f6-4718-a4e7-9bd82452da4d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8352e60f-1509-4589-9fe8-8bf21d2395e6",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "94de1299-462e-4cc9-9682-53b383bba3d1",
        "cursor": {
          "ref": "b8a7f942-0008-488e-8d70-29412c0d5ba0",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b71a8947-617b-45d8-9396-1d3820f0dcb6"
        },
        "item": {
          "id": "94de1299-462e-4cc9-9682-53b383bba3d1",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "980146e1-63fd-4359-add4-891bd8a7036d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8736fe3-7f75-48af-8d13-8acaa31f154e",
        "cursor": {
          "ref": "a7ada9dd-247b-4268-a6a3-817c46e9e297",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a695a253-29cd-4b3d-adb1-ac5ed004d9f7"
        },
        "item": {
          "id": "c8736fe3-7f75-48af-8d13-8acaa31f154e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0c14c07b-1a60-40ff-b50c-6d4de985c4bc",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "e247b729-5aa7-4a7f-9282-72a3970ea685",
        "cursor": {
          "ref": "9f71c009-0e1c-49f2-8e5a-e14aaa6a9914",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a0f5ca7a-3cae-40ce-bad3-07bde2e99848"
        },
        "item": {
          "id": "e247b729-5aa7-4a7f-9282-72a3970ea685",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6853a0a5-b03c-408e-a26a-27ec4846513d",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "b78aa57f-50c9-43e1-82a6-e3ef4c72349d",
        "cursor": {
          "ref": "6036e4f2-8b42-4472-b847-4c384c514f1e",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "84461796-0a27-4529-8bd3-4edf6669aad3"
        },
        "item": {
          "id": "b78aa57f-50c9-43e1-82a6-e3ef4c72349d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c466bcbf-7e66-46c5-bfbf-8410092eba21",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "4be48154-89f2-4a7c-8439-390b150378ef",
        "cursor": {
          "ref": "e8a92491-2ae8-49dc-b644-34e60a56dba7",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "aeae81ef-d5d8-4255-a106-e8ec591a933b"
        },
        "item": {
          "id": "4be48154-89f2-4a7c-8439-390b150378ef",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1fb02c0e-9d43-4f8e-8c99-2cf1317afd59",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "b690abdb-7d6e-4e23-8349-78c78a665d38",
        "cursor": {
          "ref": "6ecc6f56-91da-4b00-8837-175037afa16a",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "04a974d2-fb31-46fc-81d0-18719303ef5f"
        },
        "item": {
          "id": "b690abdb-7d6e-4e23-8349-78c78a665d38",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "58c74f03-4754-484c-86ed-fb68b732c80d",
          "status": "OK",
          "code": 200,
          "responseTime": 208,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "8dae7125-685a-495a-9588-ceb6f3530c86",
        "cursor": {
          "ref": "356255c1-cd60-48e5-9337-cf951e1a23ab",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bc0a05d8-152a-4af7-9307-0d406bc951c4"
        },
        "item": {
          "id": "8dae7125-685a-495a-9588-ceb6f3530c86",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6eed6514-7940-424d-8efa-c65ecff814cf",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "de5916ef-b171-46cc-8f9d-c8d437b842c8",
        "cursor": {
          "ref": "409fda5b-b720-4ae8-9d17-ef0a1243f75b",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "08f1f232-43f7-4288-b66c-c8f324271397"
        },
        "item": {
          "id": "de5916ef-b171-46cc-8f9d-c8d437b842c8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1362cf2d-ab31-4ab9-821c-05ee22a861d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71778f39-c8e8-4069-ac37-38130df37aa8",
        "cursor": {
          "ref": "a26569af-2061-45a4-b2cf-2cbd060e2aae",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "03dacd0c-2661-4591-ac3f-7b07e4720ba9"
        },
        "item": {
          "id": "71778f39-c8e8-4069-ac37-38130df37aa8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2a52c448-8552-4af2-bc3b-8672052a45da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92179fb-5861-4239-8243-1d699bc4f2dd",
        "cursor": {
          "ref": "dc98245f-3836-48c3-9ec2-dfbd9c4a5d34",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b5a6ec4c-c64f-42b0-90d2-6f6689fb71f3"
        },
        "item": {
          "id": "e92179fb-5861-4239-8243-1d699bc4f2dd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ed27d74d-7270-4d27-ab91-495880e31bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d34e5a67-aba1-4564-b7a8-f7189a562e75",
        "cursor": {
          "ref": "7bb0c25b-66be-40da-83cc-ef3c6cae081f",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5513dcfe-4e3c-448f-b39f-e51efa8bd884"
        },
        "item": {
          "id": "d34e5a67-aba1-4564-b7a8-f7189a562e75",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "496e7dfb-2a5f-41c1-a189-0b7085dfccc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca05df1-edb3-4975-b91e-2570afb16d69",
        "cursor": {
          "ref": "0700465c-d0aa-4d26-9b5c-2ee5301fef6a",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "492481e9-0d09-4925-8a5a-83840294e996"
        },
        "item": {
          "id": "eca05df1-edb3-4975-b91e-2570afb16d69",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "094d42eb-c62b-41b3-8ecc-6bfaa73c7fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1addc673-134b-4d43-964c-499ab987e3e1",
        "cursor": {
          "ref": "866b0766-88f5-4bf8-9cd5-0b723b631bcf",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f3871647-ede8-45b7-a25d-5b4548c431f4"
        },
        "item": {
          "id": "1addc673-134b-4d43-964c-499ab987e3e1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a514c907-cedf-441c-a329-eea01336f08f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157e5236-d456-4612-a0fc-fa05eb2c1cae",
        "cursor": {
          "ref": "2b0799ac-1fc2-4c3a-a6fe-3c6cd629edb4",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "79d4decf-9a0d-4f53-af25-2b40ffaa6c15"
        },
        "item": {
          "id": "157e5236-d456-4612-a0fc-fa05eb2c1cae",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d71b5a12-86bb-4e55-a83c-9558d6977855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7843fba4-5017-4b41-8628-7312e94d9eb1",
        "cursor": {
          "ref": "d4b7561e-07ed-48be-8930-cae547cc6575",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "fe41e105-5882-46af-b383-6db0ae1e0777"
        },
        "item": {
          "id": "7843fba4-5017-4b41-8628-7312e94d9eb1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "da3a43d2-ad4a-4222-b606-b7d68f904bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19368ffa-7c88-4b11-a180-234c0c0a6b8b",
        "cursor": {
          "ref": "950dda2e-3d35-45e3-bb0b-d46fa2e098a2",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "81ddbae5-45bf-4d70-a449-c5f26c44d0b6"
        },
        "item": {
          "id": "19368ffa-7c88-4b11-a180-234c0c0a6b8b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b159e14e-5ac6-4044-be33-fbe1972139b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599e536a-eb1b-4da0-9fcf-9320e41c9819",
        "cursor": {
          "ref": "c4746f06-c2e6-42ec-9ce0-b3c0003aa9a2",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0aa2c2fc-6342-4171-bf46-a56ec6880756"
        },
        "item": {
          "id": "599e536a-eb1b-4da0-9fcf-9320e41c9819",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ac3cbad9-359e-4e73-a4a7-6f38db6b2844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e68916-6ac0-4afb-b939-36e1005b3ad8",
        "cursor": {
          "ref": "942097eb-22ea-4a75-aff4-95a9b0c74964",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f9917062-5020-4183-b3f7-cc416756079e"
        },
        "item": {
          "id": "d7e68916-6ac0-4afb-b939-36e1005b3ad8",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4d46a706-21f7-4f60-83e0-e13eb4f97283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcca77be-4d03-4d8c-9a1e-c11c94fa5a9b",
        "cursor": {
          "ref": "13e00531-9257-40a8-81f2-b33ab64b940b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9076e41f-d957-4855-ad06-5fd521fa48c4"
        },
        "item": {
          "id": "bcca77be-4d03-4d8c-9a1e-c11c94fa5a9b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "df84f0d9-6f21-4e0b-8b19-6e75449d1583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20dac590-ab95-472e-b81e-bf7452eb5f7c",
        "cursor": {
          "ref": "ecb0085c-b3da-40cb-8970-21784af3c36a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2215419c-509a-40e7-ad5b-ea293571c868"
        },
        "item": {
          "id": "20dac590-ab95-472e-b81e-bf7452eb5f7c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9dd4597c-b948-4335-821b-7cc8c6afdffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec93b4ef-96c9-4baa-9156-d1802c5cbe21",
        "cursor": {
          "ref": "35088c78-e5f2-420a-982a-2e5bb1fd2fa7",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b4515b54-7f45-413e-815c-33732d5435a3"
        },
        "item": {
          "id": "ec93b4ef-96c9-4baa-9156-d1802c5cbe21",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "dcd00e2c-5bbc-4ca6-b38a-3ff6f28835ab",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "913e7418-576a-4a97-92be-ecf344f153ba",
        "cursor": {
          "ref": "adad3685-c564-4c96-8fa9-fe5fa0216227",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "20aaa781-0be1-47aa-9452-2b220aaa8500"
        },
        "item": {
          "id": "913e7418-576a-4a97-92be-ecf344f153ba",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e33ee9d8-942e-446c-a707-42dfa7ff0f44",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "b55d7971-e019-4e0d-9c8f-94b44cd47418",
        "cursor": {
          "ref": "bf1c71f6-0622-4b92-9654-9ae522943dd0",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ca486d71-6336-4213-93de-97861304a3df"
        },
        "item": {
          "id": "b55d7971-e019-4e0d-9c8f-94b44cd47418",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c79b2275-dd76-46b0-a5f8-18b31cef7cab",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "69e2e3d6-1b30-4dec-aaca-8e0c9027345f",
        "cursor": {
          "ref": "4aa0588c-bf98-491f-805a-ddadbc97e128",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "dbabf7bc-0ae5-4a28-9b35-a17d565349b1"
        },
        "item": {
          "id": "69e2e3d6-1b30-4dec-aaca-8e0c9027345f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9052c429-f90a-40a8-9ed0-3346dec724cb",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "0aa96d0f-aa0c-4904-8208-b1c01d0bc7f2",
        "cursor": {
          "ref": "f28ded1d-0582-4af8-a10c-4b20be848a74",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6cdf2dd0-16b7-4b1a-a4b1-04da2ddfd587"
        },
        "item": {
          "id": "0aa96d0f-aa0c-4904-8208-b1c01d0bc7f2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4de301df-fa55-4b19-b13e-516c6201a9f9",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "e85a91bb-1f17-4d4b-a03e-a7d7b38973fa",
        "cursor": {
          "ref": "57258c17-ba0d-4111-8f07-be89b9a5ec54",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0c7de900-ab61-4316-a1ae-199b1268ec51"
        },
        "item": {
          "id": "e85a91bb-1f17-4d4b-a03e-a7d7b38973fa",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c300f45a-7b40-4f9c-bc86-96a33e5b1516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df23b980-60a3-4647-8628-140bb78bba8a",
        "cursor": {
          "ref": "5483ddb9-7b55-481b-93cb-11c732ca7964",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6c4f681c-c923-4287-ba80-58284742c153"
        },
        "item": {
          "id": "df23b980-60a3-4647-8628-140bb78bba8a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "915ab509-1889-4b95-9a17-fddd143e5585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c41e2e-6a9e-45a1-96fe-ba59a8144c28",
        "cursor": {
          "ref": "11868f88-5bf5-4f7e-9367-d6c8eb08e588",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2c369e80-8f06-4d92-a0e7-e129841d1bce"
        },
        "item": {
          "id": "17c41e2e-6a9e-45a1-96fe-ba59a8144c28",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "519ca684-5261-4e39-868b-cde0e599388e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae51357a-4c97-42da-b214-21fa746773d7",
        "cursor": {
          "ref": "28ed6d4d-5dce-4818-b4f9-5264c1e570df",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "fde28f79-41eb-41ec-8f6c-c04c9582c3ae"
        },
        "item": {
          "id": "ae51357a-4c97-42da-b214-21fa746773d7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a1d6fef6-c582-4ae7-8b12-a9af1f7700be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d575b48-46e5-4eb5-b375-dc987c077dfd",
        "cursor": {
          "ref": "c4a561ff-13ed-45cf-a037-bd85830037ab",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9aa9aa65-e766-4fab-af5a-c29fea333faa"
        },
        "item": {
          "id": "6d575b48-46e5-4eb5-b375-dc987c077dfd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "73ae7332-88fa-49cc-aac3-2a9825d16546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1393e9f2-bf19-4a5c-9b6b-245a9652dd6f",
        "cursor": {
          "ref": "98106893-18bb-4958-852a-12ba64364802",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "27e34dac-1382-4ec7-bef5-7402ad6f5ec2"
        },
        "item": {
          "id": "1393e9f2-bf19-4a5c-9b6b-245a9652dd6f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a4fdf45c-6285-4972-a555-57af80f745e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28afa48f-77e2-46f2-9af3-0d744d2eb4c0",
        "cursor": {
          "ref": "d0bbb6f8-58bf-454b-b8b3-e63f5fbf1ffb",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "21ea327a-bf61-43b5-9a64-cadf1bdcc4d3"
        },
        "item": {
          "id": "28afa48f-77e2-46f2-9af3-0d744d2eb4c0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "135aa20c-cca0-45de-94cd-2ab01bae6fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d3be5b-97b3-4ee3-82b1-092ba527dda9",
        "cursor": {
          "ref": "51074275-7f6c-4aa6-9386-f85b1a4a828f",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "51671eb5-6706-486d-b4a4-db1b80689b68"
        },
        "item": {
          "id": "b1d3be5b-97b3-4ee3-82b1-092ba527dda9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "43307d89-d8c8-424e-9280-70a74966a6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f83adc-a469-4377-ab45-db2b395e0cf8",
        "cursor": {
          "ref": "cc2312a1-218e-4c57-9f6f-637169b1e2ae",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9077ba54-88c6-45cd-acca-30502dc4b82a"
        },
        "item": {
          "id": "56f83adc-a469-4377-ab45-db2b395e0cf8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "adfc737a-fb18-44fa-b6e4-b93da1b6995c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1d8d5f-6b50-4ac7-bb0a-f842cf199c95",
        "cursor": {
          "ref": "2c0d577c-7975-41d9-943b-6c7aa1a4cd6d",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5fd2c82d-ee3c-444f-9ab2-33de0f80ec8e"
        },
        "item": {
          "id": "1a1d8d5f-6b50-4ac7-bb0a-f842cf199c95",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "725439e9-50f8-499c-a1b2-6cf08f183974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d3ffb5-1b2e-433a-a2c8-33dcd987f0be",
        "cursor": {
          "ref": "52528d4e-9a70-4ce7-923e-d6bbf06761bc",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ca929736-1917-428f-af5f-ec208e1f3245"
        },
        "item": {
          "id": "d4d3ffb5-1b2e-433a-a2c8-33dcd987f0be",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "da70bc2d-8ec6-4829-adab-98222fffb226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053d8245-d142-4c53-a54a-f89bc84a6e38",
        "cursor": {
          "ref": "50c6c7b4-13bc-41f9-839c-21a3c0b194de",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8928938d-1f49-4cc8-ae5b-088b681a3e75"
        },
        "item": {
          "id": "053d8245-d142-4c53-a54a-f89bc84a6e38",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b1ff00b4-3711-4cdc-a685-ee7c808cb11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e3b2b0-2de4-48cd-a477-972fc123fa84",
        "cursor": {
          "ref": "6bf399c3-b8b2-4e5a-b946-b5d6932bfdab",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3349208c-c39f-4dc9-9bcd-85515d13dd4e"
        },
        "item": {
          "id": "b2e3b2b0-2de4-48cd-a477-972fc123fa84",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "cf69160f-2bca-4470-8c94-a4672ad517aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb7f6c7-9246-4a44-93e0-101000b25764",
        "cursor": {
          "ref": "e907269c-734d-4f00-8cbb-989c68377caf",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "52629f89-416f-4473-84d6-a1a2cbdf9f1c"
        },
        "item": {
          "id": "1eb7f6c7-9246-4a44-93e0-101000b25764",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a9a7b3c6-0c7b-46c8-821b-836653dce1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ef38ee-1383-434e-9965-0c62a6a5da80",
        "cursor": {
          "ref": "fc4be788-ac65-482b-8f44-9c217ae1e147",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8e11a50f-95a1-4650-8fb8-5477fb297b7f"
        },
        "item": {
          "id": "a1ef38ee-1383-434e-9965-0c62a6a5da80",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6e13233b-8ca9-4f19-866d-dc9d469df978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048c152d-b171-44c3-b22d-93a773fe7493",
        "cursor": {
          "ref": "9d0895a9-157a-4cfe-ba2d-8ac3f207071e",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2b33849b-d164-496a-9e02-c86b22101b3c"
        },
        "item": {
          "id": "048c152d-b171-44c3-b22d-93a773fe7493",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "755474a3-ddce-4f7f-a024-a01d64aced90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0aaedc-e5f8-40d8-a495-0d80e4108891",
        "cursor": {
          "ref": "3f62a25b-62f2-4924-a7ed-4d4b934cb9c5",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b4361f77-adf1-450e-9a66-7eba6847a32b"
        },
        "item": {
          "id": "1f0aaedc-e5f8-40d8-a495-0d80e4108891",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "acd19eb9-3ae4-42ce-8df6-9367a147d86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e7ff1b5-5ea1-4661-8541-c14f8921f303",
        "cursor": {
          "ref": "ed871532-9c17-47de-ae1e-5aad20c01593",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5b3aa1a3-4e30-443b-b2f9-a599a65ba368"
        },
        "item": {
          "id": "1e7ff1b5-5ea1-4661-8541-c14f8921f303",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "22151b20-d58e-49ed-9bcd-aded74b8028e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1374620b-2840-48fc-ad8e-e301c9c8f486",
        "cursor": {
          "ref": "e646bca7-6881-43b5-9209-946de71b568f",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ea821f59-193e-4f28-89cd-4c724b44fa6e"
        },
        "item": {
          "id": "1374620b-2840-48fc-ad8e-e301c9c8f486",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e2845412-a648-4ed3-9372-1507684d48ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8afbb4e-9ac0-49e6-9c95-11b0bfe9ead4",
        "cursor": {
          "ref": "c4ab3ff0-d521-413a-9803-cbcde5c90568",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "92076b2d-ab21-4804-90f3-5457b200a512"
        },
        "item": {
          "id": "a8afbb4e-9ac0-49e6-9c95-11b0bfe9ead4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ac88e316-51bd-43d1-8221-a2cc48553ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa086611-7f77-4c6c-aaa9-4f7dbd66a0e5",
        "cursor": {
          "ref": "3363ded7-f0c2-4fea-8574-9a3345489b8d",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "583d89d9-8d94-4ff0-937c-03e6dbf746ab"
        },
        "item": {
          "id": "aa086611-7f77-4c6c-aaa9-4f7dbd66a0e5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "15f65324-ac7b-45b1-b8d9-022042abd7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132da4ea-0755-44cc-9d07-8a5953cc4790",
        "cursor": {
          "ref": "bc0fb3be-47f1-4e05-940d-61cefdc22632",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1e398bd3-63ba-42ee-b2c7-3261510c790e"
        },
        "item": {
          "id": "132da4ea-0755-44cc-9d07-8a5953cc4790",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dc6be69a-3b89-4fe0-b76e-ff7fce5a05aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994fdc6b-c4e7-446b-9a2c-841cd4df7006",
        "cursor": {
          "ref": "ee7c0aeb-54a8-4245-b177-f95f386088a0",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "280df6c8-c13d-477f-b36d-35f968ca6c65"
        },
        "item": {
          "id": "994fdc6b-c4e7-446b-9a2c-841cd4df7006",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ef5cd6f3-d7d1-41f1-af1c-56adec346cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34b9021-78a1-485f-8225-bd3297926782",
        "cursor": {
          "ref": "05c7fd78-9345-425c-89a4-cea6f0a021fb",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "61dbc895-d0c0-43a7-824a-93cc7e6e0665"
        },
        "item": {
          "id": "f34b9021-78a1-485f-8225-bd3297926782",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9d2b7d5f-2cb6-4e78-b673-473ae4345d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a79aec9-d017-4d47-8e9c-f1bfcc269d9b",
        "cursor": {
          "ref": "9f03f6d4-45ff-40fd-93d3-f278ea35c095",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "132daa15-ae1a-40a1-9c8d-09d91345af2e"
        },
        "item": {
          "id": "6a79aec9-d017-4d47-8e9c-f1bfcc269d9b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d179498f-b3a8-4721-ade5-e22b69c825c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc23ca08-509c-4cd4-bae7-f181c19c9255",
        "cursor": {
          "ref": "3837646f-513b-4d54-a737-5c4335b5cd3e",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6b9174ee-c3c2-438f-932f-b9efa0255843"
        },
        "item": {
          "id": "cc23ca08-509c-4cd4-bae7-f181c19c9255",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fcfe9862-77b9-49e4-b95e-5e67cdbcd013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8872691-91e2-4817-a370-45273204757b",
        "cursor": {
          "ref": "681af5e0-478c-4f46-94cc-ac9ec171230c",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f90a4f79-c7a9-4774-872a-38f93cf38b04"
        },
        "item": {
          "id": "d8872691-91e2-4817-a370-45273204757b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "35c96312-733e-43b4-9357-f5ad4904369a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e406d159-a74a-4ba5-b8c0-461c4f18d6f0",
        "cursor": {
          "ref": "d5f8a927-ae1b-4deb-8765-528fb34a44b9",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "769b9044-86c5-4aab-9cdb-f538a3958c4e"
        },
        "item": {
          "id": "e406d159-a74a-4ba5-b8c0-461c4f18d6f0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ad79672e-f817-4e6b-9b4c-8cd3f61744e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799cebbd-d219-4618-8969-d7bfb4fb62d4",
        "cursor": {
          "ref": "64386882-0044-4827-b91f-bd05390a538f",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "29b48816-042e-43f0-9680-03608d958117"
        },
        "item": {
          "id": "799cebbd-d219-4618-8969-d7bfb4fb62d4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0c20423a-0976-4792-af5b-212af76cc8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22006b8e-5c8f-4367-8887-1bcd548a55e7",
        "cursor": {
          "ref": "046878bb-1cbf-4278-af54-ea173ff8fcb5",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8c87f29c-d213-4728-9e8a-e1b865ac45e2"
        },
        "item": {
          "id": "22006b8e-5c8f-4367-8887-1bcd548a55e7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7f535cbe-3eb0-4226-8642-2bee9fc05d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b750a01-e97d-409e-aaeb-44e1fd2dfaf0",
        "cursor": {
          "ref": "887aa005-8022-4a73-bae6-903a41ed304e",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "91fb2dea-40c3-4f6c-84a6-fd1349e5c3e5"
        },
        "item": {
          "id": "3b750a01-e97d-409e-aaeb-44e1fd2dfaf0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "250ecfea-4d2d-431b-ba72-4fc00ec78b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b892cdc-3d3b-4c9d-8317-6e7690d42e0a",
        "cursor": {
          "ref": "1038cac9-e44e-429c-b73a-23ec090f53bd",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f18afac6-bafc-4ea1-aaf0-7e6f40ae05ee"
        },
        "item": {
          "id": "4b892cdc-3d3b-4c9d-8317-6e7690d42e0a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "643e5896-b143-4689-9289-dad3fb8578c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74cf3701-19ee-4c2e-82f5-7c99d0158cff",
        "cursor": {
          "ref": "0ca2990c-c268-49d0-b3c1-15ae8520ccc7",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9a7ff78b-5039-45f4-88e0-4b3ef8324373"
        },
        "item": {
          "id": "74cf3701-19ee-4c2e-82f5-7c99d0158cff",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f597b2d6-34bc-4793-a3a1-65670bbb88ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578798c3-afaa-491b-9ece-ba799775a2b8",
        "cursor": {
          "ref": "e5a558e3-4157-42fb-957d-31dd61f2d515",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cf81a8d4-dbe7-4b91-9f62-4c4bf357e54b"
        },
        "item": {
          "id": "578798c3-afaa-491b-9ece-ba799775a2b8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b7198dc5-37da-4a74-aabd-32c49a884a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a961c852-e132-478e-bf36-782806e290b4",
        "cursor": {
          "ref": "f499dfc0-a423-45f0-8a84-361958d1c68a",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c658298d-d9be-4239-9279-f1577d05982e"
        },
        "item": {
          "id": "a961c852-e132-478e-bf36-782806e290b4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8fc74b61-0ebc-42e8-a2bf-1880f78090d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721cc078-b0fa-4dc4-8371-a08740d126af",
        "cursor": {
          "ref": "18c564ef-9f34-4ee7-a58b-da6f87c92cdb",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8000c3a9-9439-428e-9503-9828157c1bf4"
        },
        "item": {
          "id": "721cc078-b0fa-4dc4-8371-a08740d126af",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a4d81aef-a09a-4781-b333-67640f46b904",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "99ffe17c-22cc-40da-bca9-a9101d225562",
        "cursor": {
          "ref": "80a36fb9-5063-493c-bea6-33a010c5e401",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "52848d3f-9f65-4f34-b1bf-e8d357911427"
        },
        "item": {
          "id": "99ffe17c-22cc-40da-bca9-a9101d225562",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5f5eb0f8-11d1-4c5d-9313-f53c967470ed",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "12861238-14e6-4d75-99a2-35ecd0ba86b4",
        "cursor": {
          "ref": "37950a75-b6ac-4269-96a9-94e32987aa6a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bd9a7718-9e0a-45fd-9837-b4a5ecec9a53"
        },
        "item": {
          "id": "12861238-14e6-4d75-99a2-35ecd0ba86b4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "27155269-34a7-405a-9f17-a1b5ce274b9d",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3478f6-674c-44ee-994b-ff04adb08485",
        "cursor": {
          "ref": "a161be27-998a-4532-8d3a-dd8233e55460",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8fdce795-aad9-4f5a-b75b-86b1d5b3853a"
        },
        "item": {
          "id": "da3478f6-674c-44ee-994b-ff04adb08485",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "23ced167-d778-4838-8ee8-ef128ff3e9cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3478f6-674c-44ee-994b-ff04adb08485",
        "cursor": {
          "ref": "a161be27-998a-4532-8d3a-dd8233e55460",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8fdce795-aad9-4f5a-b75b-86b1d5b3853a"
        },
        "item": {
          "id": "da3478f6-674c-44ee-994b-ff04adb08485",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "23ced167-d778-4838-8ee8-ef128ff3e9cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377ac0c4-392e-4fdf-8c7c-a77871f6b7f8",
        "cursor": {
          "ref": "1269a73a-2137-4968-bc60-386ae712da8c",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "11b72303-fb47-4d80-8e35-c4801c3cb009"
        },
        "item": {
          "id": "377ac0c4-392e-4fdf-8c7c-a77871f6b7f8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3ba65f4d-70a6-4259-9344-f4583d128dc2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edef5f0-ced4-40da-8c10-5e3313b3f1d5",
        "cursor": {
          "ref": "0056ae94-0e18-4504-be1e-612c7391b017",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0a4eae1b-d9f8-4fe0-bd5e-6fc5651211ca"
        },
        "item": {
          "id": "3edef5f0-ced4-40da-8c10-5e3313b3f1d5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "21341008-bec8-44e8-89f0-0597392b8d02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}