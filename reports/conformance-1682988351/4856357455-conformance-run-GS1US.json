{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5ca51523-f947-43bc-ae3b-740de1819f51",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6870953f-b35c-4539-8ecb-5bd21161585e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "23071781-4d45-4b9c-86e3-540d63be29dc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "70af4ce4-b347-4187-90a9-4f97b5477e46"
                }
              }
            ]
          },
          {
            "id": "f3e72345-f923-4837-8cea-0dc34367f057",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "368745ab-3a9a-4ee9-af87-d9e2250aabde",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "12197925-7a34-475e-8622-590951964c4a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5192e044-346c-4d0f-9334-afcfb40d97c0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "90dcad51-b0f7-4ff6-a2ce-fd23e3a06d48",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1a9ee6d6-9dbb-4762-8d73-7972ffd2a260",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c70ff35-7a88-4723-8399-fa551805d6fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5abdd05-ae79-4729-be49-ca8b6edee2f8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f1cac382-b2c5-47a8-9532-00d3b4e6dcac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bec7ade3-ff09-43e5-b5b7-50ebdacf4372"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9d6fd95a-f01f-444a-a1ee-60868008bb27",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e1d141f5-1056-46e3-99b2-a99a6fa238be"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e56d9a7-4090-4537-9cf6-a59003499c42",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "657c8b87-0c27-49dd-abc4-9d0e5b2fb9c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76e0c3fe-54e9-4371-9ebb-fdc10364a382",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5a030fc-dd67-47d3-97dc-f63dbee2a6b8"
            }
          }
        ]
      },
      {
        "id": "c8e0bb0c-1131-40df-b718-6d16da734fdc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4f3b5aff-641c-4b48-95ce-2113ca36b147",
            "name": "Negative Testing",
            "item": [
              {
                "id": "38e7f041-b26c-4ab4-b885-159edd870ba7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "69d65a51-4f41-4ff6-99b2-386755a09d84",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb732474-43d2-4f52-9d9e-bdaec721170f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16125304-6398-4c68-98db-7abe2bb24f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b7c847-04bb-4fb3-827b-6d6ab2d79db0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0296d2e-fa16-4369-a4ed-4feb8f89183e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79658821-81b1-43e3-a8db-b86ea532f388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d117b9-577b-4e51-b909-fd8512b75ccf",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe495b1d-b69a-40a1-ad54-bc5abd2e6148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7202db35-0a73-4ccd-9e9a-7f1c67a6e9ff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f5ae86ba-5273-47d2-9260-ac74eada99a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e435fe4f-a4b1-4cb8-a43d-7c4c4b78cf5b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738d30d9-6b3b-49c3-a748-d58eeedda7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3faf5ea7-be64-41ba-81b0-c9cd35335f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2c3028-8847-48b4-ac8a-9422933a5ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a3e65e-40e7-4d10-9e21-f41dbbc96aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f86c61-fb02-4c53-b424-f14f57d988ce",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3737b5-1d66-49e0-b1f5-80841ab41cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2dc6838a-4add-4c25-8cce-90c4eb125ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40af91c1-9730-4221-8bd4-d18162fa8ed1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "6ef9bba1-4f15-4fc5-b328-a5f064730643"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "173f3fb2-de76-4f10-b06c-f2253b74b27a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5384e551-71bf-4909-a718-820c01fc82d3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6092648a-80f7-4849-bea6-402df0723c53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "827a0a47-15b2-4bab-a081-0ee4b907f3ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3e737578-1c05-4838-a44c-f766ea8247fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "cae8785a-f4cb-4a5f-8683-fe304b82aabb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf21bc1f-de48-4ab5-97c2-cec9b41fc46b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bdf2eeac-24af-4376-89e6-1f22b66f23b1"
            }
          }
        ]
      },
      {
        "id": "4f4c34b8-3b63-4f68-961c-a398fb879324",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d4332a28-aefa-4739-8398-3252f384fbe7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "96dd1372-c8e7-40dd-8727-9a73b821aed8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "87b602c0-c551-4857-b121-85488c072ab0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb335f2-c4e8-4549-bc41-f9fa150c3633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea106222-f600-4e4f-8068-ed2777c2a823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223a5855-6db1-4b97-82f8-276d2ed1cf9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "697b45ee-9b64-431d-bb61-c189a7b6e54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de7ece5-7f2b-4529-92f2-6730ce66c533",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0574dea-4fba-4b4a-bbb9-feaed0a88e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f2c9988-391b-423b-a515-b39fe1335057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b1cb44-8397-4fd5-9061-6617be30dbad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79f4f82c-f49b-423d-b657-c4cec6b7c0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b5ce36-c250-49bd-9a81-4d569b13cd56",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2102ee-384e-4240-94ab-943f81a25619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee62fd6-c351-4ffb-90c2-1dfb984c4e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31cc31d2-7a33-43b6-b465-fad5ab58745b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6598c44-5c3e-4139-a449-50c4acb3257c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "464d970f-7560-419e-967a-8b1b64d73da2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8873d3-0257-40c3-b0d6-33849bcf0b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f82018a-357f-4ad5-b13d-bdd179d10bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6d42e6-2d9c-4b2d-919b-25298485491f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64222f59-67d2-4331-a727-02aeb54bb282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd4874a6-1140-4397-b865-d17663a82af3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15dc429-bddf-40fd-b9a5-dc86f5a220a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db03b904-52d1-4d07-b595-e29f1d0d6fea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a13dbd-5b9f-4363-ae3b-0ae3be8e6cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7cf8e00-54e5-4a13-a7f2-6bdc1a865acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33b8a0b-d5ef-42a2-af27-c57c72f545e0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2004dcd-4b68-42ba-864a-fbdf57f8fb86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9a0d217-c154-4f71-b14c-6c79d65d1542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b57a93d-9604-4de7-a089-bb57e7d31d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "943a7a6f-58dc-4e83-94ae-83ca7025b3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8139ac-fbf4-4927-8005-735379067123",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b9ea66-53b6-4e69-87b8-3e4ecc6e451b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe60e2b-2586-40a3-a76d-215e6bcd7829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28fc6493-907d-4e09-a891-5bb6ecb36a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0742c33d-0bfe-44e2-8468-15b0fb0f332d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fc181b-a7e6-4c88-9779-5a760c8db3b4",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb19910-d530-4c0e-a4b3-4ddf84523fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745ff71f-34aa-4c2b-a265-19065afc931d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591a38d7-1082-465a-a46b-c3ec9c472e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d4a8bc7-a83b-43d7-9fe7-ce4123073a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3922765e-2bbd-477b-b240-db3d0950f21c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0454e5e9-97a8-4232-9550-23c8a5aaa71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd1275a-91f5-4289-beab-6e0284d5ebd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7c63e8-c6f7-4cdc-99ff-e1aa88156f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0c51491-4d99-46c7-b5c5-c8d342ecc033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f202d50d-010a-4ca4-bcd8-ee789ff2e18d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c447ae-088e-4293-9b4f-9f42b58f4a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55eae1eb-5685-4d10-a5bb-13205faf5beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3d4983-3460-450f-8065-29fd42ac8ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba0d9e44-4e9c-4bd0-9a38-034319acc74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce50936-cd97-4b1f-8607-846893b7672b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c2d095-6967-4662-bc11-87b04d3a0754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1318376a-1d82-4fee-bca2-46e718f899ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53400ef7-4500-4c81-8d88-1a6af204c59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4ae6a29-b4ba-4aa6-84e5-647beef82fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f6e5fb2-b1cf-48e7-83e8-65a87dcb5c60",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a057d5-36b7-45ca-9a57-3c5b2d213dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf0b351-e79b-4d31-8ba9-d51c949753ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecab5b3-6a7b-4104-9779-4cf497936886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8a3818f-e724-4f6a-b2e2-ab40ac720abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3ca1d1-7c40-4e62-8d97-3b94a198b7a9",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4d3f4a-e67e-4734-adb4-8ccfc8c8e7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0719fb-943b-42ce-b9a3-e303527e843f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf3b560-1e44-4dba-ba7d-e37f3d1b2b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26047db9-2685-4ff3-9284-59dc75feeb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7f7609-0f99-4ddb-9e04-2bab8c7129b9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2bd723-ef87-49f4-b4f2-065126e11366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc1b075-b17f-4d2f-946e-dff39d5de026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63252a9-1254-4c6d-9c9c-e845e5f1c4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "768d806b-1dea-4178-b1f8-1e675b9ca9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0aedd3-f904-4f56-9f47-f4a0463ab45d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7e4688-3fa0-4558-8b01-ccfe71486c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0917a9-9b05-4432-b1f8-72929da65178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf5f16d-8f32-49bc-bdb0-dc4325d61d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "683fc0d0-3aca-47f9-bd70-547c74d5fd47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c834fb98-9a48-4960-a09c-70347ec80242",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2bc5b7f-02c8-4207-8e4d-6ef7a5099833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5925610e-28a4-4420-8249-6bde47b0e6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c074704-97da-47d3-ac5e-3d1d379b15dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d69154a-97fa-4102-a74c-4a606dece42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29302608-3731-4887-ab7c-94af9df069fd",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee49d00-82c7-4fb6-a13d-44a9a175616d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "485a518a-aae5-4680-a868-8432d49f931c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40276eb2-db6b-4068-93ab-001475fa4705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee999430-e06c-483f-9f1f-05ec7a25a745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d6e62d-145a-40b0-b8f6-aa6e3781bb00",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5200d76d-9e19-4231-bdcc-74fc378423fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01329eff-b370-4767-8028-0a9365b97750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24755a52-7dc0-4821-9f7f-c8d0cfa1a2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7caa83a1-3c18-4c82-b383-eadf5962f19f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b460e1fa-d266-43f0-8bd8-11b7a99d45c1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34848283-e2fa-49d0-b6bb-9be9ca4ca004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a50c319-3af6-4e9f-92ea-7523d19feec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac26c40e-2c46-44da-a3f8-9159d941ad3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "49b19263-2383-411f-8ca2-07928018c060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9e3d43-0f70-40d6-b487-139097c9b5ee",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7a619e-a84a-4fe2-accd-857621b88483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ab094b-4484-415e-b4e7-1970d5874386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e78afd-bb68-40e1-80d2-df2088dd2edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "101873dd-e4ff-4cff-adfc-9a76f417e2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cee8db1-1921-4d04-b548-570d9eebaad7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b673089-ec72-4b90-ab9e-3ea4ae59bcf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e7f1c9-b8d5-4b43-909d-ff4215e661f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab9d26d-b505-4c99-88c1-0771993d4d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6804b913-8261-45ea-8810-21dc0efdff74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f1f308-5a16-4f4d-ba36-d21f103adc7e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf813d29-0e54-492a-b368-b87efb71791a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b2212b-d097-4744-80f6-2922ca95d651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d89f382-e696-4548-a9c4-511a7651b42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52e81ac3-f620-4311-9e37-e22b0400d49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c2750e-dccf-4454-887e-7d5822f68224",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d340d60-d52f-49cc-a46d-9ee1c9bba07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e70f3a5-7669-4bbe-a11f-cdc2815d5e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07f0944-cff7-445a-96af-dea731deeabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a116df5c-33b4-4d1d-a76a-850e4b6ffd2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771117d8-5f95-49eb-9c75-59859b0b5dc0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2912e566-4442-478a-8d3b-b6bc5c1575b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24abc9c-ba28-4d99-a82e-774b971986c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab11219c-0f87-4f9a-ac67-c3d55f6cf91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "14ae261c-6b60-4980-a010-6a2e988dd18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736abe72-931d-4740-99bf-7332960ea24d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2c7345-219e-491e-9ff1-8ce4f0fa00c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb3463f-f708-40ee-993f-00eb9614692b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6824c08b-85d1-4942-9667-e561a8b848da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8524a4ea-0f0b-4619-a8af-909a318b0e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc357f2f-7009-4e89-b311-36b43b8a6793",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4b9f1d-401d-4449-a3c7-66b850522a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb4b1140-e938-4064-95b2-dc24239211f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6064ed2e-4d5f-4b52-b425-f14d4dc9cc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "861fe5c9-a787-4116-9e81-54b50c62047a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c76645-2986-41d8-9a4d-ac5fe5a9dd9e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a291b568-22bf-48eb-bf6b-a075bf9842fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f36e1c-28df-4a21-b762-2ad077a44d59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7ab64c-a769-4843-acb4-d18411f440ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca863f09-335c-4c23-9b58-0dde4854cb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281c8dc6-e3b6-4215-a731-163a0ffadacc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7a5140-bb44-423f-b04f-3e49ceeed610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7beb88ff-689a-458c-85b8-e34f0a7be7b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0f4d51-fd36-4ce7-b3ed-525350a098f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca5c1c3-c723-4603-b7af-421f6c76ee80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb677786-37ab-4636-a7e3-f1c36d3e5702",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e120d64-3197-4565-8e68-e3b20092e13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab8551b4-c256-4e63-96aa-ab80b40e1d1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ec66d7-eff6-40d6-a81a-01ee074908d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "75ee8d53-c885-467f-874f-23a35361dc03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38389c32-becb-44a6-ab25-eac47375bfb8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b39a04-b9a3-4f8d-8aea-b0657a230980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90bc2382-2b28-4bba-aee1-57a16fb21dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822339f0-17df-4758-9cb9-8d0c57ee58d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4982c5dc-11c2-432c-bb80-2fc37d3cb91f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46fd2e30-fa31-4bc6-8c27-7690fd946dd1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766492a6-4166-48f3-8de8-ac7d21302067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c0b65e-b7de-42c1-8129-fed3b31c3801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9574a321-15a0-4ac5-bdbd-8f7a93a7a04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21489577-c53b-48c5-b5e7-44254c772bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f695384-8f58-448b-91ec-b4c8a991b079",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1513a097-c0d4-4114-94c2-55ef2b3e439b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b17ae3-94bf-4e12-90a7-266d33b113a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3160df-eaf2-48e0-8b7c-73e4e764428a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1989085-660e-4e47-809b-2c67150edff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44fc7b9-44a6-4cbe-b50f-9937cc7b8dc7",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95a1c6b-c38c-45b3-b782-9876f4385060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c148ae-d48b-45ab-a98c-c7f5b64ac5a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89cd8134-0c04-421b-b77c-06d1397f25d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2130c2c1-a35a-40db-b556-0a170037f6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b937c98b-c6e4-4bf5-80b4-2248e7efa846",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3301e216-12e3-48c3-b7a4-59b69479ddaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7913b879-274c-4d9c-9fe8-9405ff4d7422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510964a9-34e3-40cc-8861-30828e1672c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97f2a990-0563-4a54-bbfb-e0033489e5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3985921d-89ea-4f91-829a-d751ac2937e8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65cb19a3-eed1-4e1a-bb61-898740622949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94232da4-94fe-4c87-99dd-5b7f5897a391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e86b0c8-d464-4dbd-be47-c4fca0c37b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "892d8b7a-7ad7-49e1-9136-6174c042bbe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3601e27-32fa-4545-90a8-75fcba42a49e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9b200c-aa3b-4d08-a536-c46debf64965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91c380bc-c74f-49cd-a031-4e6de188c2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d4c28d-cf19-4972-badb-8684bc2139d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2de75fef-3839-47f6-8b16-387fb2f2df06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdef938-c4e4-4375-93d4-9af41839635c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60d34ca-a0ed-4533-954d-a7ecd3190620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f5db34-0163-4bd6-9770-e020b104e8e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1dffa0-cabf-4919-8e2e-ae0f0bc230f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c5bb2f-8f47-43d9-938f-947cfada8741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb4e3d3-9e10-4e56-892e-cfc9ac21f2bf",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc75dba-f54d-47e2-858f-ff13739ab52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a974ac9f-71d5-49ee-92d7-aa59b6bc4fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af678a19-c1d4-4e95-a679-159e11ee3fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4984772-53a0-462d-806d-7c94ddce23dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9f97d7-f590-4ce6-abd7-c38086c93df3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb8f68a-5777-45fc-a5a1-107f799a0236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d90e93-5d93-4af1-bea2-aa0994c85fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2093578a-1fbc-4e01-9016-01991060e466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "281c51b3-c240-4002-80d6-d59b4a3884b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612d97e2-4808-4eb1-a2d6-627ab5df7ed4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c97da8d-2c14-46bd-9935-c567c744e159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7f7d0dc-c0e0-4006-841c-868473a681e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c299e37-c031-403e-bad4-b5a7cd09531c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "849b409b-e1e4-4285-a7f0-5b012d68f8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e904225-890a-45ab-b32d-73d050ae23ac",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5858dd94-7832-48cb-9cbd-13d865e4d74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2f2862-afef-4cd6-8d4f-d51df979e89d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a86c5b-161c-48f7-a031-141de2984574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1108d2b-361e-4298-b98e-c07463d8231b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd93b2c3-d7ce-460d-896b-dee48db930d7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b946b5-b435-4ce8-abdb-0ed9a892bf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37b103e4-ae50-4ca5-a62e-2cae2fcd60ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac5c945-0026-48e9-b8e6-561307a3ac42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3a140421-8e51-4758-9f16-1b6d95407516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3034aa60-263e-4b65-b0e6-a866535c4a0e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19728060-a737-4202-a607-54d06105bbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0049cc28-8dfa-4ec2-b2d8-050c3223449f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708b378a-cbc0-4f38-af29-30a1e85a8834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef23e7b-a3fb-4f20-bb25-e7471ea2d7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c04f6b-10bc-49d8-b9f0-2322a3cbb0f1",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f724666-7043-4668-a5e6-b158bcd2d1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045b4a7c-f040-416e-b5a2-c9dc3c742025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8968f011-ae86-4ad9-938c-5735337e826e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "818bc0f4-3b2b-467e-b7b2-726f3e10c71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5871fe6-0653-4faa-8b2c-1a3e9c2ed216",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6447b5-8d2f-40aa-a1db-f51d3a03cc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc586c20-241f-461a-b924-0ed8238f8ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5003eb01-a69c-432b-b685-2679605c9afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "410a029b-54e5-4a94-b2c4-b4e8a13ee32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7c5d43-0107-4e97-89e5-d858396320a6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783039de-c1e2-4b40-ab78-38ea7de86b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dcf09fa-ecb2-4f57-ac2e-d877d4c4945c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b7ff2f-ffcd-4ba0-997f-827dd744735a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0e48e8e-fd8d-4c27-8a21-9a8e88efc4dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08140f1c-2ca5-4647-b935-2120397d6dc3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1759f0b-28e7-44c9-b62c-731ccd089dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84e381b-0cae-47a4-b1fb-2e873a0bcfea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f223ca-afe7-45a6-91b0-7f61188ce65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40224c0f-a306-42e6-8c96-568345fff57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afdda40-c32f-4419-8b6a-0443abdfbe34",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2c6e74-57b9-4f31-9abd-7e56cc0b70b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f59aa0e-dd77-4793-8a1c-8341119782e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d4cb98-3229-4405-be42-54f7147f1f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "71ee6983-2289-4a6d-862e-22870bb1aa0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98005ad2-cb56-457a-b2ab-cc511d42ebf5",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa82fc7-82d6-4326-8f00-85d490c31eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a796a2-1871-4f13-873d-cd133dfa8630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d125ce3a-4a64-4378-8636-a30587a70ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f2cf249-4441-4eb2-92d6-6aa3dc4fa116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68728c2-5cbe-42b5-8bb5-9925da54c4da",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6834e81-526e-406c-bcb0-73a073808780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e0929f4-dbcb-4d6d-8c9f-9158e766523b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9d3fdb-4520-492e-9798-6cbe855af0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "207a9199-611f-4dd3-84ad-b1968b763aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac34b33-14b7-40aa-acc6-c14f454a75f3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9a350a-e2fe-469f-8d8f-3e48b1133660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb1ee30-bd15-4d6b-a7de-bbb7c7ffbe77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b84580-dc47-4fcf-bda6-fda37aa0e284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "323bc521-c45b-4197-85bd-fb3f796e85f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a76c5d6-5a54-4e41-bbdf-d778bb78fc83",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db91075-5316-47a9-9d4f-35598ea82f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c31a71-bc5d-4ecf-b634-78e99ef05513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de58d751-59db-40c8-86c5-ae2e47529218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "91189f1c-475d-4952-8bc6-1579c00913ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fcb98b-1c36-4706-a053-c19f484d3c57",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ff4611-f580-4270-96b3-d5c3002a22c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bf99885-c8c6-4740-9b3b-b4684471cea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3446edd-7035-4846-b760-b1c7eddc3b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c81ccd97-6342-4498-8e4e-c6a8d9a1a872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fbd2a9-dbfc-41b9-b63e-9f3e05dc3815",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d47e283-f730-4d57-bea3-c39d0f46c8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6df418fc-cfb4-439f-b720-593a9b4bd50c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e1fa84-b7f0-4e99-910a-9beac4eef157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7daf431e-f4e0-437b-b1d5-7d1f4a810dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9324f2-a865-4991-af2d-b02c1ec61b86",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a6c33f1-73b7-4c8a-9493-4b3d7c7725a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef233ba-ffa3-48b5-a159-cc3ddaa23f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5625b4cf-6140-4cd4-aecb-8a0893190880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34412246-e64a-4181-898d-376029ca11d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156cb9be-6d6e-466b-b680-d0be4c9111cf",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8371e94c-5f35-476b-a4b3-190eb28184a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046b77ce-d354-4656-ab9e-338550e2a6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3917f6b7-609c-4193-aa06-b77538384d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b544f1e7-c191-4160-9550-cdfa793b1d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979e9426-edd3-408d-874e-504967e06d1a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89621286-096e-4c17-a3eb-db4608e87814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6d847ce-00ad-4677-bade-13558b767df8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb827b8e-414e-48fd-af66-adaedf7ade6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "71f8370c-6566-4c88-988b-028ee2f3238d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e11896-08cc-42c7-9faa-a45f7653770a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a656c2-44a0-4015-a5e8-1bf2c4557c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59e9e1e-3949-47f9-b687-103c1dc235a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62069bd5-b68d-4118-865d-450bf9e5b4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "47b9e04b-d94c-428e-a22e-a98e789e3f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bb739e-e28a-41e2-b74c-55f624e17731",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3107999a-8914-46d0-b00f-01e9e91ce029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1216a30-4fba-452b-9eb0-8566d7156d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba49477-48e9-4de5-bef1-c46ef3fce7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "09ba9f56-a867-432f-9965-b2f42be71d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9735c098-a5f3-4e26-8bc0-95ef6de8034b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71375d80-14d1-49cd-a674-fbe763bdc4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add597df-3536-4b59-85f3-10de91fbe1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec719a4-d001-45a9-bacd-57c4ed9de144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a608f24-1acd-4380-98e2-16164b83571b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccc0b379-77bd-4f25-bcbe-d5319b70e535",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02532342-3baa-4eba-8ca2-9d8d218c93d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9785c7e3-59fa-4a2c-b190-50eb49ca9621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449911f5-83ee-4e84-ac9a-9acd35ae7cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d526a0-8176-4cf5-bd48-509bf649abac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9be4b5-2a52-42ec-9d37-8741f86d9ff2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6502c311-d983-4804-aa04-153d42b5c2b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f04567-fd46-491c-859b-c1fff47ccf08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72c3a38d-aa4e-42a1-94ff-ae569879c055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb79e4d-d8a3-48b0-8eec-80c3b6332721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7be7b75-0a59-4d2f-8e75-0ebdcf8fd0c9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b0e68c-83a9-4d21-a00c-9922f1b70015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a63b723b-e2bc-44a3-8eb1-c821d9020bcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cadcdc4a-4998-4374-a009-1286c6ac695c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d89484-5cfc-48c4-b937-d2a70ef6257e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ccc73f-0bbe-4da3-93a2-a5d99e692ad9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4f4206-e891-4646-8ae6-0ff8dac80f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04d67108-97f6-49af-8d82-a4b830d37811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937cc408-445c-4013-8fb1-14ee1bb9d499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b17f146b-f39f-4496-afd2-8960d216bfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a91d79b-d2cc-4608-81ba-42466c5628be",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4d90c6-6840-453f-874c-f2bcd35cef17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92e6181-9e10-4662-b6a8-82bb333e0fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc6a274-17cd-43e8-acd3-9ae6072dd46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb50be02-b8a0-43e9-a4df-f8f5c0086f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c083f0-f102-4f40-b623-da506ba728ee",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6bb51b-73bc-4ea4-a2b9-f0df6ca8b568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee6e9a4-ce4a-403d-826a-6ecb8f4026c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c7da8f-4487-4f43-b391-8ac7e52db24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b98be98-0211-49ad-8521-6b41eb058ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc3884d-cc53-4a86-acb2-dd3ad83b0a24",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3a84ad-d633-4b01-a67f-1aeebcc78dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7660ab3e-e308-4a8b-a20c-e71cb065ee7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43096b37-9aba-4016-8b59-33842cdf9964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7b667bd9-30db-4b23-a5a3-851b442b98ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3144673e-110b-4aae-adb5-bc5dc02b84d8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7669aa4-2617-4cd8-a7af-bf214f7a7cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ea2be8-03dd-4cf1-88ee-3015265dae39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6483e6ff-bfe0-4920-b05d-a4a863cbc86b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "de2a9d60-5546-4d1c-b7e8-7a4f3b299aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4c733d-5bff-4316-84c2-ea8f6ceb4e56",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c07912b-f2ec-46fe-9087-ba3f9e15d26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f6ba58f-7ea1-4687-9cb4-ddfaa95fcd8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c09238-bd33-4cc3-a60c-88e90d69970b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "86cd4ad6-ed1e-4a33-92d8-2a498a293777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d75057-20d0-4938-9cb7-7dbd9df7ee5b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab45f76-7042-461f-9de3-291e1443931e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584d581a-bf15-4a08-a5ae-10827a572739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b65aaef-1047-4728-901c-b7b23513cfe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15cce04c-c78a-4be1-93b9-67b695656dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128484c4-7a50-4d46-abf6-ba65735f2720",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23878b56-fd24-4fc7-959d-604dc91a506d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa5b24ff-825c-4c60-9ab9-2de847a50ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7342334-ab48-4066-a96b-dff96bfc53bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96151fab-69e1-4c66-81ea-22caa0ecb5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e40f784-9382-40c2-bc26-db7e9412f968",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9bfe66-57d4-4b0a-b2d3-f44d1bdf210b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00bed689-e906-46bf-856b-b1aafcd86360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b031aa98-87a0-4dc8-9f98-f166c2dc49fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a11169de-c588-4cdf-ab92-a315d0fb4b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0828c5-dd8e-451d-b70c-ea3e96344fa0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2a4056-342e-451f-a199-37b9bfec39c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b35d4fa-cd35-472a-b264-b5e6b8f8b6f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e4704b-f4f5-4774-aafc-3b1829e44cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "16be1326-0cb0-4238-ba1e-19ec2ea79bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83aef79a-d9e3-4691-af3d-559453267d03",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6719b52-96bc-4f7a-ad0a-ac6c923292f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6450a6d0-0552-45be-8e69-4cfd3eae2edd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb74aa15-caab-40d2-b4c3-8a50c9fcafa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d19f8a4-b773-4b55-a186-83e6f95ee064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2201dd-4dda-44a5-b6fe-fac731f9cc2e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d424436e-fb4e-4526-a61d-2c331deb276a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07428f98-448d-432f-8352-6f1f5b47a8d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbe8385-cd7e-48f7-b3d2-edbb94bd740a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3302de7-e53c-45d9-8959-fe96829cdffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1ec092-db47-44f2-9210-a50e868f9601",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff042f2-a389-449e-9d58-e99f7e4fc824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ee80dd-cc1d-44cf-bb40-45d47e885a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf2766f-5b9d-4540-afec-da7aa6054690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f11cbf70-7014-44aa-b288-256f7ca6f2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b279f6-437f-457c-8d35-504017ba7108",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a3af8a4-2970-412a-a732-ef71e301e647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b182eae9-c251-4562-b25f-77619498e367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72641fda-5917-4cb1-9807-0b4be4dc7f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c4dc3e9-8f83-47d1-80d3-d8fbe89a1b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373c5a23-d3d2-421b-87bd-f2491b3a90bf",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc0fa9c-ab9c-4b42-87e7-2ff9f724a533",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48ae68d-efbe-4362-a15a-4d6a18d49009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1923210e-f410-4aab-b20d-b828cb719a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11772669-03e5-4b1d-9f11-7741c926ddf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a2c6dd-cf63-44ef-8feb-bbbd4f16c9c3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7282bf45-065b-4322-a743-e4b52f1424ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa6719b0-14b5-4be6-a0b4-76cc2d60c739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfa1467-a4d8-4af9-a556-f36197d88f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "862288fe-8828-4d8b-ab3c-c4f9c8d0012d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74de6e3b-24ea-49de-bc5b-8638e80a2520",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "679caa79-4990-454b-8e2c-6b2c1a49fefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ba33166-aa07-4fe7-86c3-ec7afa96de9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f3333c-c8d5-4c5e-9fb1-558b5f397ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6610a620-c5a8-47af-ac55-e0126e39291f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7218135b-c654-406b-aa0b-ef2e85ee3251",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1164a0-5b22-470d-b67a-5da7ce6b775d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3679c399-664c-4ed6-b001-0aee698e68fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822e4c94-d441-4b0e-984d-8dacd69b6514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce08c5a7-023b-454d-a060-f022c7813759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565a1060-4bd4-4ba1-9940-113b79640194",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c169264-c567-41c8-acd6-c1f8953391a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dcbf701-752c-4beb-95d4-4920626d2a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e99d538-c98a-4b71-9e9b-1a93526d7ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0f20c6-871a-4cca-ac4f-60e8d81d90bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0865491c-8667-4915-b558-7526b82a2521",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22b93f8-2881-45d7-acc3-a52ac9a35d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55dbdaad-a185-4f18-8c5c-5dc72c9adac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d12685-3173-4d4b-824a-8f89bd14b590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc7f133a-a644-4fb9-afd9-234de1d736f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f9cbd9-351c-4e88-8571-2d72c6e9fc1a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e1a222-e03f-4c59-8d69-79b817b07d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5d0da05-0b18-4ab1-9b80-fb114be5113e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63896e74-4c5e-4e83-918f-7ba587d7d1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d99c2fcb-9fc8-41f2-9c21-5a1d5948ca62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea20f1c1-1caa-4978-80ad-9f113bdcfa94",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4619ea-8e18-434e-af8b-7450ca0258c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d8d5115-a26a-481d-80e6-14dcdded6b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc16f5d-a4bc-4d62-9788-82f84907b04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6795c82d-cf0e-4431-9913-a24a407d186f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0823a4f2-f251-4349-899f-fe9385aaae5c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69ed0ed1-0d66-436f-ad43-dbfa056cb3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db51d82f-12ed-4764-9c98-c0de10e3dd95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c329a233-fd7c-4175-b7e2-d090d83cf046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09be666b-0731-4731-863f-3d34b04f89c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2b1c81-7ab9-4b82-99dd-0cda6409cb5a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1247b07d-48ef-411f-9643-8512b4353fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8853b8a6-8344-468f-b291-473dbafe28e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534a822b-9478-4ed0-b5e8-315a7a4aaf75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "56342b11-a2d2-40a7-bdea-41a1614e1ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34f0cf7-77ef-4193-a4d6-05a195a2962c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bad6e8e-c6f6-4167-9606-98e977920186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f15543bf-7d12-48d0-9097-15aa23fac0ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c323d6-3544-4d1d-b21d-39d8e91be918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "76e0fe8a-fda1-407d-87a7-acd26c8fa814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63060c8-56c3-41c8-80d7-94ee001815b6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3854bf54-9157-439a-9a89-0dc0841ae8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da49ed42-8bb6-465c-bf94-4af95a68e103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5dbb21-cffe-4388-90ad-180c82f70b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c073a9-650d-4db6-96ca-df34fcd64f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdffc439-bf11-4988-9293-d11c4c05049d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1619f4-421d-425b-816d-50e3b48ef993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e58c4d-dbc1-47db-9afc-c248e7cd0a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d203f5-9070-409a-a6a4-85e159a8f67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e8f6614-efd5-4083-a3cb-65de74f6cff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cfce16-1755-4a92-9cac-1e5eb3a7aa19",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b9d45b-f333-47fd-bf85-d42563ec5094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69016a60-2568-4a92-8311-e14216550c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8043e310-147c-41bc-b668-c198803dde0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "09137954-e9c8-4ddc-bcff-b99da6623863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702bf820-b809-4b26-9180-b0fbb0523d34",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fac2177-dbee-48de-94d4-9272c6e38328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e6183595-ff3d-497d-ae36-d7c69a96186a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc993b9a-6213-4212-911b-ee8bb157fa35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "14b0c5d4-62e1-4ce7-ad05-886838f7003f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "98862e38-c3dc-4ef9-85cd-9bc39a1fa603",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a94c58f8-55c0-4135-92e2-d734d3b7c6e4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3986c957-03e6-4673-807b-5490a40fdab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "deac30b3-a134-495f-b206-bf9f2015afcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc37434e-012e-4de4-ae33-6e41e6447a5b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b6eed79-7208-4ae8-908d-80f60aeb0612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3ce5a1-2e7a-4407-837e-29dfb20c226d",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce1ae05-8bf3-4f77-bab2-016e8fca9512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a219640a-b47e-4708-9fa9-c3e4f51a8ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3d3dda-7508-4dbd-a95a-95ffe102e485",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24f9d11e-fdcf-4ea2-b1ca-242a7d3795a3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df246056-eb74-4ad4-a875-75a353854c7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b2c5d34-2fc7-40e9-baa9-4c1581a6ce0d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "674077ab-3a2a-4f04-80fc-3a68886f25b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7c64387-161f-4e4d-aea7-3dd099e39efe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0756504f-a697-48b5-9b05-01ffbfcfd0cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4b3c430-b8ff-49e4-b84d-27a42b8491af"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d9f0c36f-3497-4294-9206-025794e94c0e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d42d1be7-21a3-4fa2-86f6-8554e5fe8958"
                }
              }
            ]
          },
          {
            "id": "fbc41958-fdc5-4083-9305-9a028be851bd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c52f42c4-58aa-4903-90da-18797373d171",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e19c0a7f-fde3-4c39-8def-6c9f6b2fb1c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "215768e6-afc2-4856-ab24-3265e1daa768"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a212bad3-fc6c-484b-9e72-41929ade233c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fbb4fee7-3db0-4ad4-9be7-e0babb333d4a"
                    }
                  }
                ]
              },
              {
                "id": "fa19c0b8-cfa4-4ba5-8043-07f3f3713b16",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75f2448b-e453-4c74-9496-b1a66925a1f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6f343ac7-3011-4654-ae04-fab9ad843c7e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "211ba526-0f91-4c15-a1ed-cc13071a2119",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d8b9d878-7651-4728-8dbf-dbb99ab15035"
                    }
                  }
                ]
              },
              {
                "id": "2197de38-4b50-4eaa-bd01-6dc6b4e87670",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2c773e66-d007-46d1-90d4-9176836f751e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d7fbcd92-a9a4-4e2e-bc6e-b5da51bd410d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29e394a9-3562-4a40-9687-b9ec2c525176",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dd120c50-b3b9-4651-a565-9499c56acc11"
                    }
                  }
                ]
              },
              {
                "id": "74d02e74-9b72-477d-8c34-f2473c3c7ef2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a214a8b-b543-4c79-ae58-9d4cd99bffba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d497ffd3-d1c8-4a7f-b7c7-1c0a2a0c48b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fa41fde-dfc9-48db-8833-1a51733ade89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fa4a2ecc-834f-40dd-bd33-c28a8f8721bb"
                    }
                  }
                ]
              },
              {
                "id": "81f8e2ef-49a3-45e4-a157-bb8d8283f4f7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2eecaa5-3834-4c73-9299-b22eeaa958d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7938c67e-adcf-4156-82c7-d58cbc40221a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b18c551-5e5f-418b-8812-2f2dc49078ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "529a310e-5eb4-4ac7-a6ef-ec967849d543"
                    }
                  }
                ]
              },
              {
                "id": "819ece0e-b175-45b5-a953-8adbcab681c4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c33b4b5-c0dc-4fe2-bf02-4b2b16b5b8d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6f520ee7-9c18-48ce-a70b-db68223512c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a4b63db-dad1-4e35-b77d-28bdbbc4f6da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e057880e-d412-4d8e-bffa-2e96a8d00608"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d8a6e47e-e9ec-403b-a64e-9be0dce5b4f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c65a09e5-7037-4760-a9b9-2d7828b7ec75"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7050e689-2db4-4749-8a33-1dbd02a7d0fc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "410fbb92-25d2-4b03-a360-0f5d52a42424"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bee1e689-eff8-4e3b-981a-6928aaa9ad6c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "67c29d43-7f68-4716-bcf6-2dd2c6ab7b81"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1a53296-12ce-4a00-b1da-d666ce972a39",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23dcc291-6059-4336-b2a5-0f9b57ccf20f"
            }
          }
        ]
      },
      {
        "id": "c6b1b181-d51f-46ab-92a9-ab36d7bbf6d0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "db1f58a3-9e0c-4638-a73a-f378b999fa6b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69b3b60b-a7c1-4d6b-ba62-82ee302538a8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "394b8a5b-9dd2-4468-a30a-4dc67a7ca60e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e607768f-2192-47e6-9300-bb6fb7418b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd14232b-ea97-4e5e-819a-ce6e8a6ed882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda64d46-5c14-41f3-aff7-e423d329a397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "105e3667-0cfc-45c7-8627-15145a74bc08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd4c7d5-36b5-48c7-bc34-6808ca17b886",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4691e3-1090-45f5-8498-946744a71620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed529a0a-3a3d-45e2-92a4-9eafcef29d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42eab09b-619e-4a40-9fce-a0904fbc0e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c938e93e-1d04-4020-924c-71afb9e9e669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2c5031-27e5-4af2-8235-c592b99aa2f1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d1ef71-14e6-4f91-b6d1-6e714f8f52c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0c7815-8594-430d-9b0f-3506702d4d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd19a5c7-06fa-4478-96d8-15857c9496e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0d46a6-06f8-4a48-8b97-7ab1cd5afaae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92d2aee-7931-49ec-b83c-389e03b8f61a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "386acde5-b88b-425e-a5cc-dc55e83b3804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebeb148e-7f68-4117-b0d5-7f37efa6dddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e1a9fa-8c36-477a-be4c-51c63b1f8972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d4341a-321f-4056-8442-f092f2c694be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1d9a7c-1776-464d-b4e8-714d5e37bf39",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a1d1cf-5f14-4bf9-9d8b-af82da819bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8dfa56e-1eca-4286-b26e-ed24cf103082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae5dc41-8185-403a-ba56-c9cf6c1bd7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2afd0e36-c6e4-4285-b92f-760eaa6e4145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc0a92e-2168-4d40-a941-f3e692a58d93",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "487c7919-7510-46cd-88cc-db072d60c32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a327d729-71e5-4d9a-9e63-6b28be541837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7120b5d5-8110-4072-bb24-2b803ad01a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfa06666-1924-4340-b50e-690b9c92fa88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e601fe86-d122-45b4-ac4e-e4b46bd10672",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a97dfa-37bb-4444-a0f5-6e76d6d02080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e706765-76ca-46c2-971a-98e1938f5957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a03b5d-a51c-4c48-a013-24ef0f532be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "241c94c8-df51-4d68-993b-929ee41ab976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e08fb7-2142-442a-bfb0-363c48dca166",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572adb6f-9088-419b-a1b9-1f057d7d8192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d165aaa-d0fe-4f58-8a1e-80efff79c5f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c26d75-e615-46d9-882a-733e57fe6682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16bc94a3-840c-44ad-8ac9-001bb2255607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b3f97b-9fc5-42c3-b82a-1d45b24561f8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "246e1b7b-e1c6-4697-a879-e71d6ddd6aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b60e3af6-30d6-4fed-9799-14cf69799c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8ca8a5-8f59-4ff7-ae40-945ff646e320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e08881f-e91a-4337-9abe-5c341dbb7b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48668a48-abc7-44f7-8a49-aa9d13995714",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "982aa6a5-f120-4edd-a32a-46c268cb4956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd4e48f6-3769-46a0-bbc8-4a4441983509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de476636-a020-47e3-817f-7dccd44757b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6188aa06-2fbb-411a-926a-ffeddac36a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bee6b07-958c-44ce-a455-6f6afc6716f0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e120b8-a9d1-4cff-830e-b2ec2386873a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9eb0862-3150-4ce0-bb56-09a82fecfad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45dd76f-0a5f-41eb-86af-43d7f45bbbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ca24f268-0dd1-417b-b30f-ee419f460121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41b2dfb-c545-413f-bee6-20ab828349f1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe2f334-54b3-4a5d-9f9e-92bb8bac0583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a37b769-7ab6-4074-8fc7-a7a84ad0b1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc326c1-c4bb-4ebe-8a6b-f848b29f3a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dc08bfb6-899c-4a42-a058-95a04b0926c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da14fbba-267b-49cc-9174-119b16ff0452",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "681019ff-2dba-47ad-a9de-81f87df78a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a493fd-462b-43fe-92c5-8e532cfba1a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3299be91-b414-4d70-97b3-4038663d26f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c83263bd-cce7-4305-86a9-2b0f6f9bd2ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8585f9f9-dad3-4c90-bba9-bb7d47f3f909",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c216e97-644b-44f2-98a3-97b64673c2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8684df15-35fa-4343-a0e0-c5aa83b1b009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70814b9f-e045-4f83-a90b-494d7e0b5d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "876c2a28-1e32-4e12-985f-d0548c3822ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021cda75-a13f-49e9-ad76-d88c2e384bb9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1bff4ca-55cf-447b-aaf5-6d882da60e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8991e195-9994-45cb-9830-533d47ac75bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b97f0f-4328-4f38-ab96-a9c0ae2eb684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1b5ac8-cbf1-45d0-a4d3-4364336c90ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3b21ff-ad91-45f9-ae5e-1733bb4327c7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab44698-1139-4799-9712-a298ca0cad3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81fceee2-638a-496d-943c-86ca92fbaeb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6336057-6cf5-4ff0-b8e2-52ee0c0a9941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba2a7c8-ef65-463a-a8c6-2bd1848bbbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb86c5c-da49-46d9-a077-81a8e9f79ac7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233b6f42-a2c2-4636-8ecd-5ae4ea84e21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9c8b9c-14da-4ac2-9f6f-b6ddfbb22b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42481921-1084-4b6a-a2e8-ebc53a019989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbde886b-1524-4fdb-b76d-f3f54cdd0184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d9f38f-b833-45d2-b8bc-e6a64a3956fa",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d8893c-0578-4df1-a4a2-63b94ae8fc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "968a35d2-2275-4561-a6af-4486088e3a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa1f449-bbbb-4b57-a65c-f1fc787ef525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "da04371c-d447-441a-95bd-c6ef210d62a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86b692f-76f2-4413-b1e6-53d78c4ac3c5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a92127d-5de9-4235-85e0-f4d906ac03c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2e482a0-9796-4b12-849e-0aa1d23fdedb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5051aef-389b-4494-8dcc-6cd2cf3a37da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b10c4bd-647d-44a1-a4e2-68f16bef0033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9621babc-2f7f-4a6b-b79f-4a703b86aa7b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455a1016-abac-4545-8318-1b22ba222c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df6bad5-7982-4d95-ba8a-699bf7d2b724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db9bc43-1a61-465c-b1fd-ba9e087d280e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2411c457-52a5-4d7d-8b50-ca0935814d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510691db-97a9-467b-8e00-5947b4840ba4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e94d3cc-1d2f-4d19-b383-012e5572eeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3214f34e-780d-4bb2-ae0f-fe8b8c166ebb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c689bc26-498d-4e9c-bc17-be1fd6e8d67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a0ab743-dbc6-48a7-a545-10b7d9331596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0326df-3bd4-4f2d-86ab-5547e9b0bd1c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f86e5f-7a2c-42b1-9035-4d3ce7d06cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e85e701-0c47-42a9-a16c-5773b63b318c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c29d53-b011-4b36-95c7-c393fae953c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11b90b96-1239-4bd2-8389-f1a30e4e948f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b8d8ec-999a-4d9f-892e-58222cdb9974",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c3c6cc-c782-422f-80d0-0adefc6d45a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0a7983-d1bc-4531-ab0e-275453fae5c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821a4460-9411-4c26-9283-228e4b06b337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c73833a-1356-45a7-9c75-bf1a79e9a55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db37e12-324b-4947-afc8-7e6c6e3541f1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db369c5-9fc8-44e7-8bed-c7704f3a6b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02478040-a7e3-4116-bfe4-2fac75e94bd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38584b0-4287-4ba0-bda3-3be21fed7f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f987c5-8acb-4ed4-942d-71b1a8b358d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22feac76-f8fb-4ab3-a845-781390ee62ba",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fe4cf7-7e2b-4719-b0a7-0a5cc2d02b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bddf56dc-a073-4027-b998-a9099f9aa20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce831fef-59f6-4262-afc2-662c436fd2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aef82395-5392-41e3-bbb7-f8a9f63336f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b14582-221e-49df-8471-3060d15df9e6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "490e26c1-d3d4-4ca8-a983-bf8541a935b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a64ccc2a-f7e6-48e9-ab63-450c9588384d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66c794a-8ade-4402-946c-37d1abd072f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47a02bf8-951f-4e68-bcb4-7fa943d36136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b69179f-ce29-4263-a862-1e10bcbf120e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20244114-910b-4081-81dd-b63a9438ba8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6710267c-f4b0-468d-817e-c830e3fc0c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089b7b2f-b180-422d-8245-4a21264aaaa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b855579-6342-44d3-98d2-ba0e0abec7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2864e219-3aac-4b5a-bd3b-d49ce0813c50",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e220d8f-dc58-4b5b-b0e1-b1a5143bc7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438189f1-cb8a-414d-8f77-02428630fd01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6522555-eaf5-43df-9646-44f9d73c4c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3dc06a5-e69f-4201-8c34-ad08eb64ff79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e990c0cb-4369-4261-ac56-42fb435a560a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b72b59-b3e9-41b2-80e0-ac76d56c9101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7068bae-6c80-4ce5-ba9b-1f31a86afc54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a6e4c9-f37b-4d8c-95e8-8b44f4e40e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21e5c063-688a-4770-b940-87b4c2f40de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d99bdd-58fd-4b36-aa4d-883c16128fd0",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4f8b1a-086b-45c1-a071-e41dd96e9a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c81cf988-3682-491b-a4c7-eb6bd4ed8c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0cfe2f-590a-4785-b460-6c97320fb422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d4f4288-b55b-4c7b-ba9c-23b1bc738ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9dd569-8bd4-44b1-919d-c3be2e57ee82",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5088687-3f79-416a-9c1e-f318e223bb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76bb8397-962b-47b9-98aa-749d0cffb7f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10f6566-ffd5-455b-b724-81882eccf29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b74934-8d79-49ed-8714-32f80bf05676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912d1e6f-2dcd-48d7-a34f-ccd5ec44a46d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43e5aa6-d69b-40d5-a496-015760683d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14772a09-7264-4425-816b-fe83774fa2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff16c76a-2b5a-4b43-bdc0-982fc57fbf26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75c0c068-4bdd-4108-86ed-26ca445a5afc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "80104fdf-485e-46e6-968b-4fa62d643de4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "beb99e46-f7ec-475f-ae2a-d3a923182efa",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc576d58-9a30-4acf-9964-558527c6a799",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "496c97e8-9043-460e-96b8-aeb51415aa79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d165767e-9c2f-46b1-b716-b949a075c237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60353acf-f4c7-4829-8061-e925c1265725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06ac40d-038c-4166-aba1-4edc0bcb15a7",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a55f18-1877-4152-8d1f-7d96fe093b76",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a488eb7d-eb75-44bd-9f8d-c96ae1b9e423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "531aea11-238d-4fd7-a0d5-8ffb4bfe380b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29be9f0e-a142-4578-9584-c93edc5f0642"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42d72d37-1561-489b-98c0-03478f00a772",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ceef263-1c12-488f-a441-7aa9f641efb0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e26d0ea-e2e1-436e-a398-a4de97745fa1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40196962-330a-490e-88f0-a90e1fbfd217"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2824de53-ede2-4825-ba40-f5e8541e3c72",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0bddea3e-e66b-40f9-835b-0a6a280453a6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9314c38-b898-435c-8188-0432a27708f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "45d32db5-90aa-4c59-94cb-a21bccb26caa"
            }
          }
        ]
      },
      {
        "id": "601f31ba-b289-4c93-ace1-2b885c8d4deb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6ab69d0e-60de-4c3f-97d9-444cf1e070e3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6203ecef-7da9-45f4-8ac4-333fe01ad5d8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "88352990-0b8c-4b19-a56d-5094f26b7cb7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddead7b-c4ce-46a9-ae42-c30512c20fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1aa468-c21a-4862-ab8f-2d82088195c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f64d263-826b-41cb-9ee1-3fd565d27fea",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8afaf2e-5748-4c87-ab3c-1dd528a40478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def0abb0-a65e-46ed-9639-86b6099fa5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f236a7-423f-4ef4-a315-dedeac1e4817",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e80c15-47e7-4c31-915d-cde9af23c5d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef200e8-2dbf-4ff5-a05a-6e7eb51ec8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63122aaf-6a39-4510-8dce-b1f25c98d79c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7493a64f-54dd-4432-a2cd-04b0c0885bf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e97f9c-0df4-4025-9ff5-819bd8489675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa43d8e-eab7-4c1c-aaac-a99bc8f3df77",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9dd80c-0d29-4cd2-ae55-b3f0a84b077d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f03c2d-68f1-48d1-8ba2-d8125879ee64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e43bd1-1716-43cc-85d5-b5cb6207c419",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e87809-dbe6-4bb8-8d4f-167d01de7419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9089394c-8093-4a4f-a960-8bd6b2bcc97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfbfa623-8fbd-44db-a519-9bbe0e0707ef",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2483d6f-4620-48d3-8347-989c1e3871e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50dbc549-cc80-447e-86fc-9b6bf356b867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d855542e-1ed9-46c6-ac60-fc6401f56d30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daed56d5-0046-472c-b4b0-212cddff58ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48de525-fa28-46be-897c-1f215e55c7de",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f7087c5-a1ef-4208-ba56-ecd8ad31b54b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3865dc8-bf7d-4df6-82ed-95c46f5482f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bca594-eafe-420f-81e9-c1a864dff7f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05d6620a-505f-4d97-bf1f-56d8b8fa6d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b7ca59-76c6-4294-ae16-0f1f480104a4",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d0d186-8ceb-4eff-8e7e-0ec22c962f85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9f8bdbf-9a55-47c4-85a7-e97db7f47d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee10f3b-b067-4670-8cde-2defd2bc468d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b5fc76-428c-49f6-a036-3879c483b659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa5c18e-d2e8-4f1b-b3e9-6dddf2364c4a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8866e239-3816-4a27-ab64-c718aac6bc00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67a0d634-1690-4e5b-8d59-a2ba60cf9d0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50fecd78-c4ee-4156-a888-43a00383182e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "814b7f00-c328-43b8-9dd5-e8beff7357d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be467cb-9b32-4240-a2fd-52e87990d229",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6694fdb-2957-4742-925d-49a03a1787c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77f0518-64c2-442d-99ab-5587e48e76ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8aa7c9c-6b27-4581-9a08-0ab5ef89a06e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cec4856c-36de-410d-99e5-8326602db280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a0f7e0-f2bf-4540-be9b-880aeea09096",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec150c10-0bb6-43b5-8cfb-648cd612bf7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea26616c-1be5-4a70-bd9b-e965ca8ab7a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "993090ac-ceb6-444b-8127-c76aabf6e301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cda388c3-4d8e-48ac-8540-f78df33a1feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563835c3-43a4-4665-a1b6-fcb95f3b6b72",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bbe364e-58fb-4b90-ae4b-4e36aefc9f96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46ecbce4-66f8-4b4a-9eb4-ab511a2a8b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3203a3-21bf-4a0a-9047-b70e12e7ba9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cd830c0-cf28-4cbe-a5a0-5094c56fcb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392dcb36-d2eb-4776-981c-29512ae167f4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8616a204-faf6-4f95-b95b-16a36ec9cfc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93e82e9d-07d2-41dc-b5d4-4273d32642c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "083eebcc-8b05-4fc8-9a26-357bba918a4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205bb8c5-a16f-466a-8862-34d5013064c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3bcb45-c134-4850-9270-96cc49e2947b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6adfe342-a2d8-4119-bc47-351895af6e48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09b25d3f-d244-4b03-94ac-ce5e33fcaccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a763dfc6-5e01-42c3-8a1b-80b66eabba96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "944d1de8-7a2f-46ef-ac3b-f223cf27d6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee616099-762f-4336-834c-4d527d56a081",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52923a2e-1722-4657-bec4-5965b809a4a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "101d14aa-923c-4497-af1e-b58ba30d745f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbe4a80-583d-4b48-a83b-2745c85730ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c28eaaa9-abaa-4482-a6c1-6d9ebcc1d243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908a62bb-2753-44e7-9cf0-62ffaf399811",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e769a4c-c13d-42e8-9bee-6711883443f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec12ed3-a0c6-44cc-a3c4-6c954485b4a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e2d9ce-7d6c-4df3-94d8-e14b5452ede4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73f4d33a-5314-4d8e-b5e2-03bc76e303b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dade698-16e2-494b-8503-26d4b9629777",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620d1280-66f0-497d-ac0a-d5ca891256fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074d011d-b1d3-4cd8-9cd3-b7fd6480db25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "645d94d1-2323-4f20-a8aa-8b1c0195a8d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f11ec003-9638-457d-a15a-8b753a61c93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e89684-55ef-43f9-a7ad-7ea7a1113b12",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a10158-eeda-4d48-a1d7-171d684ff36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cdbff3f-b54f-4c17-b035-ea20b403eb3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de27e9fe-78ee-4da2-b83f-6753c2e5a0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ade9cf4-ac88-4643-b5ec-e30bab54959c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c104c9-2372-407d-8f2f-3a48b364cd43",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba76b70-6285-47ff-bb6a-07417ac7cdc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad891935-4e14-4d40-8c07-c2cfd8259b1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6fa2e2-3a72-4928-ad6d-5736137f13db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b07b562-8988-4bb1-bf7c-f192649bb5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e0b967-958e-4f13-b520-406a6ad23417",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71aa0f78-8b04-40d5-a36c-19802ca4acf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e36ead8-bbf3-482b-9e84-2f38f6a63d5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f704f1b-65f7-42d6-821b-430d49958ab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b3c59b-53e8-45d2-b3ea-2f17ccd3917c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96392b5d-17c6-4d03-9c03-2a1d2f7402d5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668cc90b-7ddc-43e8-892d-e0b123f4e414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ea4a18-5bb3-4cea-8271-c9f5851fe5ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb790ff9-740c-448e-b9c3-be3cf29b3dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ada18f74-59c1-4686-b87b-1621850072a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2c43cc-b3ad-449a-ab2e-ec2c3c486bd6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a627f3d-6d53-43bc-a068-61e542c9ca76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d174d593-dd5f-43bd-8643-a68af2deeedb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf1ff3e-a335-460a-825d-873a762b5a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52cffc6-1eff-4076-8750-29dca4b8efe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2de1dbf-5e86-46ef-8b6d-0d90a5806b7c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a746cc-4751-4bde-b3ab-bd4aad6742ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa5ddcef-021c-4843-b0c8-31e6b04f344f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20090b2a-7132-44ba-858a-00467d5f06fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e056ac3c-9af5-44f4-84a0-fb2f85f9a1c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed6c63ac-2f76-4134-a211-475f89b91c9f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12d5ad0-124c-4f56-9baa-c617cd69d448",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6de7769b-3edd-46d3-b51d-ebf6476ece16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cef6955-9631-4baa-8c36-be90c960b628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "022ed2fa-c352-4167-8ba6-76ca63efba65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e40d4e-a669-4d07-a98c-53da2d6b4afa",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e760d04-e96e-4831-a71d-c57e6c7158cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddab9070-7641-4f42-b299-79b1f0733e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371d87c3-b5e3-4bc5-98e9-e44e7e9ea99d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352c641b-6a78-4869-ab5f-34b78c0680da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea4d345e-a23e-4d2b-8792-16f0e3b20a56",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be0f99e-53d9-4d1d-b720-1e7ed01f4b16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "234b58e4-9bc8-4cc7-a072-eab2341e687a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5917a55a-4274-453a-9aa5-48f435ab6a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f72d4c-f098-422d-ac37-6cd9594e23aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0888fa-6d74-4f4e-9ccb-5339228c1529",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda6c147-d9da-4627-a09b-5c1e62d2a73e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08bde920-aee3-4162-9294-b50827a4e352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5b4f7a-dfc8-48ee-a45b-09e3b8af59a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23a146f4-68b2-4851-8095-169728243d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2b95c0-c958-499f-ba9f-8e8f09379d9c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eca1cea-9b69-4af4-82be-1bc25e4c90b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cabd84a-8bc2-4ee1-988f-3e7a68a6c06c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec03b05-83b3-4ba9-a6ec-9f56e3df49f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8899d217-80f2-4a67-9a0f-d7b48991e128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673fddf3-1bc2-4292-9a77-5b0b1335c383",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4b170e-3d6e-45c2-b658-fdcba9738640",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a63a8874-baf8-482c-b1b3-3261ec68b908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22341667-1399-446f-b8c1-9cf5827e5045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b62c477f-01dc-4b0f-a4f7-2eaf5a0836a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87a5909-447e-4d05-83a7-7ce04dfb0427",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d7fdb0-e06d-49ac-af47-af0dc61a7965",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "400629f6-9146-45d7-b7ed-77ec384850d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53bade01-dd37-4244-906e-7982133426f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe8d340d-f492-4af7-8ca2-b762ba93f820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d5a2b5-194b-4150-97f8-08c695e2666f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85eab84a-e6df-43dd-85cd-12cbb76420fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0930e635-460b-4ba4-995a-46a971564e26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f4275a-ea4d-4d66-9ee1-2755b4074eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da0dc2b-fa50-4a44-b744-9d929789a4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43245208-bcf7-4a13-81bb-c50517dabd15",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e792333b-56b4-4d46-b99a-1e6a1cc49190",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91d9fe12-625d-4b6b-b6d3-e692b2b56865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe1ff20-c50d-4c20-ae70-ed568c668699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359fe3a6-a0ac-4b84-9117-4437d1b75c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6587366-6de4-4823-b4aa-6d7238c9ba61",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cdd56c-071c-4038-a28f-b1edbbe1cfb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "789a1f70-bf46-49f5-80af-14fc4e6d8e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed81a8b6-73f7-4d7f-8832-9515107d10fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9189fc2-0c97-483b-81ce-014e69a8df89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b3c572-4be5-4014-b958-f4ef2d1aa1a4",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59c2016-6247-4d05-a93c-ba6eb98eb518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a2ff1e-99ca-4624-9946-e011f159d835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bfae190-9baf-4a67-a2a5-6eee194bda44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4984b09-f10e-4139-9485-9adafd1fdf91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac24b2f9-e620-44cd-ab03-311f22c18efe",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e1e7c2-749c-408a-a05e-f47562ae5d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a474833b-13e6-4b69-ab9f-cfa8241315fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb37033-8be9-4569-9dc0-a11f7ee5cb11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2ad390-7893-4c4d-b279-798af75c7b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f42b658-b3e1-4af7-a94f-74818df6197b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1bf529-176b-4475-823e-efa74d4243d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88801c7e-07af-46c9-838f-07622f242eb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aaee29f-7d01-4681-b872-424d44d883f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b81840-d646-4e91-bb87-2d09e3493aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bdf0f4d-f9b7-4f00-b34e-cdcf62cfd267",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b64129-a504-4a73-b293-ddd01867fc6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4cabcd5-545d-48f7-a0f5-b74740405859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c9e905-7ea5-438c-85b5-b24b35dca92b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3946c97-7ccb-483d-b9b3-42ad8d363dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96237ba3-d45b-4eaf-8cb6-52cb569fc1ed",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493d6969-e6f1-4395-a4b4-750da0a515e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e824229-ca4f-45c2-9156-855c06246c38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd40198-6e4f-4012-987a-2ddf3195c59a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3139f6a9-a57e-4397-a2e8-59012d1c52f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897350b4-f591-495e-9ce0-ba2820f16d76",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031c5aa2-2c96-4398-918c-9855298f5017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a1c94c7-b397-4fcc-9eff-0d3bb812f60f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8186e7d8-215b-4add-8bdb-163027626105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0160c020-ff8d-4a05-a560-e1afb7c840ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907bac6e-946c-49f8-8780-778e91710571",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693912c8-3020-4e6c-91ea-f203fd0997d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77d5397a-8cde-4d86-86a3-a13e639ac206"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa8f33b-e5ff-47de-90da-67e56b7236a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e92f6ed-c605-4fa8-82aa-7b413d941863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eefd1ced-173a-4b7d-ac99-a787b19af0d8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ed17b2-1e3c-409b-b97d-07041e3d179d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c3e89a-1315-4749-8ca4-e8908eadd583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff50714e-e785-4b29-8e38-61ea1f42fe1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569e5b3d-6c92-405a-804c-167908ee4445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f47166f2-13b4-4f39-ae97-ab784ac07207",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258f7970-1dd4-4deb-9e07-da353ae9405c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3337c0c-ab13-4b1c-9587-10ba775d1062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "783cd3ca-bb7c-44dd-a406-246474b582e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22dd5d0a-2439-4d96-b425-80240ce2c856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e461b0-30a4-4974-b947-b6a22f880a70",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8cacc9c-7bce-47c4-a717-13dcdd8fab60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22596b83-c76c-42e3-bb4c-e6d04b69a982"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "791b2a4f-9402-4ef6-b701-b19e64c16327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b17ef3f-9c58-4b3c-af82-5ca6984bb3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53eb3a7-4258-498c-ac36-d6636919a30d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c53e74-2bfa-40ab-b486-5fb0aa65b498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b669e38-2840-4dca-a0c9-b4db708b7ee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b80cace-5cae-4abe-a700-9c8769a6ba18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7acaeb59-8e93-4344-9526-f9a6836bbb2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1251386c-631c-4fa8-b82e-bea6bb05627c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6b44e8-2ea2-4fc1-9a63-2e46f35445a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b0245b-d902-4cd4-bf98-de200ac4a53a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6029d41-e3bc-48ee-843b-a99f80ac3200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b7c1555-52f1-4f06-9041-54d4c7e853a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a775c90-3a3b-4d77-8a84-04a158876d03",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bd11ae-6f58-4baa-ae3f-4bbe4de46e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a42ebd6-9af8-4fe3-9198-2f1af05f7f9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddd025c-dfdf-4e74-bb2a-71dbf3d506c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c0173d3-4a18-416b-89ab-e2349a94859c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d313a3-90e0-4a80-bb09-e3287fca5e6f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c13f3ca-d8e5-40e2-8e6d-1ebfad0ae606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da5e2a1-032a-4b64-8b6f-e9bbe6add5cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd46900-c83a-4d50-a006-2e406ca3847e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c42b32-4fe2-461f-939c-8576131b5191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc22efd-f9ea-4096-bbd3-945c2155ca4b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4401c8dc-23ac-4c34-930d-adb9b0a0ec18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "990427ea-07d6-416e-8bc0-e7d87a59dd0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea105dc-336e-4c78-9aae-29a5389163db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b99381-cef3-4683-bd44-0c09bfaf6406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e161fe3-88cf-4d94-b372-035e39c71a4e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2334098b-1684-4436-a4ce-f0c2117283b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f00c16-24d3-4791-a041-143c6d22c3d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "646c7db1-49f9-402a-9f58-93d04004a095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e082d5b2-efed-421b-8dd6-7c313022327f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714c89c0-5d36-41a9-a94b-d2c2f35ab219",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4063a10-62ea-4d76-9979-962daf704b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d806f5-11bf-4d8e-943c-f49acaa74e5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec4255d-6702-450d-98ab-a4f0f6f85a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a23d0423-d9ed-47b5-8947-6e3e1c5ec89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f90367-b0bc-45bb-bd43-8fcc634dfdd0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e36f9b-24d0-44b0-98b1-1aff2a407477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01899978-8bfc-40ad-9007-fae5ab0e4318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48888eb2-f240-4c4a-beb7-a76d39e28e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa779cbb-6dea-486d-8afa-b107be0ec2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759dab70-2349-485c-a55c-1818e22391d5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eff576f-3310-4801-92eb-68ca626a4adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b3638d-57aa-41fe-afc8-d549b8b559eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "100c380e-05fc-4d5b-b6fe-83d7d14aaf25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3e78c8-37fc-4072-9332-0f43f38d66fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40260ab4-23a0-408d-af8d-59f6ca71cb5b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70318aec-0c74-419d-9054-fef3fa26c2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf7552d-9153-47bb-8ec9-cd283644383b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81cc1d4f-2507-4246-9eda-ea2d06df3ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fced47-3f51-4a51-9ea9-9489c12a6038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd0fd5a-b9d8-4f48-b54a-0178355efa6c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e946eb1-a741-4945-bdef-944104d0575d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9bbc0df-6df5-4bac-8899-021d53025931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec4d745-429a-46ac-abda-c17bbf57fb29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f60a4c6d-49d1-44e4-b335-2e3e482bc076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e9161d8-d8ba-4d92-b373-73b7cfaa0228",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b39f16c-6d80-49f5-9276-d9f81a9dfbb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c30aa78a-7a4b-43ac-a882-8d938728550d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6610f1bc-dfc3-4fa6-9731-222fabb6c4a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e34a40f-404e-4a0b-9cc8-a77fea1cf2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11097fd-81df-4ece-a6cf-dfcb5789d247",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20c0dbf-56ef-45f2-9f92-e9bf49775fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33c67cfb-061e-47a3-855d-1e18498579c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efc31d8-dd2b-4563-a820-1e3c55323632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "425d4e11-2243-46a0-839c-87d850641298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5625d0-1c96-4158-ab0d-cf460fa7bb29",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6167a50-0fb3-4707-9151-f78eec4cea2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55113227-0511-4b04-ba0b-5573cab6e5eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9de199-06a1-4706-91ae-cb0ebfd3ca5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7bb9013-b91d-4e8b-acbe-a5a5dfa6882e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6ec9ba-4b13-4d02-8ba1-b62861f17328",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da6ad42-f6ab-460f-b275-882e48d83321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc40706-cca0-470c-aa01-25e40da0b1c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a717f1d3-21c6-4719-af96-e558af38c0e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1b187ee-4cbc-47f0-954b-2c573e15bf8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f9689c-f730-4b9c-99f3-82844d5fb0ba",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6637072c-e231-4f65-a3ea-aabdb65a5826",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b1ce1e-6430-4313-9943-4b9d06fab569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "576db043-624d-4a45-9f69-8dba7dd018bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38111d62-a2ac-49cf-8ec1-2778628f7881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6965c1de-b38b-44e4-bef2-d8f66b4b4a7e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e93078-ea8c-4631-b013-bdb993d6a084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513c7318-eb4a-4739-b367-3bde8b6d4f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0feb1b8-1c71-4f40-be90-260330e92973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1035f7bb-2665-4681-97cb-d5c5d30bb629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7fcc2e-4c5e-4dc6-9a9d-9f42df745beb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2709867f-645f-44a7-87e4-ef0bea562afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e58e45a-36bd-4d28-a5a6-87685513c1e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec14440a-b956-494a-b325-3bfeff182503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8219f4be-9b1f-4bbb-9dad-7b199ba4e453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f998fab-6c5a-41a8-bf75-5e80a69f4a78",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c83bc2-02df-4a2d-bd8d-01b7fc03142d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "608c69d5-6fbd-47da-a57b-2cb2a1577fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e61fb1-7ac8-4540-bf79-e0a87a7a4190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab9219ad-3f72-45f0-82a5-956fdf38a396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75c89445-75e9-44df-a209-cd411d2a2634",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4eaaa42-cfa4-4fc2-b9de-021055edd702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa06f44f-399d-4121-8403-1031dd760800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e9918a-697b-4ac5-9a9c-191e16275437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6e2deb-5721-402a-8883-f43d35d0c8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008871a4-03c5-4072-8c07-c360ca6af024",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39104863-8e36-4d60-b289-08758e214e2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a5f99af-a26e-4963-b2f9-284a61b46411"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29552135-b5b9-493c-b4f3-95920110b522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88053c5e-7ec1-4300-9b8f-5581c7103cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b5a35c-4469-4560-b401-3e5cad238aec",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f38e74-eff5-4ce9-a92e-e6475fb6ac2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b712789-fc3e-4004-a5bf-64e91cde8f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba13139c-bf66-4d16-83c3-5072b25baac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24dfd96f-cd7b-4d06-865b-3fecdb6dc04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dcbf12d-82d9-4e9e-9e15-ac4c0227729d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322bc0f3-2467-479a-b869-fd7a246b4869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce7da665-dde5-43b0-9aac-7b87382b83a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19eb422f-3fa2-401a-80ac-61f235bf5dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70905bd6-2fea-4bf9-820d-1e85c073c080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96eb7fc4-daef-4466-953b-4c9f5041b090",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a967ca-cc36-4a74-b61d-cb34799c8fde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76e93474-7c3a-47fe-be4e-66dfd90b6436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb2625a-98f6-4c95-9652-96f367d0f8db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a984d0-feeb-4cef-b79c-bcfc91a17233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913e5422-fdc1-413b-8c3f-a7ffd1b3e689",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7549dea-8cfd-4107-9c1c-ac36a3fd3168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6997db4a-dc10-40d5-94e9-dc9959030f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a35de85-3b3a-4f10-b08d-ef68153e2c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89911bc8-1d56-4336-8a2b-9169f163a698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bec74eb-cbec-494d-b261-c74e91c404e8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff139bac-5ec4-469a-8db0-b1c9d56f89b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc20152e-da7e-4094-8db1-bf2821ced324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b833151-dd5e-4bb5-b6da-e4c538858a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64b3c11-fdb7-4542-949f-bcfef07a1e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c323b804-d134-4db6-b82f-4a2ee90ae1c9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a887bf7-7ba2-48ff-8d17-7b11d3a56166",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef13560e-a798-417e-8b34-54032e5bf83f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc40b6a-e71c-4962-8e09-cf6bba4fdd32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d17d6fd4-6294-4aae-8be8-d9f1abe3316d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c61e9fa-1dfe-4db3-88fd-185c594f1553",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb06631-7b3b-4572-b078-de1effdd96a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bafb6129-f37d-4fda-8140-47ca01341b9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f8cf31-ad9a-4083-806b-7ece5ecaf539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5101ca-0b61-49e1-8a45-becd84037090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c98f99-dd38-4784-ab2e-19d3821bdb1e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12cf98bc-78e3-4042-be4e-405bd271b481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df7b2c7f-5de5-4eef-950b-4b15848347ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a229e6f-41eb-47bd-8231-ad60aa2cbc60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa47b4b-4e11-4746-b644-3d1066a1dac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95eadfee-4dc2-428b-8f0b-41f458a2caac",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa543d59-98a2-40e5-9768-a6f7592282a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d40819ba-7a69-41a5-96a8-3248df76acb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "106f5709-5efe-45d1-9b69-1d44e28c000f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b13f0088-b219-48b8-bd0b-f1ce376f9e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8accc3f9-d850-45d4-a236-0c7f141ede55",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "897a5da2-8e08-4f3b-a908-7dbc4f1740bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06fe3a0d-c797-45b5-b73e-736962a219eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c963da83-13d1-4cbf-89b4-05c3b579c0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c304d47a-a6bd-4d00-b05b-7fb24b2ab81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33511025-f57a-4c79-89bb-3e4dd53d5a26",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cf89eb-0189-460e-b6cc-2385b4133f2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c22f1440-e10e-41fd-a8f0-039fe6a193ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a54be8c-a707-454c-aa17-80b74a637b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9df6cc-9e54-45d8-82f6-f75c42327f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcee6bb1-9de4-4db7-ae10-795e5b7739b7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2117485-115a-4efa-b3bf-9c9eeb9e79ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0aeb720f-2d1f-4ede-b3a8-475cd7169950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3108d516-d184-4ce5-b27a-264c46fe8ad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43eb856e-52a6-453d-86be-62ea45e02319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ad80b6-7d40-4293-8773-f500271e2c63",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa77017-140c-430c-a63b-0dd0a97b1592",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b017278-0cb7-4415-a662-6c28a831d3c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fcfd22-2b82-46fd-9eef-7ecf7e067b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7060fdb4-ce75-4490-9aae-006997084e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a6dfb6-42c0-4533-bfdb-5384d23e3e2e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86b6ea8-1c54-4950-8e4b-8c1c13383cfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc10ea9d-0b51-40be-8f24-bd1bed1d3dd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e61fd3f-94b8-40e7-9a0a-218817715df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b06310b-d565-443f-8182-aa8d974ed375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2663bb-79f3-4091-87f5-ea040f7e95f4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a20316e-c684-443c-a5de-f6b9de019263",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d151a3bd-ce1f-44f6-b84a-3bfe1916c1d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1413d05a-7eec-4be1-9758-f874773f4454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2df1ed79-0ff8-4eaf-b3ed-10d2d82eca2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c45e36-e784-484d-b85e-24be01c3055c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753f3353-231a-400b-a760-c48254a8c427",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59028f7a-c50b-4132-b2e6-2d60bbd4ef3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c98686e-8dd7-42e3-b7dd-0692ae24a874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1e246c-3696-449f-93f9-dc12ac1658ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084e2c8c-3f89-42f1-8513-377432757b72",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f29f5f-47a2-4c60-ac5f-6efc8cea2ba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe075632-34f4-47e7-a23b-dd4e1cc6d187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c01a046-adcc-4df3-9e61-4bf76634e2f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b17a22-fd35-43d7-836a-971ac50c4172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2c0124-74a5-48f7-825a-477caec91fcf",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9f80f5-0170-45f5-ad05-dd07c6553628",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22d7a101-7396-48de-8b4e-ac79b96f1ab6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb64a57b-2311-4260-9ef7-2e46c1147cc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a6b97a-f26d-419a-ad0e-bf03c753ca2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3aec0b-4e59-451b-90d7-f0d3a7c07e3a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef725cd-1d9f-462b-8199-0c994526e90e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5a1ac3b-264b-4457-9ea9-03dd07435112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eea1f77-e143-4c47-932d-87ef329009a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c99da8db-6871-4b87-9e45-6f702801ab10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7105c4-fd7c-4d84-a675-4f44f75960c0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f31e0b-3ff1-49cd-be2e-c8aa77fd2bef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf49212e-274e-469c-8d2c-886e4ff59e60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "286aa010-9712-437b-9713-e7931bf8878b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd7d8720-d4cd-4599-a354-e9487ee417b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a68d91-f90e-43be-a641-5ed2977d0470",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575d0197-f46d-49ab-a2a6-172da25d7b6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2e90ceb-cbbf-49a2-81ad-374f35e4c7a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25587465-c50d-4ade-8797-d4da3c50fbc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62019957-1512-4e5a-8790-ea41be2d257e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541ebe09-39b0-4b4b-b332-98cf2224d425",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14606b2b-f54c-4645-8838-2fd63de3ad25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7178b26-c139-4933-a11d-b65cd5b1c4eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9bef33d-ceba-4601-ae19-7e3430090a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43faf5b-f02d-4065-aef4-82e60835427e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c3fa3c-5350-4ed5-8a69-07d09db363e9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d204895-a530-4a13-b950-e40bb1c2f013",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10b8db84-c13b-45d2-bf67-32732ca1135f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4968cc18-dfd9-4afc-85ed-8dbf7551e3f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d91ab6ad-c3bd-4813-a2e1-c8f4e5b8a7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b02fa10a-d877-4a3b-8c73-eea95536d9af",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164f1f59-9b5d-4dd2-aa9b-5ff34c946910",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c99ee344-0574-4492-8626-01f32d50f714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e915d3b7-b203-4056-9daa-3a93fd28cf21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca27db9-0c19-492c-9e76-df0106a7bab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8155c965-a733-4a6f-8105-2fdcd315cd06",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0529505-58b9-44ed-b869-494827c7a5fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a57aeb72-7072-4a28-8e9a-b53828e1d37e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1ea436-d423-46bb-8e94-327cf012ebf2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc1ba89-c700-469f-816a-c1eca5a531b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96dd00ba-7963-4ca4-8994-c951926ed872",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc5e1cd5-4e20-49a7-bd04-d17ecd3dc474",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c78de2ca-3c93-42c2-97e9-fa6d262f415c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c085868-4ff5-4f86-a3eb-c9a711a4cb25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba9f32aa-27b3-4a21-8199-82fde901b144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ddcf9a-032f-45b5-a29f-de56ce28a344",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7b8f14-d035-490d-8e70-38ef0719b7e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc980d5c-8999-454f-8cd4-67f55ce95b52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b66c96c-109b-45cb-97b9-8722d82b8bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "641a5330-5d00-47a1-93df-86b564fbe9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d061fa63-f3c1-450d-9fd5-69eb0ffb4a3e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35de0fe1-4a42-4362-9981-d2f6d62e4ab0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24ae7c30-dd58-4200-a013-959430d4c971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7173a08a-3bb0-47f5-a039-43a1fdfc594c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e8e4ea6-0db4-4c26-80ee-7be072376fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a63d05-8921-4ed4-838f-9017b5cc7e73",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c263663-4ef9-437f-8f5b-678880cd2392",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2020171e-5acc-41b8-896b-0e1dc6828292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4225ad03-5dd5-4a71-b53c-4dbeea5797db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21fbe81c-1a0d-4182-9440-a03e708b964c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a968c259-9274-4a72-bb12-6cf911a5272f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7209dda-3da9-4c87-9af7-459a0b606280",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f643dd32-6065-4221-b13d-f577577bb2b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14adae8b-a489-432b-854f-284ecf4e6dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1edfc1-7915-4701-9d59-7d9f0df9f307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa223ea-1fef-46a4-82d1-ddb60cab64e7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0a3602-8376-481d-9e88-d46cada17ef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93536e31-f5cb-4d96-ae31-ab312b6b9717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "306322e5-9eb6-4ee0-b7a5-d49419cbd81e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "939533dc-422b-4667-805b-00c0f95e90dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7164655-469f-451e-ae64-abd22bd49606",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4868a036-5e13-435c-aedb-cf9b2b43cb8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eee0836c-fe4a-4300-a8af-256c21e17ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e990c61-4a6d-48c4-aaee-35ff19480936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1217b062-e7bc-4e17-be39-7b6c0d276626"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a3ac7f9-be84-4e34-a62d-9f15c06693f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24d27238-2eaa-45af-bc63-822255a9a9b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6979a06b-ae1b-4e05-bae4-f58961f38585",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6fd75f16-57c0-4621-a389-a41fd6fe20d6"
                    }
                  }
                ]
              },
              {
                "id": "e96709e5-83f7-42a2-87f8-728281bd60f7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "72f440a7-646a-4488-90c9-39a0cb01ff80",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9480a30c-fd21-4837-b32b-e810a745d990",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3e62c036-b45a-499f-af62-eae5ebd6ed51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61337a92-474e-474e-86ee-e2ce3d4bae46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "059a2c0a-1483-47f3-afbb-116d064c2e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e96cd16-02f6-4e20-8adb-7c0fa2a2b6ba",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599c3019-c35d-4875-a4b8-9d3ca06f01f4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a57b3ddb-589e-43a6-a2e8-f667d7dfc6f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "301cff26-b09c-498d-9136-077080d65d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2db68f5-22e3-4de1-9cca-845689185baf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "751c1b01-5e84-4866-a2a7-013f5f4e23a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "045547ec-d491-4fa2-997e-1ad75f15570a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4ab9ff9-53c9-4a9d-ba10-e37460a0b343",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3a2ed78-7816-469a-a416-d8dff00fb76b"
                    }
                  }
                ]
              },
              {
                "id": "6dedd07b-28cc-4048-9a57-c8f813635663",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "60b58dc4-5f0a-4bbf-8c6d-00cf87ed6162",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1c085f-6683-4e23-82c7-a1e5ad523037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ab0f8376-beb1-4165-9e6b-a2e14224f09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145da75c-2fae-4b4f-a4b1-adf0406afa66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4699095b-4daf-4520-af36-4a8eda4057e1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c0366071-4452-448b-a879-ce6a1323eff0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8b4081eb-981a-486c-a740-a520eb1c7fea",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12871a25-4c7a-442d-a791-22ba4f265061",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9992e7b0-b2c6-4c10-8efc-46f3cd70af21"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e413a3c0-0ba2-4c84-815a-5b996b4b4546",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6ab121d-61b5-4949-a7ff-bf12f35b9a35"
                    }
                  }
                ]
              },
              {
                "id": "78e75b40-6078-4258-900f-2de0428e01c4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "462a0c1f-b019-4ce2-8c09-58086ce4e7d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "314e163a-eb87-46aa-a068-6afcc19992e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "096ed53a-b66e-4491-86cd-be3528b9d5b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9cb65b2-470f-4557-b45c-86f07a9ef46f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9bbdcdb1-4090-4f78-87fc-36c4f8b3aa03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "46a82b4d-7deb-42e7-ab8e-e053125bb759"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c4f0d00-2eda-4f58-b95a-cc9f5cb69741",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0cdbd310-c6dc-4d76-87e1-260f44d3d944"
            }
          }
        ]
      },
      {
        "id": "7daeb634-f507-46f0-a4be-b2c486b2fa56",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "fe6d69b0-8dbe-4cd4-a1e4-b15b4a7a7224",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8124662c-2c2b-4a96-b806-70404f275ba7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a8bbfcef-84c2-45cb-bd7c-ebd64542b498",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db010dbf-ff3c-4e7c-9942-09f2514e1f4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8d8c3eef-e750-49d1-84bc-5b12aab8aa8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d85b98d2-f20a-47a7-8a70-9bbd92cfeed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bfbdbb32-e337-4b81-8399-85b8836a011b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d25d72f-7136-4333-92e8-592d9856e71c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ee761b-7336-43f5-8621-3a6636982321",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "577f77f3-50bc-4a57-bc4e-3a3843c60729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf2548b-d431-44cc-82e6-0407a595f5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7bdacb1-8fc5-4eb2-8695-6db73b75b4be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00b80cd9-aa41-4f07-a39b-9adc7e0e3f28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04394e2c-5c81-4497-9a5c-947cbd7a932a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3689617-6c4d-4738-9bfa-b7f9b9925357",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b718ab5c-cab7-49e5-90ee-7bc0be98e1cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90629e62-608d-44fa-a88d-b7edfc5ed93a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "14bd7a13-4b45-43d1-bbca-ad97d7413a1d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31a21811-3165-4418-9d7c-2d70414238af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ced9382-7a5a-4b43-9c50-70b9a0e056ad"
            }
          }
        ]
      },
      {
        "id": "0e567a21-d19b-44d0-a97d-66d92147d8f7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "003586cc-8a43-4f5e-8169-0f45d9e637f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "473a346e-9340-446b-a043-db1648e7bd31",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "591e19b2-7dfb-48ed-ae68-760948984411",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7666103e-eb7b-4d0b-8aa7-72b6d1d45c50",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3da4db5-9415-43b9-94b9-d6866cee3609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "152785cb-5968-4793-ba5c-86951774abd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b9cc192-8b60-498f-af98-a11a4bb6fa6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d818e4b-1de8-432a-acc5-2e0a664ff3e3",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "525f8616-7b90-4eb9-9f5e-0b783f382985",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a41811cf-9da5-44d0-bb9f-54cb782702a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "038f231d-ca8c-4e48-81fc-c12ce50853c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf512f4c-612e-4aae-964f-d4373c4d7076"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c116a539-e462-42ef-b59f-30c707e2f4f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5042a82f-a308-49b0-94cc-14fe59041082"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8e164cc-4b77-4716-be22-5575d24d2c1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26930220-7bae-4207-95c4-1a86a4b1d761"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be57ca8c-96de-41cf-ab89-4b7d04be51a6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "51fd8902-c5ad-4469-a508-ebe3bda75511"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2806103-f1d8-4e27-9218-dfe684ea4021",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14200e8e-66ca-43ff-8d85-f7206d6a7726"
            }
          }
        ]
      },
      {
        "id": "fdb8eb98-d2ca-4393-8e33-ba069b5b26c5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "dede9e65-0ba2-4e4a-b1be-a900beb4dba9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "078c07f7-c335-4e90-929a-2a14e88ff52e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f8f53f8-91a5-4b23-b384-bd4c58b5c270",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3d0aad-a240-4ffd-85f0-2b233a86ccc7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50799d1c-3aec-41f1-898d-85ac370a5753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e7195d-b72b-499c-922b-d110c10b46cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92279ee3-2691-4740-9b23-be2d6244bafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d387d63f-41fa-4ed1-b18e-6c324919b7a2",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6de743-6a93-4d75-acf3-46e46435dfd3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a95cc97b-5fc2-45cc-af0c-2a349f05a9d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1da0aff5-96f7-46f3-9ab0-5ea444bf451f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "399c6582-d5d9-48d7-a5fd-8d9093077b95"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9c7b5b27-473b-4621-8b9d-c2b68d879283",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0195412b-4716-4082-ac1c-0b309afc44f0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8d7820e-0f56-470c-995d-50d943502ddd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60723a70-f8ee-4a6a-b581-bbf2d4c94b6f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "491ab7e1-46e3-4b1d-988d-ae7c341e940c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b116a292-7d90-4b13-842b-0e0722df872c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9cc88a3e-adf4-44fa-8f12-35471e7f80bc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3c8462fb-a35d-4aa9-8398-63072be77aba"
            }
          }
        ]
      },
      {
        "id": "e360a203-ef28-4a39-91f6-121d0df5cccf",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b847fe7f-a831-4958-a5e7-588c2e7632ab",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "871812eb-8f31-4669-aaf6-e786f2c4831d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e48bf16b-a3b6-4c26-b739-5a34418c59c4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b4f77a6-56f8-428e-aa63-e3ae9aed0131",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1cdadaf0-aae9-4b67-ae68-46a25d2bb495",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 300.7807692307691,
      "responseMin": 13,
      "responseMax": 7573,
      "responseSd": 786.2596715898882,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1682987856357,
      "completed": 1682987948658
    },
    "executions": [
      {
        "id": "6870953f-b35c-4539-8ecb-5bd21161585e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "89843298-4213-474b-beeb-840bf8c16a6e",
          "httpRequestId": "d08037f1-cae8-4ee9-8780-5dbc9db170fe"
        },
        "item": {
          "id": "6870953f-b35c-4539-8ecb-5bd21161585e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f23fc6f1-aed5-40b0-a12d-262f2bba492a",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 0
        }
      },
      {
        "id": "f3e72345-f923-4837-8cea-0dc34367f057",
        "cursor": {
          "ref": "5f30ae17-f015-454d-bd9e-42afd743e494",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1295578d-45ad-4d2c-a4ad-8003131d81d7"
        },
        "item": {
          "id": "f3e72345-f923-4837-8cea-0dc34367f057",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5b61afdc-5870-43fa-8eb9-aa10df0a014d",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 0
        }
      },
      {
        "id": "1a9ee6d6-9dbb-4762-8d73-7972ffd2a260",
        "cursor": {
          "ref": "1c2ac2f6-ba0b-439b-a272-34ca0fe3fa37",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "194f8895-b393-4fcf-ae48-ce48209c324e"
        },
        "item": {
          "id": "1a9ee6d6-9dbb-4762-8d73-7972ffd2a260",
          "name": "did_json"
        },
        "response": {
          "id": "f0dcd4fe-699b-46ba-8fee-ba015bd869ac",
          "status": "OK",
          "code": 200,
          "responseTime": 508,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d65a51-4f41-4ff6-99b2-386755a09d84",
        "cursor": {
          "ref": "383f6654-68cb-45e1-8dba-d9b670db0a3b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9cec8caa-5a4d-4c84-911a-e8186cec3f87"
        },
        "item": {
          "id": "69d65a51-4f41-4ff6-99b2-386755a09d84",
          "name": "did:invalid"
        },
        "response": {
          "id": "6eafd615-9f6a-47ce-8721-eba079e1cdbd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 953,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "69d65a51-4f41-4ff6-99b2-386755a09d84",
        "cursor": {
          "ref": "383f6654-68cb-45e1-8dba-d9b670db0a3b",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9cec8caa-5a4d-4c84-911a-e8186cec3f87"
        },
        "item": {
          "id": "69d65a51-4f41-4ff6-99b2-386755a09d84",
          "name": "did:invalid"
        },
        "response": {
          "id": "6eafd615-9f6a-47ce-8721-eba079e1cdbd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 953,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "18b7c847-04bb-4fb3-827b-6d6ab2d79db0",
        "cursor": {
          "ref": "30d8c330-fdc2-41ae-a381-95655fbc8fab",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f2e47b65-d688-43b8-a86c-94b8b19ce6c3"
        },
        "item": {
          "id": "18b7c847-04bb-4fb3-827b-6d6ab2d79db0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "4c881c4f-3df0-4da4-93d5-f64fb31a3815",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d117b9-577b-4e51-b909-fd8512b75ccf",
        "cursor": {
          "ref": "f5b3ff9b-21aa-4cd4-bb3b-7f7b686c7e31",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b0e990b1-c8bc-404a-ae23-eeb0cb431587"
        },
        "item": {
          "id": "58d117b9-577b-4e51-b909-fd8512b75ccf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3e4951c0-9c2d-4d82-9972-da71625d94de",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e435fe4f-a4b1-4cb8-a43d-7c4c4b78cf5b",
        "cursor": {
          "ref": "48619535-2848-43b2-87d7-af5f41dbaaca",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6173de42-ddd1-4cfd-9072-a2b4f44552b5"
        },
        "item": {
          "id": "e435fe4f-a4b1-4cb8-a43d-7c4c4b78cf5b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c47936a3-fab6-4922-a756-047a39dafeb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "a7f86c61-fb02-4c53-b424-f14f57d988ce",
        "cursor": {
          "ref": "ba20c9c6-59d2-4f31-b68d-d263575f482c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f108688d-6185-46a5-9f49-23d5be252130"
        },
        "item": {
          "id": "a7f86c61-fb02-4c53-b424-f14f57d988ce",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e3f18ce7-61eb-4047-a770-694ba94909fb",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a7f86c61-fb02-4c53-b424-f14f57d988ce",
        "cursor": {
          "ref": "ba20c9c6-59d2-4f31-b68d-d263575f482c",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f108688d-6185-46a5-9f49-23d5be252130"
        },
        "item": {
          "id": "a7f86c61-fb02-4c53-b424-f14f57d988ce",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e3f18ce7-61eb-4047-a770-694ba94909fb",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5384e551-71bf-4909-a718-820c01fc82d3",
        "cursor": {
          "ref": "5f9ac63a-afb6-49c3-9f86-b168e08d5abc",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0119530e-8af0-457c-8ae9-1b11aac914c5"
        },
        "item": {
          "id": "5384e551-71bf-4909-a718-820c01fc82d3",
          "name": "identifiers"
        },
        "response": {
          "id": "97a0fdcb-da99-4cf7-8ed7-4eceb603e53f",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b602c0-c551-4857-b121-85488c072ab0",
        "cursor": {
          "ref": "60fdd158-c5d6-40aa-a7cd-4837a43b6b96",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0f342bde-e377-4126-8962-0b197ef99777"
        },
        "item": {
          "id": "87b602c0-c551-4857-b121-85488c072ab0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b06ac538-f451-43a3-9a5f-89424c3ccff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b602c0-c551-4857-b121-85488c072ab0",
        "cursor": {
          "ref": "60fdd158-c5d6-40aa-a7cd-4837a43b6b96",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0f342bde-e377-4126-8962-0b197ef99777"
        },
        "item": {
          "id": "87b602c0-c551-4857-b121-85488c072ab0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b06ac538-f451-43a3-9a5f-89424c3ccff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de7ece5-7f2b-4529-92f2-6730ce66c533",
        "cursor": {
          "ref": "3e84516d-1b54-4ca4-a6cd-fc63b63ca080",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d3a8bf62-cc9a-424c-b054-02c857dc7ef6"
        },
        "item": {
          "id": "0de7ece5-7f2b-4529-92f2-6730ce66c533",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "43d14ec9-112f-4b6d-9f98-f61eec31b7b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b5ce36-c250-49bd-9a81-4d569b13cd56",
        "cursor": {
          "ref": "06542aa5-13b1-4893-99ef-eb4c73dd3882",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1f2504d6-23ce-4750-aa14-d0f365cd6fab"
        },
        "item": {
          "id": "e1b5ce36-c250-49bd-9a81-4d569b13cd56",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "785ad570-5490-4e7b-8b28-8fd107f15d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "464d970f-7560-419e-967a-8b1b64d73da2",
        "cursor": {
          "ref": "cb8ad876-97ea-4793-becb-252ed3776551",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "de7012dc-42be-4bc9-b4b0-9912da125369"
        },
        "item": {
          "id": "464d970f-7560-419e-967a-8b1b64d73da2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ccf2cded-8f30-4437-8509-b8904a0de349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd4874a6-1140-4397-b865-d17663a82af3",
        "cursor": {
          "ref": "404decb6-2a21-4f8e-97ed-5a49332eff34",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a842c726-f98b-4ab1-acac-f838f1b51cff"
        },
        "item": {
          "id": "bd4874a6-1140-4397-b865-d17663a82af3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7b92daf3-bc64-416a-bcb5-f4a245bce4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33b8a0b-d5ef-42a2-af27-c57c72f545e0",
        "cursor": {
          "ref": "ca35923e-3b58-4e40-a12e-904d0091f612",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "013879db-964f-4a4c-b90e-afee438650a8"
        },
        "item": {
          "id": "a33b8a0b-d5ef-42a2-af27-c57c72f545e0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d0017619-afc2-4b82-a0d6-147f506d7c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8139ac-fbf4-4927-8005-735379067123",
        "cursor": {
          "ref": "6f8592ea-2371-4958-a32a-6499ce9f7a26",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fdc6dd02-119f-4307-a348-ed725be7d05a"
        },
        "item": {
          "id": "5c8139ac-fbf4-4927-8005-735379067123",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7683048f-9967-4a5b-9322-8e1f8e33923e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56fc181b-a7e6-4c88-9779-5a760c8db3b4",
        "cursor": {
          "ref": "0ae5b153-a88b-46b4-878a-96501cd17465",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "33778761-469d-455a-a150-33c709c3b9b0"
        },
        "item": {
          "id": "56fc181b-a7e6-4c88-9779-5a760c8db3b4",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "de2caffc-9dcc-48de-a28a-290fde5addad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3922765e-2bbd-477b-b240-db3d0950f21c",
        "cursor": {
          "ref": "5230c9dd-e865-422c-a26f-60c07ed0ca4e",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4188943c-d5ed-4ad4-9dc5-cb583e944680"
        },
        "item": {
          "id": "3922765e-2bbd-477b-b240-db3d0950f21c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "83be570c-8c83-48e7-a1d2-9f51adad07d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f202d50d-010a-4ca4-bcd8-ee789ff2e18d",
        "cursor": {
          "ref": "f1f80e97-1f93-40d4-9288-2ad54866fc83",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "645ec8b9-897f-455f-a3dd-ef083bc53abc"
        },
        "item": {
          "id": "f202d50d-010a-4ca4-bcd8-ee789ff2e18d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a2b1f471-7a25-4623-9854-25b13c3827ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce50936-cd97-4b1f-8607-846893b7672b",
        "cursor": {
          "ref": "1e491b48-919a-4e91-a322-c3024e23a128",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3c9a034d-97f3-412c-beca-8ffda9733a4e"
        },
        "item": {
          "id": "8ce50936-cd97-4b1f-8607-846893b7672b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "634c313d-acea-4f56-b700-63ca0183d0c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f6e5fb2-b1cf-48e7-83e8-65a87dcb5c60",
        "cursor": {
          "ref": "9dbb63fc-6880-4088-b70b-11b6acc9e700",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c73c431d-9664-494b-ac8a-e59ad4fa036f"
        },
        "item": {
          "id": "7f6e5fb2-b1cf-48e7-83e8-65a87dcb5c60",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6f65b0f4-29ba-49ad-8cf5-c57e0a4cc3de",
          "status": "Created",
          "code": 201,
          "responseTime": 2260,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "7b3ca1d1-7c40-4e62-8d97-3b94a198b7a9",
        "cursor": {
          "ref": "4417a3a6-b7b0-4f6b-b915-0e2838d5e483",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "47c82c65-b5a4-4b42-87da-5c84b145df12"
        },
        "item": {
          "id": "7b3ca1d1-7c40-4e62-8d97-3b94a198b7a9",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e7e71eb2-da8c-4438-a794-7c5f65763c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7f7609-0f99-4ddb-9e04-2bab8c7129b9",
        "cursor": {
          "ref": "d69748b7-cec2-48d9-b926-bb2202970a66",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c03dfd95-18ed-44f2-8eec-bdc8e1e41926"
        },
        "item": {
          "id": "4e7f7609-0f99-4ddb-9e04-2bab8c7129b9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ad847d00-74c8-4e9b-9eb4-c32fcc03f744",
          "status": "Created",
          "code": 201,
          "responseTime": 7573,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "db0aedd3-f904-4f56-9f47-f4a0463ab45d",
        "cursor": {
          "ref": "b21743c0-991f-44fc-acb2-ec11c13f4779",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b6ce803c-abbd-4507-8f04-d925fb1a3a3d"
        },
        "item": {
          "id": "db0aedd3-f904-4f56-9f47-f4a0463ab45d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "be154c2e-e502-4c17-8101-4a98c6237af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c834fb98-9a48-4960-a09c-70347ec80242",
        "cursor": {
          "ref": "eee81f73-ab7f-40f0-957b-9d91dc4e8031",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "49b2e6f1-49da-4a3d-b56c-87985568e7b5"
        },
        "item": {
          "id": "c834fb98-9a48-4960-a09c-70347ec80242",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "01eee36c-cac8-409c-a04c-fa0b4d58dc87",
          "status": "Created",
          "code": 201,
          "responseTime": 4128,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "29302608-3731-4887-ab7c-94af9df069fd",
        "cursor": {
          "ref": "d1555701-4247-4720-b44e-3b22387cef43",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8b39f62a-a57f-4625-8a88-31ac32ac11d7"
        },
        "item": {
          "id": "29302608-3731-4887-ab7c-94af9df069fd",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2f574d6a-8f78-4276-b65b-19792b122f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46d6e62d-145a-40b0-b8f6-aa6e3781bb00",
        "cursor": {
          "ref": "48893070-c59f-4d8c-9b86-ae9c09b8e839",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "386b087a-5d98-4a9f-a3be-4a080a239afa"
        },
        "item": {
          "id": "46d6e62d-145a-40b0-b8f6-aa6e3781bb00",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "910107c1-e6ab-4bd6-acb3-c8c03016ad1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b460e1fa-d266-43f0-8bd8-11b7a99d45c1",
        "cursor": {
          "ref": "0a4b8452-edfd-4e38-942e-0f1a5064c727",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "826d35b4-58b4-4d06-8d35-b818e6012b79"
        },
        "item": {
          "id": "b460e1fa-d266-43f0-8bd8-11b7a99d45c1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6de1b3d2-efa9-4b68-8223-73e061fbbea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9e3d43-0f70-40d6-b487-139097c9b5ee",
        "cursor": {
          "ref": "e5c7fdcc-c642-4a1d-ba57-02357fb006e2",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ddd1bf72-933d-4605-871d-05eeedcd4ad2"
        },
        "item": {
          "id": "3a9e3d43-0f70-40d6-b487-139097c9b5ee",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ced8a0bc-a592-4e28-a632-a66af15a9e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cee8db1-1921-4d04-b548-570d9eebaad7",
        "cursor": {
          "ref": "26ef5957-6d50-4532-8a13-9a8083e80797",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "73c5f554-2bbe-4c77-8033-bd00bfa7457c"
        },
        "item": {
          "id": "7cee8db1-1921-4d04-b548-570d9eebaad7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "402473d1-2421-48ba-9804-8466df838bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f1f308-5a16-4f4d-ba36-d21f103adc7e",
        "cursor": {
          "ref": "e6d5dc25-2c8d-437b-9014-55e755909ef6",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a9e1d525-e28b-4c82-b91f-35b35307d940"
        },
        "item": {
          "id": "f5f1f308-5a16-4f4d-ba36-d21f103adc7e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "67519955-acda-4a20-9f06-e191940b548e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c2750e-dccf-4454-887e-7d5822f68224",
        "cursor": {
          "ref": "c52db899-dedd-45e7-95f3-91198033e295",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "681d1b7a-1c5d-4997-ab91-43ec1d0713bd"
        },
        "item": {
          "id": "72c2750e-dccf-4454-887e-7d5822f68224",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4cc344bd-af76-43a4-a41b-32ea5578832f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771117d8-5f95-49eb-9c75-59859b0b5dc0",
        "cursor": {
          "ref": "ebb8b28e-45d7-4e1c-82b1-fbf870d85284",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2e17f220-3f03-4567-8846-92a104135961"
        },
        "item": {
          "id": "771117d8-5f95-49eb-9c75-59859b0b5dc0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3c3ae779-107f-483a-a979-9db645e77511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736abe72-931d-4740-99bf-7332960ea24d",
        "cursor": {
          "ref": "660fc1ff-67df-4027-ab27-8f9a201feafb",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7c40387b-b030-41eb-8ffc-b8b993148d1c"
        },
        "item": {
          "id": "736abe72-931d-4740-99bf-7332960ea24d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5d8d296d-f041-45c7-b51c-4f6f108069db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc357f2f-7009-4e89-b311-36b43b8a6793",
        "cursor": {
          "ref": "6ae1f39e-b7d1-4849-a24f-edfd08fdefe8",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7d78db8d-c1a9-47c7-bc18-6e8f0ae865f9"
        },
        "item": {
          "id": "fc357f2f-7009-4e89-b311-36b43b8a6793",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "72ed9a27-69b6-47bb-a711-94de27a6f2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c76645-2986-41d8-9a4d-ac5fe5a9dd9e",
        "cursor": {
          "ref": "bcbcc70b-9675-4d60-9e60-f92c24e49826",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4b770bea-577b-4298-85c5-dce7275f6f3a"
        },
        "item": {
          "id": "e9c76645-2986-41d8-9a4d-ac5fe5a9dd9e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "75c84487-1f6c-482b-bb1e-9407eea80d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1043,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281c8dc6-e3b6-4215-a731-163a0ffadacc",
        "cursor": {
          "ref": "8b0bc945-9087-4407-a28f-f6855199a769",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "84e9909e-4f8d-4973-982e-5552bb357693"
        },
        "item": {
          "id": "281c8dc6-e3b6-4215-a731-163a0ffadacc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "142d1a8e-8047-4827-8ca8-0c25f67e87c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb677786-37ab-4636-a7e3-f1c36d3e5702",
        "cursor": {
          "ref": "a521b202-a73b-4ad6-aa3f-efa887396305",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3c4cd31a-5468-4a58-97ce-591c74e2a504"
        },
        "item": {
          "id": "cb677786-37ab-4636-a7e3-f1c36d3e5702",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b1431163-0091-4843-9e82-5cc086e92ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38389c32-becb-44a6-ab25-eac47375bfb8",
        "cursor": {
          "ref": "cfeec66f-98d3-4bf9-8f59-dab2cdfe6b73",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0a32ff3a-7e3f-4b77-935e-1bbe17e82a87"
        },
        "item": {
          "id": "38389c32-becb-44a6-ab25-eac47375bfb8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8d7e8996-7d14-4f23-845c-bb659cdf94c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46fd2e30-fa31-4bc6-8c27-7690fd946dd1",
        "cursor": {
          "ref": "6b7997b2-4048-4903-a7f9-f7c849aa2925",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3df8fce0-a992-40c3-95f6-32fef16cdcf8"
        },
        "item": {
          "id": "46fd2e30-fa31-4bc6-8c27-7690fd946dd1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1726f567-425d-4f08-87b2-1a5b46ce2efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f695384-8f58-448b-91ec-b4c8a991b079",
        "cursor": {
          "ref": "eefbb648-20ca-4997-a9df-76f796b4d568",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a219d7f8-2258-42e5-af56-2b704b80d59b"
        },
        "item": {
          "id": "1f695384-8f58-448b-91ec-b4c8a991b079",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cc2e0a13-f42a-4160-a617-ac9918f5a6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44fc7b9-44a6-4cbe-b50f-9937cc7b8dc7",
        "cursor": {
          "ref": "0e37513d-3c26-421a-9c40-6e682eb89e92",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "12655e19-a686-4d6e-8f8a-0f2cb7c5a1e9"
        },
        "item": {
          "id": "b44fc7b9-44a6-4cbe-b50f-9937cc7b8dc7",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3fc32949-e8c3-4ab5-9df9-b38f5386fa9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b937c98b-c6e4-4bf5-80b4-2248e7efa846",
        "cursor": {
          "ref": "1430a4e8-faaa-4eaa-b34f-d8b47229220c",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8ead69d5-3ef5-4d20-91f8-4feeec4ba5d5"
        },
        "item": {
          "id": "b937c98b-c6e4-4bf5-80b4-2248e7efa846",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d9c5b467-998a-431f-978a-5baf09b83160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3985921d-89ea-4f91-829a-d751ac2937e8",
        "cursor": {
          "ref": "07912fc7-86ce-4bd1-90ab-7043b8446288",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "dc6ee3be-6c25-47e9-830b-19383c770ba7"
        },
        "item": {
          "id": "3985921d-89ea-4f91-829a-d751ac2937e8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3c89ec0d-afdd-49a4-8ad1-d95ee1783eee",
          "status": "Created",
          "code": 201,
          "responseTime": 2912,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d3601e27-32fa-4545-90a8-75fcba42a49e",
        "cursor": {
          "ref": "937fea77-26f1-4773-bed2-a0b596a76cf6",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b10c207f-b3a0-4440-8879-c06356240d3a"
        },
        "item": {
          "id": "d3601e27-32fa-4545-90a8-75fcba42a49e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f9e52f3a-0700-46a2-a581-172e8bddd7b8",
          "status": "Created",
          "code": 201,
          "responseTime": 2699,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ffdef938-c4e4-4375-93d4-9af41839635c",
        "cursor": {
          "ref": "3f4fb2a4-c662-4fdc-9204-5a6d49dc9928",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5dee3e96-12de-4b1e-8950-014d0a5dfbc2"
        },
        "item": {
          "id": "ffdef938-c4e4-4375-93d4-9af41839635c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "0906aff8-d56f-4a4a-8af8-60062587fd5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb4e3d3-9e10-4e56-892e-cfc9ac21f2bf",
        "cursor": {
          "ref": "30a769f7-264e-473b-8ee2-d0c3ed063f4a",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "153526db-6de1-4178-b04d-90adf0cef9ce"
        },
        "item": {
          "id": "edb4e3d3-9e10-4e56-892e-cfc9ac21f2bf",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "adb172d6-01f3-4c46-9570-9015db850b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9f97d7-f590-4ce6-abd7-c38086c93df3",
        "cursor": {
          "ref": "6a10c1af-fabb-4547-9086-28f9f88ed5bd",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1a3a4a1f-a283-490e-91fa-7c2fdd1945de"
        },
        "item": {
          "id": "bf9f97d7-f590-4ce6-abd7-c38086c93df3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3e9d81eb-241b-436a-88f1-4cd1a4cdd39c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612d97e2-4808-4eb1-a2d6-627ab5df7ed4",
        "cursor": {
          "ref": "0199c616-5aa0-4545-80f9-3b1541d39a89",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cc1540f5-edfb-423f-b671-025291bf58e9"
        },
        "item": {
          "id": "612d97e2-4808-4eb1-a2d6-627ab5df7ed4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9503f8b7-a366-4bb6-a4b6-571116a056b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e904225-890a-45ab-b32d-73d050ae23ac",
        "cursor": {
          "ref": "c1320fe0-a99b-43ad-81a4-a1819fa165d1",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "571b9092-ae3e-4ce9-b79c-2393db08554a"
        },
        "item": {
          "id": "3e904225-890a-45ab-b32d-73d050ae23ac",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "471fa093-b6d3-4b5e-b124-acbf6d090839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd93b2c3-d7ce-460d-896b-dee48db930d7",
        "cursor": {
          "ref": "9ec55274-5814-4d43-9850-bd1585b86595",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cd834ddf-a3bb-4042-9dec-b2d8d829454b"
        },
        "item": {
          "id": "dd93b2c3-d7ce-460d-896b-dee48db930d7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "24350eb0-0557-424d-a930-12f78ad089e7",
          "status": "Created",
          "code": 201,
          "responseTime": 2751,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3034aa60-263e-4b65-b0e6-a866535c4a0e",
        "cursor": {
          "ref": "771a8733-c39f-4363-82b5-ccb83f3a51e8",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1fa01caf-217f-4434-b590-cced8e9006dd"
        },
        "item": {
          "id": "3034aa60-263e-4b65-b0e6-a866535c4a0e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5489d9a1-717f-4ed3-9499-be24aa271fc3",
          "status": "Created",
          "code": 201,
          "responseTime": 2372,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "44c04f6b-10bc-49d8-b9f0-2322a3cbb0f1",
        "cursor": {
          "ref": "9fa3a5fd-085c-4453-89f5-39ed3ee9348f",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "75c49700-ced6-4472-9324-733515ec97f9"
        },
        "item": {
          "id": "44c04f6b-10bc-49d8-b9f0-2322a3cbb0f1",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a8e0f7df-cf8a-4f2c-ae2f-55dd8ee62a35",
          "status": "Created",
          "code": 201,
          "responseTime": 2138,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "f5871fe6-0653-4faa-8b2c-1a3e9c2ed216",
        "cursor": {
          "ref": "5da71791-e14d-495e-b560-fb0824bcc9cd",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f5abacd1-8f01-4699-bbe7-5214a439e7a3"
        },
        "item": {
          "id": "f5871fe6-0653-4faa-8b2c-1a3e9c2ed216",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a1748103-f8c9-49bb-8ae0-6b35123d1ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7c5d43-0107-4e97-89e5-d858396320a6",
        "cursor": {
          "ref": "b7fcc265-cba1-43e0-8e3d-e20b3a6f4cbb",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ec8a7fc0-c301-4ca2-84da-3df2b5303446"
        },
        "item": {
          "id": "9d7c5d43-0107-4e97-89e5-d858396320a6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ec5ec3fe-ff04-4f22-9107-0e81d3343f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08140f1c-2ca5-4647-b935-2120397d6dc3",
        "cursor": {
          "ref": "ec1081db-06b6-4797-8ed3-4e41d64d1bb1",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8fb40b97-56ed-4e35-9b29-55640a7e9954"
        },
        "item": {
          "id": "08140f1c-2ca5-4647-b935-2120397d6dc3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a3032e8f-410b-4c40-b39c-be3db13ead96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 938,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afdda40-c32f-4419-8b6a-0443abdfbe34",
        "cursor": {
          "ref": "5cf30fee-1a62-4657-94a3-14e81d10e2e9",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "33afd96a-3fe1-45d6-8409-457ffb0d840f"
        },
        "item": {
          "id": "9afdda40-c32f-4419-8b6a-0443abdfbe34",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "15eb5e4c-58d4-4f12-90e6-ab25cf44775b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98005ad2-cb56-457a-b2ab-cc511d42ebf5",
        "cursor": {
          "ref": "4766c5d2-f13e-4c6d-b96f-0c6e20917135",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "60f98eeb-a37a-46fe-b95d-e7658c966dd6"
        },
        "item": {
          "id": "98005ad2-cb56-457a-b2ab-cc511d42ebf5",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3b05d3ec-125e-44b5-bfa4-259a95472480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68728c2-5cbe-42b5-8bb5-9925da54c4da",
        "cursor": {
          "ref": "31981712-e046-4b34-9b7c-13c3abeecf50",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e848e849-3533-4966-9183-15c2a40498ef"
        },
        "item": {
          "id": "d68728c2-5cbe-42b5-8bb5-9925da54c4da",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f5ad8365-7f21-4dc1-a056-09564e59352b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac34b33-14b7-40aa-acc6-c14f454a75f3",
        "cursor": {
          "ref": "5b87dc26-d1e6-4b01-a2a1-897defb2852f",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4754b084-c5a1-473a-a9f4-429f74d977b0"
        },
        "item": {
          "id": "9ac34b33-14b7-40aa-acc6-c14f454a75f3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "02259ae6-0361-47fb-9fe1-b0843d92ceb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 178,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a76c5d6-5a54-4e41-bbdf-d778bb78fc83",
        "cursor": {
          "ref": "9a029630-bc95-4ade-bc09-8e757f5e2ad9",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3befc996-0b44-458e-ab99-67da0a70f61c"
        },
        "item": {
          "id": "7a76c5d6-5a54-4e41-bbdf-d778bb78fc83",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "cf642d5a-82e3-459d-ba71-9aa59be1d604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4fcb98b-1c36-4706-a053-c19f484d3c57",
        "cursor": {
          "ref": "41199079-0ab3-4ec7-adea-5d603a5795dc",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "de1f85e4-4c07-4d86-abe4-0c6baa8dba3c"
        },
        "item": {
          "id": "a4fcb98b-1c36-4706-a053-c19f484d3c57",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7211a95a-2f83-4099-8ae7-6bc79570e031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04fbd2a9-dbfc-41b9-b63e-9f3e05dc3815",
        "cursor": {
          "ref": "3dbf3d80-37d3-4b48-a4a3-c3b9abe9c220",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "83928f61-5b45-4b31-ac46-75cad5518bf4"
        },
        "item": {
          "id": "04fbd2a9-dbfc-41b9-b63e-9f3e05dc3815",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a7c83b53-a636-4e0a-bc24-a096bbd34678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9324f2-a865-4991-af2d-b02c1ec61b86",
        "cursor": {
          "ref": "25c2cdd9-33d1-4a35-8e55-7b3c95676328",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8859d940-0545-48d1-9239-9008384799bc"
        },
        "item": {
          "id": "5c9324f2-a865-4991-af2d-b02c1ec61b86",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "71471163-62c6-4071-bf2a-43bd17f11662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156cb9be-6d6e-466b-b680-d0be4c9111cf",
        "cursor": {
          "ref": "133552a0-fdb9-4e91-a61d-0d933433824b",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c5db329d-e6dd-4709-976b-d1c827f71798"
        },
        "item": {
          "id": "156cb9be-6d6e-466b-b680-d0be4c9111cf",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6b04eba1-5b7a-412f-9670-e925c43d07f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979e9426-edd3-408d-874e-504967e06d1a",
        "cursor": {
          "ref": "fbf980a4-58ae-4d05-9330-4b9d3d5a180b",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8da96d63-f2fa-4c62-a336-94428f2a577a"
        },
        "item": {
          "id": "979e9426-edd3-408d-874e-504967e06d1a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3118208f-d50c-4a3a-94f3-af1880e2c321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e11896-08cc-42c7-9faa-a45f7653770a",
        "cursor": {
          "ref": "b094e674-67bc-4d0b-b101-fdb7ca032b1c",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1f4c5bf0-00d4-4bb6-8b7f-9fbdaa9a66e3"
        },
        "item": {
          "id": "c0e11896-08cc-42c7-9faa-a45f7653770a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "79eef062-1d34-4a63-aeaa-15b3ecdd9b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6bb739e-e28a-41e2-b74c-55f624e17731",
        "cursor": {
          "ref": "4d793d6d-d21d-43d7-b808-7458d8e643c7",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9ed97a92-293d-490b-85ce-16e78bd5c86f"
        },
        "item": {
          "id": "e6bb739e-e28a-41e2-b74c-55f624e17731",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "0433b9da-9aca-4e5d-b242-1220665821a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9735c098-a5f3-4e26-8bc0-95ef6de8034b",
        "cursor": {
          "ref": "b8c0ae34-8821-4544-8aed-868b2a064c90",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c8c4861d-451d-47ba-ab54-a6f6f82abd63"
        },
        "item": {
          "id": "9735c098-a5f3-4e26-8bc0-95ef6de8034b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1453e3f3-e49e-45be-8043-2580318aadb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccc0b379-77bd-4f25-bcbe-d5319b70e535",
        "cursor": {
          "ref": "9d94323b-7cc1-49e1-b1b7-721483fb2a64",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "85ef556b-b529-4a7f-a135-f8fb966d6652"
        },
        "item": {
          "id": "ccc0b379-77bd-4f25-bcbe-d5319b70e535",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6a5a90a0-fbe2-4a38-916b-a078decf8878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9be4b5-2a52-42ec-9d37-8741f86d9ff2",
        "cursor": {
          "ref": "3fd1f6f3-b174-4fed-b5f4-8bb1aa18f9ba",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c48ec0c3-8a57-417e-ab6d-d03483244dbb"
        },
        "item": {
          "id": "6e9be4b5-2a52-42ec-9d37-8741f86d9ff2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "57cc97a6-e910-4c8c-a6e1-8c001771c528",
          "status": "Created",
          "code": 201,
          "responseTime": 2837,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "c7be7b75-0a59-4d2f-8e75-0ebdcf8fd0c9",
        "cursor": {
          "ref": "d738b8ce-74d5-477d-b767-1f749a3eb6db",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0efddbe4-648c-4201-b325-cc9ce7f693d1"
        },
        "item": {
          "id": "c7be7b75-0a59-4d2f-8e75-0ebdcf8fd0c9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "63d917e1-b886-4f20-b749-558b2a6dd62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ccc73f-0bbe-4da3-93a2-a5d99e692ad9",
        "cursor": {
          "ref": "4b7f7fa5-9134-4902-ba95-a7f6702aae13",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "95cdd9ed-3c5d-4a0e-b044-d603a1cf3dc8"
        },
        "item": {
          "id": "50ccc73f-0bbe-4da3-93a2-a5d99e692ad9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "70f70c95-a258-437b-a21b-3bf43f8c065e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a91d79b-d2cc-4608-81ba-42466c5628be",
        "cursor": {
          "ref": "2241c369-eca8-4028-a638-75b800f3d861",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2eeb61da-b235-42ae-8dcb-03d2f3a500a9"
        },
        "item": {
          "id": "8a91d79b-d2cc-4608-81ba-42466c5628be",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2c8ae18f-e501-4dfa-bee4-51e04b3c7945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c083f0-f102-4f40-b623-da506ba728ee",
        "cursor": {
          "ref": "8dcc9e2c-2c99-4bf6-b794-1119f7f5770f",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a9e91f36-7aa1-4f13-9b2d-846bbd14dd75"
        },
        "item": {
          "id": "d1c083f0-f102-4f40-b623-da506ba728ee",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "391bae6b-6d21-46c6-9eee-c2d98bc4f738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc3884d-cc53-4a86-acb2-dd3ad83b0a24",
        "cursor": {
          "ref": "a414f964-f60a-42e5-a8db-03617c250303",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "92410b35-aca8-4cac-8789-2e0e154b556a"
        },
        "item": {
          "id": "dbc3884d-cc53-4a86-acb2-dd3ad83b0a24",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ecd9c5f0-c827-4a85-a43a-6c80bfe986ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3144673e-110b-4aae-adb5-bc5dc02b84d8",
        "cursor": {
          "ref": "881c06bd-960e-4019-bff1-a3a26908d4a3",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9d82608a-c936-4b80-b5cf-3e6bc79f3556"
        },
        "item": {
          "id": "3144673e-110b-4aae-adb5-bc5dc02b84d8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4b2ed7ad-84a1-4ba0-9ec5-c8698cb7c813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4c733d-5bff-4316-84c2-ea8f6ceb4e56",
        "cursor": {
          "ref": "59e3e277-63a6-4c56-a394-864bed1190c6",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b3b452c4-63cb-4e99-b45d-3bd6d38582a5"
        },
        "item": {
          "id": "0d4c733d-5bff-4316-84c2-ea8f6ceb4e56",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9aa24b72-c931-4024-9725-497ec843db77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d75057-20d0-4938-9cb7-7dbd9df7ee5b",
        "cursor": {
          "ref": "6a6b2698-ee57-4ddc-9e83-1b957ca5e6bc",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "019c921f-ca64-4b71-be5c-6b7a1fdea758"
        },
        "item": {
          "id": "30d75057-20d0-4938-9cb7-7dbd9df7ee5b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "66d67197-7d30-4446-95f1-f640bade2002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128484c4-7a50-4d46-abf6-ba65735f2720",
        "cursor": {
          "ref": "dff3d5c0-d6f8-4ef6-89c0-f21936dd30fe",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "843f1e01-e5f3-4772-9060-83c97442c4ec"
        },
        "item": {
          "id": "128484c4-7a50-4d46-abf6-ba65735f2720",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b12f1a51-6135-4370-8857-666aefa49673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e40f784-9382-40c2-bc26-db7e9412f968",
        "cursor": {
          "ref": "b82712e4-9795-490f-9858-c3f29fb9bb42",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c3c14f5a-2df1-4cc1-98ea-f2a9c246ec7f"
        },
        "item": {
          "id": "8e40f784-9382-40c2-bc26-db7e9412f968",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c4f8eae3-fc77-4e4e-8225-6787c11da413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0828c5-dd8e-451d-b70c-ea3e96344fa0",
        "cursor": {
          "ref": "7ca75314-3385-4863-adf3-71087b4b8520",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8ad623ae-4bfa-46cc-a138-2e8b8a855485"
        },
        "item": {
          "id": "be0828c5-dd8e-451d-b70c-ea3e96344fa0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "524e3195-2c97-4395-8856-af0329f177b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83aef79a-d9e3-4691-af3d-559453267d03",
        "cursor": {
          "ref": "5c749c44-e879-46b1-898a-a7c9b3ee50ed",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bbe2e528-33b6-4d8b-a598-8e2eb5fb929f"
        },
        "item": {
          "id": "83aef79a-d9e3-4691-af3d-559453267d03",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d7ded7d7-9a78-4d10-8047-bae687c1a91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2201dd-4dda-44a5-b6fe-fac731f9cc2e",
        "cursor": {
          "ref": "8b6eea7a-109f-4fe0-bb2e-3c1f481a76ac",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "96b9c0b2-3b76-42bc-83a0-9dc89705cd7d"
        },
        "item": {
          "id": "9d2201dd-4dda-44a5-b6fe-fac731f9cc2e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e9519024-58c2-40e8-b5d9-660e9ca05650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1ec092-db47-44f2-9210-a50e868f9601",
        "cursor": {
          "ref": "55f19589-1b59-4c19-84f5-0e48301972ce",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "794827f9-f91b-43d4-9b84-7ca6e996866e"
        },
        "item": {
          "id": "fc1ec092-db47-44f2-9210-a50e868f9601",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ccf3dffb-11c0-4916-b1ee-88d8c1cb0e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b279f6-437f-457c-8d35-504017ba7108",
        "cursor": {
          "ref": "3f834462-035b-4619-9b83-a82e616a83e0",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2be8922a-54fb-4f92-b87e-dcc3ecc3111a"
        },
        "item": {
          "id": "e1b279f6-437f-457c-8d35-504017ba7108",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e1e09483-1488-4ee5-b890-1f650b9a76cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373c5a23-d3d2-421b-87bd-f2491b3a90bf",
        "cursor": {
          "ref": "968e7548-44bc-41e3-804b-7c40f157288f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6ea2c454-4165-49c0-bc2f-dab458cecb04"
        },
        "item": {
          "id": "373c5a23-d3d2-421b-87bd-f2491b3a90bf",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "81f13a15-2142-4544-8208-c1eb40c1f133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a2c6dd-cf63-44ef-8feb-bbbd4f16c9c3",
        "cursor": {
          "ref": "6e8335e1-2a51-4558-bb0a-e5d7d901c68f",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9642a16b-cdca-4e3d-8363-f8bdd0757319"
        },
        "item": {
          "id": "a7a2c6dd-cf63-44ef-8feb-bbbd4f16c9c3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1ffe5587-8c78-424f-9229-ad95e5515f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74de6e3b-24ea-49de-bc5b-8638e80a2520",
        "cursor": {
          "ref": "9ced35b5-2122-4c27-9a20-29937d17e4f6",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "751f9d59-f42f-4e91-a8e2-b1f5f21c2904"
        },
        "item": {
          "id": "74de6e3b-24ea-49de-bc5b-8638e80a2520",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "40bf3417-d91e-40a1-a46d-a94d6927bfd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7218135b-c654-406b-aa0b-ef2e85ee3251",
        "cursor": {
          "ref": "f25671b1-7cfe-402d-bd26-37adc1d10bd8",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e749fda5-11ad-490a-8c2d-3aef444c1b7c"
        },
        "item": {
          "id": "7218135b-c654-406b-aa0b-ef2e85ee3251",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "bc45a8b0-e9a8-41f7-90f4-9d1bc43289f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565a1060-4bd4-4ba1-9940-113b79640194",
        "cursor": {
          "ref": "7878f588-ad2d-4c43-b92f-5cb549b01229",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6f093883-56a8-44fa-b446-7b221249c639"
        },
        "item": {
          "id": "565a1060-4bd4-4ba1-9940-113b79640194",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "137dc967-64a2-4e39-9d2d-65ebbd2ac9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0865491c-8667-4915-b558-7526b82a2521",
        "cursor": {
          "ref": "14438e5c-db6c-4e0c-9cc1-d4ab83e721c8",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4db35694-1797-4b6e-8295-7d66b8355f37"
        },
        "item": {
          "id": "0865491c-8667-4915-b558-7526b82a2521",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "71fd9367-8f2b-46cc-8ddb-2c6fef2b554c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f9cbd9-351c-4e88-8571-2d72c6e9fc1a",
        "cursor": {
          "ref": "058ddf6a-3f18-4781-8395-671646758747",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c1cdff27-4703-439b-b36d-b4a7d4e6aedd"
        },
        "item": {
          "id": "48f9cbd9-351c-4e88-8571-2d72c6e9fc1a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d92fe986-daeb-4744-aad4-7f8af5f5678f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea20f1c1-1caa-4978-80ad-9f113bdcfa94",
        "cursor": {
          "ref": "ac01af6d-b45c-4242-9a8a-da93cbfc99c1",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e6d70ef8-01d7-43e9-a3ca-8262746ac57b"
        },
        "item": {
          "id": "ea20f1c1-1caa-4978-80ad-9f113bdcfa94",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b2ba7b67-f1ba-4c11-b051-0a7c4ad9542d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0823a4f2-f251-4349-899f-fe9385aaae5c",
        "cursor": {
          "ref": "b732b5fb-e847-475c-b4a2-0ee45e7e3d57",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f9d7974a-b4ad-4a42-98a9-ecd1c8ff5bac"
        },
        "item": {
          "id": "0823a4f2-f251-4349-899f-fe9385aaae5c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1c48c019-044e-4d00-a17c-07a37fc71868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2b1c81-7ab9-4b82-99dd-0cda6409cb5a",
        "cursor": {
          "ref": "b580c373-41a4-4aff-9a18-83168a060928",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a3520a8a-2931-46fc-bc11-4c2632d70c6e"
        },
        "item": {
          "id": "dd2b1c81-7ab9-4b82-99dd-0cda6409cb5a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "96450277-ed50-4be6-8c10-318c59dd3d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34f0cf7-77ef-4193-a4d6-05a195a2962c",
        "cursor": {
          "ref": "dd1e3445-d9a0-4481-ab33-2c66562ee91d",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d9021018-e82c-42df-93e6-b105930f2a39"
        },
        "item": {
          "id": "f34f0cf7-77ef-4193-a4d6-05a195a2962c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3af8f2d2-2f51-48ca-a184-9b264309e43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e63060c8-56c3-41c8-80d7-94ee001815b6",
        "cursor": {
          "ref": "d8d8b9eb-de6b-4c20-95a5-5998c468f166",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a2b8374c-69ec-4d86-a798-d9fd41e1fccd"
        },
        "item": {
          "id": "e63060c8-56c3-41c8-80d7-94ee001815b6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2872019f-90df-4047-bbe2-e5213dd06abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdffc439-bf11-4988-9293-d11c4c05049d",
        "cursor": {
          "ref": "8c69db4b-1609-4c6d-83b0-96fb989d8ec8",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "13be4baa-7150-419c-9c06-620c833d850c"
        },
        "item": {
          "id": "bdffc439-bf11-4988-9293-d11c4c05049d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5f8cd821-9133-4ca4-ae94-988fe9ce9fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cfce16-1755-4a92-9cac-1e5eb3a7aa19",
        "cursor": {
          "ref": "0b641628-10c3-4e89-9721-f8be3c2dd9a2",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "294d3345-1961-4ccf-b8bd-6f80519f88e0"
        },
        "item": {
          "id": "51cfce16-1755-4a92-9cac-1e5eb3a7aa19",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f66c1c83-0355-4b11-a93d-dcd93a4774b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702bf820-b809-4b26-9180-b0fbb0523d34",
        "cursor": {
          "ref": "aa72c69c-15c4-43c4-9ec7-51962ecaffea",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e59b7c42-08bc-4b31-bc3b-79f205af5733"
        },
        "item": {
          "id": "702bf820-b809-4b26-9180-b0fbb0523d34",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d38d4373-17f1-4d39-ae6e-93efb7863504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94c58f8-55c0-4135-92e2-d734d3b7c6e4",
        "cursor": {
          "ref": "8d18ac1e-8390-4dbb-8a03-2e07c6c8f735",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9f118fc0-8914-4252-bd08-d699bb61ba68"
        },
        "item": {
          "id": "a94c58f8-55c0-4135-92e2-d734d3b7c6e4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "de7e0a8b-2678-4bbd-87b0-b362881c136e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "5c3ce5a1-2e7a-4407-837e-29dfb20c226d",
        "cursor": {
          "ref": "3aa1b295-3304-4add-8745-20fa82b8b145",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0cffb2a2-9af2-43af-a3d0-d93410f23bc9"
        },
        "item": {
          "id": "5c3ce5a1-2e7a-4407-837e-29dfb20c226d",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "5e287729-fb17-48cc-b5fb-41ca7c01d9eb",
          "status": "Created",
          "code": 201,
          "responseTime": 1986,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "c52f42c4-58aa-4903-90da-18797373d171",
        "cursor": {
          "ref": "8c44d13d-598a-41a7-af9a-ed4370dd7520",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bf23e700-815b-4673-a1ad-6c786c3d661f"
        },
        "item": {
          "id": "c52f42c4-58aa-4903-90da-18797373d171",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9995fab2-a443-405a-b831-fa3a47640325",
          "status": "Created",
          "code": 201,
          "responseTime": 2346,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa19c0b8-cfa4-4ba5-8043-07f3f3713b16",
        "cursor": {
          "ref": "fa46b74e-5cd4-4007-a340-316397590232",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0467a75d-e38b-40f7-9a60-8df427d8cbb4"
        },
        "item": {
          "id": "fa19c0b8-cfa4-4ba5-8043-07f3f3713b16",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "906dd085-1ece-4f3a-b0d5-3a3de1ea86b4",
          "status": "Created",
          "code": 201,
          "responseTime": 2316,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2197de38-4b50-4eaa-bd01-6dc6b4e87670",
        "cursor": {
          "ref": "147c1d3c-7bb2-46f5-b833-b42f58bc4f33",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b1af19bf-aacf-4a1a-b586-c0508715b253"
        },
        "item": {
          "id": "2197de38-4b50-4eaa-bd01-6dc6b4e87670",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "be2b8cc8-5052-425f-82c4-dd975245ded5",
          "status": "Created",
          "code": 201,
          "responseTime": 2516,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d02e74-9b72-477d-8c34-f2473c3c7ef2",
        "cursor": {
          "ref": "461bcd75-1366-4d86-bb6c-71a9788aa1ca",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b6c00e6c-e711-40e2-b43a-12f20fc3322f"
        },
        "item": {
          "id": "74d02e74-9b72-477d-8c34-f2473c3c7ef2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "61d95bae-f03b-40ba-8d40-5baed3bb3b5d",
          "status": "Created",
          "code": 201,
          "responseTime": 2205,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f8e2ef-49a3-45e4-a157-bb8d8283f4f7",
        "cursor": {
          "ref": "69312b50-54c3-477d-9924-c1a5be8d8fa7",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "63079724-8e4b-4672-a29d-65dca7fc3799"
        },
        "item": {
          "id": "81f8e2ef-49a3-45e4-a157-bb8d8283f4f7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b3f603b9-c0e5-400f-bd41-03906d3ec72d",
          "status": "Created",
          "code": 201,
          "responseTime": 2400,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-02T00:38:37Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-02T00:38:37Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "819ece0e-b175-45b5-a953-8adbcab681c4",
        "cursor": {
          "ref": "7fbfa132-6fe0-4b33-9c52-4e9dd025c4f8",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3748012f-5236-4f66-a02f-4b00be373479"
        },
        "item": {
          "id": "819ece0e-b175-45b5-a953-8adbcab681c4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2b53c3fc-8d0f-41a8-9aca-3d5f776277b1",
          "status": "Created",
          "code": 201,
          "responseTime": 2568,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394b8a5b-9dd2-4468-a30a-4dc67a7ca60e",
        "cursor": {
          "ref": "93a7cc42-4721-4b0a-be0c-be93b08ae4a8",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e2c3063f-7bad-4808-90c9-c812e0070852"
        },
        "item": {
          "id": "394b8a5b-9dd2-4468-a30a-4dc67a7ca60e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c81c321e-0282-4c59-9ced-c9dc7a172659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394b8a5b-9dd2-4468-a30a-4dc67a7ca60e",
        "cursor": {
          "ref": "93a7cc42-4721-4b0a-be0c-be93b08ae4a8",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e2c3063f-7bad-4808-90c9-c812e0070852"
        },
        "item": {
          "id": "394b8a5b-9dd2-4468-a30a-4dc67a7ca60e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c81c321e-0282-4c59-9ced-c9dc7a172659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd4c7d5-36b5-48c7-bc34-6808ca17b886",
        "cursor": {
          "ref": "b53afcdd-dc67-4801-8e2c-e6e1ec141bfc",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "130f777c-fefa-4f8b-94cb-b7a4e6bed5db"
        },
        "item": {
          "id": "9fd4c7d5-36b5-48c7-bc34-6808ca17b886",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1d890ffc-52a0-4e5b-b35f-a817d2316459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2c5031-27e5-4af2-8235-c592b99aa2f1",
        "cursor": {
          "ref": "0b98c6dd-dc39-464e-9b20-65146703e900",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3643fe77-8569-47e2-9f98-b2db3df0eb11"
        },
        "item": {
          "id": "9f2c5031-27e5-4af2-8235-c592b99aa2f1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3e491fe2-4762-47f1-9f07-f1b1ace30a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a92d2aee-7931-49ec-b83c-389e03b8f61a",
        "cursor": {
          "ref": "7bef95aa-d55b-4c31-92d7-38e9d6a1001c",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0c2dbb37-be8b-4414-919f-50aa5c222285"
        },
        "item": {
          "id": "a92d2aee-7931-49ec-b83c-389e03b8f61a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b16a3167-6c9e-40bf-a962-f619a7062a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1d9a7c-1776-464d-b4e8-714d5e37bf39",
        "cursor": {
          "ref": "71c1dc5d-cc05-4c86-b72f-62182bb6089d",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6718b693-a0ea-4b2c-bf71-27742b6839c7"
        },
        "item": {
          "id": "9b1d9a7c-1776-464d-b4e8-714d5e37bf39",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9f2ffaac-14f7-4fdc-a05b-3f0a33c7fa3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc0a92e-2168-4d40-a941-f3e692a58d93",
        "cursor": {
          "ref": "2527f169-b7c0-47d8-b3ca-73f93d34691c",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2c33338e-877a-4420-a715-e6af534ef2b2"
        },
        "item": {
          "id": "afc0a92e-2168-4d40-a941-f3e692a58d93",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0b04e690-04a1-4fd5-b7a6-7dfb92e71a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e601fe86-d122-45b4-ac4e-e4b46bd10672",
        "cursor": {
          "ref": "b6875fd5-74b2-4f8d-91a3-477a4fdd4d7e",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e05ce688-3707-4b0f-a28b-a74027c78982"
        },
        "item": {
          "id": "e601fe86-d122-45b4-ac4e-e4b46bd10672",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fdb521e2-ff53-4cd1-90d5-21612f6d6926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e08fb7-2142-442a-bfb0-363c48dca166",
        "cursor": {
          "ref": "a3502701-69c5-4580-b698-3fb3e6174d97",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ac5b3219-ceee-4c54-ad6a-c7fc64c55103"
        },
        "item": {
          "id": "c3e08fb7-2142-442a-bfb0-363c48dca166",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c6c53b56-68d5-4d8c-8185-c19f0a273efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b3f97b-9fc5-42c3-b82a-1d45b24561f8",
        "cursor": {
          "ref": "c9ba704a-aed4-443d-be87-f9d2afe1f506",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b6a945ec-0180-4444-badd-2c6c0688d4f3"
        },
        "item": {
          "id": "b8b3f97b-9fc5-42c3-b82a-1d45b24561f8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d61fb870-8e08-48bb-9b59-0c3e40ee073c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48668a48-abc7-44f7-8a49-aa9d13995714",
        "cursor": {
          "ref": "c0ae0657-db29-4477-82e0-53b0539eaa66",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "536b5969-ef15-4e03-8a4e-f3e6adb66575"
        },
        "item": {
          "id": "48668a48-abc7-44f7-8a49-aa9d13995714",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3c9cc275-75d0-450a-8a6a-21fcce2e8a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bee6b07-958c-44ce-a455-6f6afc6716f0",
        "cursor": {
          "ref": "f7ea6224-b8c9-4ea5-a72c-94f44fd7c071",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0e2f7175-f3ed-4e83-8790-77b1158d004c"
        },
        "item": {
          "id": "3bee6b07-958c-44ce-a455-6f6afc6716f0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bf84c77f-5ca6-48fb-8d0f-71667f582116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41b2dfb-c545-413f-bee6-20ab828349f1",
        "cursor": {
          "ref": "e63a4fe9-daa4-4f2d-be73-684d099c39be",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "986086c3-adca-4640-8b71-2becd9262478"
        },
        "item": {
          "id": "b41b2dfb-c545-413f-bee6-20ab828349f1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2300bb84-1537-4c09-9231-68a22fad70fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da14fbba-267b-49cc-9174-119b16ff0452",
        "cursor": {
          "ref": "a73f8a86-63af-45cf-bd8c-32de60e431ee",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "fa21c91b-3c16-40e1-84b2-6228891a4543"
        },
        "item": {
          "id": "da14fbba-267b-49cc-9174-119b16ff0452",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "52deab34-acf3-4cb0-83ba-a02a2bc713ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8585f9f9-dad3-4c90-bba9-bb7d47f3f909",
        "cursor": {
          "ref": "eaf950c7-7c7d-4056-bffa-c9d2bf995bb9",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "fc789f80-8daa-46f0-beae-83992b247175"
        },
        "item": {
          "id": "8585f9f9-dad3-4c90-bba9-bb7d47f3f909",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "17b19d63-f749-46cb-b4d9-18fb50333768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021cda75-a13f-49e9-ad76-d88c2e384bb9",
        "cursor": {
          "ref": "d8719599-46e8-4eff-a51f-a02a5ac36373",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c082c999-0379-4de3-b4aa-873fa9877097"
        },
        "item": {
          "id": "021cda75-a13f-49e9-ad76-d88c2e384bb9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "501a286f-e9b2-4810-b341-da1d8b4e26a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b3b21ff-ad91-45f9-ae5e-1733bb4327c7",
        "cursor": {
          "ref": "694b5666-27d7-498f-889b-ef23381cbb07",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ca348f9b-ccb7-4c8a-9df3-92dea2799f95"
        },
        "item": {
          "id": "8b3b21ff-ad91-45f9-ae5e-1733bb4327c7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "dd22be1a-89d6-4f73-9963-cb5249a9a39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 742,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb86c5c-da49-46d9-a077-81a8e9f79ac7",
        "cursor": {
          "ref": "ef8cfbda-71ba-48e1-b74b-7ad86f8efafb",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7cf30ca2-1f32-4cc7-b542-96337849c735"
        },
        "item": {
          "id": "4bb86c5c-da49-46d9-a077-81a8e9f79ac7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "348890bb-274d-4b68-9ecb-1b2fe475775f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d9f38f-b833-45d2-b8bc-e6a64a3956fa",
        "cursor": {
          "ref": "71ba24dc-fa26-4d4a-97b4-e58732ecad02",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c45e7b17-fca4-4ba3-aca3-40a391a33af1"
        },
        "item": {
          "id": "97d9f38f-b833-45d2-b8bc-e6a64a3956fa",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "337525e3-471a-416f-a4f8-4bff142fabdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86b692f-76f2-4413-b1e6-53d78c4ac3c5",
        "cursor": {
          "ref": "2e591531-5dde-443f-94fd-36f3cfe7d18c",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "13a390b8-9875-4498-980f-bdf48e9328a5"
        },
        "item": {
          "id": "a86b692f-76f2-4413-b1e6-53d78c4ac3c5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "37b7de34-c5df-4a70-852d-fcdf8667c3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 682,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9621babc-2f7f-4a6b-b79f-4a703b86aa7b",
        "cursor": {
          "ref": "13f743ed-5378-4240-abb3-df01fd010954",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a4dcfadd-4c76-45c0-afed-cce15a349e29"
        },
        "item": {
          "id": "9621babc-2f7f-4a6b-b79f-4a703b86aa7b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1af51655-32e4-4e6b-b20d-e2472f61905d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510691db-97a9-467b-8e00-5947b4840ba4",
        "cursor": {
          "ref": "76074af0-303f-4923-8c3f-247dc3564630",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8c63d79f-0b9e-4482-abf7-c42ce43a6b4a"
        },
        "item": {
          "id": "510691db-97a9-467b-8e00-5947b4840ba4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2ddda753-7f3b-47b0-82ee-c15d8f72f7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0326df-3bd4-4f2d-86ab-5547e9b0bd1c",
        "cursor": {
          "ref": "2f39e0bd-7651-4c8a-a08c-5c03a2910128",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "01bd9b9b-24b5-4793-8bbc-877c356b1478"
        },
        "item": {
          "id": "fd0326df-3bd4-4f2d-86ab-5547e9b0bd1c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "78ed7327-2839-48a9-b37d-1905d8cc49b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b8d8ec-999a-4d9f-892e-58222cdb9974",
        "cursor": {
          "ref": "7889e15b-0345-4c0e-801a-13bfbd2d78d5",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b034947b-591c-4382-a073-1b7f0a721458"
        },
        "item": {
          "id": "a6b8d8ec-999a-4d9f-892e-58222cdb9974",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8858a47b-6ff1-41b2-924f-fc57f5bfe1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db37e12-324b-4947-afc8-7e6c6e3541f1",
        "cursor": {
          "ref": "ad7527e3-0d75-4030-9818-f1c5a45e9c6c",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d280aaf6-803f-427e-9910-537b4c6d248b"
        },
        "item": {
          "id": "0db37e12-324b-4947-afc8-7e6c6e3541f1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e7ef4233-b2ab-4698-91e9-19e7862aba39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22feac76-f8fb-4ab3-a845-781390ee62ba",
        "cursor": {
          "ref": "6256d9d3-2088-483b-a818-b1329401462f",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3ba59c7d-ffdc-4db6-996c-ef68acafd14b"
        },
        "item": {
          "id": "22feac76-f8fb-4ab3-a845-781390ee62ba",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4d31abe0-3c3b-488b-a6a3-71c4fa6b9627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b14582-221e-49df-8471-3060d15df9e6",
        "cursor": {
          "ref": "9cd30073-e385-4a89-8550-3268d067218f",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ecbaec8f-231f-4305-9aa3-d341c74c9062"
        },
        "item": {
          "id": "13b14582-221e-49df-8471-3060d15df9e6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f165f721-31cf-43cc-9ce6-423cdc182576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b69179f-ce29-4263-a862-1e10bcbf120e",
        "cursor": {
          "ref": "cd50e275-8fb7-438b-a218-cb1aa90afd8f",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "04d577a6-62af-4a02-ab2b-b171bcf4da21"
        },
        "item": {
          "id": "9b69179f-ce29-4263-a862-1e10bcbf120e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "17a6c809-ec4a-423d-832c-b72169212ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2864e219-3aac-4b5a-bd3b-d49ce0813c50",
        "cursor": {
          "ref": "1a8512e0-3dd9-4881-a280-2c5e61005adb",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5b1cad7b-4213-4035-95a1-ed007dfec706"
        },
        "item": {
          "id": "2864e219-3aac-4b5a-bd3b-d49ce0813c50",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1b7838d0-dbaf-41ef-a9d3-0eb2bcaf18e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e990c0cb-4369-4261-ac56-42fb435a560a",
        "cursor": {
          "ref": "9747bb6b-80b8-418a-81d3-6873aa29b934",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0302b5ad-9bd7-4ccb-8586-47a6177a638b"
        },
        "item": {
          "id": "e990c0cb-4369-4261-ac56-42fb435a560a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c7668f36-13a3-40b9-97be-36080f7a551c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d99bdd-58fd-4b36-aa4d-883c16128fd0",
        "cursor": {
          "ref": "b3ad14b2-9809-47d3-a5a9-a32ff50e53ef",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c2c7e8f9-da44-402e-8383-41a7d49be7bc"
        },
        "item": {
          "id": "e2d99bdd-58fd-4b36-aa4d-883c16128fd0",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6ff4aeaa-7eeb-49b9-9dbd-6f133091e49e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9dd569-8bd4-44b1-919d-c3be2e57ee82",
        "cursor": {
          "ref": "4ae993cc-2931-4023-a46f-aaa86f91387c",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d38b08b0-54bd-4673-962b-c3cc80a1be68"
        },
        "item": {
          "id": "1f9dd569-8bd4-44b1-919d-c3be2e57ee82",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "364ea58c-6028-4918-92c5-954319871a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912d1e6f-2dcd-48d7-a34f-ccd5ec44a46d",
        "cursor": {
          "ref": "963e42d2-57a1-4fcc-944f-5bc8e759efdf",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "3eb65480-b3f8-4dc8-86d4-79f1a8d9a537"
        },
        "item": {
          "id": "912d1e6f-2dcd-48d7-a34f-ccd5ec44a46d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3d1356c2-2acd-45aa-99da-deea234a279e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb99e46-f7ec-475f-ae2a-d3a923182efa",
        "cursor": {
          "ref": "bef29b4f-1145-4149-9b43-2bf3201216ec",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "166a057e-d32f-46de-a7d7-374187485ed5"
        },
        "item": {
          "id": "beb99e46-f7ec-475f-ae2a-d3a923182efa",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1fe1a9e8-3063-4b60-92fb-4623708e69d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "d06ac40d-038c-4166-aba1-4edc0bcb15a7",
        "cursor": {
          "ref": "a1a7e226-0e9b-46e0-872a-3a96be1be5c5",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a7111086-9410-460e-ad1b-a2d3162c4c47"
        },
        "item": {
          "id": "d06ac40d-038c-4166-aba1-4edc0bcb15a7",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "738f14d3-6d03-41e8-9f4b-ed6c4105b841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "88352990-0b8c-4b19-a56d-5094f26b7cb7",
        "cursor": {
          "ref": "c17371bd-8aaa-4878-9803-63063cc2d36f",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a7891092-fdb8-4933-8d7d-ec747e867c93"
        },
        "item": {
          "id": "88352990-0b8c-4b19-a56d-5094f26b7cb7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f3007e82-278b-45b6-b256-430554d9b181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88352990-0b8c-4b19-a56d-5094f26b7cb7",
        "cursor": {
          "ref": "c17371bd-8aaa-4878-9803-63063cc2d36f",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a7891092-fdb8-4933-8d7d-ec747e867c93"
        },
        "item": {
          "id": "88352990-0b8c-4b19-a56d-5094f26b7cb7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f3007e82-278b-45b6-b256-430554d9b181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f64d263-826b-41cb-9ee1-3fd565d27fea",
        "cursor": {
          "ref": "c478cee9-54b2-44b7-a51a-1c539a7655dd",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7fe8cf98-b7b1-4fff-8c3d-b9bbbd05e16f"
        },
        "item": {
          "id": "6f64d263-826b-41cb-9ee1-3fd565d27fea",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "3e2691fb-a058-40ef-9042-fe238597ee24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f236a7-423f-4ef4-a315-dedeac1e4817",
        "cursor": {
          "ref": "f845be4f-7309-438f-8cb1-0c4451de9062",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "038825f8-c1be-4422-831e-bd780c807aba"
        },
        "item": {
          "id": "38f236a7-423f-4ef4-a315-dedeac1e4817",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "43dedcea-959b-4adc-b3ce-709795eba448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63122aaf-6a39-4510-8dce-b1f25c98d79c",
        "cursor": {
          "ref": "177a3f20-fca0-4dc0-a01c-c357a93f6814",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "958fadb3-3c03-4ec6-9b7d-db3526be3be5"
        },
        "item": {
          "id": "63122aaf-6a39-4510-8dce-b1f25c98d79c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6ff169e0-d74d-459a-85c8-d7224356b282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa43d8e-eab7-4c1c-aaac-a99bc8f3df77",
        "cursor": {
          "ref": "daa07037-d165-40e4-8748-a62a1de33f1f",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b34bdc05-f86b-42c2-b695-6fb3b745b176"
        },
        "item": {
          "id": "3fa43d8e-eab7-4c1c-aaac-a99bc8f3df77",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "fa1cffb7-e6f4-49bc-8902-713c5ebc65f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e43bd1-1716-43cc-85d5-b5cb6207c419",
        "cursor": {
          "ref": "308b010f-8128-4521-974c-df28dd2586a2",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7c1f9834-0b01-4c08-b69a-a77529e8de73"
        },
        "item": {
          "id": "53e43bd1-1716-43cc-85d5-b5cb6207c419",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fce049c3-ab15-42dd-ae93-a7bd0374cae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfbfa623-8fbd-44db-a519-9bbe0e0707ef",
        "cursor": {
          "ref": "b47bca7a-423a-4fda-8ac1-96fe570221d4",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1a18864d-1b14-4074-9be7-d2e742408c61"
        },
        "item": {
          "id": "cfbfa623-8fbd-44db-a519-9bbe0e0707ef",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "505bd959-98ac-4d5f-b064-37c2d5471a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48de525-fa28-46be-897c-1f215e55c7de",
        "cursor": {
          "ref": "691d2102-6f85-42a1-9477-859f3bf8d413",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "96f91185-6cf3-4de0-b961-d58128526ca2"
        },
        "item": {
          "id": "c48de525-fa28-46be-897c-1f215e55c7de",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fdd36a89-741d-4d9d-a764-08f47d744c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b7ca59-76c6-4294-ae16-0f1f480104a4",
        "cursor": {
          "ref": "04415b08-5c78-4789-9f53-15cf73168dac",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "03cc6254-e402-4e30-9d73-b3c13b7566e5"
        },
        "item": {
          "id": "33b7ca59-76c6-4294-ae16-0f1f480104a4",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d29f0d77-59db-400c-bc00-2a064e5d52b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa5c18e-d2e8-4f1b-b3e9-6dddf2364c4a",
        "cursor": {
          "ref": "b436488d-50ba-4b77-851d-6779ee68580e",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d575cf1d-ef7e-4d19-89cf-f4fd11b3e7c5"
        },
        "item": {
          "id": "efa5c18e-d2e8-4f1b-b3e9-6dddf2364c4a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c3b54e58-8c1e-42cc-8008-fa7f444f751b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be467cb-9b32-4240-a2fd-52e87990d229",
        "cursor": {
          "ref": "788cb2c5-c17c-4d43-b2d5-bcd2597541d9",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "65b7bcc5-a42b-4b70-a771-bf5129c3fab6"
        },
        "item": {
          "id": "9be467cb-9b32-4240-a2fd-52e87990d229",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "47ef35c5-54c2-452f-aefb-5de8cc6ba8dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a0f7e0-f2bf-4540-be9b-880aeea09096",
        "cursor": {
          "ref": "d61dac8a-a5a5-47a3-9f5e-adf779b58a7d",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "78b3d3a0-fdb9-43be-b329-83e9bdcb65b0"
        },
        "item": {
          "id": "d8a0f7e0-f2bf-4540-be9b-880aeea09096",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "149fca4e-fb1b-4d3f-b0ec-532b59e7f2a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563835c3-43a4-4665-a1b6-fcb95f3b6b72",
        "cursor": {
          "ref": "70355c44-eb64-413a-8a47-d67240e674ee",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "09732c1a-21cc-486c-9efa-a5c6824fbfd2"
        },
        "item": {
          "id": "563835c3-43a4-4665-a1b6-fcb95f3b6b72",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "83772b0b-9d5d-4659-99b7-03b332f3e24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392dcb36-d2eb-4776-981c-29512ae167f4",
        "cursor": {
          "ref": "df2b8e27-4d72-4dcc-8d40-53523423c694",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "56ec786f-0ca9-4cae-9e25-fc34baf2e269"
        },
        "item": {
          "id": "392dcb36-d2eb-4776-981c-29512ae167f4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "80589a07-748a-4798-af3c-29c4fc9f19fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3bcb45-c134-4850-9270-96cc49e2947b",
        "cursor": {
          "ref": "67c04081-bb68-42bd-822c-a55b6bf34bbb",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c5a5ce38-fe75-4704-b025-171de0c26cc8"
        },
        "item": {
          "id": "8e3bcb45-c134-4850-9270-96cc49e2947b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c6a32214-8fdf-4c21-8036-500702e1473d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee616099-762f-4336-834c-4d527d56a081",
        "cursor": {
          "ref": "692af477-547d-484c-9bba-c3939e48c14b",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c975c726-243a-4717-a0f9-0f6d0f8c9446"
        },
        "item": {
          "id": "ee616099-762f-4336-834c-4d527d56a081",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fc0197be-770a-489a-acde-976fd9ca94be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908a62bb-2753-44e7-9cf0-62ffaf399811",
        "cursor": {
          "ref": "d88cae10-221c-4155-9246-021b33a9d9c6",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "086730ed-294f-4186-a7fd-524bc4491f1e"
        },
        "item": {
          "id": "908a62bb-2753-44e7-9cf0-62ffaf399811",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0ac84ad4-15b3-4030-bda4-b116fbb25e60",
          "status": "OK",
          "code": 200,
          "responseTime": 357,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "2dade698-16e2-494b-8503-26d4b9629777",
        "cursor": {
          "ref": "c63a2561-bc4f-4995-b392-9e51134c3358",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6f62154e-90c0-4148-b382-be979d31e36a"
        },
        "item": {
          "id": "2dade698-16e2-494b-8503-26d4b9629777",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "eea86e81-09a4-4cb7-a93d-f425b916d8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e89684-55ef-43f9-a7ad-7ea7a1113b12",
        "cursor": {
          "ref": "790e6f03-8aa1-491f-8329-5c4c3f889099",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6de8e227-6cf7-49f9-9142-7c005bcfe2e2"
        },
        "item": {
          "id": "97e89684-55ef-43f9-a7ad-7ea7a1113b12",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c4a22808-b75f-41c4-a368-6202fcc0a0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c104c9-2372-407d-8f2f-3a48b364cd43",
        "cursor": {
          "ref": "cdc3ed24-d01a-4e24-9408-5e2795748adb",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "afd27bd0-6297-4440-8bb8-a331d1fd181b"
        },
        "item": {
          "id": "06c104c9-2372-407d-8f2f-3a48b364cd43",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "feb64b50-6fff-48d4-9578-3dc44bdb776b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e0b967-958e-4f13-b520-406a6ad23417",
        "cursor": {
          "ref": "9e23da87-08ad-4fbb-a400-2582369be618",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b0f5d3b4-131f-4582-9421-956c8a93b5f2"
        },
        "item": {
          "id": "c4e0b967-958e-4f13-b520-406a6ad23417",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "73aa558d-26ed-4233-b606-93b47033d14d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96392b5d-17c6-4d03-9c03-2a1d2f7402d5",
        "cursor": {
          "ref": "836d8ff6-15b7-410f-a1f5-09bff6261c49",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "423e0274-3f11-457b-a519-a65560c1db96"
        },
        "item": {
          "id": "96392b5d-17c6-4d03-9c03-2a1d2f7402d5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "94d1850e-634e-4f0a-a459-91bac1fa36d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2c43cc-b3ad-449a-ab2e-ec2c3c486bd6",
        "cursor": {
          "ref": "49a24e60-0b4c-4b6b-98e1-cabc8b2bc84f",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5feae820-8f1e-46b6-b913-596667c6f68b"
        },
        "item": {
          "id": "8a2c43cc-b3ad-449a-ab2e-ec2c3c486bd6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "148beea6-a3a7-4609-a938-5616ffe3ec3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2de1dbf-5e86-46ef-8b6d-0d90a5806b7c",
        "cursor": {
          "ref": "34ae724a-d6c8-43aa-8f76-87a0ca1d2e84",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d33153af-45f8-4045-904c-3751381edfb4"
        },
        "item": {
          "id": "c2de1dbf-5e86-46ef-8b6d-0d90a5806b7c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "63cb9ca8-375f-473c-b42a-366685c635b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6c63ac-2f76-4134-a211-475f89b91c9f",
        "cursor": {
          "ref": "c98334e5-d4fb-464e-b2a8-ee834b1c6bcc",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d4482ffc-b8ed-4960-afb6-3d60f8d8a3ff"
        },
        "item": {
          "id": "ed6c63ac-2f76-4134-a211-475f89b91c9f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b5dea1b8-a123-4edf-ac04-79509b0a230e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e40d4e-a669-4d07-a98c-53da2d6b4afa",
        "cursor": {
          "ref": "d2d95a60-64a8-4615-a4cb-d60909b0994e",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2755a7f5-53de-4d6c-9cef-fc00852f763e"
        },
        "item": {
          "id": "80e40d4e-a669-4d07-a98c-53da2d6b4afa",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c2c7d6ea-fbf5-4b66-a8b3-122fb589465e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea4d345e-a23e-4d2b-8792-16f0e3b20a56",
        "cursor": {
          "ref": "bf63866e-0bbc-451c-b0af-f15bbc8599d4",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f5a22eeb-137c-4c63-8805-24d3959f0620"
        },
        "item": {
          "id": "ea4d345e-a23e-4d2b-8792-16f0e3b20a56",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4d49b525-da61-4993-8156-f5a1d25b12c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0888fa-6d74-4f4e-9ccb-5339228c1529",
        "cursor": {
          "ref": "6d8f394c-3f6f-4c1f-af4e-137d46218dc5",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c1a27b19-01a9-45d7-b130-53e418953ead"
        },
        "item": {
          "id": "9f0888fa-6d74-4f4e-9ccb-5339228c1529",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4c68ff00-c200-45e1-ba02-5ec087016d08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2b95c0-c958-499f-ba9f-8e8f09379d9c",
        "cursor": {
          "ref": "be4fe750-1cae-4c84-95ce-bc22000b837a",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6fa409db-c63e-4b43-99f9-04771a7ea3af"
        },
        "item": {
          "id": "cd2b95c0-c958-499f-ba9f-8e8f09379d9c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2062ce08-64a7-44f2-a2b7-4567b17ce458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673fddf3-1bc2-4292-9a77-5b0b1335c383",
        "cursor": {
          "ref": "16d53536-1aa7-4cf1-8693-9ddd4e7eb231",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3b908e97-de89-4e7c-b0fb-0f6257cb3f31"
        },
        "item": {
          "id": "673fddf3-1bc2-4292-9a77-5b0b1335c383",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "346ccd7a-62ff-475c-a8dc-893f10165bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87a5909-447e-4d05-83a7-7ce04dfb0427",
        "cursor": {
          "ref": "170469fa-d2ba-4c62-b9df-50727a2146d4",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7d491448-38e6-485a-b554-47c24981707d"
        },
        "item": {
          "id": "a87a5909-447e-4d05-83a7-7ce04dfb0427",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a83505c8-7e9e-4cd7-925c-2a5ef2550484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d5a2b5-194b-4150-97f8-08c695e2666f",
        "cursor": {
          "ref": "8dcd0d2c-2775-4ad0-9d1c-65127fd44b7e",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "37d6a0a6-3d8f-4e20-bd07-f30f4e6dcf06"
        },
        "item": {
          "id": "c7d5a2b5-194b-4150-97f8-08c695e2666f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e7298899-18b1-42b4-bac4-bcbd424193c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43245208-bcf7-4a13-81bb-c50517dabd15",
        "cursor": {
          "ref": "bb1681be-0489-42a9-bd26-240fadf87cf5",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d8f4a48b-ebfe-498f-b944-925284570fa1"
        },
        "item": {
          "id": "43245208-bcf7-4a13-81bb-c50517dabd15",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c66e1db8-e80c-480a-88a1-5e1226619a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6587366-6de4-4823-b4aa-6d7238c9ba61",
        "cursor": {
          "ref": "8df376fa-a4ed-4a26-ac49-1c3482b45fe0",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b5a46ab3-e7f2-41d1-8ff3-15867d52973d"
        },
        "item": {
          "id": "e6587366-6de4-4823-b4aa-6d7238c9ba61",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "43ea4765-44a8-4531-846b-d26373df5e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b3c572-4be5-4014-b958-f4ef2d1aa1a4",
        "cursor": {
          "ref": "f04207b7-1edd-4c68-a975-16876b7a8680",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "440b7ec7-db87-41b2-879c-b44df69d2a40"
        },
        "item": {
          "id": "75b3c572-4be5-4014-b958-f4ef2d1aa1a4",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "04574a45-29e8-4c0f-9db1-3539db7ce559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac24b2f9-e620-44cd-ab03-311f22c18efe",
        "cursor": {
          "ref": "432413b0-eff8-477a-9782-7640db19df53",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "cb5f6b67-8ae9-4660-9a60-479c86471aa2"
        },
        "item": {
          "id": "ac24b2f9-e620-44cd-ab03-311f22c18efe",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "32504dc2-67b5-48e0-a7c9-7bbbbd5432fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f42b658-b3e1-4af7-a94f-74818df6197b",
        "cursor": {
          "ref": "505128e8-4378-4576-b81d-95442ef5ac5b",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "464d4a54-9098-4df9-89ee-0b4438f37906"
        },
        "item": {
          "id": "6f42b658-b3e1-4af7-a94f-74818df6197b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8b00b68b-eca1-4712-91a6-469274914c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bdf0f4d-f9b7-4f00-b34e-cdcf62cfd267",
        "cursor": {
          "ref": "a4ef6141-dfbb-4212-8ccc-33a2e2c33aa2",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "243aa2b7-8165-478d-9ffd-1183f509573f"
        },
        "item": {
          "id": "1bdf0f4d-f9b7-4f00-b34e-cdcf62cfd267",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "49dff193-7c0a-4294-a0f0-764786dbf9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96237ba3-d45b-4eaf-8cb6-52cb569fc1ed",
        "cursor": {
          "ref": "abb54a61-39f1-40a3-b5ed-e3c21ca2b675",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "670a0ac4-0f64-42de-acaf-88188d3e7316"
        },
        "item": {
          "id": "96237ba3-d45b-4eaf-8cb6-52cb569fc1ed",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "68189ce9-c447-4f4b-8d6b-8f356e1f5e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897350b4-f591-495e-9ce0-ba2820f16d76",
        "cursor": {
          "ref": "44cdbfaf-14e6-4b00-b277-18c7c0e54f26",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6df7ecf8-3991-44d4-bd7c-788d616214f4"
        },
        "item": {
          "id": "897350b4-f591-495e-9ce0-ba2820f16d76",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "fccb0603-305b-43a4-a196-c2e2b70200be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907bac6e-946c-49f8-8780-778e91710571",
        "cursor": {
          "ref": "8fd9cb65-18f1-4b75-b0bc-05303fecf2e1",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8c544bd4-0350-47cd-bdfb-b059a134a12a"
        },
        "item": {
          "id": "907bac6e-946c-49f8-8780-778e91710571",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ac7fc874-830e-40ef-87c8-9850852fa6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eefd1ced-173a-4b7d-ac99-a787b19af0d8",
        "cursor": {
          "ref": "ba15499b-397b-4ba3-bea3-9fb8e19d8443",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ef265ad7-65b1-43fb-bcde-3f23e6f6c7dc"
        },
        "item": {
          "id": "eefd1ced-173a-4b7d-ac99-a787b19af0d8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6c18c807-f378-424c-a6b9-70d0c27697f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f47166f2-13b4-4f39-ae97-ab784ac07207",
        "cursor": {
          "ref": "e9c3a7d7-bdd9-4594-99f8-4a2c01e77daa",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "95386f4d-3896-4963-b821-a296ab256f7b"
        },
        "item": {
          "id": "f47166f2-13b4-4f39-ae97-ab784ac07207",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d10af367-33bd-45fb-82c1-9be6e3090003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e461b0-30a4-4974-b947-b6a22f880a70",
        "cursor": {
          "ref": "bc67e1d8-f720-4cfa-9abd-e6cb0e27aa66",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "074bc4cd-8368-41b9-b433-f87c94b8b306"
        },
        "item": {
          "id": "96e461b0-30a4-4974-b947-b6a22f880a70",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bfeb8abe-4ff1-4432-8a79-d4316530d7e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e53eb3a7-4258-498c-ac36-d6636919a30d",
        "cursor": {
          "ref": "342ea985-ab18-4675-bcb8-a4b877074543",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e0515622-83f3-4787-bd1a-4154cad0ced4"
        },
        "item": {
          "id": "e53eb3a7-4258-498c-ac36-d6636919a30d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "03416b50-4b76-4619-8a9f-5fa3a745c772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1251386c-631c-4fa8-b82e-bea6bb05627c",
        "cursor": {
          "ref": "3d7998b3-eb06-45f5-8d73-0f6a2a49de23",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6f36502b-13b5-4b47-b4c7-26726697cff6"
        },
        "item": {
          "id": "1251386c-631c-4fa8-b82e-bea6bb05627c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "7c54daec-5d08-48c4-8a71-b41709f574db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a775c90-3a3b-4d77-8a84-04a158876d03",
        "cursor": {
          "ref": "f9f4cf3e-459c-4e79-9a64-0e4e4ab8e3ed",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0051901c-b30c-4085-b94a-0444b89abb53"
        },
        "item": {
          "id": "8a775c90-3a3b-4d77-8a84-04a158876d03",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e212c72d-e823-4a00-bb8b-05c6ba56741e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d313a3-90e0-4a80-bb09-e3287fca5e6f",
        "cursor": {
          "ref": "1a8df734-8cee-4f38-9b40-11a481a935d9",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5029bcfe-8e02-4d53-9355-ba2276028aa5"
        },
        "item": {
          "id": "11d313a3-90e0-4a80-bb09-e3287fca5e6f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2755d7f3-faed-4cd1-8522-591753bdbaad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc22efd-f9ea-4096-bbd3-945c2155ca4b",
        "cursor": {
          "ref": "b68f9105-46c1-4eaf-846f-68f6cfdf1132",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5f581498-a6e4-45b0-9f19-99fcc074de25"
        },
        "item": {
          "id": "6fc22efd-f9ea-4096-bbd3-945c2155ca4b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f627bfc5-b65d-470f-b9ee-8d4ad9cc932c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e161fe3-88cf-4d94-b372-035e39c71a4e",
        "cursor": {
          "ref": "03a6b84b-345e-4c74-9d9f-8186eb963270",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "75e3a1e0-71b7-46c5-acb3-e83923d00fed"
        },
        "item": {
          "id": "6e161fe3-88cf-4d94-b372-035e39c71a4e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "42d0a96c-26ef-4e77-91d7-0f849dcda99d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714c89c0-5d36-41a9-a94b-d2c2f35ab219",
        "cursor": {
          "ref": "108aa9f3-58da-425b-913c-7ef99e108ca8",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "62914ac3-e8b6-4ddb-b28c-a428fd26147f"
        },
        "item": {
          "id": "714c89c0-5d36-41a9-a94b-d2c2f35ab219",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "703295df-1d7c-40de-a8aa-375c6ec8ae05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f90367-b0bc-45bb-bd43-8fcc634dfdd0",
        "cursor": {
          "ref": "c0fb7362-0058-44b2-a817-2521d60838aa",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4ef3eea8-d952-422f-8e55-ff34abe8d8ab"
        },
        "item": {
          "id": "83f90367-b0bc-45bb-bd43-8fcc634dfdd0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c84c989d-1ed6-4ba8-9186-26fda0a33918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "759dab70-2349-485c-a55c-1818e22391d5",
        "cursor": {
          "ref": "5e4b9bc8-5bf1-4f78-9e82-184a13b81dda",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b13a1e80-88a0-4420-b7cb-5eef142fa191"
        },
        "item": {
          "id": "759dab70-2349-485c-a55c-1818e22391d5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7b68a8ab-0902-4dbd-ae16-b738ea142b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40260ab4-23a0-408d-af8d-59f6ca71cb5b",
        "cursor": {
          "ref": "6cf1fa39-43cf-490e-b4fb-7e261fbffd09",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "66fb7eb9-2e89-4d7f-b64b-8801c6e37626"
        },
        "item": {
          "id": "40260ab4-23a0-408d-af8d-59f6ca71cb5b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "dc254d11-fe36-427a-8d45-2f08f7646dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd0fd5a-b9d8-4f48-b54a-0178355efa6c",
        "cursor": {
          "ref": "68929cf2-0293-4d9a-b8ed-1c8d58be4c63",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7fab24fd-93ed-425a-9574-9ede49ea7b75"
        },
        "item": {
          "id": "2cd0fd5a-b9d8-4f48-b54a-0178355efa6c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "fc6b1078-cfde-4a96-9576-09665293d6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e9161d8-d8ba-4d92-b373-73b7cfaa0228",
        "cursor": {
          "ref": "2af60af9-5a6e-4052-af95-5000a2974ea5",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2e5d6590-7acf-4973-ad61-6ab7f8809b4e"
        },
        "item": {
          "id": "8e9161d8-d8ba-4d92-b373-73b7cfaa0228",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "44c3a07c-6736-47bf-864e-6a4a46c311f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11097fd-81df-4ece-a6cf-dfcb5789d247",
        "cursor": {
          "ref": "dfc7394d-2af7-432b-ba69-957fe0ae3d1a",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c8398e27-ae08-4ec5-99b3-2f7ca640d0cf"
        },
        "item": {
          "id": "b11097fd-81df-4ece-a6cf-dfcb5789d247",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a6a19234-39a4-4dcd-ab53-00825f522292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5625d0-1c96-4158-ab0d-cf460fa7bb29",
        "cursor": {
          "ref": "36ba49eb-7c79-486e-8f30-8f196846c789",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "cad8a49b-3371-48a4-88c7-8ee3d9e79a9f"
        },
        "item": {
          "id": "8b5625d0-1c96-4158-ab0d-cf460fa7bb29",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2d0f43dd-4936-46f0-b315-5feecb2ee673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6ec9ba-4b13-4d02-8ba1-b62861f17328",
        "cursor": {
          "ref": "c729d0d1-5257-4641-bd57-d9b794fdfbec",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0009b16f-0171-420a-a62d-735083337160"
        },
        "item": {
          "id": "8c6ec9ba-4b13-4d02-8ba1-b62861f17328",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e0641e43-211d-4eb4-8f45-f8b4fee01ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f9689c-f730-4b9c-99f3-82844d5fb0ba",
        "cursor": {
          "ref": "90f3bbcd-b2a6-4a04-9566-54bd6332e093",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "da017fc0-e09e-48c1-b222-ce4db7885819"
        },
        "item": {
          "id": "a3f9689c-f730-4b9c-99f3-82844d5fb0ba",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "671c37b9-c6c9-4493-a8be-fbde417d3f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6965c1de-b38b-44e4-bef2-d8f66b4b4a7e",
        "cursor": {
          "ref": "ace7d630-eb86-4876-b368-f00b17dd2dac",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3fd54853-fad3-47a4-b18a-25a3912cc493"
        },
        "item": {
          "id": "6965c1de-b38b-44e4-bef2-d8f66b4b4a7e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "80697957-65c1-4b55-b437-c2aec71093ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7fcc2e-4c5e-4dc6-9a9d-9f42df745beb",
        "cursor": {
          "ref": "a9204d55-d87b-4261-968b-97b3c74033f0",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b1edb1b1-b8f9-42b1-8740-7cf6469acf88"
        },
        "item": {
          "id": "fa7fcc2e-4c5e-4dc6-9a9d-9f42df745beb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b2c974e2-b1d8-409d-91c7-55215b0cab6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f998fab-6c5a-41a8-bf75-5e80a69f4a78",
        "cursor": {
          "ref": "84eb12ba-f9b5-40a8-ad39-99ccf7095400",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2b44e0b4-c5cd-4ef8-b5d7-cd7fb19dc831"
        },
        "item": {
          "id": "6f998fab-6c5a-41a8-bf75-5e80a69f4a78",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "186f8175-fb2f-44ff-a10d-5dbaaf3aa941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75c89445-75e9-44df-a209-cd411d2a2634",
        "cursor": {
          "ref": "c71323da-00d4-42ce-98d1-c07163853c3e",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "dc66745b-4227-4dbf-89d9-2817e61e8841"
        },
        "item": {
          "id": "75c89445-75e9-44df-a209-cd411d2a2634",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9a87e5c3-6761-4aac-953e-b0e8cbc6c895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008871a4-03c5-4072-8c07-c360ca6af024",
        "cursor": {
          "ref": "e681368d-1efb-42e4-b64f-4cdb1ae65284",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8f6d167a-a869-455a-b225-04310779dd42"
        },
        "item": {
          "id": "008871a4-03c5-4072-8c07-c360ca6af024",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ed6d9dcf-1630-416d-8062-89f307f5ca44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b5a35c-4469-4560-b401-3e5cad238aec",
        "cursor": {
          "ref": "10050e9e-4f02-4b1c-a830-79befe66ba20",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bf117d38-edf1-4d3a-9559-ceccd0c55a34"
        },
        "item": {
          "id": "31b5a35c-4469-4560-b401-3e5cad238aec",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "764599ae-d2e5-4ca5-bfcc-09be925cdceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dcbf12d-82d9-4e9e-9e15-ac4c0227729d",
        "cursor": {
          "ref": "d0b0248f-34ec-40df-b338-3566a13a8c5d",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7059d797-ce5e-47eb-82ba-c51e605f4d36"
        },
        "item": {
          "id": "8dcbf12d-82d9-4e9e-9e15-ac4c0227729d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5f010806-0b97-4400-bd0e-c0eedcdfe922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96eb7fc4-daef-4466-953b-4c9f5041b090",
        "cursor": {
          "ref": "e1f0739c-af20-47ae-b618-746dcbb2d30a",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7a31d5ae-f8b9-4785-8f76-4e7ee2dc6fa8"
        },
        "item": {
          "id": "96eb7fc4-daef-4466-953b-4c9f5041b090",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8e26a1a5-4bae-411e-908c-b116fd613c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913e5422-fdc1-413b-8c3f-a7ffd1b3e689",
        "cursor": {
          "ref": "7255e17b-8e68-4862-b45a-8991819b914c",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1f3b041a-b677-4abb-9921-d8a17eb1a167"
        },
        "item": {
          "id": "913e5422-fdc1-413b-8c3f-a7ffd1b3e689",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d697df1f-798f-46fa-af67-4a932264484f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bec74eb-cbec-494d-b261-c74e91c404e8",
        "cursor": {
          "ref": "cafe9e5a-bbec-4564-a087-c722822c9b6e",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2c22486d-e1ad-40db-a5f8-173b1f7f3de5"
        },
        "item": {
          "id": "3bec74eb-cbec-494d-b261-c74e91c404e8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "68d06680-aa3d-418c-ba2f-906308cca21a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c323b804-d134-4db6-b82f-4a2ee90ae1c9",
        "cursor": {
          "ref": "a4432eb6-1ced-4212-8da5-bc7c4f901c83",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "745647b7-6c4f-4636-92a4-ef22c632164a"
        },
        "item": {
          "id": "c323b804-d134-4db6-b82f-4a2ee90ae1c9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "093ce29e-63ee-4b3d-a9f9-9a01a3ae0d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c61e9fa-1dfe-4db3-88fd-185c594f1553",
        "cursor": {
          "ref": "c1b10be6-d6c8-4c1b-960e-5e932159cd52",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2470bb39-cd7e-458c-a585-d7cd44f07742"
        },
        "item": {
          "id": "4c61e9fa-1dfe-4db3-88fd-185c594f1553",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1d99ac80-bc92-4bcb-acb9-5fb117d9826a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c98f99-dd38-4784-ab2e-19d3821bdb1e",
        "cursor": {
          "ref": "91940f11-6e82-4198-9c26-f3155c53d840",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8871b434-b8e5-4d50-a6d5-4a7e1314d2f6"
        },
        "item": {
          "id": "f0c98f99-dd38-4784-ab2e-19d3821bdb1e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "38568ca2-bd65-4c34-967b-f45342dc8972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95eadfee-4dc2-428b-8f0b-41f458a2caac",
        "cursor": {
          "ref": "d5effa40-b1a1-4a62-afa0-b8f2a27d600e",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c6252931-360b-4a92-97cf-09942b9fc510"
        },
        "item": {
          "id": "95eadfee-4dc2-428b-8f0b-41f458a2caac",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "bf1c2dde-4cdf-4eed-b2c5-abba14fd0565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8accc3f9-d850-45d4-a236-0c7f141ede55",
        "cursor": {
          "ref": "a2851e8b-8d2c-4a65-8e65-31815aaf9c9b",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "550e4c5b-11f2-4d82-a68a-2e235aa61c3f"
        },
        "item": {
          "id": "8accc3f9-d850-45d4-a236-0c7f141ede55",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f0416d0a-17fe-4a48-ac9f-b57a14a37a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33511025-f57a-4c79-89bb-3e4dd53d5a26",
        "cursor": {
          "ref": "5d770d2a-faa2-4444-8f2c-375196f53d1c",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "16b726fd-240f-4833-960a-38b292b3b969"
        },
        "item": {
          "id": "33511025-f57a-4c79-89bb-3e4dd53d5a26",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "54ef2eb9-5232-475b-bb18-933e9164d242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcee6bb1-9de4-4db7-ae10-795e5b7739b7",
        "cursor": {
          "ref": "63470ab9-24cd-4e9b-b384-237021589267",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f9d56e0f-be64-47d9-b675-caf9727cc51b"
        },
        "item": {
          "id": "dcee6bb1-9de4-4db7-ae10-795e5b7739b7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ac14bd5e-b040-46b4-8043-03d992d9441d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ad80b6-7d40-4293-8773-f500271e2c63",
        "cursor": {
          "ref": "7e5d10af-89d0-460a-ba11-709efc740c86",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "53627aa5-f58b-4307-b5c0-50cf013a7c9f"
        },
        "item": {
          "id": "45ad80b6-7d40-4293-8773-f500271e2c63",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "67dcbc07-41ef-4b17-8bf9-99e6480d2515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a6dfb6-42c0-4533-bfdb-5384d23e3e2e",
        "cursor": {
          "ref": "7ba9deec-d392-421c-ae66-cf76b4ab5245",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7d5e1a44-7413-46de-a488-7ea4b2d2946c"
        },
        "item": {
          "id": "d3a6dfb6-42c0-4533-bfdb-5384d23e3e2e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1de039a5-6895-467c-b7d3-6a2162a66419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2663bb-79f3-4091-87f5-ea040f7e95f4",
        "cursor": {
          "ref": "de3d3470-191a-4216-b0d7-1d93c8ede30b",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ac964e58-4f9a-4757-ae6f-605bf7104cd9"
        },
        "item": {
          "id": "aa2663bb-79f3-4091-87f5-ea040f7e95f4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "476343ca-1900-4f71-85d0-4dede45bb57f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c45e36-e784-484d-b85e-24be01c3055c",
        "cursor": {
          "ref": "69f7a928-a836-487b-9413-1707c247a03d",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a7cdd29d-2816-4ff2-b408-3e6128a34c68"
        },
        "item": {
          "id": "83c45e36-e784-484d-b85e-24be01c3055c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1f5a9a93-5f77-41fc-9a2a-d9be1b5d5a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084e2c8c-3f89-42f1-8513-377432757b72",
        "cursor": {
          "ref": "30052f94-8a11-4cd0-8ee9-420571166d90",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "58e0e788-3e15-468d-8075-49d4d06761c6"
        },
        "item": {
          "id": "084e2c8c-3f89-42f1-8513-377432757b72",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0cfa1d90-3b51-4771-8229-daed23307db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2c0124-74a5-48f7-825a-477caec91fcf",
        "cursor": {
          "ref": "eb29afd1-a971-426a-ab3c-575356eb28fe",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "cebbf2ec-7e68-4a0c-b996-fa9ae106671b"
        },
        "item": {
          "id": "1f2c0124-74a5-48f7-825a-477caec91fcf",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a719a592-0264-4612-8a13-407d9e16ef04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3aec0b-4e59-451b-90d7-f0d3a7c07e3a",
        "cursor": {
          "ref": "fbed2070-859c-4b82-9183-56d4ab047235",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8793a7d2-8bf7-40ef-aa8c-9909f1901c87"
        },
        "item": {
          "id": "0f3aec0b-4e59-451b-90d7-f0d3a7c07e3a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cb884cc2-5f6a-4f36-81cc-20043d81a35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7105c4-fd7c-4d84-a675-4f44f75960c0",
        "cursor": {
          "ref": "c2b60de8-373d-4449-a573-6d16c648960c",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5afe843c-2300-41f9-8f2a-2898505a348e"
        },
        "item": {
          "id": "bc7105c4-fd7c-4d84-a675-4f44f75960c0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b79a0897-5dad-4c54-899e-6ddae3b5e4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a68d91-f90e-43be-a641-5ed2977d0470",
        "cursor": {
          "ref": "1fb5b9b5-fd0d-4de1-8387-a6f2ea9ac3a0",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "395a9cea-e806-4a97-8083-bc8dce04f2cb"
        },
        "item": {
          "id": "c8a68d91-f90e-43be-a641-5ed2977d0470",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5f95f79c-aad0-4b40-b143-d400a92d9287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541ebe09-39b0-4b4b-b332-98cf2224d425",
        "cursor": {
          "ref": "feeca844-817c-4e3a-b291-a0b8170737b2",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ef65b033-3f86-4985-a1f3-97995c5395cf"
        },
        "item": {
          "id": "541ebe09-39b0-4b4b-b332-98cf2224d425",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "2026f8d6-0aa5-4466-8fb9-8fc6852496a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c3fa3c-5350-4ed5-8a69-07d09db363e9",
        "cursor": {
          "ref": "7dcff34d-a334-4430-890f-757f156b3eb1",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "72b772ad-0a2b-4804-8fe6-471446930144"
        },
        "item": {
          "id": "40c3fa3c-5350-4ed5-8a69-07d09db363e9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7da19296-5185-45a4-9f52-e05754c6a825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02fa10a-d877-4a3b-8c73-eea95536d9af",
        "cursor": {
          "ref": "8abf9282-e0b8-439a-99c3-b603528bef77",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2e4fae53-f925-4834-8172-ceb4288975c7"
        },
        "item": {
          "id": "b02fa10a-d877-4a3b-8c73-eea95536d9af",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "aadf8544-84c2-4adb-973f-fcc70ac02ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8155c965-a733-4a6f-8105-2fdcd315cd06",
        "cursor": {
          "ref": "9723f9e7-67eb-4a7b-804d-635d0ad5edde",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9ee57099-9b86-477a-ad3e-01bb8bd473d3"
        },
        "item": {
          "id": "8155c965-a733-4a6f-8105-2fdcd315cd06",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "29e942a1-a122-4249-b641-bb79468dd2f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96dd00ba-7963-4ca4-8994-c951926ed872",
        "cursor": {
          "ref": "ff261c4e-34e5-4147-be37-5acabe2f88ca",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c2b543e7-ef98-415f-9ad9-b3fde98aa268"
        },
        "item": {
          "id": "96dd00ba-7963-4ca4-8994-c951926ed872",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5f1f502d-d1ab-49aa-ab3b-fa48792cbc79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ddcf9a-032f-45b5-a29f-de56ce28a344",
        "cursor": {
          "ref": "a4c9a4e6-493c-4c4a-89f4-4eaaf501dda0",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c8b839fd-050e-4e67-a47e-bac545fee256"
        },
        "item": {
          "id": "25ddcf9a-032f-45b5-a29f-de56ce28a344",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "25beb125-956d-4fe7-b164-e40eb28851bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d061fa63-f3c1-450d-9fd5-69eb0ffb4a3e",
        "cursor": {
          "ref": "6b9ca82d-056b-4ce3-8d6e-cfcffc2c5670",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "34884c8a-ca50-4265-9535-2ee7b225df2d"
        },
        "item": {
          "id": "d061fa63-f3c1-450d-9fd5-69eb0ffb4a3e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8783a7f4-0de3-4d38-9605-8207e108dcbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a63d05-8921-4ed4-838f-9017b5cc7e73",
        "cursor": {
          "ref": "1e369430-d29e-48f8-a570-a5fe94b7e7eb",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6c96d72f-0644-4663-85c2-36f4691123fe"
        },
        "item": {
          "id": "66a63d05-8921-4ed4-838f-9017b5cc7e73",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f05b37c4-9baf-49f2-998c-94abd8be3ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a968c259-9274-4a72-bb12-6cf911a5272f",
        "cursor": {
          "ref": "172ec829-7aea-474d-a686-02cfab70fb04",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fb3c9b9d-79ce-4f78-881d-0eb4c6f4f22f"
        },
        "item": {
          "id": "a968c259-9274-4a72-bb12-6cf911a5272f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5c466ee0-7c6d-4730-8ed6-5b803caad37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa223ea-1fef-46a4-82d1-ddb60cab64e7",
        "cursor": {
          "ref": "2e813fdb-bf3b-4126-9eea-c815c4f367ac",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6ef53d9c-f481-4097-a5b2-b8a367751bcc"
        },
        "item": {
          "id": "1aa223ea-1fef-46a4-82d1-ddb60cab64e7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "087a470e-8f38-45a7-b98c-f61cfaf7dc46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7164655-469f-451e-ae64-abd22bd49606",
        "cursor": {
          "ref": "163bf6d0-92f8-4883-a331-8ad9a9f9ad9c",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "42c0ac3e-02c0-46f4-b304-4e01c856da8f"
        },
        "item": {
          "id": "f7164655-469f-451e-ae64-abd22bd49606",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3533179f-bb8b-4a5e-8e9d-3a95ad92030d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72f440a7-646a-4488-90c9-39a0cb01ff80",
        "cursor": {
          "ref": "652d28f2-ee6f-4047-8396-701cc99fee7c",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "507dd4a7-de72-4d6b-a0c0-a3a291323924"
        },
        "item": {
          "id": "72f440a7-646a-4488-90c9-39a0cb01ff80",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "34f71c25-ec01-4f0c-9cb6-cc103f9deb20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4e96cd16-02f6-4e20-8adb-7c0fa2a2b6ba",
        "cursor": {
          "ref": "9be3dd36-7e12-4b0a-b856-b95373aab70c",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f1e36d49-1afc-4dd1-a055-d825b2b85f34"
        },
        "item": {
          "id": "4e96cd16-02f6-4e20-8adb-7c0fa2a2b6ba",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "107e1837-2046-418c-8154-46be65d81e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "60b58dc4-5f0a-4bbf-8c6d-00cf87ed6162",
        "cursor": {
          "ref": "e8258698-8aac-4485-967b-bc7660750728",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f3f33be4-3dda-4db1-b5b4-886b0f744cac"
        },
        "item": {
          "id": "60b58dc4-5f0a-4bbf-8c6d-00cf87ed6162",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b6cdd12b-1e6e-4d79-9f80-4623f4837c82",
          "status": "OK",
          "code": 200,
          "responseTime": 215,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4081eb-981a-486c-a740-a520eb1c7fea",
        "cursor": {
          "ref": "1186b5d0-808e-4d7b-829e-8575c3fc6465",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2021faa7-06b8-4f7d-90a2-d8743eeb095d"
        },
        "item": {
          "id": "8b4081eb-981a-486c-a740-a520eb1c7fea",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6b4bde6d-7f92-4bd0-b958-bbd99de0a8ec",
          "status": "OK",
          "code": 200,
          "responseTime": 2767,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e75b40-6078-4258-900f-2de0428e01c4",
        "cursor": {
          "ref": "af5d7629-100f-4031-9f7d-a4be11c082fc",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "100f039e-aadb-4e35-ab67-cc7d0e527597"
        },
        "item": {
          "id": "78e75b40-6078-4258-900f-2de0428e01c4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bd1dc6ed-ec6d-4a86-9ebf-b9d3d9c7bc07",
          "status": "OK",
          "code": 200,
          "responseTime": 2256,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8bbfcef-84c2-45cb-bd7c-ebd64542b498",
        "cursor": {
          "ref": "38d490e5-cce6-48ac-8053-8f87031185b6",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "eff72688-6420-4a88-9cd3-b4095930368d"
        },
        "item": {
          "id": "a8bbfcef-84c2-45cb-bd7c-ebd64542b498",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2833a483-dcfd-4a43-99c6-8c3f8e73fdce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a8bbfcef-84c2-45cb-bd7c-ebd64542b498",
        "cursor": {
          "ref": "38d490e5-cce6-48ac-8053-8f87031185b6",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "eff72688-6420-4a88-9cd3-b4095930368d"
        },
        "item": {
          "id": "a8bbfcef-84c2-45cb-bd7c-ebd64542b498",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2833a483-dcfd-4a43-99c6-8c3f8e73fdce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a8bbfcef-84c2-45cb-bd7c-ebd64542b498",
        "cursor": {
          "ref": "38d490e5-cce6-48ac-8053-8f87031185b6",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "eff72688-6420-4a88-9cd3-b4095930368d"
        },
        "item": {
          "id": "a8bbfcef-84c2-45cb-bd7c-ebd64542b498",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2833a483-dcfd-4a43-99c6-8c3f8e73fdce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "6d25d72f-7136-4333-92e8-592d9856e71c",
        "cursor": {
          "ref": "38c0246e-505a-4bc2-aa87-a4aba01d8da3",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2680e5c8-5bb2-475d-a188-5fc1781bb63c"
        },
        "item": {
          "id": "6d25d72f-7136-4333-92e8-592d9856e71c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "e445f261-35e5-4e21-88f9-eb37c016fb76",
          "status": "OK",
          "code": 200,
          "responseTime": 227,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "591e19b2-7dfb-48ed-ae68-760948984411",
        "cursor": {
          "ref": "682e5f85-5f4b-427f-96fa-458167ab3d1b",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "300805ce-b258-4088-b6d7-7fa9a6fa07a1"
        },
        "item": {
          "id": "591e19b2-7dfb-48ed-ae68-760948984411",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ab2cfff3-b9dc-433d-aee8-fcb147ef3e26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "591e19b2-7dfb-48ed-ae68-760948984411",
        "cursor": {
          "ref": "682e5f85-5f4b-427f-96fa-458167ab3d1b",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "300805ce-b258-4088-b6d7-7fa9a6fa07a1"
        },
        "item": {
          "id": "591e19b2-7dfb-48ed-ae68-760948984411",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ab2cfff3-b9dc-433d-aee8-fcb147ef3e26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4d818e4b-1de8-432a-acc5-2e0a664ff3e3",
        "cursor": {
          "ref": "9a215306-4ddb-40b3-8a79-f093875a9096",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fbef4202-3323-4c3e-b67c-1914d8e80358"
        },
        "item": {
          "id": "4d818e4b-1de8-432a-acc5-2e0a664ff3e3",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "fa7448af-02d4-4b96-b472-504974c8ea4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 185,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6f8f53f8-91a5-4b23-b384-bd4c58b5c270",
        "cursor": {
          "ref": "ea49280d-7f1b-44a6-a9c0-1a10d1a99a10",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5541bbe5-e624-45ef-81ec-2b90912b25d7"
        },
        "item": {
          "id": "6f8f53f8-91a5-4b23-b384-bd4c58b5c270",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4f60595d-61a3-43a4-8b95-4c411c0d0ab3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "6f8f53f8-91a5-4b23-b384-bd4c58b5c270",
        "cursor": {
          "ref": "ea49280d-7f1b-44a6-a9c0-1a10d1a99a10",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5541bbe5-e624-45ef-81ec-2b90912b25d7"
        },
        "item": {
          "id": "6f8f53f8-91a5-4b23-b384-bd4c58b5c270",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4f60595d-61a3-43a4-8b95-4c411c0d0ab3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "d387d63f-41fa-4ed1-b18e-6c324919b7a2",
        "cursor": {
          "ref": "d04353fa-0dbb-414c-b969-17ac1f283acc",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3a5dbb39-6b14-4175-a47e-b53d2995e1ba"
        },
        "item": {
          "id": "d387d63f-41fa-4ed1-b18e-6c324919b7a2",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "3e3d0bea-383b-49b7-b6b3-628af78b0f38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}