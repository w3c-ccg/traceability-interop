{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "45bca971-8e91-4209-a3da-4d21f8788c01",
        "name": "Clear Cache",
        "item": [
          {
            "id": "0c007406-e42d-44b5-889f-b9885e3aeb7e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f1ef1a47-f4c2-4a40-8243-22249b7ceb0e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2dd3d60a-9b86-4172-895d-8210b11777be"
                }
              }
            ]
          },
          {
            "id": "74093484-d36b-49f3-b0ad-3e15dc03f5f2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6f265d6b-4e2c-481d-a44e-26bed02405ff",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f7755de9-eff9-4a39-a416-bf8657739509"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3593cf1e-f8cb-4291-a286-7f41f3144bb3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5208aa0f-2d1b-4b4b-9a4a-21eba023f298",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f4eea4b-aae6-49dc-9de9-47e99a5feec4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f742cdd5-72ab-4dea-983e-bef2479b70e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "947e5d47-ff7a-4b69-8182-17aa9714b60f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c42444c1-0069-4f00-ac44-a27fc2fb296f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1eaea3d5-becc-49d3-ac5f-b6541d69f1a9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "10c6c913-dc75-4a81-a69f-22355478ebb7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9fe366e1-1367-4570-ac2b-3fed9f4cfe5a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2d75f28-f0bf-47f4-8a2d-6366c0ae9517",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "86533e33-808e-44b4-9b58-9f767787bf73"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba223282-07d8-419d-8b1a-910c06e69074",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f1705c21-72ff-4d0a-b657-c111ce04730e"
            }
          }
        ]
      },
      {
        "id": "e8bd1a07-4f6e-450f-92bd-fb6c77d57305",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0f93e390-525c-4a13-9eef-797fe1a8bf03",
            "name": "Negative Testing",
            "item": [
              {
                "id": "167fee60-aefd-4ca6-9685-fbc7ce7c7cd3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "10094806-c8d9-4c06-bcf8-117f169c2aa3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "357002d8-96fa-43bc-a42f-a547a5ffac57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "812c2606-0f59-4d12-afbc-5b733c5d8ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4192521c-c2d1-4eff-8737-19ad3538b64c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c35d0e7-d450-466c-9b85-d36ae762cc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32e6c2f7-3443-4455-b690-5bae12901528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7116d5-7d18-4477-a490-00db77003e53",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5768f388-6253-4728-97f9-0214ebce7e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e915c75-fd8a-4222-9789-b571b010f8f7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d4c98019-2cfc-4fc3-be07-40ffcc6116fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "211e0ef9-79c3-4441-86b5-068844d4bc7e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3906d3-32bf-440e-9712-46f2d6ec6b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9c37be0-6026-4199-a4c4-2f946ca893de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3375341-68a5-4d7e-be02-c4476594e8b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dbd3c7e-d8c2-4386-9387-d18334564f09"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b3584137-2b88-4c1b-8f22-a9ea09c37e04",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7da0f4d6-29fd-488b-9802-3a417f70ea1f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f19ff5d4-9bef-4991-9004-8ffb32f4dc83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a465dd18-3472-4bb3-9e2b-cab85dadbfad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b530afa-1bb6-4c28-b724-50281a843d26",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "84e3a9e4-9a42-4097-85c6-6c26f9b35e0f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ce7ca3c-b06d-429f-b321-f6cc7345f55c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5aeb38c4-75ee-41c6-8f4f-b8c68516c382"
            }
          }
        ]
      },
      {
        "id": "a47da054-9752-40c5-bca0-a8f6fb88a681",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "70e86fe9-8a5b-45d9-b2d5-502cafe2adac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24181b89-f89f-43ad-a905-d3d8444fa5a1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2604dca0-6e63-4e72-b3b8-1b3fb0394247",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1268ba9f-76c5-4e1d-a32e-32498ab4df7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb9749f-043e-40a5-92d4-55a625e23df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3a29cb-7eb7-4beb-8a2c-957c950d1c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff2981cb-81ce-47be-8e5c-7e038afd1ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5bb9671-277a-42bd-a9d6-ad325405a9e3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a067aea4-f6b6-4707-8e94-6cbaebf09e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab73a271-27c6-4cb1-b06a-8f53a9dedda7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f379cb-cb6e-428c-8482-180f6240cc29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78441212-0d83-4205-b784-01b60be718f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7dd81a5-30b5-47c8-b6f4-3298d39f6c03",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7169dffe-b843-4b41-a4bb-bc203fd66b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8622461e-6a07-4976-8bcf-2f4e6490de16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade86e42-352a-4de2-b65f-21bd80c3c162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3390b411-b5c9-48e5-bf3c-97ead50035d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17fafc14-62ef-4c46-9051-953b9bddde3c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a24e99b-7fc2-4481-b29d-3c9968b4bd36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "316a9f8f-83db-4435-8eea-af5fd99f5faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f4769a-acee-4005-ae78-e444c3c10285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54841c9c-998e-45bf-b692-b48c9ee9faf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8229191-6256-4284-814c-6713f24ba85d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2d0584-7405-4bc9-9221-d1edc0b319d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551ed609-c1c4-4818-819c-cb1aa37550f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec12b5e4-f7ed-4921-8dc3-cf443750a33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91462d7f-4ee5-4a8a-90a4-92c0ac5cc338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f71a93-dbdc-4bec-919e-99cb3264e5fe",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45901cf-9c94-4094-82d1-50647ca27700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b72b7d-56ee-4092-9e70-4e7dd137dff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74935ea-993e-4149-a6bf-9d3740964691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe7da133-f117-4482-bed8-ac36cc0d86b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9b70d1-3e57-4ee6-bb02-68c6705c6e28",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c019512-b5ba-407d-b184-b22989211acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3881cd23-7cde-47db-8057-b6dcdd5e6700"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95c951f-4519-414d-9260-7b00e82caecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bc0b921-8343-45a8-9948-b053b71a943e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97fa69f-f7b4-47d3-8674-33707f217626",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac76fe4-74f8-4d83-a85a-7f831a4d503c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a68d42-77e9-46da-b946-81609c751633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb20477-552a-46b2-965b-e27c1f139688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "871e8d61-2317-44ea-ac83-2d07034f5b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab890ce0-350f-4811-9a6b-996c4bb48d30",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b6fc48-eadd-450f-ac8e-9b5727c114ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f435b5-8fb5-41c4-bab9-e0faeb193c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139b8a4c-e775-41e5-ab13-d5adc57c45c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6321c1e6-f005-46ef-ab8c-5059d84441e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a32ded3-7b5c-4937-98cc-656f5c99df0b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d75a203-6fff-4e27-ae29-972d5b56ba61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95c7f27-b797-456b-9b8d-6186b464f7cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36035f31-30ad-47d9-bdf8-b0e9ec862267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68bb292e-c1c2-4a82-937f-147417f14fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca22e01-cddd-4763-867c-fac8b6bd44d6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60de11cf-22e7-4468-a225-6d210eb97881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14d24a1-c044-4b15-bf69-10cca4f81151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8bf756-d9bd-4631-a353-1432d47256b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a19439c-af22-441f-886d-365d0c1e6c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc709fe0-d6d5-400c-9ecf-fa73b5aacdb1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe27659c-2915-4d30-8cdc-017ac40a9cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19fde730-db04-4fe7-a3b7-cadf7ab264f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bde5d3-a9eb-4113-9256-e8ea3e971261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7709c1fc-fc10-4746-9168-a7448e71645d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f8a810-689f-4212-becc-2a0190deeb6f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2010d1-51fa-41a4-b72c-202a63a23002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3953b6-d738-4fd7-a7b5-4fcb06a4585d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6185579-1e15-41d9-9e3c-0b5a29b1665b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0360d00e-b1e0-48e6-90e4-adf7a96d54ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2e82cc-23f0-4032-a318-6f2ef2a7f33b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126074a7-3aab-41f5-8057-3ab03f47c939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8866b28c-ade7-47ca-aab3-b555b387c720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0caac5-3298-419e-81b7-83a902575262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ffb8f16-d703-415f-8cea-a6a1f0962f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4bbd49-1b82-4341-bb9b-a0cf4cd30902",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d2fe76-eb33-41a0-b17b-13f87986e5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68a3a25-1c76-49d3-8bc3-e87b9b9bc7d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427a2dcd-f31b-4469-b298-c4418b9f9076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b40df04-6665-4958-9b3c-a7714bd02954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d90e1e-3fea-4311-b074-f06e6ef7d524",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2bd6fa2-c501-4928-ab04-7ac637877b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812ce94b-5564-48b1-96d1-b45b622bccfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe08a895-e448-4b1b-8166-92b18cb36c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a62370a-4d05-4774-83d7-9d6d98fffa71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c976d66-e97b-43fc-9647-9b41b3dccce8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d785a8b7-bb3e-446b-a545-42c9ee4ae89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e7977f5-cc9c-43b9-810e-e6cf23ee04c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966531c0-dea8-4e25-bb1c-a3ecccb65c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a4435a5-474e-4a9d-be25-1c5eff06c4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec519499-958e-420c-a13d-98cd66b14c50",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e4b436-8892-49a2-8d47-6fd416949e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed13d897-4fbe-4451-8d96-7a7f69883497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eae5847-4e67-45e3-8be1-5a706bbeba80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b669b4cf-18e6-4761-8b34-0c14d7d606c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfcf68b5-8ecd-4068-9cbd-4a554ea7fd43",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ec65e5-3ca2-49d8-be29-eb80b534ae01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9009127c-9bf9-47a1-b896-378cfabc3b1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93633e9-4046-42d4-b5fd-53db6e5a935c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "792df697-02a9-447f-bc49-0612b90caf5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea60337f-e33d-4861-8e90-4cf36e5ca2ab",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56345ebd-04be-42cf-843b-36d2bf511046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f52a1b5b-604e-48a8-8402-4b8859036e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e84ab75-8303-4ad8-8206-adb19f4e2435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9dc693b-57ce-458a-9c60-3d3541f6a87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac2424c-1e07-49fe-8af6-a038938a15b9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b078fd6-0cc6-419c-934f-1f4a11955f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5d21456-84fa-4f8e-bce7-53886fac042e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04264b30-0eac-451b-a661-15d068175a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "984335d3-acc8-4069-83e4-0a472ae2c6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f49398-0b1d-4927-bb5e-b0e06ff1534a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd45443-4af6-44a0-be92-2de11db6bdc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289914fc-c737-417f-af4e-258c453ea48f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b206aa-574a-4413-bccd-152318dfec3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a610ec0-7a1f-409e-ae53-75d01ed5893e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040c0e22-b9bd-457b-899b-ed5f96620193",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca310d23-bf10-40d3-853e-7841cb9c8160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f6fb3d-7ce1-4e71-bd62-2af06e0513c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8335b7c-ccf2-47e6-840e-0e4f033006f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ccdfb4b-692a-4f0d-956a-a5f62d25934a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2065ae-c109-4121-9a58-cded48e0b13c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c4bffd-aadc-41af-ae4d-fb5a4d3af54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5077f9ca-1bdd-4151-9e86-6a5fb6722aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291dc209-9b0a-4b31-ba44-8938171c3dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "beebf03a-6bc8-4457-b9b8-b4fcf87806a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37947fea-ab14-4f40-bdf8-64070fdfb965",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a913cd2-261d-4172-9996-f3286dae2181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc277f06-6163-4669-905c-4c6731f67977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890bab19-d965-4a4e-afb8-9a9a1c08fdbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a51c0705-a44b-4ebc-931f-7e19873717d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2857844e-5055-42a3-9007-a20090ff525b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c6fa3f7-938b-4b11-8429-db5deb0eac99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f833fc31-e86c-4aa9-acda-cb47ef5faa02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960c6fd5-7059-4510-8d02-7f66e3dbad02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc66b260-cfc3-4624-a885-3a081f5d42ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe154a7-70c1-4a92-a7a3-3a608891ea5f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df140fec-41af-494f-acb8-a11af9907a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b01c16-7783-4afb-bba5-d47a1c1e24d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3bbd2b9-06cd-4aca-bd2c-b1718a5fe8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a265f8d-934e-46aa-9aec-ed929fc4e374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6eefee-8146-4c70-98b3-dad84922d6d0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bee55430-8397-4f1c-bf04-07152eb98de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df1d5429-6d66-4c1b-81a8-acb995737429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83eace7-3e86-412e-9b53-1adfd670da80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "88e5882b-d946-49ca-9b51-abf53fb556e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe8325c-c59b-4247-bb8a-f8254502ec1a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcfeb02-0203-4e51-bfd9-f1df9385724b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a8ac43-fa1a-430c-a07d-28170cfa9afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192b41d9-c295-4df9-a939-15b45db7b43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb91cc81-343b-4646-a93d-fdbfdbb5b0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f646980-4fa9-484d-88cc-dac4b4696df6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de7d6ae-e181-4faf-94c9-cedbcb63fd38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f188dfdd-d89f-4955-bfcf-847d07b10e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d63714-2423-4ae7-999c-23c7cd04b391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e00e5a63-5486-4b1b-821f-29a87e516703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a601d6a9-44ab-4d0b-b6dc-d3cb557d9294",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "158a42f3-d38e-416a-9e3d-73957ca2b78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a830c2b9-434d-49eb-be21-e8f14eb5846b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f97cf9f-3bf9-4d56-aaf4-ef3d267885e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "256d3079-5128-4a4f-bf2a-ecbba1059c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12383d2-2302-4913-b255-e5243fc2dfa6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b862d814-1942-42f8-92a3-3773d360db27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bde5c4c-9d4d-4d47-9312-81a23fe09713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd37e92-abb8-4c6d-bd89-527c65293eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "13578a2a-6eda-497e-ab46-e46f7115e02c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816c0293-45e2-4e61-8d72-c6821a19ac09",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8daef5-dfa5-49ef-bec3-058b5845ec95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812be2c2-113e-4b06-8f57-248572ea7c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f7176d-d45e-4ff9-af75-db05ddad3ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "36342baa-9e0c-4608-8201-52519ae6d161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66c166d-6fe3-423a-ab11-41d092327aad",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5579917-61de-42cb-aa0c-3c9206d7d414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20574ee9-c3ac-4701-a172-01de4159579a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1230d1-1a63-4377-9a71-fadc7a06d7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bca6e58e-b6a8-4e35-9c9a-cd4f121fe1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64c69a6-3b30-4bd3-913b-482db13a9aa4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135e8f6e-3fa0-4f8b-9879-559938450fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d217f133-7dc9-40e3-a57e-b2464414e639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fbacd8-108e-4eda-b309-c672339d188d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0bec41be-6969-45b4-bad1-9657945b707a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60d8914-3941-46d5-937d-b43357db4d75",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40df773e-5772-4bc2-9c87-341a222d28af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25818c11-14a2-4a79-b51e-a784f71e4d35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5fa6a35-a1cc-4479-9e41-a3b0c81e3368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "492eed86-a5df-4ad0-93d8-9b10695367e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8259bcc7-1acb-40d2-96d3-e6c6c18b940b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa310a6-b698-49f7-9065-6ecfab7459b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a026ac2-0000-4e3d-b4fe-480aa6be798c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80de899e-fb91-47db-a79d-fc8ae65e8fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8071b5c1-7943-4a0b-95d9-577e4bf234ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba5d607-0117-45d7-93bb-dccbe9ae1b53",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba9fd5d-12cb-4c45-b4ce-37492030abbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cdd205-5db5-47d7-87cf-f76f84dbe880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b70e107-df49-4afd-a128-d8bb17ad726a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "14827f1c-2ab0-4bc0-b146-384e2ecab01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7548ce-a3bc-4867-af26-4c158ddaf194",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "311cade9-138a-466c-8b72-9d96c7b6705b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a148410-48db-45f8-bc64-3787c373ca8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a85853-079c-436e-bcbb-8cfd02908686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "96aca528-b0de-4558-8bc3-138451116666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc236152-7b82-43bf-b860-bd3bf46d0cad",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8974db9-ba15-4508-a6b6-f0f5a7d23e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7ee230-f895-4aa0-9214-0b0c7f9e7e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e86a493-3a80-4487-8961-356af85ef709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "99c09a7a-f391-4c65-a416-c236b0ec15b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8700abed-5574-4815-9f3c-ca7bf54e829f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f78d91-36d1-4044-b72b-da828e298f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06549fb1-0ebb-4e13-ae43-80afeb209f4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc5f01f-0f63-4569-899a-b4e05cca285c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "51da5585-cc4b-4460-8c16-2366d62409a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6a8e10-363b-405a-b599-e95f855ce6e6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a7ca2c-9ee0-471f-8fe2-2c30a35ec93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c0da36f-7c50-46e9-a326-9c54560d977f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73fc130-c11c-4ee8-ae55-d3b15d2483b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "791bfab6-ffc5-4f8a-bac0-af1667dfc951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b3a647-e73c-4a4e-a5c7-64424b9787b6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd07903f-0ea1-4b71-b47c-f17ecb1e8735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea9a8b62-ec63-4c3d-ac3d-e9c4114c7a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5e82b3-4bed-4fc7-a520-fedd4f9d3230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6d35e97-5aed-4c76-b4bc-45a1297e3613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5d11a5-b9d0-46b0-ba80-55ff52b938c7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6b6505-0ed8-4dc5-82d1-57adda2da09c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12877dbc-cbf0-4cab-9bee-6069365d8b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74b422c9-d48d-4d94-b47f-d71a2afd6fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "55158d94-9725-492d-8479-3de62c67818a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aaf57ea-b4f7-489c-a48c-190ef66e8e10",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b06bb17-b27f-44ea-abd6-4e370a27f0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ab7f299-8a8e-46cc-89a8-b0fc3d7ea765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfa053e-f574-4c6c-9224-a3960faf54c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7647cb1-de40-449d-bc88-f45e3074703b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7cb15f-a554-461c-9a58-a0a266f9dd3e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3f422b-5b6d-4ea8-8c42-8aef3adab0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca8e7f4-96f2-46e8-b572-2da8699b7da1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e30a950-a510-461e-99d5-bb738f455562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9c69bb-1ca3-4b28-8827-b49584cc4725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98faaccb-5751-4a70-991c-359fcf80f11a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80755a43-f14f-4275-b77f-0ef12bae1c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06729f1c-7fbc-4775-8268-96b15b3c587a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a8eee8-3932-406b-9e23-dea0578342f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec479e27-7272-4eeb-905a-9cf39d7372da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9617f8-41a0-49d2-9228-9d4d430cf366",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa789e8-d296-440e-b98e-065f13434e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0975b3d0-4e7e-4a77-ac2a-248db79b3183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06157e8d-6f8a-4831-9041-80de9959d9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "632f0c00-c6fe-4fa3-af97-eb9cd340bb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7ad876-4242-4bf1-9c37-bebf7d8ee6e0",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae595a1a-d7f7-454c-b96d-677a2c989860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4b03ca-6a76-4287-8bbb-e9842e8ef726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84081c5f-fbcd-4513-a57c-b4a7949d9fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9df35aef-196c-4b84-a584-1b142745201c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29527f73-1310-42bf-b32e-d6199aeaff73",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b675633e-a71b-46c4-8c5f-ddf2fcecbf36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad32de8b-0ff8-49fa-9670-e1760521e0d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dd9000-048a-42ff-849c-88f378dc0f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f9dc4b4-e0f2-46a2-8702-d0777c6c2bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38c71733-408b-4bba-aac7-5fd6dc98a761",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79f1b20-85ac-4761-8ad8-86de48017b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c6e76e-a911-4e47-9baa-c1e53d98b6a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb338ab9-781c-4602-b276-acf76a6efa27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "851d158d-050d-4b78-960e-7514eb7b7568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fafa4db-dcbe-426b-a4cd-f0fe50d09626",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4aae500-bade-40a9-aedf-3882554d3968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "415bf4b6-9297-489f-b95a-21f12a30757f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acab9a3-c684-40df-a768-bbb1291fa289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "48e475eb-af68-495e-b0e0-41f7bfca7534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b7d332-edff-494b-b066-86df72456830",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de6f669c-197d-4b1c-9323-704d218f19f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e589abc-5525-4ced-ba17-197830a0e058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de51c406-843f-4404-98b1-3169f37f8f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66b8209b-ddb1-4c5b-abb6-a00094519cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5003da88-05a8-4acc-9917-81ca7f04ac8b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03b5d84-6657-441c-b020-d4585dee3518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8bb107a-f069-45c8-b7c1-ccdef723f2b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3856726b-06dc-48b6-91a2-4244ed1321a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3de9e285-e78d-439f-b359-32ae46f16128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879c7f99-e5d8-469e-9d0c-23f72c66c784",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "778ec4a1-f630-4d74-ac93-b0bfb31d14e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5a5071-1773-4fb8-90fc-08011c32911e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4685828d-7673-4eb0-b60d-a3d9352cc17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e6cec09-1ade-4e9f-9d63-cfc9638c3217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d811ef4-085d-4447-a640-fe2d2846865f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67b36c9-90c3-4d1f-9fe8-0e9461506d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a1fead5-3d5b-4093-baf4-b6b137201b50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d5a572-511f-401b-9bf4-29065ad1581a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e6d589-0f90-462c-b73d-60d9db08d100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9a6a73-dbac-4476-8723-8c7c94d9643c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bada88-ee88-4d20-9fdd-d640b5593ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c307822b-50ef-46b1-9c30-49347e3abefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496172ee-b62f-4f4e-805f-4332f7974252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "41c0c362-eac5-45a3-9caf-35a25517cc1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35958906-84d7-464e-937f-19eb61304ebf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789290b4-d42b-4bf0-b204-fa3b6b0b322a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ca4e9c-de1d-442d-aa1b-eefac2c15223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1902290d-ef57-4b58-9dfc-cdeba299192b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7be94518-f66c-4a0b-9475-773ed70d379f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b76703a-ebef-4f72-a748-b3e84f6aeecf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e776a94-0070-4a76-b8ab-e8ab983e84a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc288e8-e0f3-4987-ac0e-8a8443c23f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbbdee90-2873-4b3c-9587-edbc52e2585e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b24e20-83e5-45aa-b9ad-e470e22278b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24d6081-cd68-49ff-8ee9-1ab18801db84",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24206c7d-0030-4b5e-928b-d96a5fdd958d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc10999-3fe9-4f55-b6da-4b6f15c97ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42d3b67-a6e7-43f9-bac9-a164b149533c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8851e0c8-545a-45d2-81a2-c69f1f94d8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9567c97-cd17-41cf-9935-3330af0c006f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47dee076-6394-4d5a-b9ef-3f1cf793a575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f272ef0-4edf-4690-8bc9-9bbdf9499da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cdb2849-a39e-4dbd-b17c-605e17d5d973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe84da6-577d-419f-a8a6-b1a1c4535ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d23e00-5a9b-4f8e-b390-853826db81d8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf2dbf7-5fdb-4f81-8375-3e4e1f020347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c45fb0fc-2faf-46ec-90e5-b22991edb88e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef60da9-9300-4d29-9572-2b29ebaae366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "862d2de4-457e-49b1-8a84-c55a5d85a312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc3ec18-ef6a-4016-b5b6-a2998593ac68",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f36cbd0-1ef4-46b8-b3e7-0a57667c17d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a3fcc9-01fb-41d6-851e-a7d433cfd52b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8042c1c9-1a2b-449b-aa05-32d01e31d80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "54d49cd7-086f-4a51-bce8-49c1a3418f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99ed873-ca99-4524-838d-57aeb5068b2e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c697be92-d6e0-45a5-95e5-3104b21af5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee8776ce-0c89-45bb-ac0e-4fa02317ede6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bbe759-c474-4125-b9b7-e447ff7a9f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "075e7b50-0146-41e2-ac15-1acc36f5502c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f206ec-cf12-4075-89ea-cb05d8066063",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dba480f-2646-499d-8470-a9f28fe22cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe743a5e-1eea-4665-b349-f4461444e6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b29a8b2-9d9e-4b08-89f2-22aaf5074e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7bf3ef1-d56e-4b18-925d-59514e2193e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bc05f0-90e9-4dc5-b364-fdf6183c289b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cbdab8f-895f-4a9c-971e-231bec789776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "767dd731-f8f4-41f6-bcd1-15d9219accca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65bfac8-f4f5-4182-a579-93a22047530e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a0e9778-ae78-4de0-b48d-be87581d4930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a88313-2305-4824-8b35-05cc678924be",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d97333c-ccfa-4f4b-b9cb-7db22565e126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9bb25b-4709-480f-94ab-104a50ee798c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2caf04-e73a-4dd4-b5d6-391e5d9d80b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "399eab04-f16b-4446-902a-f4a9032b13d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8f8ad4-ece7-4eaa-84a2-54123663f5b7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca28c3e-e1a8-4694-8cb1-1d9c7a2b9ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36742954-9530-490f-a5af-540a0751af4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe7c842-e699-4cb5-b741-d8005b1f18fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e722da8b-28a8-45da-a857-02ca90c31d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bdfdde-34ac-446d-a54b-acbd168acef7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a15432-a2a1-4a09-9ce8-a7932d12410f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd21b14-8a4c-4691-b514-4088de795a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c69885-c03d-4982-9408-7e8ed9fbe292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee542c5-6547-4808-b333-87e5b22605cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a15ae7-fe8d-4082-9609-4f84ef7f3128",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe6d4d2-5813-4427-abd3-20127c6b6d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aaadd43-df2f-4489-974b-3f5425cc5c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e737bc0-8400-4bc2-ab75-33e1c59d0ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d4eb3d7-93a3-4342-a701-8daacfb0eec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac56b101-fc06-4eb3-94b1-f492df8a78fc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d3b076-ada6-44d8-bde1-68961ba60018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fbd5e10-60d2-45a4-8056-6cc0d4244773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3f092e-368e-4146-bcc0-992d008e5c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "604cc3b3-b07b-498f-8090-da7c3aff7c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab192fd-8163-4fcc-b8d0-dc461bd55544",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fa0de2-770b-4d33-9313-7c539827d7fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2320f432-2efb-4506-8c77-ec5b6575c429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d26411-ce42-4025-883c-46a1cfbc1f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cafc8559-2031-4c64-a5bb-ab10273ce851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0beba4ad-03a4-4bb2-88a0-ed1a0a087ec9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24dc0ce-c098-4f9a-a979-df23542c8996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85de0d33-55e9-4998-9748-82e18642fd8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcaa7c68-a138-4c61-8a1d-9bcb99ca3e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "de086be4-398e-4dba-b013-c879c13f9a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83bd13b-ea2f-42b6-b230-ee3aaa187b33",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef80f2a7-2660-4533-b30d-3d8ea3975ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c641a0-e806-4fe8-bae3-5a07ab178a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc2eb81-1a0f-44cd-98b9-44686918eda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "409e22a1-7671-45d6-b9f9-82836e25c10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ce24ef-df45-4b4f-9925-d82acbd02ef1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a44894f-6324-46dd-9573-533a70167fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "269d4b37-5cad-428c-89a2-19c7e5842075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b64dde4-4358-4c98-b3ba-e79d2298ecd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "28600f02-3274-4623-b897-10a6c3e8a116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f651f1c0-27d4-469e-adb1-85b280b654ac",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db00d354-7ed5-41ec-a386-e863c25f74f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c89c025a-182d-4c5f-8605-31e706f5123a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01885585-9a1a-46c9-97da-7fd56a543498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f990b1a-6619-4d38-8ed0-9d4f4e1f24aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a670eb8a-a8df-49fe-a0e0-c63f8e3a625f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecada3de-4069-4992-8e86-d36bd230c251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45de7cb2-dfe9-4431-b5a1-610d36359d41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8ca0c9-34c1-47ab-8fcd-baff4c7b7c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "68a543ae-63d7-4ce5-a08e-61940b1d3be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5306ccac-dcab-40c4-9a14-6cc941eaca05",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d3e456-5b5b-436f-bde4-b9fe9733bdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd01d28-f668-4560-9ee4-4ee95086e969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8c721e-42d2-4e87-979e-8fbfeed07181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56d192b4-e5ee-43ef-8bbc-7661f7d34fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3faf8047-65e3-4497-a9fd-3c11e1c6ff7b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d194efb0-7a3a-4d05-b729-2d23133a45e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2beafd-0e17-4741-9fbf-b5efa2049d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8462430a-98e0-4741-bc98-a5de7ad2d9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "188c513d-3ac6-4242-afb5-e435a7e3d903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26117b44-3307-48c5-aefb-7aad1e7a1d48",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e77d361-8fe8-46e4-9a61-c6ca2ec98709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc31209-3c71-46ec-8cec-f4fb71bf3338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d18513a-0836-40e5-be2e-60449a7eab75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "91a8c744-02fb-46d0-b467-034328a764e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef15f02-e7ea-4663-ba27-7f0914096bb5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "539c47ca-248b-4bdf-bc4b-d37555ac8ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf2e45d-79a5-4af4-9c54-c8d172bbca0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2f30c5-6516-4ff0-bd9f-ff421211bf83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "775d91b1-ea86-4fe2-af25-bad26f23eabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba3554e-5415-4df2-8653-62ce8be9ffe1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51f031c-2f75-4a6c-b4b9-48b843dbad1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc1df439-cc7b-4a2f-b369-30d3529ecd3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24357125-26e0-44c0-b94c-692e483f6066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2635a46-2227-4971-b140-2893daba4c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af54006a-edf6-46d1-b976-ada7d64ab99b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fa4755-b631-4589-bd02-6f9a9ad32707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc74afb-1cb9-455c-9a65-d0214fa041af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e190adc9-a1be-4088-a218-a974752dd9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea1ce448-7b43-49d6-ac48-87e27dd320b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc79552e-6e5b-49b1-96e2-19a08e2f8da7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3f39fe-d868-42e7-ad17-33b47f99dd6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee11720e-b051-4e26-a66a-5fcfbb569b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bad5134-a7bf-4d03-9879-cc821a07ae27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e5bf233-400f-45b1-84f3-66aeb5678def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00de8711-aeb2-427a-99a6-b1e0bcf7e4e2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0021de6d-3ca2-4b2c-a59f-825fccf635c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9f22f0-b78f-4ca5-a5dc-971e17f33954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3033abe1-02bf-44f6-a7be-1b4849ff83fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c945ae82-ca52-49fb-9a25-88d65022bdca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a09fb2-135e-4be8-b95a-db0ad47a7452",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91a6e6f-8614-48e4-a958-196825336996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdcf4e2a-7a05-4b04-a552-50239f7978e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f3d184-c12c-414c-bf6b-300166408b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a09a8cdc-c09b-4b0f-a986-70cca6a43825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e963793-64bc-4e79-92f0-58cef0b78473",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c36a141-cc27-448e-bc62-a8a1ca0e00fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fdc1e96-b618-41bd-bb71-df94c7784214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8847ba12-92b4-4768-a4e1-60497aed3025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "be575452-4d56-4053-835e-bc225f50cebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e398625f-18e8-4da8-a020-7c4cbc6fd589",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d4713e-44fd-4467-be49-f45f21118a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450f6912-42b1-4ef0-8065-f4baeb8b6f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b05958-f17e-4d83-aed3-05981b26c095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d08e6235-c813-4d88-8e01-f2719f90cdfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67c9db9-e352-4f15-9e9b-81c6d76d64b5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd7b606-606c-4cfd-8618-e774cc054e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "508472fb-e4bf-4963-9d8c-9bdb65317048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42854dd3-aaa6-488e-a987-376f518bd66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b87df96b-122a-4315-b0af-399768acc48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2839981c-096c-48e2-9326-b7e0cc3b6c40",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9306a2-7d2d-4367-b319-79ff17504abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fdc0363-8cd3-4922-9fed-8de37d608e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c526760-5e9f-4552-a250-ab4bf59230d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "81eba95d-625e-44c4-95be-218841f3c245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a7d606-bacd-4d5b-bd77-aa390dcec923",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d64fc1c-4078-433b-93b8-9d9f57543b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d98b230c-4221-4cb2-b547-0fa51aaef2e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69443e31-1b2d-45fd-833b-1a0e83b3d1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "76d0cf3e-61ea-4d5e-8adb-cb9583c7d450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28398d5f-8a28-406a-8a69-253867baa4d6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91920d8-1083-41ea-9c4a-d45a2f2a99cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ff5cf5fa-0dc6-4879-937e-efb1e48c1111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce54f72-a325-430d-83e3-4de1462c271d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fcd47f22-a86f-4597-a6e0-bdb97bd0692e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "238df005-8943-4185-8bf2-2a595f911aff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5223f5e4-02ae-43ab-a814-de0b31958c02",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a69137-aad6-495a-bcc8-dda33ef41e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6316e88-3084-4f8e-8174-46b25e595bea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ba43ac-0f1a-411b-9714-6af51d05c8b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cde5286c-5382-4905-8e20-57b8341b7d84"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "771014d6-006f-4762-be23-6e254e005257",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7710535d-04d0-42bc-aaaf-11b52f05cc1b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfdccbcf-684b-4a99-bc38-e7413cf955da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03efc3af-2007-43ca-bde1-cc122128d638"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c9965d2-72b7-4702-91fc-0ce6c2f4a519",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a691b417-ec08-483b-82de-0b3e8ccf4f04"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6c694630-d920-4bf5-b3e1-ea0270198288",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b3f655c8-8204-46a4-a156-5d9037df3d49"
                }
              }
            ]
          },
          {
            "id": "db495c3f-508d-4888-adab-f530d96c9900",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ff740c0e-0ebd-4dca-9850-c23639dd5dea",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "99d2b482-7f39-4225-bd89-10e0002ebdad",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5568ed-0886-4185-b62e-aec35c9ecf87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "07da13eb-0789-4161-b00a-a150e6d8a6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a681761e-8984-4924-b0c1-6c45d83dbcc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c58c66-c3a4-49a3-8b25-520358326ea2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "66f6165c-1a57-489f-814e-ce39fdb7d020",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "700d5274-eb41-4277-ab3a-76c9ce6dbf22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a6abeea7-41ed-4ecc-8e77-f1e8334c7d90"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b2b1fc7-7f88-4cd9-8b57-4fc4a5d8917f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d7cef3b7-5a0c-4684-adf1-9b77b77347c4"
                    }
                  }
                ]
              },
              {
                "id": "782729ce-b297-443f-9265-122f61e7aa2b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ba9327f-ac6c-4cc6-bb0b-a17a332136f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d3f4597d-8db2-4bab-bc81-b0e67dd5e77c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63364a8b-f128-4db5-910b-2e0e993544b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "482ab3ff-30cc-4ce6-a006-d96e7ea80be9"
                    }
                  }
                ]
              },
              {
                "id": "d4de0908-d2dc-42c7-850f-f3ca9b0a0f1f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1c97263-1d60-418a-81be-0264e7f77aea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9814a3d6-e37f-4179-b3e5-0cc71bf6ef60"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b81d97f0-fdb8-4b0d-8a57-a64fc343dfe1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4fbbeff9-e402-4cbc-882e-7f3be724e62d"
                    }
                  }
                ]
              },
              {
                "id": "3319492b-7b51-4911-91ab-c1f637257493",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6459618d-1022-436f-bfd4-7304b4d24f5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3db83cae-2f96-4f25-a0e5-41316af11cf2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a859120a-27ef-404c-bc70-4772d0b30ad4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0d2fec5a-9285-4ed2-ba03-ec89cbf589b6"
                    }
                  }
                ]
              },
              {
                "id": "172a1067-415d-476d-a18a-5303c51ab482",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9d618f6-a643-4aa9-9318-2d5b2d6170a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83fb87f9-30cb-4724-a886-86e035d628c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef0008df-ace3-4c43-a253-7027351ec68e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0d2f0e1b-bfd3-43b4-8215-30efdc6aff2a"
                    }
                  }
                ]
              },
              {
                "id": "b626ebe5-c12c-4f91-bed0-4dd3c5657191",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90351db5-e48c-4f1c-8e49-fd696b1f094f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7c55cf7-7717-4df0-910e-e9160ab41853"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a6debfe-1b0a-40a9-a2b3-d3a7b5a3de4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4bfc20e0-47f9-409d-b022-b727982c9998"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "61b797be-e636-4d55-b52c-a22ae4448efc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d4405f2-c6e8-49d2-8c31-3c9000d034e2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d225d58a-a63f-4f8b-9e1b-a3ad155f1e6c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3158b6ec-78e9-462d-b123-b147af85e845"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a12a13a-0a63-4953-b26d-fe3306d744d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6078f2fc-64e0-45ac-b1ff-0daedc5296ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31d2b14e-d112-4989-ba25-51a7924b47d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c52e6073-23e5-41dc-b5a8-c54eecd84e5a"
            }
          }
        ]
      },
      {
        "id": "78456f2d-551d-455e-a086-32c2d146829f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "36255716-e526-4b9d-899f-402cfb768ee9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b64de3f0-758c-405a-94c2-a2c6c2cbf513",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3d8904d3-d258-4c23-a057-fced126926dd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc94d14-a359-46ec-96dc-38c798fca449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438e9579-5611-4e09-a530-cea175ab05d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0db8174-332e-48cf-920b-f3a023fd7b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb081f8d-56b2-4082-8a73-22d569464584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008549ee-1453-44cf-9b6b-275f6dcd31fe",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d33ac13-856f-4959-8cf8-b07a63449c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18f6da5-af54-4f1c-89f2-d5622f598077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0676c21d-20e7-412d-b72a-ef07187cd95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e85a1e1f-0c94-472b-9436-2f584b1ac2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2303679b-1e6a-4118-acc9-0ce78ad79ebd",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a804fa-956f-4409-940d-ff5d11b89eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7b1aa9-bae9-4051-8043-219f365d6454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809651bc-bf8d-4a56-abb2-d0150f991f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6f83db8-a3ab-4e6f-8997-4947e967c3ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a6fc22-52c0-49a3-a8ad-7f96f65181f5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdaafe8f-7da7-4441-9ba8-fda7aee6d825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f0742a-d516-447c-98fd-c376be0ec4da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38107b00-8180-4c35-b8dc-8a7b0f74f82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a07912bd-85e6-43f2-aa06-e0c0e4719907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c86eb0-7ef4-4ac4-8cf1-e14aa826d7ef",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b99cd5-287a-4a69-8b4e-0274982f60f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95d63b1-aecb-4bce-bc7d-203ed2bf1d7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a27018f-4609-42e4-804f-c0d5f65e1255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c84afe-7301-457a-b5c0-ce36d4d66239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2e2967-c975-4d3f-831d-8cf0a187ef94",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cff4bbc-e8ff-4466-9890-b168bb208efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80c1807-e7ac-444f-b88c-651c48013118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9739f3-2a6b-4130-a07d-61c6323d7bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b0f4b6-4801-4df0-8b6f-b7f4dc1fbaf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac82b21-fa6a-4246-bb1f-2909a3a51cb1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe6e5f8-eedf-4510-8de4-810479d7393d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799cc1a6-62a4-4c35-8e3a-ad2c9f2e191d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe3f5f4-9ace-4b6d-8361-1b20ee69d55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "40db276f-e448-42dd-b833-af76eb724760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085ec716-e051-42fd-ad2c-4c15ec333c2b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2730b49-141d-4187-bb84-acfa390e6b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c7e2997-dd22-4ccc-83c6-bdc0c623d28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f87542-c253-476e-b495-41060a692f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffa8be8b-dacb-4274-a00d-20e3baf2e8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4865aebc-dcc0-497f-802c-72f7d1f116e7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445eeada-9973-4155-8dd5-5dc14ecb4059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51449b02-e0b5-4d09-8a8c-f92f3ede790a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e32613a-36ca-4314-9f4a-c3cb477f0e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f06d984-886d-4a1a-b04e-19e5252158d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10b3f20-a45a-4cdb-99cc-a1c405d83811",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa9c8b47-a850-4717-b6cf-ddd7e9dae713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "255c1fef-1aea-4bde-ba77-d2b04c93d7ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0ecfe2-7ac0-4acf-9c89-91d3a4981ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f7a6233-bea3-455c-9bac-69acd3e3474b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11893ad7-7757-4887-85b6-3a8f55de9d26",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e03708-d158-4c83-9a78-c78791b4f554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9134f5-9905-4e9e-be6d-982d191b6b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdebd042-64b7-411a-aab9-a17b000a183b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0aab38d6-807e-4ac2-ab90-10cf52992c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80dada9f-952c-4fe5-9925-7ccc52b75470",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e31c43d-2005-4067-8147-185a46b14437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ecc0c4-182a-4c69-bfdb-83c7507b67d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1796c4b-7097-46b0-8dda-3fc94011a12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b0e58ccf-dca6-4138-8d55-072835fb0f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a65e8f4-b03a-4f94-80ff-dee1a5864ed0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ea8926-b07e-46f6-b321-4890fca00dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "052ec5d7-981b-4b7f-b836-3695d9ba63ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f1341e-b1dd-4b1f-9982-cb3e1bda7552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a8ade6-861e-458d-8de8-13840b2aef53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef689d63-a341-4cd6-b603-9e7866af9c01",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e2e1b9-d314-42b2-b3ae-3833861d8c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb44b26-a3a6-40d0-88bc-6bd6ae8f2d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1751318-a76a-45f0-942d-9b8ad778eb97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "63e1cb63-edc2-40d4-a651-9af82798632c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339f790c-9ddc-4818-bbd2-6d1f0fbcf3a0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b975ad61-b7aa-457a-8d14-ff6b753b959c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50911432-14b7-4d4c-b9b8-40482ea4aeb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcbdc967-3f8d-4db9-853a-4fcb98a2534f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "406e39a6-6c80-4b71-afe6-1dc99dbe6578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e3c235-5982-41b9-928d-68eab68deedb",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0596b3-fe08-45c2-9a91-3f11e4771924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45055356-c754-4f1b-b11d-f73e1c7c65e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b7acb0-d0f3-4f11-a1b9-89ed7ace9d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1566a63-76e0-4d80-bfbb-e7694d082f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aaba7df-8dd9-4000-9a30-8e9643dfd412",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0707453a-943b-469f-ba7c-6e67919994a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894f8b77-b4c8-4a0a-93fd-340af3bd28af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e98e55-b5f2-4884-99d0-f821596e5f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "516d1b5a-7fb7-4f38-b2c9-f4779b485c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3469cb19-0802-408b-b703-2db4de0e8e4a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4444873-90ba-494b-8473-3892197cc256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "299560cb-7d88-42e2-8225-a556595d095b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4fa47d-c0b9-4cc9-a367-e57769b963e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4ffe05-7b6f-4d64-af94-ed1a0dfa66d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94c4ba9-06f3-408f-91cf-fb57f8fe377f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad518e78-83a6-4099-b364-05663d3b5348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bab5a39-66cf-4905-9090-c748484b778d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01be6cca-1177-457b-832c-39acff9cac3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbf3a647-bc8b-450a-ac28-ee2b27c19dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7cd9e4-2801-4f32-b251-c897d1d4f68b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69ea8ac-190b-441c-8eaf-a69e4b5e29d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18f07d3a-bf13-435f-a430-0e9d24c7a694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d092054-8470-476a-875c-61a733d24a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "437a0cf1-cd84-4ddd-ae2b-2ef4afd72b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc52b55-16e7-4a7a-a6f6-ab9d23188f73",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b95f65e-ec57-4152-ae8b-d9ee7e7a7a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00c39c3-9abf-405f-bf51-70ceed8f63a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf7c0fc-0f8f-4d5f-8c2f-7d8641329e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38fd3c7e-9265-43a3-8d58-02e20a2b1b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "585b4884-8a23-4d39-96ef-e7b046688105",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce133021-d270-4e3f-b2f5-a4e51e05d55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e65b72-7671-44c6-a656-32c797687719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb28ded-d69e-45fd-8a6f-88bece03a301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "428d73f3-55f9-4bff-bb96-3674c50c7ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10af89c0-5158-412c-8ea5-d111acd91fa7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09b04d8-2d39-4542-820b-d9aab5550df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebc9dfc9-75b7-48e3-920b-adad95a65cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4925f60d-b259-43d8-9b9e-7ff870864228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46df3fe2-b14e-4c47-8f71-6e27557bdd99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c0d323-08ec-4817-8a8b-2c7c417e38bf",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "993ba38b-1ee6-4306-82d4-e01edd17cbec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f52502d-e420-471a-afe6-88f36c90d5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14cb7fa4-973c-4f48-b06e-5954984ce0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9de3c4a3-50b0-42b1-bb66-f463c7c1c413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f018a3-2fff-4ee1-b437-a6e77683f2f5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567ecd4f-cb57-463c-a0c2-788a26c17529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe105891-830c-437d-82fd-31c7a3941ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bced819-9da8-462c-8229-777c473a2805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a393d6c-4e59-43d6-b24e-62c152cd0214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcbff85-3062-4d63-9428-e48f8be912f2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc03c839-b650-4c71-a973-b5bbc45a8538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a34a223-316b-4087-9791-082817622795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41733a25-43f4-4c60-a960-c1f72de0bc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "747e6608-54f1-4657-8ec6-4d140db69e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241acd1c-5863-49ee-866e-3ff5d24ad637",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c35fde0-0335-494d-b537-1c8d9f7db86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22eaf090-8071-4519-aa9b-28499c9625cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "726cd493-69bc-476b-9007-8c751afc23af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acafec95-b518-4507-8120-d70533fe54e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3832a0e-051a-48b2-867a-c8da9e5b2f60",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0528b4-f787-46ae-a993-f0b58e41e6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9357f8a9-2ddc-469d-81fb-4810569d59b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c83fce-3f47-47fb-adc1-f02483cad84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3780db62-d037-4d6f-a800-b8afe4920423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44694cd5-4c3a-4e31-bd1c-ddf1171b4abc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a42362d-9cc6-4a2b-a706-534861dbf6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775248f9-fa24-49cd-9de1-120c3175db2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4465c29-3ec9-4d8e-9c6a-406284d1f694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e42e1515-1153-4c6c-a5a2-021a602e5415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc10dd0-17f5-4140-ad61-af6e8483175b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3598e1eb-8d1b-4e07-8f0b-58df8b065d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0a6ecd9-bc7f-4b40-8cc9-53c4322a57f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a796855-9875-437b-8002-a7aa189f5f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1a69adc-bfda-4772-9d6d-0dbb10d93201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25a37b9-4e86-463c-b25c-b50e8f6b8424",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595c0bed-b9db-4894-8d0a-0f67b5697646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "077ec652-5af7-4afa-8b58-2148b7322fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb89eb6c-c7ab-4922-8894-9431d5011bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b48af1fb-6f77-48f0-ac1f-b6db104b5235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec58d3a-3d54-403b-a5e4-e63436bd3547",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4dc5bf-91e2-4fcb-8772-4f4aef9ead6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f05406ca-92b1-4e64-9758-47803a94a76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d364fb-3b28-4cae-bcb0-9153b4c587a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8af420bd-a8fc-4ade-8faa-70476db6757d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c9440b5-1b70-4773-be34-e2b92a327da5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8735d4d-ab71-455b-b824-6681fc0b303e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187dd5f7-af91-40d5-85ed-7e92fd52e9cc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ee042f67-3ea4-4225-ae34-8cc4efa610ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0571f37-ade5-44ea-9702-96879fa6b8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d93d92e3-e4fd-4dc5-8abe-344a42510d28"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "514589d4-158b-4588-b42a-d67bc8ff5059",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9aa9ecf-3d7f-44d7-8061-b7266d44d4ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ba1f85d-a5df-4849-8c8d-5de4a7228181",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aefa1ede-88f4-45f2-b4ae-bdaed5b0608a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1789fc1a-45b8-4b20-a19f-a49229bb3c20",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d769d519-4e51-44b6-9308-f12f623e4148"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5fb41a6a-5183-4624-95d1-b039a837c423",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3fa71109-c603-4d79-b65e-7eb22143debd"
            }
          }
        ]
      },
      {
        "id": "163abe8c-34ae-4866-9d9a-91f5cadefaa5",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "8aca5304-ad5d-45cc-9fb1-76d8236f7f84",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6540311d-6fdf-4f83-a2db-c434348c4b07",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cdb42bfd-1031-478e-bf45-b8a1fd07630e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9336f04-e190-45bc-8500-fe0eea229843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cafc0531-3f5f-49cf-9d2e-602a1dbb1fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85c6311-f02d-4dad-942f-e73ab9028771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c72345e-f3a6-474e-a602-60528ad832cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53cd608-2e10-4b41-9652-86635d2f1814",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6636bc-d3e4-4a84-b849-e2971b439a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e525fd-1756-4ac7-9b2f-1c92d0f91604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6642676-3849-40d7-b65d-bfa7549f2fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "429238d3-b002-4995-a8d4-3ed174d8ff63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abfc31c9-ec6f-4761-90c2-5d47777a122a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8682aba5-669d-40c0-80aa-80010c167920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f67014e9-69aa-452d-b7d5-c84f793d5e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b925e3-da5c-4b09-b25f-ef48c8314bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c46cfd5e-f8cb-4c0e-9855-e21a66ac4f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234aa0df-3821-4259-9854-6a5e95edc212",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a7b2a0-da78-4a63-823c-f6cf25076872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0664937a-4dd2-4ac8-8139-521cfdf75010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ef95b1-95de-4eb0-8c4c-1cd00ea088f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0115865b-4b3f-4b4d-96cf-6f499c76c8b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650a3c0c-23ec-47d9-ab0d-f4d99f99c37d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797bb26f-9c34-41ea-aa2f-a0a2f2debf56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26883c43-3696-4bd9-9d4f-53fcb2c55f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c33f58-cdb1-4795-ae17-135c87e58d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "327fa75a-b2e1-46a4-b1e9-b5b2280588e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa90675-7a14-44c0-93fd-a7b0f12877ad",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ae3c5e-ede7-413b-8fed-ea759f51bcd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b0fc7b8-a036-40cb-b13b-1052755e3fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "384d4f3c-e398-4b82-9898-eeaa8ec58c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "150619ff-299a-47be-9f51-24ac527324da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3a45dc-f0e6-4a4f-a614-b35b6d228107",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf4a535-a0b3-47bc-ae9f-b993489c9876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "372e2d43-f70a-4eb9-970e-3d74a0954218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9ec682-9cf5-452f-aa48-b370d72a6b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "580e212c-b724-4943-ab25-f762ab926371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1e6d9c-db72-4fe0-845e-637383b6438e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df77ecd-dde3-477e-8924-1a7a89c8d88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2811f8d0-1f93-4987-a850-716da19d5448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32cf774-7ce4-4b3f-8f39-947c3ce3aa1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ffae30d-db7e-4499-b029-994275d681a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f7e3b1-4751-4008-8071-c774afa21f1c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0fe6583-a2d3-46aa-8ec4-bab74270367a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5aab797-922a-4472-aa7e-38df0989bf71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112683e2-f9fa-4e03-b32a-327795f6c0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3824251d-705a-4eec-8a74-e093b5764548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e817996b-7a52-4edb-855e-cb2ac59ab8da",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "013d6180-ce21-40bc-8044-0edee5621519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d9b499-ba50-4f64-bbc2-947bdc71dc66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91df0748-c050-494a-bd46-1746e6107c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f91da10f-c350-4cbd-852d-319f824158ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c96a7ca-886e-495a-b394-6927692be89d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f934da00-9de4-427d-ad0d-6e82990b12b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3ee950-e6c1-4ead-8cdc-a0716b723c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97457bd-f69c-47cd-b47b-ef08130ef6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b322e80b-e5a3-41ae-8a7a-4969b51dd0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47eba755-db9c-4331-b9e9-a6dc33e6ac9e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5606b1-bd22-4ebf-ba23-9ceaf07c9a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8c6ed6-0b29-4b25-9fc5-689c749c73c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eac3f7c-e43a-46d1-8bb0-ac356db4ca0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "86ab8254-1a43-4359-9661-6281ed716c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f46854-56a5-4c06-bdeb-6615fdc7e273",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88e3adc-8aa3-4544-b8d2-9be2542c0170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e882f4-802a-4da2-a5b3-d75acc24de88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774ededd-db68-4732-a37a-ead79fc96666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9150e519-de45-4e10-98eb-91bae1ab1c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41db8d97-0d46-4bad-b536-763a093423ca",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b88a6126-31b0-4ccf-8342-f9cd2f63319f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa7a52c7-d134-426d-a2da-aaf3f457fd3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d481266-4bca-4c6a-888b-54cec770c90e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "72f5399d-ce92-45d2-8cab-9487db4f0008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4240011-4502-4025-aa3f-d96e2eae4232",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d484de-98cb-473e-b34d-eb79cc0cbc89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34dba301-52ec-4669-b8b5-8baadb9fab3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3d3fd7-1435-4572-a407-eabbbd50b244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1858218-f2c0-4ca5-9975-8c9c12c5b1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed18418-56e2-4e39-b075-72d1696e1a26",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "409a7cb5-a067-492d-9e9b-f401ade5c6f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0a8349-17ab-4805-b01e-a457461b3ed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe36103a-7a36-42cd-a3fe-a586939f69f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "be3f202b-a2b7-402b-8226-6c1b5ddcbea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6a8a8e-c9aa-44b2-a294-d22b70eb190d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a04d8c-a906-41d1-b3cf-9339cd8e04dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b36d938-5c23-466e-8cbf-a2dbdef8b32d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55162a7e-9e40-4816-a308-b3dc49ffcc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3fe2f70-48e0-4d3e-a6ae-11eb082d776c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e7dddf-d693-425c-9186-d6b00e2db674",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e5eab3-3da4-482b-a9cc-5e8aca2e8397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c741e107-184b-47c7-8f96-ba43cae7574f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43abc2d-87e6-4aaf-84d0-94a20bd5a707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "61c71f38-225f-4f78-809f-df99c3c5ae69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da026fbe-bcb2-4207-a4bf-4f6f81a3dbfb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b523b771-20c4-4f23-b5d0-bb4ed76037e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31d3bd2-e459-4f09-8965-31d13e4e0fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae095e80-4a75-41b7-95c2-154cc094a1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c84a283c-d4e7-4458-9001-e5e33c07999c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f76c2fc-e0c7-4898-bd33-7aa15cf70023",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4817a8-4466-4ead-acfc-f64676f581fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "061026e1-a47c-4cae-ba25-5e3bcd23bfb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9e4524-1c28-47ef-a77d-aef960d8a248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a745fb95-671d-46fd-93e3-a22cd95df404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731ae75d-e688-413b-aba2-ff6069ebce72",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed8cc10-a8cb-46a7-9407-1e231c13d18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dafb9656-da45-4bee-b857-6f1d901d3808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bcee11-88d8-4f73-9919-c59c1b7c6909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb50354-1875-4393-9ccc-7ed6a032282f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1054db5-0c6e-4452-adda-50cc9ded3c55",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df69584-533e-47ea-a32a-63879d7b018d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84dce2a5-b2a7-4568-8092-412cf29b9bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1abc3a3f-4d19-4d56-ae80-f63d6a5339e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47134ec2-ec16-4365-bacf-566fd3141e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607b5a43-431d-4b17-ada5-cd63e0360468",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331a28f4-ea73-4607-a6ad-87704e4776b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b03ccf6-0c22-436d-9fba-2bcd75506eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bc20e9-2dbd-4ba4-8ab7-241a35bd2de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f363638-9dcc-41bf-9ee3-f2552495e954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bfd145f-641d-40bf-a5a8-ac3570b40c06",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5883a7af-0558-4ff8-80c4-d06d94b927fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb09872-4c80-4e53-ae3f-870ca78fbc5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23017584-5481-432b-ade3-deda0b110400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "effc5714-c80c-4acf-905a-9aa69ae58fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e2b67b-d9e3-4194-8d20-97bec0c938df",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5b115f-2a64-4b1d-8a45-863ad35af038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48cd7e5-289f-46d1-b5aa-d1b1e8790653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edf42c8-2535-492d-b045-c05d6d57ae3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "035aff52-c8c2-4569-a3fd-9cdaef38e89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31aa6796-8472-4db9-9f03-b3d7b9fe2807",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d45aad-fb92-4379-a02c-a591f5380782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "126357be-5fc5-42b7-b314-521dd00e1d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ca7026-3c01-4cf4-91de-a4ad228dfe06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee5362bb-a9bf-43af-8a70-c12d23805024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af28ffcc-1a49-4f3d-aec9-1e83d17c809b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e5f361-c1ba-4450-a4fd-2abc405f9b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f260179f-5f9b-41ee-a67a-376a401bdf25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bce366-72b0-4754-94b1-854df32029f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbfbf8d4-85e8-4351-9ea6-61188c74011b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f68bf4a-6705-4a9b-965f-4f90d42e2d85",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef11fa5-05b6-48ee-8c98-8bfcd3b3b01e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be65896b-b563-4bcf-9a81-c7e81636f0e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b36db0-3c92-4de9-974a-2111c42ac118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dbc69f1-b86e-42c9-9c4a-79cd745de79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec55606-244b-4393-bfb1-2df5fde9ee6a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbc3034-1341-4988-9d93-bf546adb6ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba97de4-e5f3-4979-86e4-02d4b9f79057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc037df8-f57d-44ef-bd78-337eccc54018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f5b5359-ef30-419c-80fc-c6765d22d8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce900e2-583a-43a6-9f00-6d79ecc077f2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3c06ba-391d-4e03-aa55-4ae7eae6f66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aadb67d7-0dda-4b2c-a708-22a976e7c834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da05144b-9e4a-43b7-add2-fa1606017c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1797e73-d28c-4dca-b9d2-1feab67949ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fdedee-898b-4ab6-b910-6b91b31c7f37",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e81fa1-ada6-4bd7-9689-e06c4a53ec99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e09619-0802-4a2f-80b7-4bfb6e251640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614b2241-1f57-4e6f-9dd3-07491b816223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5765dfa3-2dae-4364-afb8-e27ca9a0ad09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78161709-89ae-4208-b5c2-a598cb9b2568",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea39e64-ac14-4683-b024-368082dcec56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601877ee-11f3-46bb-8fd8-3feea5795555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6633f611-4326-443e-9d9f-241558eace23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63fcd9f8-e634-4a32-bbee-3e786bbd8bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9316cc-f773-48fd-a537-15eda460855a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051a382c-6cd9-4e18-a81f-5eb9c5bd7af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff369c0-07fd-4faf-a8db-a6743375499b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1431182-9bcc-4eef-b752-a20953c0e58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4109e1f8-03ea-462e-a2a1-a8e0e5982084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a34641-0d65-4802-a356-297720c73bfb",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9035abca-199b-4c1e-bf9d-537954a48b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae11e67f-0116-4be8-aec8-482de5d17b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d0fa85-9046-4168-bbae-5ad3df1253c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f1d400-d8ba-422e-91f9-385c6f3a7ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d483a74-fe6a-4585-adf7-d5bb4ccb8583",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98911ffe-fd2b-40e6-9853-95d734523178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1a5d94-3552-432a-9902-0b0070ac5d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2eda204-7f90-4a8f-b0e5-8bc5e468ed96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d5487cc-4d64-4e1e-abf9-0e5bf9506b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ac778e-b74f-4625-8f06-eead176701a1",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f949bd2d-60bb-44f9-8a46-25129fd6e69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30b76590-54dd-45fd-a6cc-782f2ac6ec39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca26b53-d589-4cb1-b607-02dd2610b3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7524fab-ab78-4f00-a18c-ee49461f6e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f870871-34b0-46b3-b352-81bdbb47c55e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b27fa5-79be-4b27-8f74-adef2018a41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d29fe75-ca4f-49ae-b634-16ad7dc2c367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70223775-6267-4973-a278-5779e10c038b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0808ee9d-38d9-4fa2-a57c-08a8311c56b5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0a7d0558-ecbc-4248-955e-b1e9ca424a40",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "344dc759-0f96-41f8-bc61-c515d79c04af",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63598205-eb38-4b50-98ff-a7d0d455746b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cb540573-c44b-46c5-b730-bec75a1485e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "113a465e-f5b3-4168-89e8-9b68492a1a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b09a8f09-5ea5-44b7-8d26-4accee7bef68"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2f6db8e-0e33-4fa9-867b-d4f3e156b36c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a74de08-5da7-4fbf-846b-ad0c9046e33c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69f17e65-e8ba-4fbd-9fe3-8766fca3051b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "959bbf2e-263f-4e87-9980-65362de9550e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "26e5a189-2d82-44c5-af8b-eb87924c7412",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "29172f0e-8333-43c4-9e40-c5ed588fd37d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3983bb82-461e-4628-80df-434771800979",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c2929cd-2c80-41fc-be42-bc5417e2a9ee"
            }
          }
        ]
      },
      {
        "id": "72b2cd75-9870-4122-890d-419909fdc25f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ac5016e6-cbce-4ec7-b74c-f57592004d3f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0a1f63c5-6244-442a-af2a-d4870475d650",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f86787b5-50b1-4e44-8af7-755ae9096e33",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef65f550-4ae6-4ed1-b800-fffc8b01cb87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4679613-f552-4376-b8d5-deaeeb872fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5e11d1-2017-4949-83f2-196610c24c8e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f06990-3a96-4a00-a87b-004992960fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc2c996-0f1a-442c-9ab8-24e96dc754cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d244b4b-6de1-435f-b0f3-2977bfac6219",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00cab08-3c28-4545-8762-45d1c1d38f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d859a7f4-3dda-4771-8dff-194720b6e047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb0c117-37a6-46c8-8796-05a7593252e4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b743d23-5835-4db6-a7ec-12a7e94f6d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a2e60f-8423-4215-a02f-72b9589e4194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22cfa88-7f33-44b5-a322-1674c2503e4b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d09d668-69d0-4c55-b6de-5bdaf3f44ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7f408a-cdc3-4ca0-8ab2-797a02b01b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4afde4b-9d9b-4d0f-81db-2b6a4f9607c6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85435bd2-2698-48db-a1b8-9f6d7ce731dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e482baf-176f-41a5-bd73-82f1b2fa1ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678ae131-e6f8-43a0-9cd3-f97fcfdd1321",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f6d4ea-ce05-4346-af15-88bb38452c71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ee6faa-f0d8-47c6-acbe-4230e7e1f39b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "355add6c-0269-431b-99ac-21bfa7a47673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf77406-3343-43d2-93ef-1b1a08d441ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c013721-1ceb-492c-8eef-7ee8715d9508",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f36a617-c030-452e-9c29-8763fd60e638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cca4c7d-cd9d-4461-9556-d92e8f99cb6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce838f6-b157-403e-a9cd-2e7545895cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e33dffa6-f3a5-4e41-aeda-b3d9a12a44e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bf7a7f-3528-4d6a-9d7e-30d547ffcdba",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616a006c-ac61-4d4a-b87a-497aaa75f4b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2f9caf1-2215-490f-b588-b13e58fda7c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d67c7dd-1210-4264-bf5e-1b3c38b924e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a05fd332-c151-4a0d-84bd-2938f5d165c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c36f740-6b02-4fec-9865-c6501185bfeb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc14cce-43fb-483f-9cea-7dc2d11b6164",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "419f8275-5dc9-4263-a1dc-da2d33712579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "875fb8d1-c7cb-4b33-8f0d-bed04b08877b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af731e3-6ece-41df-9837-cc2b2122dbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5e5f6c-b2e2-4857-99d6-cb690360dc03",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0deee2a2-bd2c-446a-a366-d6a821fc4620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46115476-08e7-4af2-80be-ddfc2afbcae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35dd4f3-d6c2-4772-8283-c03778d0a5ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b3dbeeb-1bb7-4d8c-bdd2-0b6e6ff08b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6561ce8b-773c-49cb-a346-9c0ac69948fb",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872e8088-5c5f-4183-a003-97bb7be8f369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0d6682-1911-4a04-86f7-7e6fd027cf99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5380c18a-d769-453c-828d-c2a7097d634d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd57e47f-a6b2-4e57-8306-62a16cb65ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ed2e2b-6158-47e1-abbb-dbb281d41dd3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23e5cb1-b53c-4c32-ae4d-7552941d3ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7f148ef-7049-44c9-ba0b-74dd7203fb79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e6d3b0-cfdb-4d8d-bcbe-786074a248ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d847f7df-0653-424b-b948-dae8db4a7bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c856b564-8355-442e-a0f4-f79e1204802a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d1f64a1-9275-41e8-ac9c-eb7cc89907a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50240437-99eb-438b-a099-2042e8a8f233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c488f91c-363d-4b8c-87ef-61f473ab1805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57a912e8-0ea9-4011-aca1-b1ddd5648b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6d93bb-ef6a-4544-b25d-738bb552459d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d095de-2d62-484a-9fc2-ff3ba026ad8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b391ce25-6940-4182-a1b5-7aaf33d77d7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9268b532-830a-4825-9cc6-bb4f2be5f6ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db765771-5dcf-48dc-9721-ef833a6dec9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a41dca0-1e6d-4719-b740-b011bc8bce07",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1925607-1413-4e75-8b92-709074144a11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eedb00eb-b42e-4c2a-86fd-992001c52237"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778b57a6-1924-4c5b-ac3f-5a1bba2623f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128558da-e4db-4ae5-acdd-b1f7b5463119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed94d05-d3fc-41d3-b314-f1bea328239a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f433c331-0d7b-4f5a-a7fb-576f2bdc38ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5bcc33b-ffd6-4905-a0dd-185c85c14175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebee9882-ec2b-41bd-b8cf-fa17913780c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa7ce54-ee1f-4670-80a9-46dc05a99f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b675a20f-f622-464a-8cd4-bd6f3efa35f0",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c6fed8-66b3-4bb9-b798-ec2d92b670f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe80e15-10f6-48c1-964b-b51b9f924892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46ca421-f65e-4bc3-b98c-c85c90cb4554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6bf2f8-f362-499e-b406-7e11f4db8f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69324dde-6e5e-4c92-a29c-3db5f3c54b0a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3634de9-f06a-4eeb-9415-95cf7684d576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3bcc271-00dc-41b8-bd95-94d58e4c67ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25703501-c157-4b7b-903e-e0df1c55f051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8906527f-3d55-4e78-b796-c234d529383f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88b324b-4903-4b52-886f-b0ccd0fb7b78",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19df6793-d7d2-4d89-a941-bfe9423e6543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e756b6d-56d3-49d3-91de-1ba4bb5b83d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd3132a-518e-4fbe-b21d-f2807197f6a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa592b9d-9eab-4651-94aa-9de63cbeef30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b5e038-cc1e-4424-88f4-c3023105bfdf",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62eca457-aa64-4bac-97ab-161e5dfe460c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98e7ff41-87c5-42f1-a343-1ca2e7c13807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4373bca8-70d3-40d6-a552-5161644862eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146f4470-e47e-4f1b-8397-292db41cdf0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42dead24-f8e8-452f-a85a-0d7e8bfeecd7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42db3311-c604-457d-9f4c-71b198a06dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b495635c-b788-4088-b980-a0e78c348b0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b20cc0-7da5-478f-b8cf-4795a6dd0605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c78b382f-b1f3-4b73-ab63-168c86c19814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d46f20-0f24-437c-ae9a-d374e06b5d84",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4512ba15-cdb0-4bae-a3b5-bdb1d4a29111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e4597db-c552-47ba-94f5-05f496f20f33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d90a31a-18bc-4f7d-9cbe-878c6490cbdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32d94e8-69a8-4869-9be0-80ccfc5b5409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eaa0e35-e9a7-459b-97b1-c20914a4eef1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318e7f73-3a83-45ee-ba5d-9277e81b31aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "602ed109-322d-46d7-b897-597d08390c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e4389c-e46d-4112-9d24-9ee9589fe66b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddaf7865-015a-4119-bea3-2e7f03777464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7af4df-7266-45d1-800c-f21daa02d025",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487f9ad7-a156-400d-8eac-e74e232d18de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ad8662c-7617-4740-8dfc-f7269d8c14dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54fbe3eb-e1bb-4132-8ff5-b72bb5a939ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c6a8a4-5a11-4f28-935e-e09b1dc6d36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40385bb8-c6e3-402e-830a-5d261f473e62",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306a6914-db4a-4d08-9145-ba634917d4f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "607aab34-3641-4acb-aa86-7daf0896edac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7636cf-43a7-4861-b187-4196f8a4eb9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4da6e2-5cf0-4eaa-8bf4-b2495742bc7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945ff8bc-4daa-4bab-b1ad-d0f0a0a94bc3",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbddb803-3f20-4821-bf69-d45da31f7250",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1ba5508-6604-4c0f-979b-201afd02eb99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "997d7e9b-559f-4790-ab85-e3751c037b88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e0b882-00ac-4eb7-aa8d-79e552157c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acc1583-9fd6-47cf-8c7f-3f40d1a8be1b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2cf62a6-2a73-429b-b10c-a55a479094fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efa7a4f-14ef-4c05-9ef6-e6b948ce0c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40aa59a-4638-4934-8135-774a89b8fbc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccf916e7-9cec-42a1-b59f-2223feae39d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6554dddd-4f4c-4cff-b395-b6a98b5c062a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887d350d-d3d9-4011-8222-71078d1c6392",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fb213ad-ab78-4c6d-ad8c-e0eb1943e90b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8974bc-1351-4e9d-a8ad-5dace018cba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0781fc2d-a266-407b-b2a8-0e6040fda33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38acea11-4ca3-41b3-b490-c5a369db104f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fc9b3c-8c3f-427d-ba0d-a1848b5c2226",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a96d20ec-bc11-4b4f-bbce-ffb94f339e71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea5d90a-ba50-4195-9cf4-7cfc55c4857d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558a5447-ac6a-4103-a2a5-9da8cd9cffb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4aede6-0cf9-403f-9730-aa8aabf35c22",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379722f2-fc94-4f86-8063-e998e6e8c6ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "974b0263-38c2-46fb-8dca-155a91b5e8b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96fe1b1-b945-4aaf-8c9f-def4b55d4c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f24dfaf9-ba53-44b2-9e99-df01735c7e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4fd157-9de5-462e-86d2-a968b9fdc7bf",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7babb2dc-52d8-46f3-82d2-943a0c08f8fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f73e83d3-d00e-484a-81e3-e0c1b2541eba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b132abee-89cf-4b2d-9772-f5643a6c1333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "007b1ac1-1e4e-4b29-ae7d-40ae037eb8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8526ffb4-dac6-49a6-8ea5-ae8a4a517f0b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2d5d2b-cc49-47b3-b618-45b77f6bb185",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78ef02b9-9771-4307-b085-225c083cd7a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62202a0-0a3a-4277-8544-b29339048de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a37415-38d5-4a2e-8c4b-eaa053577384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18927913-0541-4072-832a-e6a1f01edd7c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492d032f-4faa-4d72-9645-ef26f59f1965",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32a47c44-08c1-4762-bcec-cdd94e754b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30af3737-6e2c-41dc-aeac-f14b3c4fb6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaca4f23-56b1-4118-bb9c-576396d8086d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f703c6f-d446-4d2e-b845-194617974475",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d770c4-5fa5-41d9-ae8c-dd9b230d0bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f2f228-fe7d-4e05-a40d-042f0f5a28b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c05080-488f-44fb-9eea-2af9712edfbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca61ff64-4e8b-4e40-8235-83bb4910a620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28263fc2-550c-4486-846e-00c036115808",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d912aead-2e31-4d2c-9403-54c73d280e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf182bd8-a76a-4325-99b9-6eadaffa01e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc355ee2-7702-4a67-a388-c1dc2d5397be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d054fe42-bf5b-4016-9cbc-488277cc6a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c175f29-1fd4-4227-a456-8d6498119d8e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271f50e7-8dd2-494d-a419-63f1762f8230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb5a163-1c4a-4043-80d7-5ab7e5d00e1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "715e1a49-bfa2-4baa-923d-9a568bb5cfb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925e4999-a81d-4a40-ae8e-59e4d4d4ff68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78593251-87d6-4075-860a-c713084dbdb6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255e201c-d248-4fe7-8e6e-e66ea06fe6c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d389f14-38a6-4e6b-b3dd-ce851f5a2583"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1101469a-aec5-4596-9c14-0dd7fa13c19c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcde98fa-82a2-4e6d-8083-5385676dba9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c297dae-df85-49cb-abaa-e4ba43372881",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d924eeb9-152f-4696-947e-dfc4571f8d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a48d3499-9e96-4c81-9765-56f68bde2718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2feaf4-9b6f-4382-8501-4e389c376f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6cdb288-4abf-4792-8f04-78da5c655c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e64b17-63be-4a07-bd01-9d5dea41a70a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c928d49-b607-4fb8-80f1-64bafb9feafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd370af0-2b44-42f3-969d-889fc3589263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d4c269-88df-4820-9979-7b092a671ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "747f5dfd-a697-4c3e-a7cf-b3e94861cb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7169d64-ab46-4ee7-ba91-60722119f121",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2078c94e-9baf-410f-8de1-6bea918128e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449c992a-260c-4e2a-b03a-1c1506cc4c68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82951a0b-ba70-4210-9c45-e0ea2f09a55c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15367b42-e345-4d8f-92c2-5bb4044e1d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce348309-e228-468e-bff4-bf5748a48c23",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f657b1d0-f566-4d25-aad0-4aec5942305b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5a7193c-7884-462b-baff-f2e2f5c721ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3dab104-564e-49b8-abd1-e3d0acc83ccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a162a82-289f-4df1-9250-0ab94069124d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c454f184-aa85-47b7-9832-fe43c2ac8446",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd8b9ca-5c77-4a71-b0c8-d65c31836e4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "536e002b-2de8-4003-9782-54aee4983d41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6a9e8b-3875-480f-8818-646d21f464b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4036720d-6a87-4da9-89db-36c409100fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49544075-cd8e-476f-811c-4e1ed72b7e62",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae73d5c-f1b1-4535-812c-29a28e337af1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f77e642e-6753-427b-8cbb-b41a1ae353f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6eb8486-c932-4538-a1ed-947b2bdaa354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd3d86da-629d-4259-ae1a-f27473277c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887b5cf2-e56b-454d-98ac-ecee28e1cf97",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c2d15c-fe05-4bc7-bec7-385a75e502b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df611f2-ef9d-4121-81c4-49b1f498a2bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c58ea0-91d8-4921-a1dd-75c9b6b0f273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021a98d9-f28f-46cc-8fff-fc20fd8a54d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf27449e-1b11-4ce5-aa0c-94c9c93efeff",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b9b6da-c5c6-4e5f-a6b6-b14de8ec6085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c87c844-a478-41bc-ae34-8d55c3dddad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05228abc-26d9-41c1-a7e0-59241d660cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b21d675-600d-4238-b69e-59035d221c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80cf634-a552-4900-92c6-68e58d411eea",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5561ef0-4851-4c46-88f0-667f20df6616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f8c917c-8737-4078-b74f-b113bafd8ed0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74918cb-7735-4e44-82bb-cb54841ce752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0e4b0a-c3fe-4ff2-9d3f-fe5f488d3ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f46a54f-6735-4d87-bd4b-39eacc5c8c08",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56dc93a2-0342-4982-af4d-c5472ee71431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ff59ad-5719-47fc-8e6a-095e37a9ed3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbd89ae-baae-4a63-999c-8807de42d39c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a69720c-46fd-4c7e-95c5-2ed1cd46babf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05fe23b-314d-4a09-ab8d-9e3183f8a287",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f62cf0a-6ca8-4901-861d-227a2ece4217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12b0fbde-be19-4967-a4c9-92640b5829f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0732900-065f-415a-b340-b8c2ee474ac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cbfc621-07b6-41e2-851a-9a3d0416c95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c664ae-b7c4-4c0b-bec1-1b9a020f2cbc",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1ae5e1-c247-40b7-8546-2abfd52325c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b26f649-122b-4262-a8fd-d1429aed803c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e3c9a5-48ff-4a15-8a36-aae1ed4be967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8db13ef9-9c72-413d-bfc6-910a26c6b4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87c98bd-ccaf-410f-978f-906ffbe20a8e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f619ca30-b3a2-4f33-a7d9-2df3d23027cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dc991db-942a-4ff3-96f6-114e7645b05d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb423be1-b1b2-4284-911d-a05832335c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25660ad-0cd6-4460-bcad-1719064c03bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f21a4d-e6bf-440d-ada2-ded466dda0f1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff71347-f3da-4e16-8ccd-3cd16cd29526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d3d7f4-cf1f-4087-add5-77ef6250e86d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73189f96-8097-4055-9778-06e9225b6baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dffe14fd-f740-4959-9c18-b24bb4faf963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a824812c-c9a8-4239-bc7d-79c254960e72",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995a8430-ef66-4b53-906f-810bb07fb06c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "444eeb61-8816-4a20-9edd-9296ca253919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27b4166-b785-4064-98f5-7da1bbd01afb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c752e9cb-089c-48c0-87cd-7528febc0e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b76ee06-2c37-4d64-8397-2b84a7e27b5d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ebcbdd-3e73-448d-a537-1c11f2959442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e10758-923c-4cb9-93f4-d6f46149abf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05772f0e-69f2-4bfa-80e1-1af0b8cbbe01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d53e659b-7310-4401-95b3-95981915e7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93cfafb-d7fd-46f4-9ea1-3862398b5913",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a481ac60-2e33-4798-b35d-b66a04304669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02088571-5c1d-4b4d-9909-9d867fbac73c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b6a590-a573-4e2f-be52-7a2efe12e927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87aa430-3292-4a41-8912-5b7e73e3bf04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3cdb254-7a83-4155-9552-3928e6ebc9a1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05a5940-3b31-4ac8-aac0-5e975bd0ca65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82bd59c5-093c-4dc9-b2e8-dc929879866e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c1c32c8-2de7-4750-8fbb-396578a8207b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc9faa13-d02a-49d2-a912-88fffcb1efde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d0e1b8-e8c1-4b1a-a29b-a9bf57d51798",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b69805-bc13-46a1-ab4b-e23cadd0af79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02fca23f-e67b-4b7b-bc96-c6baadf2c937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdf77b5-2ff0-40bd-bea7-0f139db4be87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10065f21-89f5-4ea2-a9aa-e4ee6211b0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7576d13b-415e-4b20-9ed3-61c647a485cc",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1717b26-cbf2-490f-a145-07e73f6986ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6491806-a73e-480c-9d3d-f33d33084a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4be371b-b34a-47a3-8751-6766483a661c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d316f2-7b6d-4e19-a99d-176f3c7aea24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1da2ee9-8a0f-43d5-b51c-7450f1e7c4b2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a25f1c-7ca2-41cb-822a-b46747129b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f03dcf-dca6-4b8c-86dc-1ffe3c2f41a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0cf98c2-1c18-4adc-a7a3-d12ca4a50511",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f2e53f-8772-49a6-86de-e6f5ae8e8394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3baca53e-8abb-46d0-b701-2f49fd93e54a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32b9d08-a37d-45a3-8b39-5226d861d3af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ede01da-f155-4756-9028-12ef097d6fcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cbe9b04-a405-4f1e-ba55-b5fd0583c14b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc808e4-812d-4897-ae9e-1c4f48cd4be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5256252-54d9-4b9a-9152-0e6d3c205396",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a25358-178e-4820-8749-834c7afdb6c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b47632d-2d2c-407a-a047-16a143a15dfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "506dd08b-817d-4e06-99a5-197ac811ad2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c239e8-868c-458e-866d-a316b401c7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3361b534-c81e-4dcb-8793-c374eebe1679",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed731d7b-9eb5-4cfd-8468-c225ac9e1440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "288d0249-ab31-40a3-9303-53f0ab9ffea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02bed73-20e5-4d3d-b865-cb8895de6ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e5533a-f845-471a-8ca4-83135d069f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc508cf5-99e0-4edf-919a-19dd20661566",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892c8d21-d26f-4a1a-aa2e-327a76a9cb3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c037c93d-8023-4423-a5c7-ac034bbc37ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6308e080-670a-4feb-855b-f46e764d25da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae3bea52-9e2c-462c-9075-13d6f753e851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afcb244-f57f-49d6-828b-604c6c42bd8a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ba6d95-68dc-4879-b8ca-eae926f6cdfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ad6da44-88a2-4878-8528-16824ccc4494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821c7ceb-0a0c-4b88-9337-c9d05f7fe3c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac646d5-1946-42e8-9acd-783ab0f386ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5296937c-6ebb-4189-a44f-515aed754162",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87066429-88ed-4dfa-bf79-8a88191a4722",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da1c92da-99f0-4210-b020-64a367d98085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "339ae470-f0b3-467e-83ed-3dc4e0c6314e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "658bc94b-d22f-443c-ac9a-42a4d2e04d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94a31b8-e3f1-46be-983b-e795baa3be4d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5976ade5-5e01-4980-b851-319407d419de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80e60e11-c63a-4264-a73b-dd26604a04bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42472f9-29de-4dff-b983-b038238e8f11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df343a6-7fd6-4fb7-9b6b-ebccc9a170f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2ca8b2-0f6f-4029-b5b7-85e29a596bc0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cdc145-79a2-4899-b7a0-ad7d7277c3d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52abdc4b-f475-49a1-b4aa-fe2214416bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1acd137-dbdd-4100-891d-39add0c51abc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0f431b-f927-431c-af2b-393862819eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17914cc5-884f-4cae-9c76-f697868e21d5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9d56a9-9090-4a9a-b7bb-54b289e1eac1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "752e33aa-4812-4373-9d9c-f75ef72326da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aec5812-03fa-4d53-b630-b33640f990f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b6f339b-b6dc-4b08-975d-3f896524201f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cdc6f4-0d04-465b-9e74-85e23f1b0e31",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ffa105-f81f-4de8-90f8-f5500980af76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90750d54-31d5-4162-8806-ea728a63f1cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58e4cde-8256-4c50-9c42-c2511b3db601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce8dff49-393a-4ee7-be78-6ac9e4c13cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242b6b05-3e83-4ee8-97d7-5266e79465a1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1703dc-fb96-45e0-93a3-1ce70bcd1651",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "779382eb-7937-40b4-ae44-5ca0392e5b89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "929e316d-fabd-4c58-8254-feff9a198499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e76d85e9-9089-477d-93e1-8b27940facb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67acb3e-a9ad-4dd6-aa3b-bbd98084a9cd",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6d8358-dd11-424c-ac2e-1886dab67423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b161402-2564-4d9c-bf8e-5e5840cd1dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d93fb6-3263-4630-b7cb-64e05884ba4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc9b5c60-bf0a-4978-8710-340c5ed4ffb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eaa8c59-4623-41ec-af65-a1377e7e58bd",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2eda86-8037-4cf8-9142-673dc5a2ac79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a718444-c5a7-4d73-a28c-545f3e17f6e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1e8553-9478-41d1-a329-450288726313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d63f68c-ccbb-4b3f-97bb-7a175cf4b507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1b43a5-4f66-4112-b1c3-f72fc980d6b0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e18d6d-8157-450f-bde0-d56f03cb8d5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c10819ac-8147-48a3-a2ec-6bc2505795c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77880dc-6f9e-40ea-b8fa-5c3a23349afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427915fe-7667-49dd-9f3c-1e2a76d1636f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4c537b-4d6d-4d36-95f6-bb0bc03e7cc2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35786e7c-0fe5-4800-93b3-ec525b1f702b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8495737-579b-4714-8991-39e1d78f8021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c08dca7-3715-4f14-91fe-c8e03dc45330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84646a9f-e6a9-444d-9aa7-cc70f7c6747a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c44024c-6d22-4fdd-be34-fdd70ddeb65b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d43dc97-1f73-4943-995a-d9a9d46e7d24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be6dddb3-ec05-4eac-9dff-5b890f0ba124"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f7d0a7-6c9d-49b4-bea0-e047496e317f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1549d2de-0cb2-4089-86d3-9192fc28613e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da7bab0-e280-438b-8da7-13fc51f566bd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9c766f-4604-4a90-b86b-b416ed72d1eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83366806-ae50-4d66-8f8a-aa091f6ccc8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "781ec1dd-2d26-4215-b958-9d73188d685c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac2a3b38-655a-4963-b4c7-e050a93dc768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d558ebbc-2253-4439-a179-0ca41045c7cf",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb53b705-23b1-4ed0-9594-79f21ebd3e13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6108a29e-2002-4cd6-9339-f8f0772d1e68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "475c44de-30fa-480a-a4de-1cceb81b6892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff327ce-9466-4004-8c3c-8cb55755d657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f020ebc-525f-4d64-a88a-5bcae31bf0a2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08201089-f9c8-4d55-93a5-fd8bd6afbf27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8632bd3c-5761-410e-8560-ab2fa136d0b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a2d11eb-e566-458e-9a6a-3fe0bc5b9aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aac4f8e-3f30-4b4a-b264-fbafafd56de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f426da-a73e-46cb-aa90-42601e610eab",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abcd521-2a86-4477-a1b3-4e4a1246f03a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17503bb5-28e9-4393-92a4-39131c88e023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0706fc73-8d6a-4f77-9248-bb0a5d30b009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aefc28c7-165c-4c3a-864c-2239a3558bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b26978-3e51-483e-b9a2-784c0ca5d4c4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbbc416-b77e-4781-aa4b-072600597360",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "574f3e87-bdab-4e0b-8f1f-2f98bbed9f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4711020d-e47e-4829-b290-f7998fb7c6d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a333c983-99a9-4ae3-bfbb-cd3387cfd93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3136a445-fd76-458e-a745-928307957e8f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa899743-5c52-46ef-85bc-85a1751e32a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b602e1a-a5c9-46c6-94a0-6280af5f57d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "374dd2f3-eeb5-445b-990c-779ce60fbb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc487add-e2ea-4e50-9252-83b24a1a718b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a8e181-2596-4a77-81b4-a84cf03618aa",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171b33d1-9a7a-4edc-93da-848a68468630",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32a78fec-f052-4d7f-a950-7f2d0271548d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d022fd28-b258-49ad-9f3e-f133a805e46a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2f1c69b-8b48-4377-acaf-4aa1dc0d92fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a163e30-048e-4c67-b15f-d05b58d5d019",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11718c09-12ba-4435-ae4c-c4fc30c113cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "620aa100-c2da-4753-9e48-f35bb154ee44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91939b0-d231-47fc-9b76-1699f4fcfb62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9371fdf3-8d86-4122-baf4-717f8b525df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb8fdbb-bec0-4c14-ae9d-26087066316c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95800d6b-215a-4d56-9524-8b8aee7901a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c213716f-bd17-4e46-9382-54ff68119f64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3c8377-649b-4ce5-9c1c-e5b1e8467cb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee282a88-e4bb-4b15-ad5a-954315da00a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34153117-b0eb-4112-bd9b-675983e7467b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031d0c91-3a53-4561-9508-e588bb386748",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "747bb4ea-c1ec-435a-a584-47757eab7c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1566d198-6019-420c-9065-c2e98df60559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b215df11-e9b7-4699-bee4-4cc8b8e1553f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e35af19-7479-417e-a999-0227e43a240b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa51f6bc-b885-4582-a3aa-3beeec5e35bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f092bbd8-4700-4ee9-929c-e25ca1683876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa40b0fa-e2ad-4ecb-a54c-03baa6874187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f6582de-43b2-4b7d-8806-e176a396378a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf0d708-f376-4313-a5f4-b57c3a0738e1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca69ff2-8fe5-4730-907a-797a0e3e05c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5bfcd4a-6f67-4d04-87c6-41ca15df9fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f6f546-8f9c-49b0-ad19-ce0389b8582c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d906b1-0b67-4c5f-9e50-50f6d9255dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3bc256-985d-4e78-a7cf-91ede05025a2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328bd16f-94aa-44b1-acb8-09a9a1ba415b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d364b4a-a784-43cc-b813-47e1e2f1649b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37565451-8b2d-4a36-aef8-abba0a70a91e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d853e63-d7c5-4d96-a8a9-fd0813d282b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342c46a9-0e8a-42a5-b829-fa75e985d121",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2f980a-1d42-4c0b-979f-0b587b0a1a96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20fd60ac-0d0f-4807-8776-8ac9e72e6af4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a6fd99-1a2a-4a43-a743-9d6de6270e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7913f15-71f0-43f9-8a2b-6ffa3353a31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1006b34f-b6ab-48d0-8803-430ed33d9d2d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835ede2c-b68f-468b-bbac-c237a45b6f1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9128800-9d32-4d11-880e-f23a1c602a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d2dc013-e978-41d6-87b2-d495c009b418",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "719dfbb0-6ebb-44cb-a126-59755003250a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2568d917-bc2f-40b2-bb27-ae250eb2d70e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504312bd-da12-4a59-b8e1-87f40116bad8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44c12af4-02ec-4a92-97ea-f7936220fb73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc876030-72af-43d5-908f-b068e6c40285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45ae6ed-4be2-40b5-a96f-28abed4071b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3e61dd-c1f4-4317-befa-13733d318cb6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad691dc2-f149-4c74-9406-db5849e406f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecb316a9-303f-40d7-9db5-21555a99d521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4865f168-267a-4c93-88fe-64ff11b78a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792c9539-ee5c-4e73-a060-bdabe5b80a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f74f49-eb50-47ed-bdbe-5ffc0c4f1e6c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081165c3-e478-4eab-8aba-91eb96134150",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80ef1984-f9af-4276-ae52-bd7efd4f01bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad85060a-4589-411e-af03-5a8bc18a82e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640175a0-2636-43a8-b12f-60102b23de53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5a4d4b-8326-4b89-903a-d10f24c5b24e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292770e8-30f4-4633-b6b5-51cb767905d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d13721e-0923-48be-8062-51dc9a55b315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "671d2382-40e8-4e73-b36b-9907a83576f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e103b111-3383-4791-b3d1-a9f5a2f13092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13dd5ee5-5707-46b0-938e-897254059808",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac280728-3830-4115-9328-c87baa9565ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ecb1142-3cbd-47ba-bd6f-036e88ed53ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa13792-f41c-4024-9a08-7d2b6272f1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32908206-8f97-4c9a-a288-f4486a0479bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d2775c-b1e3-41ff-81d0-f772504a6675",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082c6e38-3b42-472b-b23d-da9f20768930",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e336cffd-0c9b-4d9b-b12a-dbfa17ce1f0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47bb3983-7472-4cad-b749-11a396b0caa0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6999cc02-a6e1-478d-8bfc-88d8257b5fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2662ac-e004-4acc-89ef-0c00c233bba0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ccefa8-25cd-4024-bf7d-52a8d47312b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbdda34c-b5f8-4ff8-bf8d-3df9a1ef4636"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca6aa75-3e94-4512-aa4a-50087f5faf3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e9d1588-36ab-48fa-bf21-1626c279c497"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dabb064f-29f6-4a4b-a70d-dc7e37bef348",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2569eade-3454-4ec3-9078-fc918ac896f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "df12e9ac-7750-4305-aaeb-cb1b1d5c28d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc1ba6d6-3024-4786-a889-39a3370b63f9"
                    }
                  }
                ]
              },
              {
                "id": "e5d4fc67-37e8-42df-a7ba-b500062e04d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3553d9c5-4b93-475a-8dcd-eefa4d6f63d2",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82515569-3934-4ddd-abe4-cebd010e0587",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6260e4c1-ece4-4b57-a189-9772fa9e078e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f3fea8-3c8c-4c15-88b7-976790c9e69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c29d30e9-40da-41d5-9175-7d9ca799cdea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "699b6d4c-f65c-4b6d-a450-a4216f40df2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8890013-68fa-4656-8676-9a11ca3441c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ec210be-e7d6-49e1-b0ec-7697d3670723",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c1f4da7-08bd-4fab-8984-c4519dae0d69"
                    }
                  }
                ]
              },
              {
                "id": "c657f3ab-d168-48ee-be73-447083eba314",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "fe1fac36-d1a6-4c8f-99cf-483970f52ec4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebfd4f2-a433-4781-bf97-2c7ccd8822bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "bb98296e-23e6-4f05-8a48-503a899fd711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18fd6c9-6c09-4bde-80f6-89a7f813ddb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55103d48-094b-4f7d-8da5-5818471ae417"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8388f4c9-fa58-46b5-99a0-30c10758d293",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3bc20af8-eccb-40a4-8f4e-e2f69419e21b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "053d32ba-f8e7-4180-9e9c-e024d64d0979",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d4069d5e-ba6c-4be5-a5c1-e44c5740d8a7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "800bf62f-e058-4bf7-a831-0c848e7bdd59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57c8d8f9-50e1-4dff-bbe8-bb3f2648ab48"
                    }
                  }
                ]
              },
              {
                "id": "714a8d52-93e4-4c2d-ae2c-e9f2ef82867c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a89b0a0d-9cd1-460a-899b-81a14125ad8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ab57867f-3b97-4bf5-9c3f-6248fb26eb72"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49bf93fa-8f85-4234-9caf-ae95a1661c23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89e1edbc-957a-4b7c-82e5-32d58282102e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d29dbb0a-8ca2-4933-a3c9-dc0a68e6f8f0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "25033af9-0a1d-4925-89cc-3baa18364f3a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f03714c1-20ba-4e82-98cc-8d277b92e376",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "793c455f-76c2-4718-95f5-bb2cfe81a218"
            }
          }
        ]
      },
      {
        "id": "0a73a0d9-b596-436e-b49c-0272264f208f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7002c216-63af-4deb-9f36-68b7ac58f24c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "580f996f-0cd2-440e-b8b3-6348bb7dc9cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba2140e2-3acf-45b2-b2df-96dbaf7e1475",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6704f216-4c1a-4f25-afd0-f40a967dd5e6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "16dfdb80-dda4-4315-acbc-eca268aa09a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eca3dd8d-9031-417e-8f6c-dcfcff060593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f9ebc3e-e1eb-4b5c-81b6-544e652de11e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82a05c50-d42a-484c-8ec1-3c7c9aadaad1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a6c9b6a-49f8-419a-b1d3-ccef1007f9db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aded9d4d-04ed-4b9a-8f62-cc079742fc8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8b0915d-c83a-4bbb-a830-29e34f543574"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b901fe41-c019-4820-841f-d48692915f48",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fc5f0cc2-ddc1-4e77-bea9-81f6d71dffdf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72e27530-e074-441a-8f34-c216d8dca16d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a98f87c-df34-4fa7-ba8a-fd0602f2e977"
            }
          }
        ]
      },
      {
        "id": "c1c795e0-d426-43a9-92f9-c66c6eb39139",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "de41cb2d-1489-4680-94c9-8b8fae7b4fdd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "465db080-d177-4dba-8409-d5f9d4fc7a46",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a496dc5e-81b6-4d3d-a32b-3f2515142054",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddf5069-4195-46a2-881e-8ec65cbde59a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1baf28b2-5e7d-4c93-a373-c44d825d325a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5569329c-b4cc-4cb7-86c7-83fedf4af7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77b55f4e-b334-4f36-aedf-93b0e14b74aa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f8ad489-057b-42c2-a86b-731d2edccbc0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "82666e88-9471-453c-9c74-5e4b857acbec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d28989b-3ddc-4304-8947-b4e01cfe0c6f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5111083a-c26d-45cb-af00-f0dec80d0ea5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "238c49f5-1cad-42ff-97d0-2a82084bf68a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7b6c55e8-89a5-4015-96d8-49d57c7ce710"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae434a4d-71ae-496a-abfd-9f9226c82575",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c3d0a544-35ca-4b5f-a326-02ffc74e3c01"
            }
          }
        ]
      },
      {
        "id": "cff3d28b-6855-469c-8f7a-ac5ecf6fe27a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7a19d4d6-1923-403a-884a-4f85a73b97fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb7a862c-58d6-4e59-a373-b9619df9cb3f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "59d85288-a516-4cb9-9dd4-9e96b1b49adf",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7fb9fbb-21c0-4452-b10a-4456ec8ec2aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0d3c158-a6db-425c-bd0d-6cce61fe09ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0532f5-0d02-4e36-a00a-7bddf0648403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20878133-a88c-463d-8e3a-86797e6cb8cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "41b747b1-c577-4f1e-9222-3f050e7d818d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e325b611-862e-452c-b640-891dba85e6e3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "accf53cb-0437-4796-8f8f-e5b052228b6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4244fad-ad92-4703-b463-48d642fe109b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b9e8cc0-2510-4021-8ac3-cde837534ff5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b8cdc954-7cf0-4334-8479-651e5e8114bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "20afe647-d866-4c1c-806f-33320a3d40f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee8ca4c8-dea3-4634-ba82-a17788bfda03"
            }
          }
        ]
      },
      {
        "id": "b71c8708-2360-46c2-b4e3-f7214af18e92",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98a25d41-19ef-4fdf-bdfa-31ec01dfb889",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f6c8bbe-64c8-4b44-b1e4-407f000959ee",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0be6e5b0-51ec-4985-b9df-783b0bdb3930",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2606cdfe-a184-48fe-9afd-48d2634665d0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed5a7dd4-43ba-4e89-b23b-4079e974d88c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 295
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 50.96140350877194,
      "responseMin": 20,
      "responseMax": 305,
      "responseSd": 27.32267071265673,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711153994364,
      "completed": 1711154018120
    },
    "executions": [
      {
        "id": "0c007406-e42d-44b5-889f-b9885e3aeb7e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "5327221f-5406-473b-b852-f77803ff353a",
          "httpRequestId": "8a8c0aea-76f4-41b7-ad56-628b02537ec3"
        },
        "item": {
          "id": "0c007406-e42d-44b5-889f-b9885e3aeb7e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "73aef494-d73d-4ea8-b91b-92dfa383abd6",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 0
        }
      },
      {
        "id": "74093484-d36b-49f3-b0ad-3e15dc03f5f2",
        "cursor": {
          "ref": "90e989b6-5df9-45a9-9b9c-594656b55dd7",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b803f2b7-a0f2-4f2c-8a43-35f608a4d072"
        },
        "item": {
          "id": "74093484-d36b-49f3-b0ad-3e15dc03f5f2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3f286d3a-d821-4c27-9b9a-8336b2dbffae",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "1f4eea4b-aae6-49dc-9de9-47e99a5feec4",
        "cursor": {
          "ref": "580f46a3-23de-4ee1-8104-45e6af16937f",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6195e040-5635-4efb-ba50-9200745e4a3c"
        },
        "item": {
          "id": "1f4eea4b-aae6-49dc-9de9-47e99a5feec4",
          "name": "did_json"
        },
        "response": {
          "id": "b58aad8e-77aa-4b43-9811-d9650ba319d2",
          "status": "OK",
          "code": 200,
          "responseTime": 293,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10094806-c8d9-4c06-bcf8-117f169c2aa3",
        "cursor": {
          "ref": "f095e710-02b8-4373-9654-0ef8e823675c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "92eeaeeb-d122-4d45-9554-7ea4b44a5a26"
        },
        "item": {
          "id": "10094806-c8d9-4c06-bcf8-117f169c2aa3",
          "name": "did:invalid"
        },
        "response": {
          "id": "7e1c9a63-9966-44ad-890a-f1a04ec4735d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10094806-c8d9-4c06-bcf8-117f169c2aa3",
        "cursor": {
          "ref": "f095e710-02b8-4373-9654-0ef8e823675c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "92eeaeeb-d122-4d45-9554-7ea4b44a5a26"
        },
        "item": {
          "id": "10094806-c8d9-4c06-bcf8-117f169c2aa3",
          "name": "did:invalid"
        },
        "response": {
          "id": "7e1c9a63-9966-44ad-890a-f1a04ec4735d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4192521c-c2d1-4eff-8737-19ad3538b64c",
        "cursor": {
          "ref": "767da8f3-1896-4abb-836e-8cd59b29508a",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f1a93456-110c-4f32-9296-fbd6333f74e5"
        },
        "item": {
          "id": "4192521c-c2d1-4eff-8737-19ad3538b64c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c367c243-5aac-45b0-a0c5-62d46bd1e1c1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7116d5-7d18-4477-a490-00db77003e53",
        "cursor": {
          "ref": "1fd6f1a9-853c-4723-8910-06658c17ef4b",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "16a4e010-1521-480d-9468-a20794c0e134"
        },
        "item": {
          "id": "0d7116d5-7d18-4477-a490-00db77003e53",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4f4d6899-9a4b-4230-8e65-6c8bdf69852d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 48,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "211e0ef9-79c3-4441-86b5-068844d4bc7e",
        "cursor": {
          "ref": "41b38f59-d4be-4855-a99c-12d279e7de32",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7e8fcd32-11e0-4e1d-a3b9-eee7db1303a2"
        },
        "item": {
          "id": "211e0ef9-79c3-4441-86b5-068844d4bc7e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "be93e98c-e37b-4b98-baee-273608da14f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da0f4d6-29fd-488b-9802-3a417f70ea1f",
        "cursor": {
          "ref": "4b816dd4-fcad-4e72-8e05-bb8b6b3d408d",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3e8c62b8-1770-4b84-84e9-58a01562f156"
        },
        "item": {
          "id": "7da0f4d6-29fd-488b-9802-3a417f70ea1f",
          "name": "identifiers"
        },
        "response": {
          "id": "dfd5c041-02d0-47c8-ab5b-8091e576ee70",
          "status": "OK",
          "code": 200,
          "responseTime": 228,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2604dca0-6e63-4e72-b3b8-1b3fb0394247",
        "cursor": {
          "ref": "06344eef-fb21-4c11-91d7-9912940b4985",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3be0cf5f-1396-4ee7-92b5-f2fecf59e449"
        },
        "item": {
          "id": "2604dca0-6e63-4e72-b3b8-1b3fb0394247",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "aefa0bf1-f154-41ac-b8db-41d198f72422",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5bb9671-277a-42bd-a9d6-ad325405a9e3",
        "cursor": {
          "ref": "9b6d15d3-1f03-4fa9-a8d7-713bc7b12a0a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f1cb8841-1f60-4e2e-9bbf-17983e171adf"
        },
        "item": {
          "id": "f5bb9671-277a-42bd-a9d6-ad325405a9e3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0daa94f7-7b8d-4796-aa5f-de02b927c04e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7dd81a5-30b5-47c8-b6f4-3298d39f6c03",
        "cursor": {
          "ref": "d0f9a189-9137-43e0-a9b3-d62281337f97",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "63f8e163-66b5-47bd-9b39-19846f30d0d3"
        },
        "item": {
          "id": "e7dd81a5-30b5-47c8-b6f4-3298d39f6c03",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f3418914-0710-444f-b856-047091596a2f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17fafc14-62ef-4c46-9051-953b9bddde3c",
        "cursor": {
          "ref": "db9ab869-5b9b-4281-a689-f6b92facf925",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "05a97efb-cf35-4ab6-91c6-0cdbb17021f6"
        },
        "item": {
          "id": "17fafc14-62ef-4c46-9051-953b9bddde3c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0c35db58-38cd-4c34-8335-0f7a32614d48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8229191-6256-4284-814c-6713f24ba85d",
        "cursor": {
          "ref": "ab498fe1-2d01-4ead-a0f1-2ce0a7de916e",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "90329f1f-bf7c-40a5-8d49-4e8155fdbae5"
        },
        "item": {
          "id": "a8229191-6256-4284-814c-6713f24ba85d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ade34167-bb8a-4c05-8388-8b9d1f6c7dba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10f71a93-dbdc-4bec-919e-99cb3264e5fe",
        "cursor": {
          "ref": "472c52b3-10be-489b-a0b9-6a030e1762fc",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "40884b0e-bd6a-43fe-bdac-39ba690c79be"
        },
        "item": {
          "id": "10f71a93-dbdc-4bec-919e-99cb3264e5fe",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "13d39df7-7d68-4b3c-b14a-46634a4944e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9b70d1-3e57-4ee6-bb02-68c6705c6e28",
        "cursor": {
          "ref": "2c307506-43e3-4470-a04a-0282d5acfe8c",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a982e4f0-3544-4e2f-84cc-7328794f4c01"
        },
        "item": {
          "id": "7f9b70d1-3e57-4ee6-bb02-68c6705c6e28",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "270dd6ac-33d0-4874-bc10-244485d1e9e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97fa69f-f7b4-47d3-8674-33707f217626",
        "cursor": {
          "ref": "1c0520f9-6f40-47df-b6ec-289cc87278bb",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ef57293f-ad33-4a15-a97f-387f6c3ba7bd"
        },
        "item": {
          "id": "f97fa69f-f7b4-47d3-8674-33707f217626",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ab147177-2ec5-4d54-a3d9-7f272b7323f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab890ce0-350f-4811-9a6b-996c4bb48d30",
        "cursor": {
          "ref": "613ab3b9-70ba-488a-b0da-fdb0b84f3c44",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3e3bf739-173a-4144-94fe-eb96fada2ec8"
        },
        "item": {
          "id": "ab890ce0-350f-4811-9a6b-996c4bb48d30",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1ab545ad-4637-4467-ac7b-ece0b21996dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a32ded3-7b5c-4937-98cc-656f5c99df0b",
        "cursor": {
          "ref": "e9f5feea-2b11-4157-9bd3-3b969bc43de8",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b6cad5c1-bcee-4d0d-98ad-845cce261e04"
        },
        "item": {
          "id": "3a32ded3-7b5c-4937-98cc-656f5c99df0b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2bb8c46d-5578-4a8d-8a8e-70316555367f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca22e01-cddd-4763-867c-fac8b6bd44d6",
        "cursor": {
          "ref": "26aa43a8-5269-45f6-b02c-28c55dec9577",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8fd2c32d-0c03-42c6-905d-797cb6d1e2ef"
        },
        "item": {
          "id": "6ca22e01-cddd-4763-867c-fac8b6bd44d6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4df110db-1ce1-4b0c-9205-3b3d59de1353",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc709fe0-d6d5-400c-9ecf-fa73b5aacdb1",
        "cursor": {
          "ref": "bdb75f22-8ec6-431d-aa10-a52dfcf964d1",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cf33e5e4-542f-4e7b-af2d-3cf63d1a8f43"
        },
        "item": {
          "id": "fc709fe0-d6d5-400c-9ecf-fa73b5aacdb1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "422ab1f0-ef57-4711-8bc6-3d9b72c93540",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f8a810-689f-4212-becc-2a0190deeb6f",
        "cursor": {
          "ref": "dcd0d5a8-4281-48f7-9fe7-16a1defc0fc6",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bb72feec-cd3f-4229-be18-f15c839b282f"
        },
        "item": {
          "id": "e2f8a810-689f-4212-becc-2a0190deeb6f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b24ad4ff-e8fa-4890-93f5-8d431431554d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2e82cc-23f0-4032-a318-6f2ef2a7f33b",
        "cursor": {
          "ref": "03b7cf49-254e-48ed-ad06-44a921f45f7a",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c70c5fb6-71c8-440a-b32e-3ad25f5146c4"
        },
        "item": {
          "id": "3e2e82cc-23f0-4032-a318-6f2ef2a7f33b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c3b4c324-a093-4966-a154-83f107a71bf6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4bbd49-1b82-4341-bb9b-a0cf4cd30902",
        "cursor": {
          "ref": "7f0c6f45-6007-4e58-919f-1316cdba44f3",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "04aeea7c-6632-4539-b23a-1163fd25a19e"
        },
        "item": {
          "id": "3e4bbd49-1b82-4341-bb9b-a0cf4cd30902",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "16537410-5ec8-45ab-878f-321e5cab31b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d90e1e-3fea-4311-b074-f06e6ef7d524",
        "cursor": {
          "ref": "ca04a839-2014-46cb-8f6a-0c1710065a58",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ad711c13-e9f1-4fdd-81b7-13923b20ae74"
        },
        "item": {
          "id": "d7d90e1e-3fea-4311-b074-f06e6ef7d524",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b778d3ba-6795-45dc-830b-f4f1be32928c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c976d66-e97b-43fc-9647-9b41b3dccce8",
        "cursor": {
          "ref": "59e5e102-5e5b-4904-8adb-c58d9873f4fd",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9490ab20-ffd3-4a14-b42a-0ecb3576eff0"
        },
        "item": {
          "id": "8c976d66-e97b-43fc-9647-9b41b3dccce8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3a3e74cf-e023-4257-8808-b59ab1f3af63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec519499-958e-420c-a13d-98cd66b14c50",
        "cursor": {
          "ref": "587e2689-5b95-4fc4-b5a0-d86dcad6f210",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "426e12fe-9e23-4328-90d8-ce32f7bc7250"
        },
        "item": {
          "id": "ec519499-958e-420c-a13d-98cd66b14c50",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "132b9f60-e170-48fc-8716-485a75855a5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfcf68b5-8ecd-4068-9cbd-4a554ea7fd43",
        "cursor": {
          "ref": "38cc98ce-0704-4e23-af99-09caa84b3db1",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2d0d1547-fd28-4759-b53c-8c00dd5dcaeb"
        },
        "item": {
          "id": "cfcf68b5-8ecd-4068-9cbd-4a554ea7fd43",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a06d368a-def2-469d-a234-f2c327c7038a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea60337f-e33d-4861-8e90-4cf36e5ca2ab",
        "cursor": {
          "ref": "892d12c5-2e03-4d4f-aa3b-987f13e1adaf",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "baee3d7e-6dd8-41f9-b800-b21333aa3e09"
        },
        "item": {
          "id": "ea60337f-e33d-4861-8e90-4cf36e5ca2ab",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4f81bda6-feca-405d-9661-af5fa335a1bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac2424c-1e07-49fe-8af6-a038938a15b9",
        "cursor": {
          "ref": "9052f0ae-9e44-4b5c-a2ba-42ea0aebc779",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f14163d3-70ad-4f1f-b9ac-9121514ab078"
        },
        "item": {
          "id": "6ac2424c-1e07-49fe-8af6-a038938a15b9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bad13d20-bd36-4e97-897a-367168f8714f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f49398-0b1d-4927-bb5e-b0e06ff1534a",
        "cursor": {
          "ref": "820dc443-7a66-4627-ba95-694d33c2502d",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e5deff0d-c22a-4e3f-a1ef-d82da813a082"
        },
        "item": {
          "id": "f3f49398-0b1d-4927-bb5e-b0e06ff1534a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ebae0457-a7ab-4fea-85bf-6ea67389df2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040c0e22-b9bd-457b-899b-ed5f96620193",
        "cursor": {
          "ref": "e8cac439-0ce5-48f3-a534-7c322e35339e",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e242ed9f-4742-4a58-9887-52d064e08a88"
        },
        "item": {
          "id": "040c0e22-b9bd-457b-899b-ed5f96620193",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d4069dcd-2b5d-492b-80d4-812e2c374a6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2065ae-c109-4121-9a58-cded48e0b13c",
        "cursor": {
          "ref": "e557a6db-ce69-45cd-bf0f-d594cd21a75c",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9c8b39b4-c5bb-4d0b-8aec-90f8564252ba"
        },
        "item": {
          "id": "bd2065ae-c109-4121-9a58-cded48e0b13c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a3714f2e-a711-4626-ae28-ff3d261c35a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37947fea-ab14-4f40-bdf8-64070fdfb965",
        "cursor": {
          "ref": "22a604f8-f9bb-49f1-9af0-1d5015baeab8",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a3aba84f-44af-4c88-8b59-ba16f5b2b7d8"
        },
        "item": {
          "id": "37947fea-ab14-4f40-bdf8-64070fdfb965",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f718ddd3-56a2-4a38-9ed0-6907d6b3bc0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2857844e-5055-42a3-9007-a20090ff525b",
        "cursor": {
          "ref": "46e81ed2-21a9-4b26-8cd4-76cda1970301",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "cead8e76-a19c-4edb-a9e1-c884e9de0640"
        },
        "item": {
          "id": "2857844e-5055-42a3-9007-a20090ff525b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9eac4487-41fd-49c1-a6ee-736762218119",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe154a7-70c1-4a92-a7a3-3a608891ea5f",
        "cursor": {
          "ref": "3c3a5555-4026-4ff1-9118-23c1ee5f3ecf",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "18364682-fc96-496e-b3df-d86c01a4a817"
        },
        "item": {
          "id": "cbe154a7-70c1-4a92-a7a3-3a608891ea5f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "30d728c7-1901-4ddf-814b-743038fe442c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6eefee-8146-4c70-98b3-dad84922d6d0",
        "cursor": {
          "ref": "d608f003-dae0-458a-9450-b2b86e2370e0",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e6942d5b-11c2-4235-8a10-23ae7f90a978"
        },
        "item": {
          "id": "bc6eefee-8146-4c70-98b3-dad84922d6d0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "86155c30-f17d-4672-b55a-5e7b73fe9e1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe8325c-c59b-4247-bb8a-f8254502ec1a",
        "cursor": {
          "ref": "59293996-04ca-4d7b-9ee4-8c69b6f2053e",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c1862488-87a7-4758-92f9-9f29d08da2bc"
        },
        "item": {
          "id": "1fe8325c-c59b-4247-bb8a-f8254502ec1a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e289cbb8-4e87-42fc-9f14-ec312eef6fbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f646980-4fa9-484d-88cc-dac4b4696df6",
        "cursor": {
          "ref": "01f599dd-fb14-4eba-bb12-eb261f696da3",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c1925633-cbbc-4f83-968a-2002a41ee7b0"
        },
        "item": {
          "id": "0f646980-4fa9-484d-88cc-dac4b4696df6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8205f8cf-ce09-4bde-97f5-38deba65c6f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a601d6a9-44ab-4d0b-b6dc-d3cb557d9294",
        "cursor": {
          "ref": "696e0b66-caba-42d0-82b2-5df5b6f2d366",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "10b8e0ab-a6bb-4aaa-816b-a8b3e809723e"
        },
        "item": {
          "id": "a601d6a9-44ab-4d0b-b6dc-d3cb557d9294",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b934dc2e-2478-4c79-a962-2b159a46130e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12383d2-2302-4913-b255-e5243fc2dfa6",
        "cursor": {
          "ref": "87fcd030-6771-4786-b7ce-af70315776ae",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "810c7301-8fe8-4379-b483-c4e33fc5fe9f"
        },
        "item": {
          "id": "e12383d2-2302-4913-b255-e5243fc2dfa6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d07eeb2b-d9c5-486b-bee5-a9d06a68296d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816c0293-45e2-4e61-8d72-c6821a19ac09",
        "cursor": {
          "ref": "cac7e81a-31bb-49c9-8cf0-09a3b2f4d926",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d30bd112-f5fe-41d8-bee2-6e543ed73491"
        },
        "item": {
          "id": "816c0293-45e2-4e61-8d72-c6821a19ac09",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "76e0a1ec-0cf5-4cbf-a32f-8e654aa73c34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66c166d-6fe3-423a-ab11-41d092327aad",
        "cursor": {
          "ref": "1b673560-83a3-4ece-845a-ae58290e1fe6",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a2f47fd8-6e74-421f-a4b2-0a077410f3df"
        },
        "item": {
          "id": "e66c166d-6fe3-423a-ab11-41d092327aad",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c0c5e2c2-59b4-431f-8094-467bb3b154b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64c69a6-3b30-4bd3-913b-482db13a9aa4",
        "cursor": {
          "ref": "eb8933ff-f4f6-4eca-aa7e-732ebede363f",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d19e22f8-b070-4e39-abca-a87d1b36c0d9"
        },
        "item": {
          "id": "e64c69a6-3b30-4bd3-913b-482db13a9aa4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b90ab512-7dfc-4f5d-95c0-5d7f0386491f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60d8914-3941-46d5-937d-b43357db4d75",
        "cursor": {
          "ref": "e9af88fe-b91b-47c4-85ed-04556645c9a3",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "806bbc4e-6225-4ca8-83f1-19bf335c6fd4"
        },
        "item": {
          "id": "b60d8914-3941-46d5-937d-b43357db4d75",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b54387f9-61e4-4c89-9a43-cb5b6de68469",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8259bcc7-1acb-40d2-96d3-e6c6c18b940b",
        "cursor": {
          "ref": "c2397b43-f7c3-441e-8f76-322dc9aad689",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fbebfd99-c33f-4d35-9544-18ea4fedbffd"
        },
        "item": {
          "id": "8259bcc7-1acb-40d2-96d3-e6c6c18b940b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "27812168-9f34-4399-9fe0-afb5c8020b2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba5d607-0117-45d7-93bb-dccbe9ae1b53",
        "cursor": {
          "ref": "4e6dca31-e156-4093-a6c6-6b691f46ea8c",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "6e878051-9bb5-491f-97b2-c82ec45ffef5"
        },
        "item": {
          "id": "dba5d607-0117-45d7-93bb-dccbe9ae1b53",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "47f1c035-610f-43d4-ba4d-55c66a6deeb1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7548ce-a3bc-4867-af26-4c158ddaf194",
        "cursor": {
          "ref": "78bcf829-5d20-468e-bf04-51790e244495",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "495f86e5-a954-47e3-a02f-14599092590b"
        },
        "item": {
          "id": "4c7548ce-a3bc-4867-af26-4c158ddaf194",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f008a24d-926e-42b3-a013-0d734ae68269",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc236152-7b82-43bf-b860-bd3bf46d0cad",
        "cursor": {
          "ref": "7f0da00b-4bd8-4daf-ad1c-150bc28f1635",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "496b8b1a-ce33-418c-9a50-fbb61b080cd5"
        },
        "item": {
          "id": "fc236152-7b82-43bf-b860-bd3bf46d0cad",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a3f4cbc3-dec4-42cd-ad07-10be5e8ef18c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8700abed-5574-4815-9f3c-ca7bf54e829f",
        "cursor": {
          "ref": "f720e294-d677-4edd-9f8e-879549ca427b",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "18723df4-27fa-459d-a99a-a39219969982"
        },
        "item": {
          "id": "8700abed-5574-4815-9f3c-ca7bf54e829f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "34c105d7-33f6-4e37-b28d-bb3d4db0a1d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6a8e10-363b-405a-b599-e95f855ce6e6",
        "cursor": {
          "ref": "8880970a-0b09-4357-ac50-1493b649c8cb",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b0aeb349-5d5c-4999-80b9-37e0c82c2241"
        },
        "item": {
          "id": "cf6a8e10-363b-405a-b599-e95f855ce6e6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6144f562-6acd-4f8a-bdec-5f30ee366a0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b3a647-e73c-4a4e-a5c7-64424b9787b6",
        "cursor": {
          "ref": "99c4e40b-140d-4623-9d32-39331b04cfd7",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "13aaeba5-f0c2-494c-9c08-5f9a050e3d82"
        },
        "item": {
          "id": "35b3a647-e73c-4a4e-a5c7-64424b9787b6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "78338c66-daf4-441f-89dc-67f9669343a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5d11a5-b9d0-46b0-ba80-55ff52b938c7",
        "cursor": {
          "ref": "ceb0f32a-8687-487e-a272-d0216b824e1c",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "342ad88e-7cc9-45e2-aeef-d3b1b005d8a2"
        },
        "item": {
          "id": "aa5d11a5-b9d0-46b0-ba80-55ff52b938c7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "76ccc96f-eb91-4027-8af9-207f22b10f15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aaf57ea-b4f7-489c-a48c-190ef66e8e10",
        "cursor": {
          "ref": "f7e23b71-12a5-42af-8990-38ce7b96aa06",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8fdf8fe3-32bf-420a-9930-eab7a4434207"
        },
        "item": {
          "id": "5aaf57ea-b4f7-489c-a48c-190ef66e8e10",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "34236ecd-45ce-4638-a657-dc8df6328478",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7cb15f-a554-461c-9a58-a0a266f9dd3e",
        "cursor": {
          "ref": "6fc1e2ca-20db-4bd8-ad89-4eed49409798",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "fbb4e31c-4b85-40cc-95aa-c2d8a15b1377"
        },
        "item": {
          "id": "cb7cb15f-a554-461c-9a58-a0a266f9dd3e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6948921b-c2d0-4ca5-9d9b-5de5d4aa7f9a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98faaccb-5751-4a70-991c-359fcf80f11a",
        "cursor": {
          "ref": "b91deb32-2fe1-4329-8597-326eabf31542",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "15b9ecb7-c65c-4999-9e0d-c38da4bf0c6c"
        },
        "item": {
          "id": "98faaccb-5751-4a70-991c-359fcf80f11a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c360599b-3732-4ae6-a516-1fe233dab52f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9617f8-41a0-49d2-9228-9d4d430cf366",
        "cursor": {
          "ref": "1cf78b6d-0d9b-48c5-83f5-43dd80a2cde4",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "af2ee3a9-cdd6-43cf-8122-95ff9bc89109"
        },
        "item": {
          "id": "4d9617f8-41a0-49d2-9228-9d4d430cf366",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4561e4a5-e658-4f66-965b-4e92f538ee2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7ad876-4242-4bf1-9c37-bebf7d8ee6e0",
        "cursor": {
          "ref": "1121ea3c-7a08-4691-956e-5f7046afcf10",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d6f3624d-aeb0-45fb-b6a2-da87d10252d6"
        },
        "item": {
          "id": "1d7ad876-4242-4bf1-9c37-bebf7d8ee6e0",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7557e5f8-7a81-449c-bbcd-b0ae9303c5c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29527f73-1310-42bf-b32e-d6199aeaff73",
        "cursor": {
          "ref": "405e0703-d302-4393-8f6a-5100eb15b2e2",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "75e71930-2392-44d6-b456-9672f1ad292f"
        },
        "item": {
          "id": "29527f73-1310-42bf-b32e-d6199aeaff73",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "1dbdb89c-6b3d-4c1b-b093-3ec02f40deef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38c71733-408b-4bba-aac7-5fd6dc98a761",
        "cursor": {
          "ref": "dc40421e-a1ff-4e79-bf3c-37a900a56d03",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d8069dbe-6ed0-4898-8159-43980a8f3bb1"
        },
        "item": {
          "id": "38c71733-408b-4bba-aac7-5fd6dc98a761",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d2bae88a-a368-4c8e-b4c6-e9eeaf171d5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fafa4db-dcbe-426b-a4cd-f0fe50d09626",
        "cursor": {
          "ref": "95ea24fb-26e3-4b8f-b9b5-905b59fcbcde",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "40fc606b-3210-4dad-8cb2-5d3476bb462d"
        },
        "item": {
          "id": "6fafa4db-dcbe-426b-a4cd-f0fe50d09626",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f421618b-45a1-44db-9e2f-74e281c52f32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b7d332-edff-494b-b066-86df72456830",
        "cursor": {
          "ref": "1445290c-a87e-4d26-ad39-c6eae5a3594f",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9c101530-cb60-4f51-aaac-47e5c464e079"
        },
        "item": {
          "id": "28b7d332-edff-494b-b066-86df72456830",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "20f1efc4-6c93-4bdd-888e-b59f07f8dfae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5003da88-05a8-4acc-9917-81ca7f04ac8b",
        "cursor": {
          "ref": "bc2f7f90-a8d2-41b7-8f9e-2eac45920c76",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d1cfbeba-c671-4805-b661-c5957cf9d287"
        },
        "item": {
          "id": "5003da88-05a8-4acc-9917-81ca7f04ac8b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8eabf621-6d5f-495a-afb0-8d374c83a91e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879c7f99-e5d8-469e-9d0c-23f72c66c784",
        "cursor": {
          "ref": "024b0d21-484e-4a5c-85dd-20e638cf8b15",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8d010746-b602-4e91-9ba8-c31727145d66"
        },
        "item": {
          "id": "879c7f99-e5d8-469e-9d0c-23f72c66c784",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "dbbb6baf-bf90-4ec7-8beb-45976adc013f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d811ef4-085d-4447-a640-fe2d2846865f",
        "cursor": {
          "ref": "a9c562da-7a22-4001-a5de-1024bad326f1",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "94f2b6e8-271d-411f-b236-c357aa309430"
        },
        "item": {
          "id": "4d811ef4-085d-4447-a640-fe2d2846865f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "81ae27cc-ea76-492c-81f0-bd0e79e074cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9a6a73-dbac-4476-8723-8c7c94d9643c",
        "cursor": {
          "ref": "753fdd45-b942-481d-b65a-9e21488d8c27",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "02f9c596-f09e-405f-b4d5-535800ede339"
        },
        "item": {
          "id": "2b9a6a73-dbac-4476-8723-8c7c94d9643c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c3ece756-34bd-4ef2-a954-8bd496acb3a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35958906-84d7-464e-937f-19eb61304ebf",
        "cursor": {
          "ref": "395963cb-dc2c-4aeb-b70c-c828e54676e8",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d53b4d95-eae5-4640-9555-052a89975f9c"
        },
        "item": {
          "id": "35958906-84d7-464e-937f-19eb61304ebf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "126b8742-3923-403d-887b-72d58076483c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b76703a-ebef-4f72-a748-b3e84f6aeecf",
        "cursor": {
          "ref": "6925c0b8-91b8-4816-bb31-d0b4f0719ece",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "258308cf-d39b-4735-bf5f-a4dd83d506a2"
        },
        "item": {
          "id": "7b76703a-ebef-4f72-a748-b3e84f6aeecf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2af1c878-3e21-4cfd-a13f-1806f59d75b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24d6081-cd68-49ff-8ee9-1ab18801db84",
        "cursor": {
          "ref": "c49f6322-d9ca-45be-915a-f610e57b41e4",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "75608a8b-00c7-406b-baba-9b5f498c0be5"
        },
        "item": {
          "id": "b24d6081-cd68-49ff-8ee9-1ab18801db84",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b19f5f7a-3ec6-478c-9017-1b9de34882c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9567c97-cd17-41cf-9935-3330af0c006f",
        "cursor": {
          "ref": "502ec1b0-a3cd-4b2f-b90f-9d99a2bb0813",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "599a5eb6-68a3-4b22-8788-1c4e0e896d08"
        },
        "item": {
          "id": "c9567c97-cd17-41cf-9935-3330af0c006f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fe1181f2-bc9d-44b3-a887-a59b7e623144",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d23e00-5a9b-4f8e-b390-853826db81d8",
        "cursor": {
          "ref": "f2387ae8-7c14-4575-9f81-25d50645f88a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0ff1c51b-e8c2-40f9-8bf0-5c8c7229fd86"
        },
        "item": {
          "id": "19d23e00-5a9b-4f8e-b390-853826db81d8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "29fba1d7-b7d6-4d42-9655-9bb329f15563",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc3ec18-ef6a-4016-b5b6-a2998593ac68",
        "cursor": {
          "ref": "bb11bfcc-ef7e-471b-bf02-0e905e39d661",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "de9056e4-b640-4b5d-b893-0b3b4505cab9"
        },
        "item": {
          "id": "2dc3ec18-ef6a-4016-b5b6-a2998593ac68",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0e104155-4943-4fed-a30f-290f401b2eec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99ed873-ca99-4524-838d-57aeb5068b2e",
        "cursor": {
          "ref": "cb430c32-a517-4bac-9060-1e3ccbe35d8f",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "886b8511-1c54-4803-bba3-fab89f8be241"
        },
        "item": {
          "id": "f99ed873-ca99-4524-838d-57aeb5068b2e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4336590d-f314-4e2e-9418-ed7a6ab6799d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f206ec-cf12-4075-89ea-cb05d8066063",
        "cursor": {
          "ref": "10109dd1-792a-49a7-b8cf-4e64bc80f1d7",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9aff9719-7ed6-4229-8802-da698d7935c1"
        },
        "item": {
          "id": "27f206ec-cf12-4075-89ea-cb05d8066063",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "088613b0-0e60-4471-9aed-c8a86205b865",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bc05f0-90e9-4dc5-b364-fdf6183c289b",
        "cursor": {
          "ref": "01fce983-63eb-438e-bb3e-699499826cd5",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d8c2effa-007a-4d38-8785-841a69a7ae8d"
        },
        "item": {
          "id": "d1bc05f0-90e9-4dc5-b364-fdf6183c289b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3666a148-979e-423e-b939-d4779ccec6de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a88313-2305-4824-8b35-05cc678924be",
        "cursor": {
          "ref": "ede01572-586e-47e5-98f5-25b4105deecb",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "bf5c94f0-1428-4760-8e1a-cbe4e3633344"
        },
        "item": {
          "id": "91a88313-2305-4824-8b35-05cc678924be",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "303f0f0a-4158-4248-a97b-d3555a1aeeef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8f8ad4-ece7-4eaa-84a2-54123663f5b7",
        "cursor": {
          "ref": "b87152c8-66de-4194-8e01-e3163c2be947",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e46311a5-1b20-45da-9a4b-281cc149cffa"
        },
        "item": {
          "id": "9e8f8ad4-ece7-4eaa-84a2-54123663f5b7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ad6b9214-8263-436a-9a71-b032feb12d8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71bdfdde-34ac-446d-a54b-acbd168acef7",
        "cursor": {
          "ref": "8cf7be45-01a7-43de-9ae0-2a1fc2150b20",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "68a4fb77-5b6b-444f-b25d-35ce1d4a811f"
        },
        "item": {
          "id": "71bdfdde-34ac-446d-a54b-acbd168acef7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b002d75f-81f5-41e2-9163-f5936041c87e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a15ae7-fe8d-4082-9609-4f84ef7f3128",
        "cursor": {
          "ref": "0a3631fc-7b00-4062-bbc5-e15425730ab8",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e2372312-bae2-4dd6-9148-dde28cba9278"
        },
        "item": {
          "id": "24a15ae7-fe8d-4082-9609-4f84ef7f3128",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ff06bd3d-bae4-4886-81d1-43ff465db46b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac56b101-fc06-4eb3-94b1-f492df8a78fc",
        "cursor": {
          "ref": "61c1d57b-dbe4-4651-b365-d470707c4e63",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e636d958-6464-48f8-a97b-8827c5a14670"
        },
        "item": {
          "id": "ac56b101-fc06-4eb3-94b1-f492df8a78fc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4d5890ac-e5c5-41ae-bc2a-2a0725485c4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab192fd-8163-4fcc-b8d0-dc461bd55544",
        "cursor": {
          "ref": "8af54626-c425-422a-872e-e7cd285e045a",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d17ebc6b-bde9-41e6-a335-5171e32e9693"
        },
        "item": {
          "id": "8ab192fd-8163-4fcc-b8d0-dc461bd55544",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "68be74f2-22a4-4bac-9864-40862f483adc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0beba4ad-03a4-4bb2-88a0-ed1a0a087ec9",
        "cursor": {
          "ref": "1008ca3a-8040-4aab-a82a-ba0ee3dede1a",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "18d409b4-ed08-40af-b861-fac085e8bdbb"
        },
        "item": {
          "id": "0beba4ad-03a4-4bb2-88a0-ed1a0a087ec9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8e804309-946e-4bca-aab7-5b566ed7cb01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83bd13b-ea2f-42b6-b230-ee3aaa187b33",
        "cursor": {
          "ref": "cea518f6-8019-458a-a00f-0906ac70438e",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "80bb5663-e8af-4fdd-82ac-03ac8176bb6e"
        },
        "item": {
          "id": "f83bd13b-ea2f-42b6-b230-ee3aaa187b33",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2916782f-d64f-4a37-a3c4-c0d4da0496cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ce24ef-df45-4b4f-9925-d82acbd02ef1",
        "cursor": {
          "ref": "6d24d303-392a-4dd1-ace0-685110c87f1a",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "248ed895-aad8-4a2f-844b-21c2122f33e4"
        },
        "item": {
          "id": "22ce24ef-df45-4b4f-9925-d82acbd02ef1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "46b61281-6008-451e-86df-420734cb5a19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f651f1c0-27d4-469e-adb1-85b280b654ac",
        "cursor": {
          "ref": "aea49d13-cb5a-4e89-a05b-e78978c20905",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9320a463-273d-4649-b167-d31a4ca27f0c"
        },
        "item": {
          "id": "f651f1c0-27d4-469e-adb1-85b280b654ac",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "4c163444-a100-4c1b-8287-b29615df23d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a670eb8a-a8df-49fe-a0e0-c63f8e3a625f",
        "cursor": {
          "ref": "cdaab250-cc7e-4101-9b55-f429db068a3c",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "03a740dd-d803-442a-a04d-1274f90bbc40"
        },
        "item": {
          "id": "a670eb8a-a8df-49fe-a0e0-c63f8e3a625f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ce57b078-5c8d-45d1-ab71-5759296003d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5306ccac-dcab-40c4-9a14-6cc941eaca05",
        "cursor": {
          "ref": "f9bc6f25-2a2d-47cd-be24-b33926d0c8da",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "dc322aa2-7846-485d-8b89-0903624ce4d7"
        },
        "item": {
          "id": "5306ccac-dcab-40c4-9a14-6cc941eaca05",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "04acc79b-20d8-4e9d-ad0e-12084a4886bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3faf8047-65e3-4497-a9fd-3c11e1c6ff7b",
        "cursor": {
          "ref": "c10120d5-8ff3-43f7-b3d2-326781312241",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e1237a1e-e3c3-4c54-b6c9-e3e5fbfddeda"
        },
        "item": {
          "id": "3faf8047-65e3-4497-a9fd-3c11e1c6ff7b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "65b21580-00bc-4e92-bb81-855fb3e8d573",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26117b44-3307-48c5-aefb-7aad1e7a1d48",
        "cursor": {
          "ref": "c2cd8292-b0c7-40fb-87c0-e85d2fa323bf",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0742e426-525c-456d-bbc4-9e59a3925a25"
        },
        "item": {
          "id": "26117b44-3307-48c5-aefb-7aad1e7a1d48",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9c9643ad-8042-4865-920e-ee8899d95a46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef15f02-e7ea-4663-ba27-7f0914096bb5",
        "cursor": {
          "ref": "cf13ed25-0888-4426-98a0-2a050e2ea0d2",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "cb440306-b993-437b-a683-cf6aa337444b"
        },
        "item": {
          "id": "6ef15f02-e7ea-4663-ba27-7f0914096bb5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "cacd5db3-1b00-4571-97e6-10f41dbd5a15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba3554e-5415-4df2-8653-62ce8be9ffe1",
        "cursor": {
          "ref": "3f6e6369-d65a-4733-afbd-69d0f92b5c03",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d2b78108-ebc4-44db-9e6c-6d93f5948521"
        },
        "item": {
          "id": "bba3554e-5415-4df2-8653-62ce8be9ffe1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5aaf72ec-298d-475e-94c9-d2443c1eb634",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af54006a-edf6-46d1-b976-ada7d64ab99b",
        "cursor": {
          "ref": "21473f88-6165-44c4-83f9-f6b5e28e926d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0515ac2e-ea2a-4f2d-8b67-a2f3ae9c02ca"
        },
        "item": {
          "id": "af54006a-edf6-46d1-b976-ada7d64ab99b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e8c56478-2fa0-4d6d-9513-4f2acf78247b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc79552e-6e5b-49b1-96e2-19a08e2f8da7",
        "cursor": {
          "ref": "e4fa76ae-a564-4117-8d9b-d5db916f10db",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "01da11e5-c5e9-417d-9c9b-d8accb89b13a"
        },
        "item": {
          "id": "cc79552e-6e5b-49b1-96e2-19a08e2f8da7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a8f7aa88-6bd1-4811-97a8-6813ac43e32a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00de8711-aeb2-427a-99a6-b1e0bcf7e4e2",
        "cursor": {
          "ref": "2b372f95-53fc-4f54-85b1-4e6924ec7a3f",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3544e463-dfa1-4534-a86e-b94cc11eea7b"
        },
        "item": {
          "id": "00de8711-aeb2-427a-99a6-b1e0bcf7e4e2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "febb1452-e4ed-47bd-a520-90f0fd2bf554",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a09fb2-135e-4be8-b95a-db0ad47a7452",
        "cursor": {
          "ref": "6025155e-2b67-4ba4-bf39-12de57c7bda9",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3201e966-ce49-4a4b-a875-3b2a8fed9729"
        },
        "item": {
          "id": "11a09fb2-135e-4be8-b95a-db0ad47a7452",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "222037b2-e7e5-4455-a2aa-6bbfe946c95d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e963793-64bc-4e79-92f0-58cef0b78473",
        "cursor": {
          "ref": "b8d5a39a-a4d8-4cbb-bdf3-a70b237caf87",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d6f3c3ec-7cf9-4c50-b9e8-bcbe78c083eb"
        },
        "item": {
          "id": "7e963793-64bc-4e79-92f0-58cef0b78473",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ae3bbe8a-9b26-4694-96e6-cc2297fcebf5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e398625f-18e8-4da8-a020-7c4cbc6fd589",
        "cursor": {
          "ref": "7829dc47-cd33-4b1d-8588-6ff1cc7ba298",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "952b6734-c1cb-470e-8c20-2dbe02ee6d61"
        },
        "item": {
          "id": "e398625f-18e8-4da8-a020-7c4cbc6fd589",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e988900c-3d51-4a25-97e6-5906c5cea392",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67c9db9-e352-4f15-9e9b-81c6d76d64b5",
        "cursor": {
          "ref": "83b4ac5d-6879-4644-a70f-c355a0319cb7",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6766c082-d19c-411c-a116-e7f04d1af117"
        },
        "item": {
          "id": "c67c9db9-e352-4f15-9e9b-81c6d76d64b5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "89af1edb-ba9d-4d99-9ca0-3e8d4cefb07e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2839981c-096c-48e2-9326-b7e0cc3b6c40",
        "cursor": {
          "ref": "68619d39-af47-4e96-a063-763ee8901966",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d17803c0-c283-4b4c-8809-b5a83eb6f590"
        },
        "item": {
          "id": "2839981c-096c-48e2-9326-b7e0cc3b6c40",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0876fb89-b941-4fe0-a302-de188417f9b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a7d606-bacd-4d5b-bd77-aa390dcec923",
        "cursor": {
          "ref": "8ccabd85-87da-4b2c-a6ce-dc5d3c93c98b",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3c5f01c3-20e0-4420-b32a-3e2958e0317b"
        },
        "item": {
          "id": "49a7d606-bacd-4d5b-bd77-aa390dcec923",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f5a2a5e9-ea0f-4370-9d89-15b49d7dd3a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28398d5f-8a28-406a-8a69-253867baa4d6",
        "cursor": {
          "ref": "4d8fca4d-68ad-46d4-87fa-3ab097924cba",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f0092158-14fc-43ec-b2b0-7f0848231250"
        },
        "item": {
          "id": "28398d5f-8a28-406a-8a69-253867baa4d6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f2cbc7fb-01c4-4aa5-8e6a-3273b1278f15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5223f5e4-02ae-43ab-a814-de0b31958c02",
        "cursor": {
          "ref": "379825bd-e3c2-4c38-8de1-a37106fd5569",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f564478b-d6ee-42cf-85d4-45a928fd5110"
        },
        "item": {
          "id": "5223f5e4-02ae-43ab-a814-de0b31958c02",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5963065a-2ecf-405f-b86f-88b7d9955630",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d2b482-7f39-4225-bd89-10e0002ebdad",
        "cursor": {
          "ref": "6e8647d3-315c-424e-a190-b0d657cc275d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b01561c4-a599-4a44-ad87-01c8a5cfe2ba"
        },
        "item": {
          "id": "99d2b482-7f39-4225-bd89-10e0002ebdad",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c9004d8f-c046-4a23-9aad-bb743eb50ff4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "66f6165c-1a57-489f-814e-ce39fdb7d020",
        "cursor": {
          "ref": "d7add152-e6d4-44b0-add8-eed6ee83cd1f",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ce44572b-9338-4292-993f-46a65cb0fec3"
        },
        "item": {
          "id": "66f6165c-1a57-489f-814e-ce39fdb7d020",
          "name": "credentials_issue"
        },
        "response": {
          "id": "46bcd5f8-3577-4091-9d86-c9974bb0c380",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 163,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "782729ce-b297-443f-9265-122f61e7aa2b",
        "cursor": {
          "ref": "801b4734-1ccf-4311-935a-89dfdd8968bd",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d9d3274f-47c4-45e3-8dbf-f921ec343d54"
        },
        "item": {
          "id": "782729ce-b297-443f-9265-122f61e7aa2b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "2e2fc2f8-52ee-40e6-bfba-7330ef1cc870",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "d4de0908-d2dc-42c7-850f-f3ca9b0a0f1f",
        "cursor": {
          "ref": "3a6d453d-10f4-43fc-bd1c-c0152f99a614",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a8fb38af-c11e-4dbb-8a59-d2c63e03a1a4"
        },
        "item": {
          "id": "d4de0908-d2dc-42c7-850f-f3ca9b0a0f1f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e74ead0d-23f7-4f62-805e-89677db5fa7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "3319492b-7b51-4911-91ab-c1f637257493",
        "cursor": {
          "ref": "2ea5c4da-ac26-467c-9533-bde00dd00168",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "636572a5-19e0-4bd2-8d01-fdac38e58eb9"
        },
        "item": {
          "id": "3319492b-7b51-4911-91ab-c1f637257493",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3fe252b3-e31e-48e7-9d59-ba2da7e8e47a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "172a1067-415d-476d-a18a-5303c51ab482",
        "cursor": {
          "ref": "7cace3e3-2e3f-4b81-a691-5009c06c1cd3",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c1ad40b9-891b-4cca-98c3-477012e746c7"
        },
        "item": {
          "id": "172a1067-415d-476d-a18a-5303c51ab482",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7967a9b1-bb12-45b3-863e-2172dbbfd402",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b626ebe5-c12c-4f91-bed0-4dd3c5657191",
        "cursor": {
          "ref": "e00637b5-1e5d-4018-a326-9617ece0b975",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "da5a43f6-e4a9-4a31-b483-fd1029ea9ae5"
        },
        "item": {
          "id": "b626ebe5-c12c-4f91-bed0-4dd3c5657191",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7c7d3e53-37e9-4d3f-ad99-b01d1986cdae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "3d8904d3-d258-4c23-a057-fced126926dd",
        "cursor": {
          "ref": "fa350087-162e-42f3-8958-5fb2f2453bfc",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4b82da58-46e8-42eb-8384-dd65b0c048b7"
        },
        "item": {
          "id": "3d8904d3-d258-4c23-a057-fced126926dd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1983964a-5e4e-4b8c-a594-577ed86f0874",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008549ee-1453-44cf-9b6b-275f6dcd31fe",
        "cursor": {
          "ref": "641e68f5-9853-497b-86bf-de28e29e8edf",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5bf6071e-f9f4-44ef-9ca7-90cae663e73d"
        },
        "item": {
          "id": "008549ee-1453-44cf-9b6b-275f6dcd31fe",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cc7fd514-0ec5-41f7-abfb-5507aa9d0071",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2303679b-1e6a-4118-acc9-0ce78ad79ebd",
        "cursor": {
          "ref": "c048d50f-1b33-447e-8c77-98fe7cf55e6e",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1f3dc09d-3f7e-4aa5-8e77-e64c76bde1ce"
        },
        "item": {
          "id": "2303679b-1e6a-4118-acc9-0ce78ad79ebd",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "14316cad-e6cb-4ba8-8ace-f50188a674cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a6fc22-52c0-49a3-a8ad-7f96f65181f5",
        "cursor": {
          "ref": "8892fced-40c9-4580-b316-f13f2500524a",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "037f8c0c-fc61-4488-8d0d-ea0d3c6fc32a"
        },
        "item": {
          "id": "59a6fc22-52c0-49a3-a8ad-7f96f65181f5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4bacf825-ccc9-49ec-a509-a9de1ddb90ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c86eb0-7ef4-4ac4-8cf1-e14aa826d7ef",
        "cursor": {
          "ref": "9746dedc-8910-452b-8eeb-4705bc84f8fd",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3de1c510-f984-4340-b19e-aa261758fbc9"
        },
        "item": {
          "id": "47c86eb0-7ef4-4ac4-8cf1-e14aa826d7ef",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "47ea4998-c075-4be7-9368-e0143d51016b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2e2967-c975-4d3f-831d-8cf0a187ef94",
        "cursor": {
          "ref": "44456882-988e-4fe6-82c8-a088e77a8abd",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9b969a62-1aed-40e9-b428-40c01c7d1beb"
        },
        "item": {
          "id": "3d2e2967-c975-4d3f-831d-8cf0a187ef94",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "feda2270-7792-4bd2-a7f3-339c83a9aad6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac82b21-fa6a-4246-bb1f-2909a3a51cb1",
        "cursor": {
          "ref": "e61ce372-fd68-443d-a3f4-5b758c5c5ffa",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "23b4c6bf-5630-47f9-9d23-480024b6a960"
        },
        "item": {
          "id": "4ac82b21-fa6a-4246-bb1f-2909a3a51cb1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a5687d81-e795-42ad-aa2d-bbd9d35a1ad2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085ec716-e051-42fd-ad2c-4c15ec333c2b",
        "cursor": {
          "ref": "2ab273d2-823d-4c5d-bde0-44c03b01f2cb",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0af57ad7-2d30-436d-a9b2-9b4160054274"
        },
        "item": {
          "id": "085ec716-e051-42fd-ad2c-4c15ec333c2b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ab8e398a-1ea3-4e33-b374-ecac2a5be660",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4865aebc-dcc0-497f-802c-72f7d1f116e7",
        "cursor": {
          "ref": "6c04c382-cb57-4881-9dfb-ab1dcad4a25c",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8e29ac7f-3aa4-4e1f-b4d1-6e755736dae0"
        },
        "item": {
          "id": "4865aebc-dcc0-497f-802c-72f7d1f116e7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "06d5c4c7-df95-4b00-8ab8-050d129da87a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10b3f20-a45a-4cdb-99cc-a1c405d83811",
        "cursor": {
          "ref": "76f4be2f-acd2-4d6c-8b9d-43d9962b6217",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "bb59c07f-67f9-4c80-88ab-39e9d395f30b"
        },
        "item": {
          "id": "f10b3f20-a45a-4cdb-99cc-a1c405d83811",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fb1864b2-776a-4b6a-a652-bdc3c3157ced",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11893ad7-7757-4887-85b6-3a8f55de9d26",
        "cursor": {
          "ref": "87a787a4-3884-420b-b5ed-720bd1ed9884",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7349da5a-a5ab-4fce-8ead-a77cfcd5e687"
        },
        "item": {
          "id": "11893ad7-7757-4887-85b6-3a8f55de9d26",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d5c31147-0714-4f3d-a568-5a95ca75168f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80dada9f-952c-4fe5-9925-7ccc52b75470",
        "cursor": {
          "ref": "1c89f100-01f5-4c29-8420-26b27789e86a",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e00bf287-e0a7-4c78-b13f-e49cc97b0783"
        },
        "item": {
          "id": "80dada9f-952c-4fe5-9925-7ccc52b75470",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "17d6bfc6-03db-4463-b0a1-724d0e125e04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a65e8f4-b03a-4f94-80ff-dee1a5864ed0",
        "cursor": {
          "ref": "d7ea373e-b9b8-46e4-96db-ae23b74db4f3",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "70acca94-4e07-4c3a-a515-8d9157b84bd2"
        },
        "item": {
          "id": "2a65e8f4-b03a-4f94-80ff-dee1a5864ed0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "50505d3e-af8e-4ef9-a771-370f8428eff6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef689d63-a341-4cd6-b603-9e7866af9c01",
        "cursor": {
          "ref": "284ac7ad-0205-4a3f-97d1-785a817d7af7",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d643a221-7057-4ace-8a2f-0394dbdcffb8"
        },
        "item": {
          "id": "ef689d63-a341-4cd6-b603-9e7866af9c01",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "50f7f285-ea2d-49c6-b42d-16d80f4be6fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339f790c-9ddc-4818-bbd2-6d1f0fbcf3a0",
        "cursor": {
          "ref": "52f2561c-7134-446d-bb13-c6a7a3714050",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "69593376-ae62-4d91-a161-fdf3c796699b"
        },
        "item": {
          "id": "339f790c-9ddc-4818-bbd2-6d1f0fbcf3a0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "17981ed4-3000-4da4-b00e-0c831ab44424",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e3c235-5982-41b9-928d-68eab68deedb",
        "cursor": {
          "ref": "95df8f42-b89b-4c23-95f5-4edb638fe062",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "172bbe7c-fb9a-4ea0-8b24-7ca1ce5da8fe"
        },
        "item": {
          "id": "90e3c235-5982-41b9-928d-68eab68deedb",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a62e7520-9e9a-4369-958d-fccb97fcca36",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aaba7df-8dd9-4000-9a30-8e9643dfd412",
        "cursor": {
          "ref": "d27f0b6a-c486-4392-8776-290f1f40bf06",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f2a36511-b355-4c43-9b01-3789d7bcb907"
        },
        "item": {
          "id": "0aaba7df-8dd9-4000-9a30-8e9643dfd412",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "684a9531-2f49-4164-980b-65ad530291bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3469cb19-0802-408b-b703-2db4de0e8e4a",
        "cursor": {
          "ref": "0a20006e-a586-422e-8f0a-55eb7694fe8d",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3c7b3392-dc3d-4b09-9022-63323cb8478a"
        },
        "item": {
          "id": "3469cb19-0802-408b-b703-2db4de0e8e4a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8bbefad7-cd76-45d5-a738-93f043f997b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94c4ba9-06f3-408f-91cf-fb57f8fe377f",
        "cursor": {
          "ref": "8cc6ad1e-3d29-46a0-b00a-9d309a4794bc",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "0202b0e6-47af-4dc3-b474-3060e49addc1"
        },
        "item": {
          "id": "e94c4ba9-06f3-408f-91cf-fb57f8fe377f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2a0c0612-9f85-4fa0-83f5-1c769ca1874e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7cd9e4-2801-4f32-b251-c897d1d4f68b",
        "cursor": {
          "ref": "e44b594e-311b-46f3-ade1-c1cff6474d97",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4684d602-923a-4dbc-a46d-0f7dc888be9a"
        },
        "item": {
          "id": "dd7cd9e4-2801-4f32-b251-c897d1d4f68b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "830bb387-e563-46ab-81f0-4624c6dd149d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc52b55-16e7-4a7a-a6f6-ab9d23188f73",
        "cursor": {
          "ref": "2a864706-799c-4df4-97c5-e5b13d5138bc",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d86dafa9-a3c5-43ef-ab87-17feb7d7fd94"
        },
        "item": {
          "id": "ffc52b55-16e7-4a7a-a6f6-ab9d23188f73",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e62e341e-0041-4f0d-a6b1-f0105a509644",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585b4884-8a23-4d39-96ef-e7b046688105",
        "cursor": {
          "ref": "523b7a6c-076b-4f2d-bd96-26a3bfa08544",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "12cfb9d6-001f-4e87-8e76-d1b1fdbd5fe0"
        },
        "item": {
          "id": "585b4884-8a23-4d39-96ef-e7b046688105",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "99bb4160-9859-49d1-81d5-c0fee70ae8a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10af89c0-5158-412c-8ea5-d111acd91fa7",
        "cursor": {
          "ref": "db7b235b-a8d0-4a3e-87c6-385c993d3c04",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "27f33dbb-edb6-466c-821f-a8b77e22404c"
        },
        "item": {
          "id": "10af89c0-5158-412c-8ea5-d111acd91fa7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1adb798a-9952-48d7-8d66-51edc4c46ed8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c0d323-08ec-4817-8a8b-2c7c417e38bf",
        "cursor": {
          "ref": "e4db5280-0d55-4ffc-af6b-4798f7e92e19",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "90d78803-0885-4b0f-bcc4-e7c05e95b6fa"
        },
        "item": {
          "id": "70c0d323-08ec-4817-8a8b-2c7c417e38bf",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e051618d-c5c9-42ab-a677-215ac756fc41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f018a3-2fff-4ee1-b437-a6e77683f2f5",
        "cursor": {
          "ref": "79ecc61c-98be-48d3-8cc2-bcf0cd8bcabb",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cea4281f-95e4-48e5-89e2-27c50ef17e72"
        },
        "item": {
          "id": "b8f018a3-2fff-4ee1-b437-a6e77683f2f5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ed596419-5e95-4cec-8e83-7d1e0f29605c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dcbff85-3062-4d63-9428-e48f8be912f2",
        "cursor": {
          "ref": "0f60d76c-0d86-49fd-988d-f800351dc7d9",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f35d35f5-c0ee-4cf4-bade-ee4824462c99"
        },
        "item": {
          "id": "4dcbff85-3062-4d63-9428-e48f8be912f2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "57f10a5e-5d0f-4f15-a8e6-e3c91e51149a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241acd1c-5863-49ee-866e-3ff5d24ad637",
        "cursor": {
          "ref": "89118dd6-2d90-43fa-8c52-aebf3a840f6c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0566c8d9-eb3a-414d-b9a9-591147901ac5"
        },
        "item": {
          "id": "241acd1c-5863-49ee-866e-3ff5d24ad637",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1f6203ef-627b-40e2-b554-4ffb75f58172",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3832a0e-051a-48b2-867a-c8da9e5b2f60",
        "cursor": {
          "ref": "0bfa8c7e-1bd6-4206-b4f5-6ebd22aba0a5",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "411c554d-d9de-4846-b3ef-a21d91fa5947"
        },
        "item": {
          "id": "e3832a0e-051a-48b2-867a-c8da9e5b2f60",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2f11d994-4916-4f13-9e53-94763a8603af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44694cd5-4c3a-4e31-bd1c-ddf1171b4abc",
        "cursor": {
          "ref": "d4640d2e-a662-49f3-94dc-5dd63a35ee05",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e8a44a2c-64e5-47ed-bf7f-c60d87c842fc"
        },
        "item": {
          "id": "44694cd5-4c3a-4e31-bd1c-ddf1171b4abc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b942a4ee-7431-4715-9a24-88a8c87a533d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc10dd0-17f5-4140-ad61-af6e8483175b",
        "cursor": {
          "ref": "f2842a3d-22b4-4cd3-b447-c5bb15089327",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b3fc1ce9-360d-4128-abd1-df6940cee2c8"
        },
        "item": {
          "id": "3bc10dd0-17f5-4140-ad61-af6e8483175b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0957689a-e381-41ca-acea-57a44e6e6e84",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25a37b9-4e86-463c-b25c-b50e8f6b8424",
        "cursor": {
          "ref": "25202778-a5ac-41e2-a89d-85af4a4f9d4b",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b84cbdb3-1077-4505-84fd-a0cb7fa3d3d1"
        },
        "item": {
          "id": "b25a37b9-4e86-463c-b25c-b50e8f6b8424",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c869f8da-666d-4525-918e-eb4a1f025abc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec58d3a-3d54-403b-a5e4-e63436bd3547",
        "cursor": {
          "ref": "ba731da5-561c-4bc6-a18a-c2f93e4f67cf",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "4d8a740a-1dcf-49b1-b24f-404c845254e3"
        },
        "item": {
          "id": "0ec58d3a-3d54-403b-a5e4-e63436bd3547",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "26bbb442-ee1a-40a3-992c-96ffe3032bca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8735d4d-ab71-455b-b824-6681fc0b303e",
        "cursor": {
          "ref": "87a2046c-e2d8-458d-9232-9a016fdad82b",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1e36c26e-67d5-4e14-bcdb-e72264a6a85e"
        },
        "item": {
          "id": "b8735d4d-ab71-455b-b824-6681fc0b303e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8797c6c9-69e7-46a9-b5e0-788cf74104ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb42bfd-1031-478e-bf45-b8a1fd07630e",
        "cursor": {
          "ref": "f7afc188-237a-4bb3-a07d-259f1d10af95",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7c74e190-cbbe-4387-8625-ca5a4e5d00f3"
        },
        "item": {
          "id": "cdb42bfd-1031-478e-bf45-b8a1fd07630e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "af105cef-1b5b-4bbb-b093-4cec6ca76938",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53cd608-2e10-4b41-9652-86635d2f1814",
        "cursor": {
          "ref": "36f83699-1ad3-41bb-92cc-b15b383db36e",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6ef665a9-58f5-463e-a1fe-bc3579e8fea1"
        },
        "item": {
          "id": "a53cd608-2e10-4b41-9652-86635d2f1814",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1b6da3eb-7a09-4feb-a77c-8dd631e56c50",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abfc31c9-ec6f-4761-90c2-5d47777a122a",
        "cursor": {
          "ref": "5809d088-887b-4335-a803-b6540567aca1",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b4e1257a-ab53-4147-9e27-e4c252453fd8"
        },
        "item": {
          "id": "abfc31c9-ec6f-4761-90c2-5d47777a122a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b031280e-a310-4686-bbe5-48dd8b8cafe6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234aa0df-3821-4259-9854-6a5e95edc212",
        "cursor": {
          "ref": "6d5ce93c-7d35-41e7-85f9-e731b694bebc",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cf9c44ae-02ae-4c86-a21a-7ffd2e1b2687"
        },
        "item": {
          "id": "234aa0df-3821-4259-9854-6a5e95edc212",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "692db4a5-8c11-4b2e-aa24-d0b2ae373bb7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650a3c0c-23ec-47d9-ab0d-f4d99f99c37d",
        "cursor": {
          "ref": "1d372c89-c6ea-433f-825c-0aba45a685aa",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "759a560a-fc93-4bd1-90ae-61ec37cc0bef"
        },
        "item": {
          "id": "650a3c0c-23ec-47d9-ab0d-f4d99f99c37d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d65d4c8c-2d46-4253-8f96-aaf13b2444c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa90675-7a14-44c0-93fd-a7b0f12877ad",
        "cursor": {
          "ref": "25eb9e85-06dd-4e21-901a-d3a998385227",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7a222360-4f3d-4a52-bdf8-e36d448bfade"
        },
        "item": {
          "id": "bfa90675-7a14-44c0-93fd-a7b0f12877ad",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e31488cc-0e1c-4449-80d8-54ab1041c99e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3a45dc-f0e6-4a4f-a614-b35b6d228107",
        "cursor": {
          "ref": "e732f7df-73ea-4407-ad34-8482fa7d9e2b",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f375b826-74a1-4c3c-9f2d-401f5f93a1c5"
        },
        "item": {
          "id": "2d3a45dc-f0e6-4a4f-a614-b35b6d228107",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "aafc6649-b5b1-4229-9265-48dc4c831fa5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1e6d9c-db72-4fe0-845e-637383b6438e",
        "cursor": {
          "ref": "aff2902c-cf9c-4035-963e-b40c2a9c61b4",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0b130165-3303-4a45-8ca3-d801aaf2acd2"
        },
        "item": {
          "id": "1a1e6d9c-db72-4fe0-845e-637383b6438e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "12d25414-defd-49a9-b761-06625df43e4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f7e3b1-4751-4008-8071-c774afa21f1c",
        "cursor": {
          "ref": "2198cdf2-fe1c-4d0c-b6bf-bdea37a6a0fe",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "63eaa2a0-fa94-4dda-b0ff-bfa4c879d847"
        },
        "item": {
          "id": "c2f7e3b1-4751-4008-8071-c774afa21f1c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bbf63644-2a27-4c96-a06d-7322e6281d89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e817996b-7a52-4edb-855e-cb2ac59ab8da",
        "cursor": {
          "ref": "d5ebf359-c01a-48f0-a9b7-b1f5c27c5364",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d0dce877-3ed8-49d0-a355-878d24dd4744"
        },
        "item": {
          "id": "e817996b-7a52-4edb-855e-cb2ac59ab8da",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fcd6c6e2-4d83-4cae-a9c3-42ef89fb5dec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c96a7ca-886e-495a-b394-6927692be89d",
        "cursor": {
          "ref": "6cc1e0a7-ee4c-466f-b1e9-fac9018760d0",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d01cfa55-5357-4d64-ab67-9422ae7b80cb"
        },
        "item": {
          "id": "6c96a7ca-886e-495a-b394-6927692be89d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9c3df5d3-3c00-419a-9029-e15b2de2f7f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47eba755-db9c-4331-b9e9-a6dc33e6ac9e",
        "cursor": {
          "ref": "d70c913e-1e93-4cb2-95f4-3d07ca8c96ab",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3cfa6077-45f6-446a-ac43-c46edb37f6e6"
        },
        "item": {
          "id": "47eba755-db9c-4331-b9e9-a6dc33e6ac9e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "11c0f39c-60bd-4776-bead-47cdef789eac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8f46854-56a5-4c06-bdeb-6615fdc7e273",
        "cursor": {
          "ref": "f125270f-f59e-4c75-8da5-06269a68cf03",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d1952752-a37f-4bc7-8aee-52a1fb5e6e76"
        },
        "item": {
          "id": "c8f46854-56a5-4c06-bdeb-6615fdc7e273",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "416708c1-aec8-4000-9bd4-45a16501756e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41db8d97-0d46-4bad-b536-763a093423ca",
        "cursor": {
          "ref": "c4a001c8-26a0-43a6-a1d7-c34940fc8a98",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "27894d30-c7ad-4e58-9298-756693e1c3a2"
        },
        "item": {
          "id": "41db8d97-0d46-4bad-b536-763a093423ca",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9cd87f4c-3e92-4645-8f70-f12e60301b47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4240011-4502-4025-aa3f-d96e2eae4232",
        "cursor": {
          "ref": "534b5c2a-ce6b-414a-83fb-186c79c32ea6",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "fe55d4a4-3718-4588-96ff-a05d76b7724f"
        },
        "item": {
          "id": "b4240011-4502-4025-aa3f-d96e2eae4232",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1c660c2d-bb16-4541-a252-e3911e94814b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed18418-56e2-4e39-b075-72d1696e1a26",
        "cursor": {
          "ref": "6e9d39e9-ddab-4040-8f59-db2280d232dc",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cac719a9-714b-4d56-8246-ff24c3f40804"
        },
        "item": {
          "id": "6ed18418-56e2-4e39-b075-72d1696e1a26",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3f954c76-dfa0-47f7-8e33-d59637591d02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6a8a8e-c9aa-44b2-a294-d22b70eb190d",
        "cursor": {
          "ref": "1bce9a65-c1da-4978-b9a1-8470d08464fc",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "772c48c3-f4c2-4061-9cff-c87785c38bb4"
        },
        "item": {
          "id": "fa6a8a8e-c9aa-44b2-a294-d22b70eb190d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "11310feb-33b4-4b26-ad55-ddaad12e38b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e7dddf-d693-425c-9186-d6b00e2db674",
        "cursor": {
          "ref": "1825795a-29dd-4f26-af6a-b4db01057372",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "81519312-5bdf-47ac-b6b8-b489bc6247d6"
        },
        "item": {
          "id": "31e7dddf-d693-425c-9186-d6b00e2db674",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6277519e-b2b1-4b0b-8b02-6fe96ad74ddd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da026fbe-bcb2-4207-a4bf-4f6f81a3dbfb",
        "cursor": {
          "ref": "f7b8a42a-d4ae-454a-9504-cc31c2c31c38",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6e712edb-f951-4f35-a7af-31f9aa80f658"
        },
        "item": {
          "id": "da026fbe-bcb2-4207-a4bf-4f6f81a3dbfb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "03d4b7e2-4510-4a75-8966-78fb0334f2b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f76c2fc-e0c7-4898-bd33-7aa15cf70023",
        "cursor": {
          "ref": "5a4c1995-2dd5-47ba-8f8b-443f77d8b357",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "22a56a37-518d-468a-8841-0114b4f266f7"
        },
        "item": {
          "id": "8f76c2fc-e0c7-4898-bd33-7aa15cf70023",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "57d7674d-44ce-4143-8572-ae3af72ca18b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731ae75d-e688-413b-aba2-ff6069ebce72",
        "cursor": {
          "ref": "6b71e340-eea1-4f3e-a99c-487cf742cbd5",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4dc20f52-7c3f-42dd-a0fc-72bfc1bd49a3"
        },
        "item": {
          "id": "731ae75d-e688-413b-aba2-ff6069ebce72",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "39d86928-e30c-4252-81ac-f61f16fcdf77",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1054db5-0c6e-4452-adda-50cc9ded3c55",
        "cursor": {
          "ref": "619b46d3-24df-4b9a-b00d-e6163a4f5208",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "621b02b9-1b09-4f67-a6a6-f069d8d0c36d"
        },
        "item": {
          "id": "e1054db5-0c6e-4452-adda-50cc9ded3c55",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4edf6cf0-2f32-431a-8691-1608fbd02df5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607b5a43-431d-4b17-ada5-cd63e0360468",
        "cursor": {
          "ref": "8fa7e8a3-8b97-4ca1-9e68-dc2de2382ee5",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5037385c-c2d1-476a-bcf3-dc67f7d649e4"
        },
        "item": {
          "id": "607b5a43-431d-4b17-ada5-cd63e0360468",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f4146459-1153-40d1-808c-fab32244abf9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bfd145f-641d-40bf-a5a8-ac3570b40c06",
        "cursor": {
          "ref": "5ecaf46f-f621-4610-bf83-0133cc3aec4f",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2b6ef570-6523-4991-8629-c1dff553788e"
        },
        "item": {
          "id": "7bfd145f-641d-40bf-a5a8-ac3570b40c06",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d2e709a3-0cdb-4876-b32c-561523cc5020",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e2b67b-d9e3-4194-8d20-97bec0c938df",
        "cursor": {
          "ref": "3d559b15-4c5a-41c1-9583-94f6bb899867",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c09d1d84-4696-449b-89ee-3c9c22edd3e2"
        },
        "item": {
          "id": "f5e2b67b-d9e3-4194-8d20-97bec0c938df",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "98e2ce1f-aeac-4b83-9786-75dcd28363eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31aa6796-8472-4db9-9f03-b3d7b9fe2807",
        "cursor": {
          "ref": "0c16841d-1597-4dfa-9325-4500564fc428",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4f2fb4ab-e304-4629-bb7d-a4145773d21f"
        },
        "item": {
          "id": "31aa6796-8472-4db9-9f03-b3d7b9fe2807",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "30b592c1-7809-4dc7-9c82-65c946b73dca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af28ffcc-1a49-4f3d-aec9-1e83d17c809b",
        "cursor": {
          "ref": "797cf4e0-888f-46d3-abde-e9bff1a4f69b",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "fd577ad0-7669-4ada-97f5-291afa6813c7"
        },
        "item": {
          "id": "af28ffcc-1a49-4f3d-aec9-1e83d17c809b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "fb3008c7-93c0-4c51-9daa-91e6ba7a5066",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f68bf4a-6705-4a9b-965f-4f90d42e2d85",
        "cursor": {
          "ref": "f565a0a1-ff1d-446b-9df3-440a17d3da93",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "89e0ee9d-6f9b-4bc1-853a-b761a7bd414d"
        },
        "item": {
          "id": "5f68bf4a-6705-4a9b-965f-4f90d42e2d85",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "083dc25e-f3bc-4070-9ad8-cfd0260e91d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec55606-244b-4393-bfb1-2df5fde9ee6a",
        "cursor": {
          "ref": "e467625e-d76a-4caf-9f64-fcbe2aacf549",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5f5b9421-60a7-4f5b-b631-6c00ebb31c4d"
        },
        "item": {
          "id": "aec55606-244b-4393-bfb1-2df5fde9ee6a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2780f376-d37c-4ffa-8c42-1171000a4f85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce900e2-583a-43a6-9f00-6d79ecc077f2",
        "cursor": {
          "ref": "3ad3060d-c33a-4732-82f0-423df3f0237e",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c750695d-bea1-474d-b796-357e029d20b3"
        },
        "item": {
          "id": "4ce900e2-583a-43a6-9f00-6d79ecc077f2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "97ed7e30-bb04-4371-ac1f-65a8bb08f2b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87fdedee-898b-4ab6-b910-6b91b31c7f37",
        "cursor": {
          "ref": "e21adb5d-6fa5-4ddd-9e46-cbcbcd93c827",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fa6aa733-7227-40ac-a1bb-c3f2903395da"
        },
        "item": {
          "id": "87fdedee-898b-4ab6-b910-6b91b31c7f37",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bd788c03-6166-43bb-945f-71a640a39704",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78161709-89ae-4208-b5c2-a598cb9b2568",
        "cursor": {
          "ref": "fe2d5bea-4d20-4d1c-ba73-036bc99b35de",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7531eb3e-7efe-429b-81f1-64fbe45ea05a"
        },
        "item": {
          "id": "78161709-89ae-4208-b5c2-a598cb9b2568",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "6623e6ae-c24f-4447-9fd5-6882cf2f37bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9316cc-f773-48fd-a537-15eda460855a",
        "cursor": {
          "ref": "0fe781b7-7758-4a7f-82f1-941ea8ddde1f",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5924efbe-f503-4347-a99b-b3e8f61fba35"
        },
        "item": {
          "id": "1d9316cc-f773-48fd-a537-15eda460855a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5e0f0402-8f29-4bda-b984-86362720fa3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a34641-0d65-4802-a356-297720c73bfb",
        "cursor": {
          "ref": "28704f53-18e9-4207-8312-2ce8285eec19",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b062e516-3d55-47ff-b256-f40709608ee6"
        },
        "item": {
          "id": "18a34641-0d65-4802-a356-297720c73bfb",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "e6f370ed-ccfb-4196-8e86-1e3e5ee54868",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d483a74-fe6a-4585-adf7-d5bb4ccb8583",
        "cursor": {
          "ref": "e1c2e300-6496-45d5-aaad-5f9af2d962a1",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ff22b1d6-87ca-41c6-92f9-5bdabc1518ac"
        },
        "item": {
          "id": "8d483a74-fe6a-4585-adf7-d5bb4ccb8583",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ac1e09c9-7fd9-4572-8d81-56d8e397fb9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ac778e-b74f-4625-8f06-eead176701a1",
        "cursor": {
          "ref": "072e6bc5-5339-4b6e-8081-5fdeda576fa5",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "04165d3f-b064-4c8e-b3c9-297cf2a76bec"
        },
        "item": {
          "id": "93ac778e-b74f-4625-8f06-eead176701a1",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "1f61bb3c-54b1-4e73-bc7b-c1b04c43feeb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f870871-34b0-46b3-b352-81bdbb47c55e",
        "cursor": {
          "ref": "5979aea7-8049-4963-969a-225847d12d44",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "43449dcc-41ea-426d-8671-ffabaffe3e95"
        },
        "item": {
          "id": "4f870871-34b0-46b3-b352-81bdbb47c55e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "80e82d55-2762-4675-bc36-56bff93a8e3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344dc759-0f96-41f8-bc61-c515d79c04af",
        "cursor": {
          "ref": "1d9b318c-22cb-4786-ba02-77f8d1ebd5fe",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "799990cb-b456-4128-8b70-143d51d96cc4"
        },
        "item": {
          "id": "344dc759-0f96-41f8-bc61-c515d79c04af",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "077ba182-edc7-4d20-99e4-f06ef2f75207",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86787b5-50b1-4e44-8af7-755ae9096e33",
        "cursor": {
          "ref": "01d64f05-2497-48be-924b-85962ffd51d9",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "949f1cd3-783c-421b-a0fe-f63f46ae4308"
        },
        "item": {
          "id": "f86787b5-50b1-4e44-8af7-755ae9096e33",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "03db9e10-3d77-420a-a39c-44b793d10c02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5e11d1-2017-4949-83f2-196610c24c8e",
        "cursor": {
          "ref": "b767c706-3f6e-4631-92db-892744b05c05",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "cfdc2034-f035-4dad-a2cc-4e1ebf5113f3"
        },
        "item": {
          "id": "3a5e11d1-2017-4949-83f2-196610c24c8e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2272b95e-518b-4c28-9942-a9074af4d484",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d244b4b-6de1-435f-b0f3-2977bfac6219",
        "cursor": {
          "ref": "b3d771e9-224c-4463-a7e4-db235ad690c9",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8015cc38-990f-4b6c-bf73-660c0b042448"
        },
        "item": {
          "id": "9d244b4b-6de1-435f-b0f3-2977bfac6219",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "faa0b15c-47df-4e9a-b4ef-02732f5c3d79",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb0c117-37a6-46c8-8796-05a7593252e4",
        "cursor": {
          "ref": "cd9cce8b-dbc1-4282-a75c-f44982ce57ad",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "44e8b33e-ca94-4985-9a24-15b810d6bd2e"
        },
        "item": {
          "id": "0fb0c117-37a6-46c8-8796-05a7593252e4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a02d6cb2-eb74-49b1-97db-7c2eb58f517c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22cfa88-7f33-44b5-a322-1674c2503e4b",
        "cursor": {
          "ref": "fbe97dc1-8000-47cb-878a-e1332cf30f21",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "81515330-1679-41fb-a703-2fcd1323eb29"
        },
        "item": {
          "id": "d22cfa88-7f33-44b5-a322-1674c2503e4b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d2b1548b-cb9f-469f-9f00-d7d34629a965",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4afde4b-9d9b-4d0f-81db-2b6a4f9607c6",
        "cursor": {
          "ref": "1068d018-66e2-43a0-923f-e6dc1735283d",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "24a01ffd-e098-4746-b221-854f06230610"
        },
        "item": {
          "id": "d4afde4b-9d9b-4d0f-81db-2b6a4f9607c6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e344d7d2-42eb-482c-87d6-b6f4ca79a887",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678ae131-e6f8-43a0-9cd3-f97fcfdd1321",
        "cursor": {
          "ref": "2d00c4f9-f462-45b4-9600-4f590cbeb88a",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "233ba3f1-8344-4dae-a888-4b6bd446e61a"
        },
        "item": {
          "id": "678ae131-e6f8-43a0-9cd3-f97fcfdd1321",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "65574875-7654-411f-a8c5-8d7c7301a56b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c013721-1ceb-492c-8eef-7ee8715d9508",
        "cursor": {
          "ref": "9240f726-cd2e-411a-8682-29bdb488d156",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e4da004f-c09f-4359-98e3-c511437e6a6b"
        },
        "item": {
          "id": "7c013721-1ceb-492c-8eef-7ee8715d9508",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3921d0a0-c950-4f2d-bf99-0b7c2c0a6c4f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54bf7a7f-3528-4d6a-9d7e-30d547ffcdba",
        "cursor": {
          "ref": "13ade930-6aa1-4733-9b84-ad8c3e637389",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "057190a2-aa87-4062-ac0c-4edc280da894"
        },
        "item": {
          "id": "54bf7a7f-3528-4d6a-9d7e-30d547ffcdba",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0e6b0c10-8a88-4d58-b3ce-047e54d6c26b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c36f740-6b02-4fec-9865-c6501185bfeb",
        "cursor": {
          "ref": "ef22a6ea-87ec-47fd-8fba-7b3aaadb3637",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "40619649-74ea-4601-8eb0-2c24d4b75200"
        },
        "item": {
          "id": "0c36f740-6b02-4fec-9865-c6501185bfeb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a63be686-f0d7-4735-be32-13158967841d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5e5f6c-b2e2-4857-99d6-cb690360dc03",
        "cursor": {
          "ref": "1ae26576-f53f-4cd8-9d69-e8270b376fc0",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "010ff435-706d-4087-a376-a4ce9c23f10b"
        },
        "item": {
          "id": "aa5e5f6c-b2e2-4857-99d6-cb690360dc03",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8812096c-b853-4cc1-ac4f-bcf7a5fe98ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6561ce8b-773c-49cb-a346-9c0ac69948fb",
        "cursor": {
          "ref": "508a9541-9bed-47c9-9cdf-f70b993a8c5b",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9801a721-c635-4c95-a94f-664e19f94f24"
        },
        "item": {
          "id": "6561ce8b-773c-49cb-a346-9c0ac69948fb",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a9433fd7-b339-4a44-b951-52161d8efa88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ed2e2b-6158-47e1-abbb-dbb281d41dd3",
        "cursor": {
          "ref": "6bf502e9-3b53-4b26-ba57-2d4e0b93aed2",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c00e62c9-06c3-4a5e-8285-503319527239"
        },
        "item": {
          "id": "37ed2e2b-6158-47e1-abbb-dbb281d41dd3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "493dc1bb-ce6d-4222-af33-801bc7ffdc68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c856b564-8355-442e-a0f4-f79e1204802a",
        "cursor": {
          "ref": "7de69c9c-4f65-46ca-ad9f-aa762c7a2054",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8a02b614-6b4e-43ca-a99e-b724bb834d6f"
        },
        "item": {
          "id": "c856b564-8355-442e-a0f4-f79e1204802a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cf4a2e48-477f-42d9-8fbe-602b2bc53da5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6d93bb-ef6a-4544-b25d-738bb552459d",
        "cursor": {
          "ref": "b6ee65eb-96ea-44dd-b066-a0c9af1ccc14",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8fb46819-06fc-4f55-9c57-2893ee7f215d"
        },
        "item": {
          "id": "6e6d93bb-ef6a-4544-b25d-738bb552459d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "86ec6cce-b5f0-418a-9668-80c58046ad5f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a41dca0-1e6d-4719-b740-b011bc8bce07",
        "cursor": {
          "ref": "1c8aa61e-5a42-4660-9bc3-ba6585f4ce40",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "142ee237-7da1-4c51-a184-d8a2deb94bf6"
        },
        "item": {
          "id": "7a41dca0-1e6d-4719-b740-b011bc8bce07",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e879f055-2c7d-461f-a979-c2cdf5253a2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed94d05-d3fc-41d3-b314-f1bea328239a",
        "cursor": {
          "ref": "836e48d7-d704-4f9f-a224-676899e8b79c",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9a1f9361-236f-46ba-a807-4aa5e4036bc6"
        },
        "item": {
          "id": "eed94d05-d3fc-41d3-b314-f1bea328239a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "cfed11a6-3aa1-4076-950b-7fc340308e2f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b675a20f-f622-464a-8cd4-bd6f3efa35f0",
        "cursor": {
          "ref": "4750678a-6f5a-49ff-aade-6b5242268fd2",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "bc7b02c3-dd38-46ed-a110-ae275cd6c928"
        },
        "item": {
          "id": "b675a20f-f622-464a-8cd4-bd6f3efa35f0",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "03f8995b-c1ab-41d5-ae84-e6c423f08c9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69324dde-6e5e-4c92-a29c-3db5f3c54b0a",
        "cursor": {
          "ref": "fa9f7e7b-4d26-473a-bfd8-f65e6b8d8020",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "564123a5-6037-4bc6-a421-3c4f09986b8c"
        },
        "item": {
          "id": "69324dde-6e5e-4c92-a29c-3db5f3c54b0a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cb6db2ac-f16b-4ff3-860c-5cd319117bfb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88b324b-4903-4b52-886f-b0ccd0fb7b78",
        "cursor": {
          "ref": "63fac955-cb52-4eed-9fb9-1e02b37db422",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3167b133-3842-4b9f-a3fc-5d874b201cd1"
        },
        "item": {
          "id": "f88b324b-4903-4b52-886f-b0ccd0fb7b78",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "516e5077-740d-4e29-8bb4-f64a9872c320",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b5e038-cc1e-4424-88f4-c3023105bfdf",
        "cursor": {
          "ref": "bca1fbfb-3a87-4028-be32-65c56af9e7d5",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "02028dcb-7390-4155-b70f-65765e2c9d45"
        },
        "item": {
          "id": "99b5e038-cc1e-4424-88f4-c3023105bfdf",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "cdc05e70-07b6-48dc-89f7-5dbb1adb5b39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42dead24-f8e8-452f-a85a-0d7e8bfeecd7",
        "cursor": {
          "ref": "0d62c512-0311-4095-821a-89bc13b4559d",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "dc9c154d-372d-40ed-a0ec-c3a9f5ab68c5"
        },
        "item": {
          "id": "42dead24-f8e8-452f-a85a-0d7e8bfeecd7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0691c726-0531-432c-ad82-3325af6bfa67",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d46f20-0f24-437c-ae9a-d374e06b5d84",
        "cursor": {
          "ref": "e26f80ef-acb7-47c5-a152-c9119e2173cc",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b2f030ae-835d-4de0-9f55-846a8add655f"
        },
        "item": {
          "id": "07d46f20-0f24-437c-ae9a-d374e06b5d84",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "30ad2a46-41f7-4130-aa3d-a270d6bdad49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eaa0e35-e9a7-459b-97b1-c20914a4eef1",
        "cursor": {
          "ref": "6a3a0dc4-0f5e-4cc1-a063-d4233882ce4f",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ba84e848-566c-4c8a-84ab-bcf7cd5bc83c"
        },
        "item": {
          "id": "6eaa0e35-e9a7-459b-97b1-c20914a4eef1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a8a061f2-7a05-458a-97fc-3844e126f98d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 305,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7af4df-7266-45d1-800c-f21daa02d025",
        "cursor": {
          "ref": "2886deb0-a3fc-44a7-96d2-3055846a38e6",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1fa57635-7db1-42c9-93ed-2fbb4a5a2dcb"
        },
        "item": {
          "id": "eb7af4df-7266-45d1-800c-f21daa02d025",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0ecff508-c12f-4c42-894d-f9c58f3f7382",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40385bb8-c6e3-402e-830a-5d261f473e62",
        "cursor": {
          "ref": "0133500d-00a8-4c35-90c1-afdccb5d4188",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "57e342b2-cea0-4ff1-97b9-0b0f3980f26e"
        },
        "item": {
          "id": "40385bb8-c6e3-402e-830a-5d261f473e62",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3aa3888e-953a-4caa-a23f-dbba94379adc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945ff8bc-4daa-4bab-b1ad-d0f0a0a94bc3",
        "cursor": {
          "ref": "a006b760-2509-4bf0-972b-2131d2491758",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "af5400ae-4e1c-4e96-b576-0f364f95d268"
        },
        "item": {
          "id": "945ff8bc-4daa-4bab-b1ad-d0f0a0a94bc3",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "cf20ec6f-4158-4a2b-9448-33d5a6d7bc93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acc1583-9fd6-47cf-8c7f-3f40d1a8be1b",
        "cursor": {
          "ref": "e421c16d-39cb-427d-a021-89eb35cce8ad",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ad0e333d-ff4c-4e0e-9c8a-ed95ebbc7421"
        },
        "item": {
          "id": "0acc1583-9fd6-47cf-8c7f-3f40d1a8be1b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9e4a57f9-e111-4f8d-9d94-fd2c19b20b17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6554dddd-4f4c-4cff-b395-b6a98b5c062a",
        "cursor": {
          "ref": "8d78c2ea-f60b-4c5c-89aa-bc7725745ae1",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a07cc96c-6b80-445e-a63a-5d231c113ae8"
        },
        "item": {
          "id": "6554dddd-4f4c-4cff-b395-b6a98b5c062a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "515a6a8d-1044-46d8-b9ae-e3f53d17da57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38acea11-4ca3-41b3-b490-c5a369db104f",
        "cursor": {
          "ref": "c5881f0a-fe07-4799-9a27-399bd3e25834",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "eee28355-5b0e-483c-92c8-3d4e0851e5db"
        },
        "item": {
          "id": "38acea11-4ca3-41b3-b490-c5a369db104f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "53021dcd-7f46-44a4-ab06-90c1293afcdc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4aede6-0cf9-403f-9730-aa8aabf35c22",
        "cursor": {
          "ref": "8edf2cdf-dea3-4bec-92c3-40b19d24d5a6",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1333df27-8785-4e5c-8d0d-99de28c2a588"
        },
        "item": {
          "id": "cc4aede6-0cf9-403f-9730-aa8aabf35c22",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "92b16011-0961-4b4b-ad45-20fdd7723570",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4fd157-9de5-462e-86d2-a968b9fdc7bf",
        "cursor": {
          "ref": "6b053f97-20a5-4a04-943f-96c08b07b62f",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2f4c4c51-97e2-46ab-be39-ea0c4b381a27"
        },
        "item": {
          "id": "6f4fd157-9de5-462e-86d2-a968b9fdc7bf",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ca179fe2-fcc8-4c18-8bae-38bac7a1bb22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8526ffb4-dac6-49a6-8ea5-ae8a4a517f0b",
        "cursor": {
          "ref": "342c6358-4bc8-44cb-9b25-35c290fe968e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "74a1c0a3-afb1-4f22-81df-75261f4a81b9"
        },
        "item": {
          "id": "8526ffb4-dac6-49a6-8ea5-ae8a4a517f0b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "38ca45c9-4027-44d8-8b89-02ad877cb52f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18927913-0541-4072-832a-e6a1f01edd7c",
        "cursor": {
          "ref": "8125d20c-09f1-4fcf-8919-43b868bfd4c6",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ed981751-e20d-4f19-a12f-6404e0baf305"
        },
        "item": {
          "id": "18927913-0541-4072-832a-e6a1f01edd7c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6ed46819-9194-432b-8b84-025bfa3a6d06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f703c6f-d446-4d2e-b845-194617974475",
        "cursor": {
          "ref": "9d6f8490-6810-455f-b121-7798cc07a280",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ad32b9ae-1f77-4b80-9571-ff957ce09be8"
        },
        "item": {
          "id": "8f703c6f-d446-4d2e-b845-194617974475",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f02d4066-ef67-476a-a622-8e740163c017",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28263fc2-550c-4486-846e-00c036115808",
        "cursor": {
          "ref": "326444fa-ad39-4693-9681-979c4b75848e",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3c374bc7-97d6-4c05-8694-56e3345fb962"
        },
        "item": {
          "id": "28263fc2-550c-4486-846e-00c036115808",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "4d54eda4-8fd0-47e6-ad01-6a102200b1db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c175f29-1fd4-4227-a456-8d6498119d8e",
        "cursor": {
          "ref": "131db973-cbbc-42be-a621-b24f04c8663f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "82ddf40c-888e-423b-bd93-8e14df5b55d8"
        },
        "item": {
          "id": "2c175f29-1fd4-4227-a456-8d6498119d8e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "aa1919a1-5523-49d2-99fa-5e6e5927d69f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78593251-87d6-4075-860a-c713084dbdb6",
        "cursor": {
          "ref": "f2df3957-e538-4d96-9cdd-b558ca37d662",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "43518e0c-171b-4471-a5f6-00521173dfcb"
        },
        "item": {
          "id": "78593251-87d6-4075-860a-c713084dbdb6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "de79ceee-f848-412c-8b15-f4c028ca1a49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c297dae-df85-49cb-abaa-e4ba43372881",
        "cursor": {
          "ref": "809212ef-b31c-432f-9cb2-8ed574818a31",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1a535be2-c773-4183-a906-27ced3b7692d"
        },
        "item": {
          "id": "1c297dae-df85-49cb-abaa-e4ba43372881",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3258965e-5f84-4b5e-a334-c870d1a94c42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e64b17-63be-4a07-bd01-9d5dea41a70a",
        "cursor": {
          "ref": "8ada8dcd-062f-4fe5-9e41-9461a4a229ce",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8d1a2a53-5e64-476e-8531-66c5f46dc01f"
        },
        "item": {
          "id": "55e64b17-63be-4a07-bd01-9d5dea41a70a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e9e49ad8-4f37-44e2-9b4f-401c78e5a606",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7169d64-ab46-4ee7-ba91-60722119f121",
        "cursor": {
          "ref": "06eb5767-3dc1-4c6a-b179-3ef2519a0e47",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "42fdc841-04bc-4465-9fae-182f5013df0a"
        },
        "item": {
          "id": "b7169d64-ab46-4ee7-ba91-60722119f121",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "b1b2d476-7d85-4585-8365-057f54acf9d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce348309-e228-468e-bff4-bf5748a48c23",
        "cursor": {
          "ref": "cccce832-a20c-4fb1-aaf9-5b24cd672153",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4d5f9bce-fd56-4f16-b722-446fe2eacd7b"
        },
        "item": {
          "id": "ce348309-e228-468e-bff4-bf5748a48c23",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "54ffc2cf-e587-46b4-a718-47b68dd4314c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c454f184-aa85-47b7-9832-fe43c2ac8446",
        "cursor": {
          "ref": "138eeedb-d94c-42e0-8d27-b9d242006698",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4f6b69ae-1052-4ae5-8754-c654b31ece3e"
        },
        "item": {
          "id": "c454f184-aa85-47b7-9832-fe43c2ac8446",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "256678cf-1e21-4d2a-b6a8-d864f56cbf1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49544075-cd8e-476f-811c-4e1ed72b7e62",
        "cursor": {
          "ref": "e1b3f5e1-57d0-466d-b2ba-63f3ce44d3c3",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "7286934b-4b85-4631-82a5-a93ab2a24d72"
        },
        "item": {
          "id": "49544075-cd8e-476f-811c-4e1ed72b7e62",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4b70f30d-d716-404a-98ed-39e78584b451",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887b5cf2-e56b-454d-98ac-ecee28e1cf97",
        "cursor": {
          "ref": "5d017ede-a3cd-48b1-bf01-e1dc80dceec1",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8cc0b1e0-8136-49fb-b664-eb4e28f2fef0"
        },
        "item": {
          "id": "887b5cf2-e56b-454d-98ac-ecee28e1cf97",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2cef03e5-effd-4231-9e96-09e2d60bd222",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf27449e-1b11-4ce5-aa0c-94c9c93efeff",
        "cursor": {
          "ref": "204ea93f-2ca9-4026-ac26-17bd89f9094c",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "96c21bce-83d1-4a56-b27f-ac812e49e99a"
        },
        "item": {
          "id": "cf27449e-1b11-4ce5-aa0c-94c9c93efeff",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8e52d51d-6d16-4964-89ba-124770440ab9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d80cf634-a552-4900-92c6-68e58d411eea",
        "cursor": {
          "ref": "f2831717-4e00-49a0-97a6-288d5cb13133",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "41516de3-04b8-4f6d-872a-8632b111a2f9"
        },
        "item": {
          "id": "d80cf634-a552-4900-92c6-68e58d411eea",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "91219f9d-3171-4368-80e3-da8fec4fb4d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f46a54f-6735-4d87-bd4b-39eacc5c8c08",
        "cursor": {
          "ref": "d184e252-393e-4eb5-9de4-e68c0967be16",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ed02a58e-33e6-4429-a14d-4517ca1aa0b3"
        },
        "item": {
          "id": "4f46a54f-6735-4d87-bd4b-39eacc5c8c08",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9947e49b-8900-4cf6-973b-2258a2c0f717",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f05fe23b-314d-4a09-ab8d-9e3183f8a287",
        "cursor": {
          "ref": "54a20e21-35bd-48db-a8a1-058d1fd6b7c5",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2c89b952-7e7a-466f-8f3a-526469cd0cd5"
        },
        "item": {
          "id": "f05fe23b-314d-4a09-ab8d-9e3183f8a287",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a7777049-5bef-4424-830a-79403f172f32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c664ae-b7c4-4c0b-bec1-1b9a020f2cbc",
        "cursor": {
          "ref": "f71dc5a2-9ac9-4716-9664-f83654f0e45a",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fc51a2bc-d224-43e8-a1e4-c1a9fcfa9267"
        },
        "item": {
          "id": "d5c664ae-b7c4-4c0b-bec1-1b9a020f2cbc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5d4bccba-23e0-4470-a53b-30e0bff1fa10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87c98bd-ccaf-410f-978f-906ffbe20a8e",
        "cursor": {
          "ref": "fd890025-f2ab-43db-928b-2ed820ba9c93",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "10037c2d-d5c5-4827-9408-614f5a09afca"
        },
        "item": {
          "id": "f87c98bd-ccaf-410f-978f-906ffbe20a8e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bbbb6294-c262-4d74-b58d-03cc98a696ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f21a4d-e6bf-440d-ada2-ded466dda0f1",
        "cursor": {
          "ref": "47987428-e412-415f-a8c9-d29428c9ad81",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5277c57d-419a-4322-bb83-b295a511c33d"
        },
        "item": {
          "id": "59f21a4d-e6bf-440d-ada2-ded466dda0f1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8ad3bd19-ea67-438b-aa72-438f41bfca08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a824812c-c9a8-4239-bc7d-79c254960e72",
        "cursor": {
          "ref": "93a9ed88-42ee-4067-813a-b1af6328d438",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3bd0aa7d-9d8c-42d0-bd74-7f057ee7e007"
        },
        "item": {
          "id": "a824812c-c9a8-4239-bc7d-79c254960e72",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "874920e0-5e4a-46ab-a172-3c4ce36b2a06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b76ee06-2c37-4d64-8397-2b84a7e27b5d",
        "cursor": {
          "ref": "53f928e4-604b-4bf4-be92-c64327a4195c",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2f88a42c-7255-4d78-aad2-7c65712d86f0"
        },
        "item": {
          "id": "3b76ee06-2c37-4d64-8397-2b84a7e27b5d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "36fb320a-01af-4044-940e-d18e5842d55d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93cfafb-d7fd-46f4-9ea1-3862398b5913",
        "cursor": {
          "ref": "7794d984-d2f1-4607-855b-a357bab033ca",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8b8ae58c-ba53-4dc2-81a9-c79ad31d6429"
        },
        "item": {
          "id": "b93cfafb-d7fd-46f4-9ea1-3862398b5913",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1dfdb501-5fbd-444c-9cf7-ae8d3d1ac383",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3cdb254-7a83-4155-9552-3928e6ebc9a1",
        "cursor": {
          "ref": "47595900-c718-466e-b69b-20c921e12d66",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "82189088-c690-4ec6-81aa-86b52b6001ce"
        },
        "item": {
          "id": "e3cdb254-7a83-4155-9552-3928e6ebc9a1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "94662c33-ff04-42cd-b1f1-3d28b17abbee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d0e1b8-e8c1-4b1a-a29b-a9bf57d51798",
        "cursor": {
          "ref": "09d3e91a-6cfa-4e9a-ae20-244c3590b594",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8aa131d4-f26a-4e2a-b79b-a9477ddbf18d"
        },
        "item": {
          "id": "36d0e1b8-e8c1-4b1a-a29b-a9bf57d51798",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e5556beb-414b-4c44-85a2-706d76e64775",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7576d13b-415e-4b20-9ed3-61c647a485cc",
        "cursor": {
          "ref": "ccec5070-bb2b-4ebf-9f0f-dfeedd297761",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f2b60aa7-cb8b-45da-a290-a597e1db8204"
        },
        "item": {
          "id": "7576d13b-415e-4b20-9ed3-61c647a485cc",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5bf6eb3b-a775-416e-8aa9-3ea694501e3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1da2ee9-8a0f-43d5-b51c-7450f1e7c4b2",
        "cursor": {
          "ref": "fb5d1b23-d777-4d04-bc72-5d5b9035ee09",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f9040058-0435-4e08-8fbe-01a01f36f922"
        },
        "item": {
          "id": "f1da2ee9-8a0f-43d5-b51c-7450f1e7c4b2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "292291f5-1293-41e4-90ee-607821631b3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3baca53e-8abb-46d0-b701-2f49fd93e54a",
        "cursor": {
          "ref": "032a6ec5-d758-4c8d-abef-675af0467ef1",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4ec924af-6e71-481a-9c3e-2ed56b202907"
        },
        "item": {
          "id": "3baca53e-8abb-46d0-b701-2f49fd93e54a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2a13cb58-c5b3-466c-8aac-2d03fe34c8b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5256252-54d9-4b9a-9152-0e6d3c205396",
        "cursor": {
          "ref": "4da5178c-8e37-4a62-abb7-24fd383f614e",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "829e9d61-446e-45c5-8ccf-c0099d4b4924"
        },
        "item": {
          "id": "d5256252-54d9-4b9a-9152-0e6d3c205396",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4db9e358-05b0-40e5-b3ea-80d969403fdf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3361b534-c81e-4dcb-8793-c374eebe1679",
        "cursor": {
          "ref": "1746940e-e513-463d-84cf-7ad4af407f8f",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "da0b5136-f31e-4d11-bda6-ee86407d12ea"
        },
        "item": {
          "id": "3361b534-c81e-4dcb-8793-c374eebe1679",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "19cbd28a-6d92-4507-aac5-43aa432c92a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc508cf5-99e0-4edf-919a-19dd20661566",
        "cursor": {
          "ref": "62160ecc-5fbd-4841-9884-b06f29ec6d84",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "97b40688-7485-4af3-af84-aef8417b4a98"
        },
        "item": {
          "id": "fc508cf5-99e0-4edf-919a-19dd20661566",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d8145b62-858c-47e8-8692-084c196ebb10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afcb244-f57f-49d6-828b-604c6c42bd8a",
        "cursor": {
          "ref": "0a0000fa-c95c-4d26-ae95-0e391d2ffd61",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "80d54bb2-cbe0-4043-be5e-13a825fa0455"
        },
        "item": {
          "id": "6afcb244-f57f-49d6-828b-604c6c42bd8a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "70bcc711-7136-495d-8898-b337d5c34c25",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5296937c-6ebb-4189-a44f-515aed754162",
        "cursor": {
          "ref": "2ad717a0-7efe-4687-af3b-a8a1d9fda5e3",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5cf6b7b1-41b4-49d4-8562-31987f4c0bf4"
        },
        "item": {
          "id": "5296937c-6ebb-4189-a44f-515aed754162",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a59384ec-cf4c-426e-a1b3-d1892bd3f286",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94a31b8-e3f1-46be-983b-e795baa3be4d",
        "cursor": {
          "ref": "b387acad-467d-4493-9b43-215ac9ed62ba",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fa6827da-b549-4225-84be-f3bc3eb2281d"
        },
        "item": {
          "id": "d94a31b8-e3f1-46be-983b-e795baa3be4d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2ba15a16-2d35-49c8-beb2-fb51b9377af2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2ca8b2-0f6f-4029-b5b7-85e29a596bc0",
        "cursor": {
          "ref": "22ba3f85-7810-4b31-a941-35f402dacda9",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "2f1713a3-545b-41d7-a420-bc225cbd0955"
        },
        "item": {
          "id": "ca2ca8b2-0f6f-4029-b5b7-85e29a596bc0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fee7c976-1648-4099-93fb-b329f9982299",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17914cc5-884f-4cae-9c76-f697868e21d5",
        "cursor": {
          "ref": "95600d1a-38e0-4eff-9960-db69ccfbb9f0",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "596dbf48-e54d-432f-a552-8e6695aa3b9c"
        },
        "item": {
          "id": "17914cc5-884f-4cae-9c76-f697868e21d5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a9e57f39-449d-4891-babe-1a12e760462e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6cdc6f4-0d04-465b-9e74-85e23f1b0e31",
        "cursor": {
          "ref": "02753636-0417-4423-be52-1be265904878",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bca8be5e-d774-4d3b-a827-a0207ee4d2f0"
        },
        "item": {
          "id": "d6cdc6f4-0d04-465b-9e74-85e23f1b0e31",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ec7fe89a-496b-49e2-a802-99b9cfae932b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242b6b05-3e83-4ee8-97d7-5266e79465a1",
        "cursor": {
          "ref": "f5a79bc8-c151-4ab9-9635-88d12d52bce5",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "dc6877ff-c564-4db8-80f8-a33b0c62657c"
        },
        "item": {
          "id": "242b6b05-3e83-4ee8-97d7-5266e79465a1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "29b75c77-5c07-4deb-892e-0275fd14cdf0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67acb3e-a9ad-4dd6-aa3b-bbd98084a9cd",
        "cursor": {
          "ref": "261b8334-0976-42ac-b578-dfa618b8a87d",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "71d77a21-0337-469b-b70e-13bd0b495027"
        },
        "item": {
          "id": "e67acb3e-a9ad-4dd6-aa3b-bbd98084a9cd",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d9924c21-4c61-4e36-bc9b-6637535b5274",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eaa8c59-4623-41ec-af65-a1377e7e58bd",
        "cursor": {
          "ref": "5e223662-94ff-48cf-bf44-5764a27994a2",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c2151b11-a035-47a9-b9be-98cfca2bdfb6"
        },
        "item": {
          "id": "9eaa8c59-4623-41ec-af65-a1377e7e58bd",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1df22161-8e3e-4765-9a70-f46098ed39f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1b43a5-4f66-4112-b1c3-f72fc980d6b0",
        "cursor": {
          "ref": "80833819-7f45-400b-8377-81fddb13aa02",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5d40978b-eb06-491e-854e-8111455eb0a1"
        },
        "item": {
          "id": "cf1b43a5-4f66-4112-b1c3-f72fc980d6b0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "616c3993-2e3e-4e01-9455-b04a74a9d044",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4c537b-4d6d-4d36-95f6-bb0bc03e7cc2",
        "cursor": {
          "ref": "3a9497d7-9a11-4ea3-a1c2-0017c901ed68",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d4a442a5-9f86-4c0d-9562-ce0f91dadf55"
        },
        "item": {
          "id": "ed4c537b-4d6d-4d36-95f6-bb0bc03e7cc2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cb6856f5-7253-43e0-bad6-b62258c7e627",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c44024c-6d22-4fdd-be34-fdd70ddeb65b",
        "cursor": {
          "ref": "437c24bf-913e-4453-8765-b57aab37bcd6",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "0e82d492-f14f-407f-af12-5f0c00245a5e"
        },
        "item": {
          "id": "7c44024c-6d22-4fdd-be34-fdd70ddeb65b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d1181021-cae3-40d1-9708-2c7f0aaebd5e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da7bab0-e280-438b-8da7-13fc51f566bd",
        "cursor": {
          "ref": "95641970-bd9b-4828-9768-3baa6ada9dc7",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "cc053033-4c10-42b1-8966-4a0659b974dd"
        },
        "item": {
          "id": "1da7bab0-e280-438b-8da7-13fc51f566bd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "aec5e93d-756f-422c-b972-33a80d248186",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d558ebbc-2253-4439-a179-0ca41045c7cf",
        "cursor": {
          "ref": "0cd91916-1371-4958-9d25-fb334d5e7ced",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "4e853abb-8000-4d3a-937a-25717bd11fb3"
        },
        "item": {
          "id": "d558ebbc-2253-4439-a179-0ca41045c7cf",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8e328ad5-2c76-4a2d-a4fc-29a113fc184b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f020ebc-525f-4d64-a88a-5bcae31bf0a2",
        "cursor": {
          "ref": "92cc1d4b-c034-40a8-abd8-bc679d76c623",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "285e6f92-ea21-4646-97c0-de666413c7af"
        },
        "item": {
          "id": "9f020ebc-525f-4d64-a88a-5bcae31bf0a2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "551cb0d4-0da4-4fd3-a351-9275fe8f9bc4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f426da-a73e-46cb-aa90-42601e610eab",
        "cursor": {
          "ref": "f48449e2-d073-4677-b703-79a376b8653c",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f4f57e77-0a3e-4cf7-8bd5-d2b2b15c1ed7"
        },
        "item": {
          "id": "51f426da-a73e-46cb-aa90-42601e610eab",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f48d91c4-9bc9-4464-9f25-5bce76ad3917",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b26978-3e51-483e-b9a2-784c0ca5d4c4",
        "cursor": {
          "ref": "14629a1d-fcd8-4a56-a7f4-fce9351d7e4e",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "662efc66-ee78-4a42-8202-e727680d8214"
        },
        "item": {
          "id": "01b26978-3e51-483e-b9a2-784c0ca5d4c4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9eb5f68d-cbe1-4fcd-bd9b-821d3d2ff699",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3136a445-fd76-458e-a745-928307957e8f",
        "cursor": {
          "ref": "9a9bb6aa-e8bb-4e19-a1dd-a94f0251c271",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "1f8e1bdd-2f39-43f7-a5f2-df3acacc13ad"
        },
        "item": {
          "id": "3136a445-fd76-458e-a745-928307957e8f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3fa781b6-7950-4ff2-b3a3-24c3e7a30a23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a8e181-2596-4a77-81b4-a84cf03618aa",
        "cursor": {
          "ref": "1636c87f-3e80-4c3c-98f0-e20d6919f341",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "a1dbd246-1cb5-4d20-8e50-3b60911f7b08"
        },
        "item": {
          "id": "33a8e181-2596-4a77-81b4-a84cf03618aa",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "3f12bfe5-c58e-414d-94ce-66cc10b5b7a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a163e30-048e-4c67-b15f-d05b58d5d019",
        "cursor": {
          "ref": "9518ce79-3a84-4e35-8fb3-99f60245297b",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "5ed4ef6d-c932-429b-b3fa-17333fd9c7e7"
        },
        "item": {
          "id": "1a163e30-048e-4c67-b15f-d05b58d5d019",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c8135258-d705-4d01-9cb0-6c064a0a06cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb8fdbb-bec0-4c14-ae9d-26087066316c",
        "cursor": {
          "ref": "f9647979-8f60-4ade-85c8-f8842d878065",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "13c6776e-7fc6-4554-9da3-066358e2dc17"
        },
        "item": {
          "id": "cfb8fdbb-bec0-4c14-ae9d-26087066316c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5948db15-2a5c-484c-b250-19fb609910a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34153117-b0eb-4112-bd9b-675983e7467b",
        "cursor": {
          "ref": "5755fdba-d38b-4460-a259-7d8553bbe8f6",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "23e930c5-5ae4-484c-8fcf-bd04bbd3568d"
        },
        "item": {
          "id": "34153117-b0eb-4112-bd9b-675983e7467b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "87350904-b43b-401b-bcc1-dd440766aa41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e35af19-7479-417e-a999-0227e43a240b",
        "cursor": {
          "ref": "bfb9600e-be8a-43d1-9dd9-7517408cf99b",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "e1673a6c-b0e8-4238-854f-0e6b21dad1f4"
        },
        "item": {
          "id": "8e35af19-7479-417e-a999-0227e43a240b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1f020ed6-2d33-4491-a89e-fb7e6064a000",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf0d708-f376-4313-a5f4-b57c3a0738e1",
        "cursor": {
          "ref": "facc5b9a-6551-4d6c-9f2b-692a6ce88902",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "eeae05a0-ab44-4eb0-8397-9a0d73c07d7e"
        },
        "item": {
          "id": "acf0d708-f376-4313-a5f4-b57c3a0738e1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "bdad1630-203e-40df-a485-2269375121d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3bc256-985d-4e78-a7cf-91ede05025a2",
        "cursor": {
          "ref": "a5b9189b-2ca8-456b-8898-c465ed4a2aa4",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "ad887ab5-2f69-4150-bece-2bc52eea5db8"
        },
        "item": {
          "id": "9b3bc256-985d-4e78-a7cf-91ede05025a2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9540959f-a195-4079-ac0b-8f784f06c79d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342c46a9-0e8a-42a5-b829-fa75e985d121",
        "cursor": {
          "ref": "584369ed-dd83-4b38-9da1-12108813d7d3",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "5fc995d8-e3e9-4827-b755-5ee0f4b229c8"
        },
        "item": {
          "id": "342c46a9-0e8a-42a5-b829-fa75e985d121",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fc2b2087-4602-40ed-b193-c54f494278ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1006b34f-b6ab-48d0-8803-430ed33d9d2d",
        "cursor": {
          "ref": "f64a8d07-b34b-420c-be5b-2994cf0995cb",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "ee5d9d72-87a1-4f50-94b5-280b4a522064"
        },
        "item": {
          "id": "1006b34f-b6ab-48d0-8803-430ed33d9d2d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b5473c7e-a8df-4d93-8873-17e317c39091",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2568d917-bc2f-40b2-bb27-ae250eb2d70e",
        "cursor": {
          "ref": "15a2e10a-514a-4a62-9c87-775375c46757",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "add461cb-634f-4e64-bfc7-56f400fb14b3"
        },
        "item": {
          "id": "2568d917-bc2f-40b2-bb27-ae250eb2d70e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "61a605ae-9861-4d5e-ad9b-33e7517d2e17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3e61dd-c1f4-4317-befa-13733d318cb6",
        "cursor": {
          "ref": "cafdc400-de5d-4a80-a094-7bfff5830977",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c971c130-dffe-4bc8-97ae-90903288713e"
        },
        "item": {
          "id": "5b3e61dd-c1f4-4317-befa-13733d318cb6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c7920a62-165b-4526-83ec-7f0549ad4538",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f74f49-eb50-47ed-bdbe-5ffc0c4f1e6c",
        "cursor": {
          "ref": "3c6d9720-57d2-4780-9837-1d44e95fe8e0",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a75cea62-51f8-41be-a077-22a0731d0b5f"
        },
        "item": {
          "id": "c2f74f49-eb50-47ed-bdbe-5ffc0c4f1e6c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a22eda0d-ed12-47c8-aa6b-e8c7bbddbcb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5a4d4b-8326-4b89-903a-d10f24c5b24e",
        "cursor": {
          "ref": "78c2b738-eead-47de-bb01-fd7d2aebf9f9",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "f52f9e05-17c1-4c6e-90a5-7940c559420e"
        },
        "item": {
          "id": "0f5a4d4b-8326-4b89-903a-d10f24c5b24e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5e5c534c-0dc6-4f86-8cda-d3ce0639f732",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13dd5ee5-5707-46b0-938e-897254059808",
        "cursor": {
          "ref": "52430f5d-177a-4903-bf49-745dbc2f17dd",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "c0a76ac4-387f-4735-9461-32186b2ad172"
        },
        "item": {
          "id": "13dd5ee5-5707-46b0-938e-897254059808",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8dc475b8-289e-4db8-9cd8-b14bca5f5c37",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d2775c-b1e3-41ff-81d0-f772504a6675",
        "cursor": {
          "ref": "e7765797-3a95-4918-b3bb-2dc71301506c",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "8487a720-96cd-484b-8c09-7aad08da4480"
        },
        "item": {
          "id": "e4d2775c-b1e3-41ff-81d0-f772504a6675",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "950eb2ef-3ab8-4072-8ebf-bc212d6b8f43",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2662ac-e004-4acc-89ef-0c00c233bba0",
        "cursor": {
          "ref": "eaa241a9-73ab-48a7-93f7-1888f81496a5",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d2b3d4a1-9293-4bd1-9b01-285a44ea898c"
        },
        "item": {
          "id": "9d2662ac-e004-4acc-89ef-0c00c233bba0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "dca2f799-652c-434d-aa34-9b7cc537cbe6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3553d9c5-4b93-475a-8dcd-eefa4d6f63d2",
        "cursor": {
          "ref": "a1c73ead-967c-45f0-a8bc-3e945d2b4757",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "5fec3b35-9eb1-44f1-92ce-df10b7321b7d"
        },
        "item": {
          "id": "3553d9c5-4b93-475a-8dcd-eefa4d6f63d2",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b2d8c9e4-5b85-40c2-b78e-a53e88cd173a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1fac36-d1a6-4c8f-99cf-483970f52ec4",
        "cursor": {
          "ref": "f50a85a8-beeb-4df6-b164-334e8a21ee9b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "287dce06-728d-405f-9603-f71803bff284"
        },
        "item": {
          "id": "fe1fac36-d1a6-4c8f-99cf-483970f52ec4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b8600368-3258-46f1-b04b-56c0b7ce2f38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "3bc20af8-eccb-40a4-8f4e-e2f69419e21b",
        "cursor": {
          "ref": "49d8dc21-d380-41f0-a96c-7d68f559c0ff",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "0e7c199d-ae11-413b-bdcd-7c6f954132b5"
        },
        "item": {
          "id": "3bc20af8-eccb-40a4-8f4e-e2f69419e21b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "873b4e21-c4a5-44d0-b340-e0f46cc9cda8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "714a8d52-93e4-4c2d-ae2c-e9f2ef82867c",
        "cursor": {
          "ref": "786039dd-9739-431a-88d2-46e2f44a9ad2",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "efc717b2-601f-46d9-a81c-1b443cd1ecb4"
        },
        "item": {
          "id": "714a8d52-93e4-4c2d-ae2c-e9f2ef82867c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8bea52f2-9b5d-423e-a7e2-b6f08114d08c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "ba2140e2-3acf-45b2-b2df-96dbaf7e1475",
        "cursor": {
          "ref": "d9cf1bfd-3715-44cb-bc1b-c9f6a76f4a56",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3876ad65-01eb-4b25-b9fe-a520a0ca79d9"
        },
        "item": {
          "id": "ba2140e2-3acf-45b2-b2df-96dbaf7e1475",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "301fbd51-4ff1-4117-9316-bcda3887e1d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2140e2-3acf-45b2-b2df-96dbaf7e1475",
        "cursor": {
          "ref": "d9cf1bfd-3715-44cb-bc1b-c9f6a76f4a56",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3876ad65-01eb-4b25-b9fe-a520a0ca79d9"
        },
        "item": {
          "id": "ba2140e2-3acf-45b2-b2df-96dbaf7e1475",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "301fbd51-4ff1-4117-9316-bcda3887e1d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a496dc5e-81b6-4d3d-a32b-3f2515142054",
        "cursor": {
          "ref": "8ec60969-a598-455c-8763-b20098cd8625",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "d8f9d1f2-02ba-4069-8391-6b0825952390"
        },
        "item": {
          "id": "a496dc5e-81b6-4d3d-a32b-3f2515142054",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "389c178b-8450-40ca-85c2-bf0da2b60bf8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d85288-a516-4cb9-9dd4-9e96b1b49adf",
        "cursor": {
          "ref": "80a99eac-d9fb-47cc-a074-f923106092bb",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "d3911886-72a2-41fd-99cc-c0d4d024524b"
        },
        "item": {
          "id": "59d85288-a516-4cb9-9dd4-9e96b1b49adf",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9b217a27-c6cf-4104-adea-84b2715d8e3b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:283)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}