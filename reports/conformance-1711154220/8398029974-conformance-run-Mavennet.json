{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "24fab53d-1f93-423d-8132-2a56f918f43e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2294d64e-a937-434b-b0f3-325eed9ab4c6",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e82a0be0-1639-4868-980b-72d68c9fb18f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9c8000ac-4319-40c2-9bc5-57a84dc31608"
                }
              }
            ]
          },
          {
            "id": "e02a9df7-6f2a-40d4-a492-76ab7e2d9a21",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4e04d36d-8e9c-4dbd-ab7e-445885638a6b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f511b9b9-3091-467a-9c54-caf52e2bc657"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a0aeac24-a086-4f02-9ee7-e196b9bf89e4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7de11c1a-659b-4e34-811c-b7395fdc4cff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f6086552-aa4b-4257-9291-a507d559263a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "229a0bb9-070b-4c43-8fb9-3bb5d05d0c6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93d9c657-c69f-4eb5-aa16-8fe9d48fd85a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c75537ed-7429-4106-b1c5-27dd9d60a334",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7cc07113-1484-4ed7-b313-053643a48272"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "61d8f4a9-749a-4a91-a41e-f3a9dadd688a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3b87f7c7-1edb-440b-a4a6-6c4cc1d78788"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "03ffc339-a3c2-4025-b42d-38c0332e8234",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "518d6f47-a18f-4ee2-ac63-c2d1bcac21be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52b9108b-94b7-4225-ab5d-5983291134f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "933b89fa-2e0d-467b-8b12-506dd87df6a4"
            }
          }
        ]
      },
      {
        "id": "87a05e37-c978-44f2-a84a-44773addf0a7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cc7c8383-ac5b-4114-a681-3f42e43c5171",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9de55e66-5a0b-4401-ad50-5a5dfeda92d3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bebba21a-69ac-491c-8ce2-28ba1403e91a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0165f2d3-e05b-45c9-83a3-9f59a587983c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "046bc894-69b9-4797-8091-c466aebc9fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846e53d6-c9d7-44ae-b6b2-2a0fc91711e4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34d667f-09cb-4aea-9d42-ad42bf3855f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4502ef9e-2aeb-491e-b3df-cbfa299aeed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c035fa4-62c6-437c-94cf-cabbb10bb089",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183445ff-0255-47d9-be79-eadcdd995d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec3aa47e-dea4-4638-86b0-a8c3e47e17ac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f8dcff54-603f-41a8-86a7-81442f274ed5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e97b813d-c2e6-4eaf-a10f-a587abe12f43",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a002ba-f90d-4050-a242-22b021f3b7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b5c16ec-f2d0-45d9-9898-7627ef413914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bc7f7c-f108-4118-b0c4-98f2455aafa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ba547b-039b-4bc5-996b-45bcfbcf2daa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "17cbd1bd-f78b-4813-9ed7-d14cd989a655",
            "name": "Positive Testing",
            "item": [
              {
                "id": "be65d081-dd0e-4ea9-bdb8-24878fefcba9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "472f72f6-af61-435f-9061-b732bde35496",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e87cdbf0-99f4-4bc7-94e1-007848c2b7b8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34850419-cd1f-4f67-8559-633e9dc7bf32",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b271a4ef-bb56-4e15-a770-3b84d33746f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d39664c-7dd1-4a31-97de-6f470e0dc68b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "312e7bf2-4873-4458-ae82-1bc4fa1ee583"
            }
          }
        ]
      },
      {
        "id": "5a4dbf81-957b-4faf-b069-6187e862824e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b95c524b-6046-456d-8a6e-ced8e58ff794",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3bd74461-0cb8-4e32-a213-a58cc3c498b9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cc0e72a2-0925-4b90-909b-6f025a21cc83",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66f80ec-f5a2-4c26-8ba5-b7eb1234f448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "515a0738-81da-4c83-a516-a6989aed5fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ab5ce0-eb4a-4436-9390-f94aed6c92ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d80ec30-2530-4665-9d8c-2963c8f434ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eacc74bd-80a9-48a0-8687-f149fd327811",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd3f1a9-ef96-4a3e-9245-834db91704f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca697d8-6bf7-4ff3-8a66-f92d69af36ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfce43a5-5067-4247-a10c-438c328437cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d5cffcc4-cbd2-4167-af32-f7ee50e258f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91495fcb-cbed-47ae-9d83-6aec38937ae3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5919ea04-4b5e-49dc-9074-c9c31cbbc81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c279309-804c-4f43-9996-9fadc4535369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2f79b7-0485-402b-8b38-c90782f6f352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9bf24f2-9a7e-4ff9-81aa-8802256efc04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874b942d-f25b-4be0-96dd-9ea856498d97",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88611945-ccbe-40d3-8aed-c5525a924b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5697499f-f86f-44f3-a116-a09375b9ff32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de1429f-47ef-45e8-a184-3abab47dfb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0885cd8-16dd-43d1-b61d-65060239fba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995e7761-b640-479c-b790-2f8251513baa",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c156836-dbe5-416d-9577-48531dba0d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72359807-a881-4e0e-9e52-4353449440cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86add713-0ee1-4182-b55a-8426ba07ce15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af340108-6426-4a39-8d09-2cafeba01b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4cabe62-eac9-4204-a102-beaffa8d2e9a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19fd199a-7b7d-4113-896f-b43c432788dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac23e42f-453b-4d9b-8ebb-678b19a82cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad69e69f-817e-4cdb-ad6c-498b2d6de532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c2b4709-2a3d-46fd-ae3d-cc88a3785522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba23db46-d389-4a0b-88fb-4b6bf6b0d890",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7106d1e6-9a1e-44b6-993a-d8770da78f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1518efa6-3083-4bf4-8fd5-afe7dc04137f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa241a48-30dc-4812-8e07-fe798cb9cf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4428cf84-ffe4-4aac-85bf-f36649ed3841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670f0483-bfbb-4dd4-bd19-791bd69e4e07",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07981d29-99ca-48fe-b11b-e24caefdd975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb8c785-0a00-4771-9432-5c0b02f64f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377e2fa1-b87a-4d38-bb41-c4344a79265b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9363cd6-1231-4d41-8cac-39d369930196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4a7e05-16c9-4f65-b76f-866c6adfacbe",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbd7ad2-9113-4f8c-a2d2-ec0dd13fd86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dac7f856-dd68-42dd-b8bd-e5b04295e398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8393b6-ae3b-4ea4-bae8-97718b5aa374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "888e730b-4cd5-4ad3-a0e5-669a80a2a0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f94467-2db9-46dd-a608-8c7bf8576bfc",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4de0198-42de-4199-8890-5cf3d6ecda0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c892ce95-912e-444f-9910-512777833531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57177bb9-8563-4f83-bec0-94fc0d20a82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c071246c-9347-449e-b44c-230df055d0c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0cb5051-8a16-4251-abad-e80534382990",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21006f2e-086b-41aa-8024-9ac5988a7219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4bb048e-6c25-4b07-be2f-1a7a912dbbda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1d6c45-a856-4e38-95b3-05a9eae4a140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e48244ea-dec9-4311-a73b-03325f0f701c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1b128c-4350-48a6-b223-acd8eae8a4c6",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118c25d2-aaa2-4da2-bc1a-ad319dce314e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1105c5-bddd-4e7a-82b9-25b2398e88b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511af72f-a25b-4fd3-9696-fbee63604b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a13e295-f9fd-4bf3-9ddd-17f88ff801a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2fad1d-cc78-49a5-9f0e-d8b856f484a5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4c6cd4-7ca3-4c3b-8cd9-9d5b52b4e8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb7bc0c-b780-4831-8d46-4bfeac002bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d9f08d-590a-492c-b987-4ad38c6dce2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "906100a9-7c51-40c4-959a-cdf1d208a737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55921c50-9a64-4fd5-a51d-0b99e11f1d78",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebc33d7-95a5-4cea-9af8-6e3f49b838dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "941a2891-6c1f-4c34-a7b5-4966f03ae71b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbab052-0775-4f16-9dae-74a07c97220f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19e83370-15e1-455d-aaf5-a6290bdc0c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf6125d7-69db-4723-9e4e-d0102a15f8f1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb48244-b287-4ad5-a997-29de933a9b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "913db95f-2a45-4bfd-bb00-f781d727f5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6870c15b-0c64-4427-9edb-abe74ea1c57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e33119ae-97fd-4b2e-aeba-8aac94f40042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cdb758c-2ddf-403b-bc86-fa068afc99fe",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97e2722-9778-4859-ac0f-ea673c308b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3e9897-c3b3-4d82-afc3-3d8b2cd6a251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2584d517-ed30-45f0-a7d3-41886cdbf5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca3335de-0371-4a3b-ad87-f70be419b518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7581d44d-955a-4501-9f30-abb05cd119ca",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be3ce18-ccf0-4d85-af4d-890da783cc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b211d0bd-ac0b-4860-a5d1-30c340367883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6e90d5-65c6-4756-9ce2-98a4a7a4c843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4813e9d-cbd5-4a90-88f3-9de99f81b05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d9af98-0b14-48e4-8ac5-5ee8e76c981c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de3756f-697e-437a-a455-b50087bc4311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c83e567f-eff0-43b9-a85d-c6d4ae9e0c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc2a5a7-7e72-4227-a638-9f4f7afac90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1616fcc1-ec9c-4137-a794-76d4d3b4a2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd9cdf6-e0c7-4473-aff4-87224dc34041",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921dbd8f-8cba-498e-9646-1d6223f1f68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe0ffa2-2418-43e2-a89c-a52675588a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c592b03-5b60-4634-aab3-df1c83325526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf4c0e59-c592-4adf-852a-4cc229e9d585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d230a25-2f1a-405a-a98a-64761d7829fa",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f783361-c5d9-41e2-99bd-6eec78be27c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52484dd3-4f64-4701-bd49-1bc71650ae9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a61276-a678-4d82-bf0d-4a4b80f224ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "369254d4-bdec-4e27-81c8-4d45fcd5ccab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f3b750-921f-4c12-b464-e3193f9e0bad",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f345076-b469-4c21-9923-c00c799ad0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37241cc-4ae3-4697-b3fd-49d191e5f485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d3266b-a512-4050-bba8-cf196789cc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "99209a9d-6665-4413-ab61-adf434dba35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c96ef93-33b7-4c59-8519-986ab82d02cf",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6505c8e-162f-4ad2-8f8c-cdd68d72612b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb95c0bc-bf8a-45a5-a54e-dcdd0ed9a302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc0050e-527a-4d09-85a5-e9213e81c526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "691d5bc9-bae2-4c9e-b195-feb1ca64c489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0dfdba-e65f-4b4a-8f34-d156e6e7b810",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b357613-f6a7-49ee-9a69-20bc79db3fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0002d619-dd48-4725-b726-1bd325f85d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0b6903-21b2-402a-abe0-2eade8f7b980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f27cdc0-e771-47fe-9a70-ea79edc9f5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672819ca-e76d-4a7c-aa5c-b77e47b69e29",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1de1cee-1d7a-493a-acac-c3465aa2b12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771ae4bb-4b70-4ed7-9015-988bae27e1ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4db291e-da11-4b43-b490-689e8583b672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f80c007-7fc6-4978-9c8e-b1ab216dc148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e63049-c7cf-4429-aa95-746e7adb7ac7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed15a5eb-cce5-4c0d-9438-0ff457bdce3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb72cc6-b2c2-47e0-8df4-9edee30d0075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9610108-8b7f-4982-b054-46323ef90fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bfd22b7-619a-4932-a9c9-554ca7561b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b883f9-3a3b-48bc-9005-7a67423bb991",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da6c383-de4b-418d-91c3-ee1339516266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7120d550-7b24-40d4-b4b5-4bfd32a75e72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198e48a1-bf17-405a-9db4-d242eb79f7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b000f9d0-ce3c-49c5-ad6c-a6f9c2bf128a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103633f3-ff30-4525-92c7-a31a6e6ffc08",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c57ce82-8ee0-4c6d-b771-8893d1a90176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57a65554-30ff-4479-b0e2-d8a5320320d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66982aac-e03e-49c2-91ef-df768cf9b26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6d277a6-eca0-4b4b-8be5-f80b6df43813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f41b7d7-50e4-41c1-b4c6-20cba5813784",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5662389-b093-492b-b486-234f24f3637b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a7aa6bb-44ad-4b6b-b568-7c507f1b74e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de934d55-f8e6-4d5a-b405-ad29170c46d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f240a5e9-afca-4519-be00-3dd632344057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1efc21-6033-40dd-a7e2-5d89d808bcf9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4175c02-6a0e-4da7-8ebe-119b4f80aaaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5222c81-faa6-4c88-b21c-486de7cb6007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37620268-b9ec-4c49-8fa7-a5add171be6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "da04c9ce-d724-408d-9016-6786af04b75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9bc692-3302-441d-9ff4-0317753777b9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e26b2b-8692-4620-96f2-d8d419feb57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85718450-592b-42cc-83b9-d3b30e1771c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65303a32-976d-4b37-a7b5-43be01e9d642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "492d5929-183d-48c8-9f9f-2105f2ee9724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f4f837-5453-49e5-b040-71cd01906732",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeede1c9-9542-47f5-a637-3030e1d809ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2119b393-4b94-44b6-acd5-528b96f94c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d135686e-0c42-4eba-bd8d-734465a7e361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "13aee0fd-f86e-42d6-bf3f-6a0e9635500d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb5a189-4364-4fd4-9c11-33b10784a857",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c17afa5-427d-440c-840c-8338870a297c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a51ba7-1b43-4c30-973b-cbfb0c2933bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5de753-d3d1-4252-a551-375a2663af60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "462afd44-5d92-4312-81f0-78818a6445c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38370707-ec85-4dd7-8a67-5d27bedd523e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83901a67-bff7-46ac-9055-57c61ff54635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a32f0066-b86e-4451-9c5c-8109d21abf87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8c2204-993c-4f2f-a699-9aa50438de32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9528cf6e-d673-4463-8591-3251e305c5af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26562f08-3e13-4c40-a1e1-39d19ffc6149",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71602919-0aba-46f2-937d-ee01e47e0009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59a3a855-1622-4534-a600-f945c0d9ba3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa8affd-1c2c-4b03-b960-150a61232f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26828ec2-e355-4e2b-bf40-fe1884bc020f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62748078-4677-4ace-8690-377137c280f6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bebefb-984e-403b-bb1a-f8fdc1a9740e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7091a222-c246-495e-88dd-16706a8176c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db54d9be-8620-4983-8c12-47866e4bfe12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2f129b0e-f3b0-4129-8581-3d2499baa769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6f725c-4321-41a5-a8ac-45461018367e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20967e0-a10d-41d3-be13-acac110ea1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55430784-1268-484a-a37f-c0f8ec2f68ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fa7c42-72ba-43bb-b5b5-173eaa7bd8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34c05473-6f10-4b03-acb6-d14c397dcc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be43b01c-7fb8-42f8-b5c8-72a9b82db150",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49cbe65f-f052-403c-a2bd-7889adebaf5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "171c1990-6482-43e7-bb20-4cca006b7855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d7a0e8-7375-479e-a172-3bbd7ed12493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe76471f-7537-4825-877a-37bcd2c75dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55db1b36-97eb-4a25-986a-ba0bc5845458",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3093f9-1abb-472c-9466-59cf1b298951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4269852-11c0-4725-8131-dcfbd8a3d559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be80ac2-d59c-4476-b414-f95ef843e213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0291b5a-8ca8-460a-a2e2-674adc51cd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2245c591-e70a-4584-b0e8-98298cb81a5d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1f1b86-bd1d-4c08-bd64-c524d68ede30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c51406-b75f-4f0f-aecc-c5706af7e635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69d3d96-9b24-403a-98cf-624282eb1a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "110c3035-9dc7-4601-a180-b6d3007a0541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acc6ef9-f49b-46bc-bda9-7f5a68b9a104",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fabe94f-991a-4f09-a053-cbc49c6457e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b96f2b-d9c3-45ae-894e-ade722e68660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6cfea97-43a9-4388-b846-bfe6652f170f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "808b5673-9b07-4fca-8019-16286e55b5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcad340-2b02-4ffa-8a7a-6c13183ef688",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff9cd79-1051-4b28-af5a-33844590b0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb50bdde-709a-4d2e-a636-5753b0a5a2aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86f54dc-1311-4b4a-a9e3-660d2f264e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef36bbea-5afa-47f2-ac50-a00b2741e7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a548453-4fca-488c-8a88-4d91d190e60c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f019bd8-7ec9-4998-a1ee-a16735fb9d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f8b3faf-f5f1-4d47-978c-e7dde615ae36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9016e97-2ff8-4c1c-996f-3e52847f513d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ea9ea4-5180-4987-8ceb-a0dbb3efa4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77633b6b-b9a0-4c45-9132-95ba3848f333",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f883a0fb-6584-4c71-aeca-c5438df97bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f73b77e-6e24-4bcd-9a84-315290f22f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d69b3a-3839-4fdf-9de4-e3f95765f245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fad0da5-74e2-496c-b1d0-2e84bf3c11a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5f8ebc-c719-463c-b8b2-d6be4a58be23",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe562a37-d53c-44ba-8518-b4442fbc17ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a43aca7-820e-4ca7-8a12-96dd78fb1d05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4540de-b74c-4cc1-a2ca-01a4b1717817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "585cf143-cc03-4d5f-8810-daf6567bd722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5143c468-86cc-4cc7-a216-1343a9f2a078",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c1215b-09ae-4948-bf56-2f25e0542200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c1cbf45-30e7-4407-b94b-81e56ec9fc45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5e88ce-e8fe-4fd8-9319-ab0e9825dfb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "37c878e2-7706-458c-8506-8a3301172913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cb59e0-8607-4d69-84ef-6b36aa6119b9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369d82ab-3154-4492-a1e9-3a3215e3e06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59c26911-7363-4d86-acc7-e209c0d2a542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c6f9bd-accc-4037-9134-986ab055a463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82f1cc76-7b03-4d59-b2c0-2df6d795957c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e90fdb6-ec8c-4cc6-a05f-c96fc9cd8bd4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aace762-69a2-48aa-9070-fe84bd06ac79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1187dd26-56c4-4dd5-be29-13fea3e6fdb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d91880-78b5-49dc-ac68-3ee28c37e35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e716128-4c5a-46a1-9da3-8043a092d0d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04cee09e-81aa-4325-8555-8d71466ccadd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46037f9-4ef9-433d-bd58-a98646171890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0612a17a-1aa9-40e7-a951-602f189191e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5ea52b-8233-4c65-af0e-669d3bbc4854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ceba9f4-5c5f-4833-8062-38877335bd3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbb768c-8491-4201-b07d-b168d22968f0",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c1a60e-e454-408a-99e6-f52d49fcfae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3616b13c-ce31-43a4-a2ea-a799ef35b564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c770013-afe5-42a9-a1a5-c8246d1f94f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "10dff8cb-4a68-4068-827e-9019d88f99f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d84a5c-cc27-4d40-82a3-c995c096bb3a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e996ebc1-e9dc-431f-ab66-201f3d803981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9db7a4-d080-4c05-bed1-e15b9222d803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6a5278-6b71-49ff-bb36-fb9d780560c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "177c4f74-cf2e-4083-9eca-88a536367749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38285abb-471f-4cc1-ae7a-8276bb2e1177",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b190aa05-4e25-4186-ba3b-926c26bfcd50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33dbd07b-405e-4ae9-a748-e65afe96f55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f39d330-ffa8-420d-b87a-da2c52783b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "545843fd-7b64-4e5e-ab0a-5dc0a95d2104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d036e816-7be6-4d52-8c98-4da3296b0bca",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23315c3-94c7-40c3-a312-83a6544e0362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ddf519d-2895-47e8-a7d1-f27305478d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1dcd709-9f73-453e-b524-0cbb38de4e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "053bddab-7bed-4e53-b093-d58a083500ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7d8ee2-65d1-4724-b0ca-2191cb6eac23",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "157d7b8b-4e8a-4d5f-a07e-c854e32af93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ea4f60-a9d7-4c4b-a69c-32343876b3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a149fabc-4e82-49b3-9da2-e04510d4b36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fca890fd-64b8-4bc0-99f4-d29abcd852eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530e57e5-076c-46c6-8d7f-a9ff645d94bd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "927c6ad2-c0b7-40fa-b0a8-5133a6b586bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1062e87d-feba-4262-abc5-60025e0a9886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d151684-6588-458e-b2f8-f40881167b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "926bc6bc-29f3-4d2c-be16-9692e81b7841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df09c27c-87f9-4a8a-bb47-02b858d439d2",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1c742e-caf2-46d3-bfcb-1a2e8f6937e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb79b35-0148-41a8-bcea-66179f5f12ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af90befe-28f6-4bf0-9d1a-f3a56bf4c14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7aa614c-de46-4bcd-9074-47cdd587d595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a017d2a-9439-4c36-8035-348fea6c852a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1f24fe-a572-471c-bb78-2d4532deee13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "935f0bdf-ce0a-4a70-9264-4a446c385456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00a20e0-1d6a-47ae-a7df-7f23de67117a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a35ca0-8ead-467b-b394-0feb4f07437a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb90e6e9-a713-4040-b1be-e612835f8d83",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd20e9ae-bed2-441b-a9e0-a9b33c4e322d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c41b2753-e84f-4ff0-a193-a88aa81a7cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9e579a-304c-4a00-bd36-21eb322ac562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bcd267c0-d82d-4a99-b39e-9660a94d200a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa8487f-7592-466b-9ad2-6b5fd8590687",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fec876c-770c-4dd2-8da7-714d228463f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bde7907-10ca-4666-8083-5e1020cc6836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d404919a-cbdd-4944-be81-4ca8e0294cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b1e0a5c-ff10-4bb1-a9c6-8e46587edd89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56248611-b167-4a63-b932-917454ad6e61",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc00de20-45f7-4d52-8df9-5994e270b277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45fe7371-1093-44b5-8438-bf3b9cbfcb41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4299a52-afb4-404e-8594-67e4322e6e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "60e7b8eb-103f-4c6c-b651-10573c7cfe50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a22972-928f-400f-b7a6-badc292ebdbe",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b1cc83-6ea8-4bb8-86aa-c9179ede8354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb51dfb-80c2-4535-b683-97502a92f30d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d779c72f-bd7d-4b8b-a00a-145c053cf078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "59d45c33-625c-471c-ae39-75cad4e2db45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa4fc11-b727-4719-a961-47539475cba1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5eb000-1195-41cf-94c2-4900a6c64ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c23f6b-6bf6-4317-8d2c-86b249062561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54eb82b1-b3b8-44e7-8d15-c4a056d83b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "540b98ff-a07b-40d3-bfe9-3df987118703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c07df3e-b5cb-48d2-877b-ad5d3c2f3ba6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32137b51-da8c-4794-b250-fcd44259ec89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292f45f5-f2c6-4276-b4b3-0429b9b87868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd8d7f1-c739-4d92-9fef-089d73b8277c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "518a622f-6da1-4d7a-b452-d7966371fe6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8cf4860-4e0c-405f-871d-f79ab3214ba7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3153ef92-211c-4ee0-9642-d47b0909d835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8ada51-1605-44a5-b9a9-95dc13a7a6a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a213c9-249f-4baa-925a-d02203ac14aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "087d0b54-95aa-4163-9552-7cc47c9d664d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134fd5ec-8efa-45aa-be96-36e56f737783",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "647ea748-ed2b-4154-8278-fc63e66c46d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aec9708-5236-485d-a953-b34f20bcd35c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d040649-6d6c-4fe1-970d-31e9c2f99c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "849d21c8-7862-4013-8de5-3faa8454ee99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd9bd2e-b33e-4011-99f5-cb21cb2fb06b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35038e9-cf4a-4914-9e05-5d66378a3b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64eeb38f-29ee-4bc4-8f2b-4c4d77dbfe02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20961a45-16be-4b83-8721-f184ac38e076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e03aac73-3101-4b60-a0a0-6f53fa03f145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a3d51e-fa83-4154-a3f9-121410e452d5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8735c719-8b15-4cde-aca0-ddb0d8d34955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d13d88-66f7-413d-b6e3-3a0f499e8181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6d3926-d6ef-41f8-86a6-5385e5b88e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c7304fc-b7ee-4368-8be8-ff2f7836fd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68cc8a3-a465-43cd-bd8b-578e5b1963b8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39863d78-114a-46e7-a5c7-7be0125b4b13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f35ba0-8494-42c5-846f-555d02ac3de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dcf7a98-a98c-47ce-81cc-2c6c7d50d144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3fcc2b7d-7fdf-4333-b04d-3b22073d77bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce18926-fffd-4e46-b08a-c8f8c933e0ca",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20c5671-a145-4e37-a54b-f4691b799848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e0e6804-b425-486b-8ba0-64750d4c1e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e370ba-2c83-4b64-9edd-ece373cd3189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "21c2648e-8918-49e0-ac3c-b9b083cc7d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e293975b-68a3-4f7b-bad2-c69fdd36b568",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "047ce50e-0872-4472-a393-69f56c50c63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a8e779-9f60-446e-81ff-b30743f66d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4688bee5-8ef3-4746-98f4-bcd05693bab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe58f55-0176-4d29-b0d9-44b59e57de47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd7fc37-9d0b-4c50-acf9-35c85f9d8adc",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853502c3-f2f5-42de-9ff5-0ac85dee99a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b8d431-a85c-406c-a46f-8189a2b2f797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd336b7c-8d14-4030-a6be-1be591b8bd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84fad293-0f76-4db1-a4e2-48434561e756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41116009-aeda-4ac4-9e28-72219255ab83",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dfbfdf5-dcf3-4955-be79-4fbedf9d84f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1dd27e0-0183-467c-9320-c6fcff4b02a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "099f196d-e903-4e8b-93a2-c00339303813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b701a25-296a-4556-a92e-c9b7b37e68c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143d5299-1ec3-47ac-b07d-f5783465cf63",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d08506-18c6-4fc6-9750-e9086db8a917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc3fd56-7b96-408b-9cae-1c297e45ff06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ce1d42-fc33-4a0e-b0db-9bb5c5ef8aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e2c6640-c3ff-4172-8e47-82d2c47c67e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12117342-05d0-4a88-9842-163739b2aac6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4cb560-fe2c-46a6-bc4a-935466dc960b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "883c76b6-6347-4543-965a-9095da0124cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922a5838-2561-4522-aca7-bb3c41a246c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d366b52-c858-4a20-952c-499c0d50618d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea2c3e5-b81c-4d86-8f7b-e6010d9b3dc1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12aacc03-45fe-4d09-b7d4-fb8fc96efef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62056812-803d-4041-8f7e-ea40d01ca9a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6a57e4-f0b4-44db-8555-97504b2ed140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d438c687-f673-417a-bb1f-e7410fefc16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b331065-8ccf-4a18-b76c-6bde6af59b43",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e632d659-f142-4dfc-bbf6-09c0a9332afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92bb0d18-cb2e-4cd3-829f-e2ed722b4eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21babd3-55bd-4b6a-b2de-4dfb8160dfac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1753111b-84b9-49d4-9e09-a6fbf6c384a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ed2f94-6c70-4e64-9911-41514db0a1b7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f35ad3-8ef4-4829-969c-4733585532a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480afd35-e67f-4c75-9999-a4afdee51f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f39078-bbb9-42fe-9f74-58d20b4e65de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b652cdb5-69ca-4e46-b17a-b3dca77be941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cff0cf-54e4-4d45-8616-4aed9c871611",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df7b003-3016-45c8-ac94-5fcb700a0f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205b92ea-313b-4f80-a4ff-13347b8a8cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b0216d-efbd-4d13-a210-48987cd41673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55022c6f-67dc-44e3-b253-39d13eb654b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edeb6eb0-1004-44be-85a7-547bf86fa625",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef141938-48ab-43a3-a0c7-8b44b42d355e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0630eca-55e8-4d44-bf6c-7f139ce6c96a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6386bc-469e-46ed-8daa-a9e663591f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1ecd688-4141-4d51-9db0-df2c932f6f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4c8d65-cf29-466e-a73e-a5ccbc50e015",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a576587-5b73-4016-b59a-73d366c078bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b0c0f4-5d14-46aa-ae6a-d56199aa45d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a4f0a59-403e-462a-9bb3-1c7c5cc80a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfd2397c-baa6-4499-a47c-8d43786f4534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9568fc0-2417-476a-925a-9f5e67107d07",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f200a8a6-4677-45be-8a11-9bfd5b65b462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44514fef-e3a9-4f17-9aac-e64a519d97d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1e9fe2-2983-4297-b28a-8f92e8b46ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "db4f1bdd-7511-4c31-87a2-b28b448f9974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acf4677-6e17-41a7-907c-e4227a358c6f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f265e00f-8d6c-4d00-b58c-7ebd963fc42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2c946f7-2ccd-4853-99e8-7a101fdb47da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e605d112-f9e8-4bd4-8333-842df8110f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c24e7e8-1742-4a03-8fc5-d259a475b3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb3020c-0acd-4649-b26b-50b2e417eda2",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb06be96-862f-4532-861b-2cdb1369edb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d608aa-842c-444b-bb63-2b421e607f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4d8467-d4d4-4ca0-b072-fca4009cabc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3d74ae-deb0-4475-a5e4-27960715e7c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aba916e-0805-4157-8dca-90e1701cee40",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c561fe44-42ed-44c9-9d6a-c8507f93e9a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27bf3de4-5a6c-406f-b236-3b2acfa6d240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4445fc26-b6be-429e-a053-0791fc7302df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f94e60e-540a-472a-abf3-56072be7624c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809b7725-aa68-4254-a8d9-c3f1973feeeb",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215d83e1-c88b-4b3c-a01b-df1d2a20dfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e23c20b-830d-4a5e-8029-9b1d6e491571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce824f5d-b265-4291-a3f6-ee1b89e16b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "52746778-50b9-4436-992a-1eecd332b982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24c530f-1196-4e7b-a4bd-bf89f0f71ea4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a9dc16-4388-4f62-a31e-ca391130678c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "669fd8af-c823-463d-bfd4-8ef735cf1249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008ac2c3-1819-4b13-bf13-31f1861360dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4511a3ce-28de-4e55-aee5-5c2e18d9dd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d94c3b-c349-4721-8429-bb65460df479",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81dac1f1-294c-48f1-9735-9ca9b7271a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4735dd2-8556-40fd-99e1-800ed6dff45a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4cdf3d-b211-4553-a38c-4a0b6f9c0adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "46021946-f854-44c7-8b6c-92de8a458f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32d24d9-0a34-4376-a67b-b86e04002736",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c0ae38-d372-4d2f-ac4c-2c7516dc83a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c85ed517-0e75-4500-88ab-f6b02a8c7699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5fbf985-2ae6-44db-a891-4e68cc631c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee7242b7-1cae-427d-a860-db776497cea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbbb59b-f15d-4c47-b738-e090fa8f525a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b2e1f7-8702-4d5b-8cfc-f500b81f43cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e9d9f9-34e8-4c69-8ed4-1d8e6eb4280d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3661af-3f96-495c-aedd-10eda395cbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "72648d54-2e4e-44f9-b363-8213aff65e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c3346f-6cdf-4039-9b87-d3038e25ca9c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8143d811-04c5-4889-bc40-048f1356b077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17eba79-0997-416e-99a4-dec8191e060a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b5ec82-5c06-4091-90f4-1a462a16554e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a08defdc-cf2e-4bfa-88dd-04b6a4017a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc1d497-205a-49c1-afd7-66d9b900f88a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d21913-c4db-4495-b84b-eaa776ba7801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "427d743d-857c-4ec2-a091-65b05bd5ed54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e034b9fb-64ab-4cc3-8860-c98b97540166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2704f049-5ee7-40f3-b577-9e83683fd4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a277f86-cbf7-452b-9316-f02c12179b2a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe24be0b-a634-4cad-a397-2318074a3c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85eedf3-f1fc-4c0d-95ab-8811e999b1a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43067a27-a3a9-4e66-a008-ff15c356c453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd5746ed-a510-4f10-aeaf-4a293591eaf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84014dbc-a57b-4c7a-bf77-1644d3c59d68",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afa299f-842b-44ff-9c1c-8a959e87604e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "34465d69-cfbb-4abc-a1a9-360a8fb7ac0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7961852-5d40-4389-a5c2-6171aa7d6757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f02b4ad-b902-4c87-937a-d5449761b01a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "163fe581-602f-41bb-8096-215f3b6042aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d9f3ac6-ee7a-43c1-b7e4-9be79ff64668",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24954398-81d4-4bc8-a68e-e4732341e8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ccdb8114-24e5-4cb6-add2-4564245d91b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c8c6ca-29fb-45eb-a7ef-824ddf860177",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4422f0b1-5208-4e80-8558-6cbc58df7104"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9471ae7-c760-4ca7-b41b-cd08efed805d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76a21458-87d2-4f37-99c1-cf0b078a3e80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b2c33d3-570e-4ae4-b125-1de32df10b9c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58421d99-e5eb-481d-b97a-c4c2b1f748cc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "652a5730-604a-4e03-a391-2e9cf9210e0d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c644a272-0106-4397-a087-1c14c6b2a405"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c0312afc-e034-40e2-b5cd-181380a453a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d456c3ee-6979-448b-8982-f3cc49d47df1"
                }
              }
            ]
          },
          {
            "id": "4439005c-b987-452e-982e-68db7c545944",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0267d5e1-ed32-4448-a934-1e101ddb6fd4",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "9cee3c00-d48d-4795-a944-b3b96cc7481a",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b0a709-c520-404a-9e85-b28baee6b934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c1be0a47-b406-4019-9da5-6d86dce1682d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ff4df0-569f-4e22-a70a-ddd87e8d3ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ada89bd-7952-4dac-af89-7c7ce3e90b55"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3f7a4b10-a27e-4a6e-b5a5-fca45a647446",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffa3e65c-9091-4b08-9ee0-569b93e7f001",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "567de447-7345-4ec1-abed-4aca84cf015b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "781b271c-0965-4ca0-b0e3-fff7ec2dc251",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b360f8dc-7d9f-47be-a1f7-d74c445a7ba1"
                    }
                  }
                ]
              },
              {
                "id": "91a7c87b-215b-4ded-b50e-89b4a09b3897",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d775a004-734f-463e-8fe6-5b0737e5ab6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "09385940-9d5d-4d97-a581-fa505dd3c001"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00387cfc-151e-4232-bc6b-b9a5efbdbd30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d8124bc6-825f-4580-899f-e4cfb537b6be"
                    }
                  }
                ]
              },
              {
                "id": "4224f6eb-9547-46c2-9eee-23c6680546cb",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bb67d75-a69f-4fcb-b1d9-0b774af3854e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bf84021-bbcf-4867-ac50-cc74c534fcbb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a1d151c-4a8c-4d20-a320-9bec2bb9619f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "573e8d57-938d-45e2-b2e8-4505a2b957cd"
                    }
                  }
                ]
              },
              {
                "id": "eb3e4f63-2ba0-4d10-8778-9d8531e51e30",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e289f2a-c5fb-4dc3-a936-b3322c99aa46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc5b9173-e0d9-4344-a300-fc2a18812171"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a279af4f-b30a-4843-b557-4330ca0a1f77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f1869f3e-650e-43e7-8dfd-442a98b3ce3d"
                    }
                  }
                ]
              },
              {
                "id": "fd1516ab-ab0c-499f-ae52-d4437d194131",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae7d79b1-cea7-45e3-af19-0b8db8fe7d8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "520d258a-2d95-47e9-b1d4-0ac1ea870849"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b98bcce-a098-43eb-922f-b4e193d9465d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "23440cb8-bc57-441f-983f-cbb8f78d5d17"
                    }
                  }
                ]
              },
              {
                "id": "d9b40dfd-38cb-4dff-add4-f215685d9fdd",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b948bf26-285d-4aa3-b5d7-9c6010f76ff6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78b3565e-7acd-4a23-86a3-ea9e70f58c1d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f236eea-e475-4bee-a8ef-1e91d79e7a95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "64b088da-91d7-4ec4-b009-82fb4ea5822d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e8d44e01-f784-494a-827c-f24660ec8e50",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef9f4f64-e54f-4aa0-816e-7db769c85e7a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c3276c5a-e898-4032-b643-f5e338e51e16",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3679759e-9d33-4ad6-8a55-92c8930d09d3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1962c7b1-48fd-4a53-8efe-5142e7ae7bdd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5d29070f-8f08-4cff-b639-fb030e987765"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2548f7c7-928c-447d-b4ec-9fa7e7d6dda5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fca662ad-76f1-4fd1-b62c-f56bdda56f27"
            }
          }
        ]
      },
      {
        "id": "81b975ec-0530-4452-bbdc-a6234d7244b1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "72cc0e37-67be-440d-a998-bfe1d2249f35",
            "name": "Negative Testing",
            "item": [
              {
                "id": "22c03dea-a566-45e2-8d19-d9106e9dd831",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "17b77b5c-4e6e-406b-9baf-86d67a3390a6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4396721-64ef-4b1d-bf76-abcdcf9c45fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be1d140-a03f-4139-a5c8-9b1665ea15da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5067fb9-7c47-43dd-bf5c-c2f581c04cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe629f62-77bd-4a5c-8525-8562abceb348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4adae0ee-fca9-4154-8063-eb440793c522",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5353bf-1179-47ea-a1d0-66543e655906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841f3856-7727-4cfc-b390-3c973503eb78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70cdbded-910f-4271-8be9-3149e268e045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "86eeaf48-0a44-4b18-8740-302cf8045dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d34c78-7f27-42da-8b41-fec2db7b538a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f0aa21-2885-4100-859e-da289cee5cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb81b5f1-7360-40a9-b983-25f61b07dc98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0e0224-9ac2-4dcd-8055-d6a6d29e98da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9435edbf-f538-45c6-917d-0b7e26f21e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f63c005-5c0b-41e2-bab5-38cb82db53d8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5697d808-c907-442e-8d93-1bbd86f455c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe8c4230-3a75-4be7-b303-d2a15a2125ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c9f2e3-696b-493b-acdf-cf10d50ff517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "79702658-0441-49cd-a142-4fb1caeed975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e3066b-76f4-4e97-ad6a-acdcebd0b28b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b787f365-ca11-4f53-a408-c7932d4294e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce63fb2c-e20a-436e-a735-f33e9ce8fbcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82d598f-8621-4f46-9dd5-a35a88c6874d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6723b68-8dcf-4804-9c4f-71ed6c9f12e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7e1a77-75b7-4060-924e-63af2f50fb8b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720fbdc1-c7d3-4e8e-964f-76d044e41063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e658ae-b20a-4fd2-8f28-4655fed07c89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c6b7b3-d88b-473a-9284-b2e01f93ba1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e11d78a7-137e-4bc1-a08f-1b8afa31f9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e4f508-e261-44f3-b0ee-041bcb0ec5dd",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ec00b8-68de-4363-9557-9ceb90f3dc26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc7938be-cdd8-4b55-bfce-2fa58799b6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb1e840-470a-4996-b847-01166bbacd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c47c3fa-a940-4cda-b15e-6a91894c300a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f6836b-8fee-4965-91e1-3d4ac4fc83b7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5052ab5-cbb0-4afb-8af4-426934fb4d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc36d5b8-f867-4540-b436-07538b6c0906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2797dfc9-a606-4d8e-b0d0-5bcadf16b526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e189c81-8ea7-41c0-845e-283d87f84110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a78201-7157-4a2d-83a7-a821e05623c7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a43797c-4ffb-444a-8e31-f84c8c76a3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd86362e-bad1-49b6-aa2c-de0f1e6a66ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14653a0a-a7f9-4653-86ad-9d1771438562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be92180d-c97b-445c-bf3d-ff517f991cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad7667e-5649-4ffd-a041-31eabf430449",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd90e67-e560-425b-92af-810985225adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2217590-2ec7-416e-a40e-d1e564ee047a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e7bc07-e754-4b01-b8ad-c17eca55e146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "173404b6-b106-4fa1-9833-465a0596cd99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013108fc-6050-4de1-973b-a362a7e7c347",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "651dcdba-3d8d-4ae8-ac8a-23b090e53bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e3775b-060a-4648-8c31-e0146fae4a8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a00e22d-f469-49b2-a4f1-fab0d5ec13a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b5b7af5d-da6f-45f3-b444-47f353d31df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63db402-49f2-4f31-9240-905fa2535e80",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a878b1c4-55b2-4e30-9fd0-8d1516eddadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e4d4c2-1df8-490a-9ec8-33690273c421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742eacd6-ff40-4fd3-a5c8-baaacd7b341a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e06d02b-b9bc-4c51-a277-d31e2fe12a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57361207-089e-4829-be8f-1d4466a8a339",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f75ba2a8-e40f-4b86-89a8-9ebdb686c6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18004d33-d2ee-4c63-8bf8-5863cd9955dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8c2e62-639d-47cd-ac41-61e180d28b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be4de7a8-c637-4761-8bc8-cbc469076dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af34f1cd-4e39-449d-8aed-0dd03d2b0d9a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61c06f1-6aa2-4928-9d81-d654bfd6f8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c56fe08-6c25-41fc-82ef-4cf1983507a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed938ec-646d-41cf-8ceb-ff475d032bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "154135c4-780b-44f9-ba8f-92f842ce2a85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37780526-b524-46ac-836d-10ca3dee97c9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0bf160-36e6-4454-9484-5d4758ee53c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17511449-bf4a-47dc-874f-91d1c31db7de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd55e8d-ab65-4ca0-8868-e8234e0ec8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1409828c-2a9d-4dca-854e-05c5d4475248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07b8888-50d0-484c-a2dc-de49b8153ff9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06af3d4c-4dd4-45b6-ac25-3ae8efb80290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba54425-6040-465f-845a-a9fe2b3d08d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547f17e6-9b00-4580-9cf8-a7cb2d0ac7aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4733e503-3189-4434-b577-6a57fe231773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ad4e35-f1f5-4f27-9780-958a0e53c784",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4e157c-8084-419e-a58d-318814d97920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49efed4-496d-4c5f-bb53-452928ff8023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e82ce2-fe48-44db-b604-0e6b4a5ddb98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfaf4d9b-54b4-4a17-84cd-7320e55fe527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d01fbf8-e556-4a6c-9452-b54b70a1dc83",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2fb0a29-d3e2-45ec-91e6-8a7e07de3663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5040f9d6-ec1e-43a9-b0c0-9c770cff5ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826eb7a0-3cac-4fb8-8bff-2f4704a05940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2be4b48-3d69-4e19-997a-411ec050df81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91566c1a-9757-4c5b-a76f-c0154a7ba573",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a5800d-c6af-48d1-96af-f5f0d3d0338b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ac45438-a23e-4d1a-9f33-731949dd78c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2597408-5d47-4bf4-b8c4-742bcfafb153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7380ef0f-cfd0-4edf-904e-99d8e16880dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f563d054-12aa-4a84-9a94-d0952f57ea30",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "056e1b1d-1652-4777-8cf9-934d3180bdce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b3a04c-f87a-4704-a94a-704775b28481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de681a8d-88a3-49ef-8fe1-7c4ca9f0142b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e54a1ef1-c5eb-4162-aa77-7ea8f568ff3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e0c6ac-3d48-4bef-9cb8-630253839d4f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea76563c-f537-49aa-b3ec-0f5464e94b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6736d59e-315a-4b1f-8364-13359b0bc819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6f7ea7-bc12-4079-9f5b-ff24dbce690a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a045fbd6-9601-4766-9bf2-6d1d5256ee47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750a4bae-cafa-4090-ab70-901f4c3773eb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c084bd6-8eb8-4483-9f09-91552537e7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab403e5f-f4da-4e02-929e-27f6ae5c3936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293e6ce3-a76c-416a-b533-a1e8443c23d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a863a775-d6d3-4e06-b82d-fde9f5cf13b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b975cb-ba31-4317-8366-f95f2e54755f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "258c253c-128f-4a4d-a0ec-77a57f0140bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf8956b-060a-4909-90d2-0224e538ef07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8879d42-0fec-4724-a5f4-5d29048614dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9d7ce3b-3c6e-44f7-b83b-665542206fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341a777b-b28a-4787-bbfc-8314b43c37d6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71341ae8-6d6e-4f5f-af54-4132daf1b03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5092376-3faa-4cad-b750-428e2ac3ce61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "384f23a5-c236-442f-9923-d102421800ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c26db658-d5bd-4354-b142-717cd1a7cc90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e5c5dc-2de3-41d0-87ba-a8f15b0e5beb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b68e0f-bc11-4870-b12e-2c1c7a406c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c88678-6f1a-4f7a-b5d1-2be5d19fc8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883beff0-516e-4464-8c23-e9f8764aa42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14eba4dc-5410-4067-b3b5-074175d7d8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f25411-45c5-4a9c-bb6e-ae2fc2802488",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ab2e31-a6cc-40d5-8326-a57275031782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c83e419-249e-414d-8200-101b56649712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2722ad7-1325-4c34-ad22-9186bbe5930b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce6b0771-30f8-44bd-b758-777f8fd24f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe46e2f-1f1e-4319-abda-cd983bcf2dfd",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4d8cbb-613d-4d03-a4ce-531608d06374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859ab138-8cef-4cf5-9546-3a898a4127e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef9bd1c-eb36-41f0-a10c-cba64cb9f756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b66c8a5-5e99-4b10-8e6f-4f7da9138723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35a39d1-2f24-45d8-918a-7bc07f368959",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643be48b-ac85-4d49-820a-2fa7f261a9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10e3b629-91c0-498a-b526-c20c127d0f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f341ecb5-d998-4bea-bff1-a78ace16faa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ad9c258-7b36-4023-b774-98b8cd15eee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f05225-970b-4e06-9e5b-86bc69992421",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf802056-8598-4f4c-9811-ac2f3636a83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81993ec3-448b-434a-bf58-8d5714c240fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808d16da-f603-4738-8e7b-d7e7c0673097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51ef2817-28a7-4179-950a-b9def063083e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5330a23e-5020-4169-b9a0-8a463473df54",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1524e4-e1da-4ac3-b3b9-347e865ed631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c4ca07-626e-4c70-8a31-50a7a25179d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2c6a8b-9da5-4d99-902d-f6e0ae4430aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "609b1830-bd18-4e6e-85d2-d7d3525b309d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4287fb1c-005e-4aea-ba5c-4a08b436e298",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3685c38c-4cb2-4055-9dc7-f2758f0037fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04cb6aac-2e85-409f-bc20-68333f873512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e5c1ab-fcb8-415c-b914-1184eb75cf99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c61a3f5-9dc3-4448-a1ef-c438b8182b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575cb518-2435-4dbd-9fb1-a3998b4daab6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71c8e51-a5e4-490c-b402-9edf71fa0f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663c0d97-9483-4b54-9b7d-ff0fe131e471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8496dfb3-d7a8-457c-9935-a5c5a674e0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f59b8818-34cc-4347-89c4-f17b91cb008b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8c2d5adb-490f-43b5-a244-052434efd589",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "63e345e8-90c4-4b10-bcb5-7b4efd856ac2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d29015a-e9e9-46a6-8ab9-bed7f8f171e5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "029a403e-2e23-43dd-90af-b73057ce1fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89727cb2-e6b3-4652-af50-9245f7457e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83ae8f97-8dfb-4bc4-9fba-5d0c8dda520a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96fa8951-5ea2-4542-9b73-6b6c04b32cf7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d1e0bfd-c2a8-4f31-affd-bcb9bf8e4d3e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0374ba6-8f6c-48a7-abf0-64c7ef15732d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80ee88df-9c9a-48cc-83bd-6a6356c8bcaa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95360b93-8e53-4e7f-8b34-6eddef33c0c9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "817985bb-eea9-4450-a313-777944fda2dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa8147f0-9ffe-467c-a425-e7a3aa255e85",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c02f030d-5d55-4998-a7af-2741fd50cb20"
            }
          }
        ]
      },
      {
        "id": "69fb4e6f-26e9-4a49-9e5e-ec64c959505d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "0dd1b4c0-c834-4c05-b23e-9cee5108d390",
            "name": "Negative Testing",
            "item": [
              {
                "id": "979bfe12-58bd-4d10-b7bc-7f3c6aa88020",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "51b57953-6e8d-4e7d-8427-a95dd6866e1b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a8b5c5-7d86-4733-8caf-8460ae2990b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e543bd24-061d-4eec-8042-9afd3f70c6f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca37c0d6-e7a1-4490-a8b5-ab091766de0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3936aedb-1460-4792-b578-a6cfbc31f81f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c87b8f7e-9871-46dd-9a7d-2c347c1486ba",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a6062e-8439-482c-91ed-a4da6f0c5755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd4eab31-73aa-4280-a956-6a6b339c383f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c2be6d-4aeb-44fb-b8bd-2f79de1b156c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e80283-8dd6-4096-a8e7-374c96a0a7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4baccc5-226d-4db2-84b1-6b7fe8c0e0d2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "152b3d8d-0c77-4bcd-a6af-b6527bd04232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3262607-0bb8-48e2-ad3a-69ee7e5c55ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada83702-a9f9-4523-af2a-63372024cdbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f16d706e-a51d-4c33-8054-bd94c322da8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e9054b-7eec-4efc-99be-fd234751a35d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324c7913-ba92-48a3-bb91-cd848a18c519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c5b21a-7b8d-433d-b51d-0d71631f626c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631c00a2-91b0-45b7-ae22-65d20aaeece9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec122aa-3118-4183-b531-3bbb9361b78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e5803d-d82b-4b1c-8c10-cd925d10472b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a9b18d-0846-4261-9331-2b442ab00f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6eaaf43-352e-4660-95fc-3194e4ed8b87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77dde2b4-5795-4375-bfc5-e3d6badd8197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a02c58e-0667-4b13-b4b3-e70bc2ee3351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85fe4286-2ae0-462c-8ccf-0194871568ca",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e874ca86-4970-4e2e-96ce-da52cc4c9e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31da1fd1-c16c-43a9-a85c-9d6693b7ab85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f0794e-d80a-4504-a5e1-4dd7957371ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3fb3c9-01d5-4e55-b2d5-568ccd6eb34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714de390-5f54-4b13-bfa3-62e95ee10416",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9150ebc0-7020-4172-9756-2a3f8a172566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28084f9-6392-4b23-a5e8-26f52cc4cb51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c02d3a-170e-4fb7-b211-d1cd885b68ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "12beea8c-71e6-47ef-98fd-10444ae8c4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2b93a2-a5f4-407b-9481-b8200c36f1f4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6073bc-2318-4686-be79-fe98dd6c1b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d547c9-773d-47fb-af61-d4213456ee4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06aae6cb-a470-4ae6-9fca-d94643fd9339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd487df3-2f30-45d5-8861-b828e977b2b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f423fd05-0983-452e-a680-e10a3f37d76c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80881146-c8de-4e39-8774-5b102f524ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ee4608e-5081-41c0-bc50-eef899f3f62b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566583d6-864a-4461-b5ed-4e28dcdd4f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "328c0002-1ac4-4269-9583-f77ff0a322a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38da87b6-d028-4887-9b48-812b3bca15c3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816d7aa1-e03e-42be-9ed8-a8fecc761d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e17757-dab5-42ed-ba37-1a1cc94f541e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929b5725-bd37-48b7-8634-5297ad959c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79a85fd0-9010-4806-a905-1db98676ccc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8184348d-647d-4ad0-9a3d-f0b1838cb4ed",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbc17bb-54e9-4d84-9d8a-abb8532a986d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c326df-148e-4640-89dc-e0d4ee1eb6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55732028-976a-4937-8fe2-58f31c2d8b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3f6880-8342-4e54-bd2d-e9a4fa3bd7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296888ce-a3f0-45aa-a463-462fa1afc3bf",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50ea460-6879-4d10-bfd4-bc853dad5a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18eb0dc3-6a25-4af2-9e4f-e72f4cbd9e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5279fb2-34c7-4cbe-8852-7e11f1b48eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d84fe74-ba22-4a18-9119-1af428dd1e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6aae2c-910d-4907-bd5d-e288ac614ab6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d254ef98-5792-4aef-ac97-61b53c9ca125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caee2baf-14f1-4584-9c4b-d37ef26ae608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5c0b599-925f-4a78-9733-8cbd20ccc050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "905e6147-5293-40eb-89d2-987ae716042f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba40ae2d-9622-4bfa-bf63-e4cc0e6dd9b6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f82e24-65ee-4ce1-8d55-84263b917ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06896b49-f155-4ad5-9de2-039d1459e850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0cc1e7-64c4-46f2-a252-da4a273490eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6b108cc-fc21-4273-b472-fc88b041cdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98dab53-880b-46e1-9b44-7a9c6e61c9eb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265d7a57-190b-413b-ae96-3ea66313895b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "195ee22e-6b0b-4981-a7b8-79b10eb30ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5132357a-cc75-49aa-8847-ad9ef61a407b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b446ada-d46f-4234-8cc8-678a3e91206d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f53517-6e40-4fc4-beca-d07d5342ce71",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3806a703-61ba-40ea-bd45-133fb807213b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1db41fee-d241-4ff3-bde8-a21d38fdc3f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc28a78-1367-41ad-8888-d3fc01a4236d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb6ccf69-5dca-4684-b5d6-8213cf3d42c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c12c96-dbf6-48aa-9275-6c1a42dda447",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ed5318-e6c4-4369-a4e5-51d46e40431e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a42b93-5946-49c3-9abb-b84704d94d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3226c1-79a2-480e-9ac5-b4935831709d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0663cb1d-c34a-484d-b996-47349a0b6126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f73a81-e47d-4f71-9bfe-5f7c5096a59c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6612da45-5bfe-449a-b4b2-94943252e3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e0ff799-4588-49f8-a744-34bc03e21ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605f8c44-bf87-48f2-93d7-bf87cb738642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4988fc6-d1d2-40bc-98ef-b342b4c39e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7024743-f599-45a3-ab81-cb7ee9a5aaba",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5f04b6-6013-49e2-9607-9bd6b1d9284b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2530c8-21bb-421b-b9be-4def8ea572a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a07fcf-f889-44bf-af0d-cb7ec8692cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "405e78eb-b791-489b-938b-6caa1dc6e8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68db8506-606a-455b-b92f-086f82d34903",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5a1b4a-ec77-4738-9d42-662616487ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc156bfa-8618-40ce-9623-adfc1122ef9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4382c15-029e-40cf-b6ed-b3ad052321bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43f2b6d4-52ba-4b3a-9a80-98b95699e871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de80b721-7f0d-4e77-bb37-7f3ed4e0c37b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c7060a-68fe-4a40-9a21-974fc9d962e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155a6807-4aea-4e9f-a27a-fce1fe1723ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ca5075-aa29-43c8-8a4c-be70629e34e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5201fb5d-7fc9-448b-8ad0-4849d0d70a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e966120e-6946-4704-8f89-952b96f4e32d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97fd242-6ba1-4216-9550-af1620c3d564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591aaebf-3fbd-412f-a947-9170e4fed16f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ab1c99-04b3-4d90-8c20-1cb5487581c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11112636-b012-49b9-b03e-c67c529b9385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f0c6eb-cf07-4bb3-b6e3-9187305492d5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6671127b-80e9-48b6-b0c0-54ab37997f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47456cee-04ba-4cc3-bd44-93ec6c74df52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7599c519-fe36-4cfb-9baf-ed1da8bde793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b92007-65bc-4a7c-a774-689adff6d736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a3d4210-8503-4a46-ad52-1cc0e1874202",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a9e6f3-fb2d-4474-91f4-2803d7398e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a60e3e-f35d-42aa-8b37-a1ff883ad1a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3852d9d3-6a7a-47a4-897a-df82dfff74fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a73b1d02-e57b-47c1-8cd4-302fa572d45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c20b81-a168-418b-9526-87b4bd6e4dd6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a4ce26-a4ca-47eb-9ca6-1ad5040a2146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7abbc0c3-ee08-4a89-b5b8-62065edf3cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1af3f1c-a01d-4060-b6e8-f459358c51d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d123a5-833e-4a89-ac3d-4f7435cb754f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849e6f7b-e7b1-42a6-a37e-a1f63268a5c8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68de6b6b-45b1-463d-b57a-ea8f7685cda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd2c4bf-30bb-49fe-b4fb-20e51ee9030f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4ae191-dda6-4849-844c-cf4e2aefc66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "247130d9-493f-4347-89e4-9f734dd184cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1814457e-81b3-4c9d-9d7b-d83d52d88a52",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f4fc4f-e9eb-44af-9bba-ea8b48ebf61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec05acdd-368c-4fdc-be12-7630ccfe088e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65ecc6f-a4f8-4e27-8643-ba48648c57ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d8711e4-c2ae-47fa-b48e-8d3ef7a498b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99f47be-a378-4487-8e41-7aa17a0ab13c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db98d713-09a8-4a21-9da0-f41b873ac67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1af47846-72ee-4666-bf98-c1dfaf05d62a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e652048e-68f1-426d-a772-032b17399d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e457f9b-ba61-495f-af85-a0875c524895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ea7f4b-f475-4e40-910c-4b332816c581",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15c6b51-9d95-49fa-8d3d-a7dc9400e040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80216d5d-225b-4f4a-9dc2-2a28ef29b41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2125f32a-7291-42d9-915a-4dcfa761fcf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aaa5056-7e54-48c4-b9df-eb850817f5f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7284ac75-2ebb-47e5-bf93-a43e0d2f4bc4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4869504-251a-4abc-b715-318eacf80759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ddcfaf-a63f-4e32-b45e-821b252771a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f9ac3f-c4b0-496a-b1bc-01eccad0dab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adbcb2f3-9b7f-4c52-aef5-ad1d21673e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff337610-b135-4853-b8da-6a15370d885b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faea5eb-edd5-4f75-89c4-15c67ff74db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6a13f75-9851-4a2b-9d2f-da1452a5858c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae4371d-3834-4a6d-9d94-009cfa4a0ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee465278-b0a3-43f7-9105-90ea4d768261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebfba573-e1d4-424a-b055-06d0f2e23030",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25394984-c4e7-467a-b424-6c102721903b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c961f2a8-2512-4555-aec6-55f48e7a9cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e526d795-fa1a-4ffe-80e6-4d68543d9692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28ae049b-ae4f-4d9b-9e7d-d3353e4df199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc49ef4e-f7d1-4223-a7d3-9861af9e27d9",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0014293-09b0-4695-9c51-de819eb21d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0e13a0-7149-40dd-8ef4-4eda95185a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a81fe5-ee97-42d6-b40e-04c6456cdaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90396b65-9111-488e-afa6-fbd8b2170646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b71ea8e-c7f9-4976-a268-b4b7ae226b56",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "402d05be-13c1-454a-bb15-6b4aafd84543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a774d10-58c3-4de9-88ca-19ee7784cc8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5332aada-efd7-4c57-ae38-82d4ddf97658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c55a122-61af-42b4-89a0-31b3afe0c73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320c8ec7-4016-4326-9f4c-898ded71e743",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fbd321-57c1-46e3-84ac-5c8c174d6dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e96d74-ad1d-4d7e-b37d-6690b9ace5ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5f7e4f-e3db-48b2-a57e-ffd97b48c9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "109b58a7-7531-40a2-97cb-8e815227f2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d217cb-592c-44dd-9b37-732cd6b49ef4",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b992e5e1-89dc-46f2-920f-1e9750651195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7104fb21-8ce7-4695-938a-3b90e735196f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a264011-44b8-4f96-9401-ff5c6595217a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d8bfbb-43bd-4cac-b60f-dd4d84ad2cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec91d8f-1705-496c-9133-08bf1346184d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ec51a9-481c-429e-a7b1-ef400bca5cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb99000-b2f7-4dcc-b1e3-cb698818e9d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d015dfc-77e4-435d-8e6f-637df965baa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a37b398-50b8-4599-9a3c-d5ed628f7735"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ea917c8d-9c89-4492-aca5-cebc31536a62",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "128eb531-0af7-4e81-b450-81f6922bba4c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c2d6ef-db64-4d0d-82a6-234fe0530755",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c2661b0d-c849-414a-ac2a-f41ac629d77f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9948f00d-6816-4deb-9fbf-fff316aff142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a40e010-d259-4d69-b881-07f5eeae76fd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67aa87f2-e1d6-4b5e-8427-c557ba8457a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19a8b4b2-c1e9-4b8e-b6de-945e335bda48"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e93b76b-1ea9-4705-b4c3-42768364c772",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4957ac2a-3207-4e5d-a90d-f82df2fb6dc8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aef3b773-3aa5-4ffd-997a-34783cc12a7d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a76d70af-1843-4c72-b1e6-6894e33d1589"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e366e9f1-ea03-45f8-aa0f-8a2e23ca7631",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae83d781-9373-4ff2-8f43-a562957b4a6d"
            }
          }
        ]
      },
      {
        "id": "f1e52ba8-a523-442e-806b-b7b7f20831df",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6df87008-3b77-4626-8a33-6df18ec72480",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ce0e2099-0696-447c-87a3-31202cb9e8d4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "71788d9e-005a-4b8e-a955-0b2d4f4cab46",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce963841-40a2-4185-95cd-9fd3e9b81bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206a301d-3c3c-4f25-b21f-4f76f8fdd137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb289b38-137e-47e1-a3e9-eb94545b57e7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a404a5-d3c9-4eb7-aa73-fb5ba187d1c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd60f0d-90c3-4aaf-bcf8-7b438668e5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb1fce7-a5d5-4175-bfd5-18a37d3071ac",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9164a2b-9583-4cd7-9ca6-a9f1d8b9b3f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd2dd3e-761e-4211-852b-93998f8023f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7ed4d4-a1f4-4bfe-8190-cb54f6a2b8b7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff52380-7b12-404b-bdd1-20a221285f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b0becd5-27db-4caf-b807-5804c488f2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d87143-a54b-4823-bc50-f29311ff59ba",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbdb89d-07ad-4a0f-a5be-08f11447fddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9629ddec-737b-42c7-992e-eccb9a173827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d4215c0-bb30-4556-955a-8a7f6b894031",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a3d336-8114-463c-9208-e94af1edd368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c4cef5-b7a7-42f1-bb97-c6f7671c928e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec618270-57ac-4b6a-88fa-12ce2eb225f9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb100c72-b9cc-4e88-a433-1aa80e49c4c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a9b232-0e62-489e-8367-0c2922206d71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fd5891-c5bc-430d-97a5-1dc15a6eb1c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a149b3bd-0eb6-4d4c-8f84-bf6d28677f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355c4360-c02c-4ec2-b883-5bf511fdbf7f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80abcfa2-e2df-4c47-8d9e-c546733813cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f3af823-9f3c-4a1c-aa2d-e0e2062016f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8eefa7f-ae5e-4429-bc60-bd950a9df108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6def834-d4fd-4203-8daf-b5a248aa3560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1418a8de-6859-4604-8a9c-176884c66946",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b129a2e3-8cc4-4b71-838a-88107234bb56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd28e8f9-7855-497c-acf8-98d610a79a28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad94572-fc29-418e-9004-81c1f05fa942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c83ebed7-e1be-4407-b99e-b4343603fb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13ab6a0-b389-4c1b-9991-12598288bba3",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf03dae0-0323-4ab3-85b9-5e342aa03388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4be1fef2-61f0-49fe-94fd-4aba4252396a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0d5916-4390-43c4-9d85-5f67f41a81fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b44862-8e0e-4728-a525-57169195122f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b187fa-9d26-4943-9305-58fdb8069d21",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bba002d-6d69-49c1-a846-379d48f84f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094fe04d-2043-4fba-8642-729b83d0e93d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5be3263-1b71-4003-bea6-a2f3fa2832be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e2a846e-34aa-4fd5-9ed7-fb1dd8f3f3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023f5635-3b75-4f23-a33d-51c3d0363f4a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956e7dcc-56c2-41a3-a8af-6c33b6c002ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb7333c5-4cc9-43b7-b347-97dcbacfd1a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbae56de-8c36-4c2b-882f-29d73b89ee6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e935bf44-9065-4a33-bff2-152929180f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70cb6ea6-fc12-4b43-841f-f931f097d0b9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9fef4c-bd88-426e-be48-d89f8a26672b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8acd3032-9530-4133-abc8-0c195448657e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2edaa75-ff5c-42f5-ad93-39cb86acdc7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e34694-7526-44f6-9ae6-287cce66bbf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8886969-0929-46b4-a0e3-538f38fb6a14",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fd4c0b-64fb-45b9-a2b6-cee6b88dbe2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7398c5e-5d5e-4799-9601-d7087dadaa7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "042ded87-524e-44ea-8ca5-793e3dea6b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29db24a5-5c5b-4c80-966c-7782965c9115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5155ce1-b506-46ab-9f02-600956b3e707",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a049c65e-bcde-407a-ab4c-15d67305b3a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75930892-919d-42ca-91a2-ddd20d115937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66cabfd2-4f66-4c0b-be2f-6409c001fb90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "195a509a-158b-4b8c-9289-1433ef1ebe97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a181b9af-4160-4712-aa51-63a8039dabcd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45b4162-9bea-4f2c-84bd-26d8f46ee3e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dec6d81-99ed-497a-81a8-dc6850119b48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a24bd5-3a59-4b85-836c-fae374095fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40a8de53-91eb-4136-8e20-317640621cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6db7f80-a9b8-4443-a532-0f13aa2530bb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c021cb-d011-4e4f-a3ac-2a6e3561db94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4e2030-ed32-40da-b50f-c1a043cf8112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "678f9cf9-8b17-40f2-a68b-d284dbc9d0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff79cbc-561b-4578-9c50-4ccaae74506d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf3c864-cd63-4de0-b1c1-01c5209da878",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff90a40c-9d88-4f80-b861-316384ced44e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da4ec6fb-001e-40b9-8040-2bd49c09d139"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce4d4ce-34df-44f6-84fb-e6fdd2d48371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc6fe9b3-6e94-4069-8c1a-9bb8531da486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6aaa79-003f-4aef-8d56-78bde96503ca",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bac0884-7464-473b-b4d7-80e878785b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5addbf-905d-4b95-93c5-9aab4fb3e86a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b7f72b-3ac3-411e-b692-6c83a230fd17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95bc8a2-e4aa-49a4-803f-39aef290e425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0dfffc2-26d4-4d56-a306-9a8e26423487",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33594893-72c2-4962-9696-e8be55cc11e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "371ccc80-59d1-49ad-aec3-b36a57db0004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22683d2c-341c-43b4-b868-9b314ec6832a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3bc3ec-aa85-455e-90ee-c83c7912cea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df4e80b-4fa7-4a0f-a93c-d17a16d6eded",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3355910f-2172-45e4-8104-ead875a45efe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12e52850-d010-4795-9f46-abe22f5da32d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed05751-858e-4f9f-94d4-cf3f1ada4f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d010e1b-2861-4565-865a-6eac2afc2af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a9f56f-36a3-45d1-a399-dcba658284f0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc21bfc-9e22-4223-978d-1162e244a8b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955fe206-15f8-4651-bef7-72c11ceb846e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "215d6ca2-6c41-41f6-973f-7038bc7314ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ddc6a12-7007-4b79-b2f6-61eeb5f470b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e853fb49-87f4-4e04-a80d-7ea1bb5bd916",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1970a7-2f30-4f63-aa70-d538f467b688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3f0321c-9ddc-4c91-9c18-b10ab65233c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efcad5c-d62c-4911-9f51-4d954c61770a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ec8d09-f945-422d-b4bf-3e83dab71c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76eb15bf-2b68-4993-921e-8f20554cf44d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31893011-499c-4ffe-8f73-ff9a2ba032bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "018ba85b-26ea-44dc-b8ba-580595d1b8fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3ca218-da39-4a7c-b438-acc680ca961a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6678dd-5cdb-4a6c-94e7-ee192e9f309e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013a4fa5-6932-49b9-a185-820d23b70313",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c53c5c5-4fa5-43e3-9450-fb9aeb0adb2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24afade0-c1f4-4329-8773-71638d4f85c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbcbfb21-b152-40c2-83ad-2d5e18a96795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5b10937-c619-495e-8dba-f04080cb229f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ef3e5f-94a0-4ead-a9f0-1cd907a080b0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecdcd33d-44be-4887-8f2d-4eea578c02a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f83765f-3832-4ace-abcb-4e684b370145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5db3dd2-3d5a-4015-b10e-d29ca72ceee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5fa34f-0abe-4f46-b6db-236b89c89946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ca421a-f879-42de-a0bb-04681b93e4dd",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af97995a-09fe-4287-92e2-160b1f190b5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb09c3ff-b32d-42f7-8744-14404028b84c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "800671fa-27b1-4b68-8595-d0430d88e82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f25842-2e43-44d3-a8fa-7e060d56f0d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2d8df1-fb9e-4818-ab1e-b6c0e83563b5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf983da-f1b9-41a5-b18e-85f4c773d16d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68fe25d5-0123-4619-984a-1f2b885e9dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18817db-f53c-4de4-aa21-a14a288bbe81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2296a8fb-5aa1-4002-8ba8-ba80d26568f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb696e93-ff70-49c5-8e1b-73c3b5fa9254",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb981576-44bc-4ab6-af29-746197f64f79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98134e4b-e5ea-43f3-9dd7-80773722320e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14817a06-3523-44ba-8430-857f9629117c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0690ad0d-9ab1-47b9-b1f3-82785c94f078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a9aee9-d25f-4dad-b7ce-ed8e9dc0c405",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40003f6b-eaa1-4138-bae6-0309dd7f2cbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52945a43-e8c9-4913-bf93-9dfde2465e1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4935b8-cb8f-400c-8c55-6b5f92edbe32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4669b804-6e9e-4114-8571-995b466757a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed6d3cf-20de-4481-b4d3-529aee03ea00",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0b5350-7c27-453e-9df2-5b883547771e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d08c5a6-7cce-4f4e-a4a1-e0fc0543bc33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab2d42a-039e-4188-9c44-1970b251bf85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24dad142-34fa-480c-b87c-bf5faa357960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add6fb5e-87fb-4005-b434-d46ef0b789d4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9bbedf8-ff7b-4a1e-ac21-c1ef54613fc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "047556f6-340b-496b-88b0-98a8ad1c5345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9a80ec-8cd5-4f5a-bd2f-32fc77b654ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d14a771-b5bc-4ba2-8243-8df1178a2103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aee0a46-54e8-438e-b254-5cbad51841b1",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3850b3e-f6c1-437d-ab85-3b3737e90377",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7886c34-c011-40c0-8e26-6d137058bdb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a303795c-5687-4c50-8abf-99289977c3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a3e219-9c4f-49c6-bddc-16fc499aeccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53508dd4-ea4f-421e-b8ee-8fd732000343",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d639a959-7b5e-41cd-834d-d1e1e595afea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e06113c6-904b-4b7b-9f7d-f4b0978ed838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7273d9f-ca42-41a6-b89c-18cd2aae0b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6fb263a-57a4-437e-a0f7-c4a32a19caf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324be6c1-2473-4102-b2a0-6be1a256dbf5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5e1104-b7d7-4757-9c46-d2de7fe82c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59f188e-8514-4556-ae39-5ebd2f34effb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04720814-791c-4369-96aa-9f0eb4ea491b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3976ef2e-eb41-424b-b1aa-a769c42671e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab10df4-7255-4476-8084-962450c90790",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b36677-0412-44d3-8cea-951376ab025d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e036f861-8cd7-4573-98e2-6e633eaf0a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2497e6c-0a52-4467-bb19-58305b034eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce1d0bd-cdea-459f-b055-60978e1f2516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271ee7fe-e593-45df-ad7e-b32e48c7dc72",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0043ca0e-9cfe-4bd1-84fb-b5c935c5b2c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2c5925-eb22-4dd3-8d59-00fa1951edb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e2909b-f9c0-4450-b6cb-33c3c221c8c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b11c0396-03ad-4521-a15c-ee93231d1845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb21fc1a-2f6b-4b6e-8401-a05f4e6dc676",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c72b66-29d2-4129-a371-c6a4009d554a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e1ade6e-531a-46eb-87ce-f89871538608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd84018-8ab7-4703-9597-3a8a6f413f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1beac67f-c6f6-40a1-bb4c-4be713e33c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da58309b-2dd5-4e98-a390-d15286685e91",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce283491-7480-4859-a4e8-f9fe10e2dc5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a297767f-9282-4f53-893d-a7aa0dd0dc02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71941c8f-4460-4adf-b0f5-d00b88f4edb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3491dcdb-3b91-4f95-baa1-6f1b9db904d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2f7cc1-cda6-4baf-9419-3511d6487b6b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d7f486-5bd6-4a3f-bde4-ffcd244a3662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c038ebde-ed05-4ff9-8981-c76e08f5d98e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02921507-462b-4a8e-beac-84cb8124bab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4328c2b-ea1d-4296-a05f-e8bff0498bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1711107a-7dec-4ff2-9b72-e951feb2e312",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b277a8ab-998d-4eaf-a3b4-f5c44627092e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991e076c-46e5-4928-86a0-1dfbba81006e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a32cbc0-49b3-44ea-9c2e-098b5fc5eaad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae80081a-567f-4ec4-9cf0-b605604622b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc42209-14e8-488c-8a92-0f66b08c98ba",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0140099-64b7-43f3-a7ce-67568c5f72ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9c20225-d083-4e0f-844a-81c627ded058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae9a7cd5-dd40-4653-948a-89bd2538f845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165a6a8f-48c2-4f40-9291-57156464e441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfac691-141d-4421-a7d9-35bbc99881d5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c954c8-ffda-4569-b19f-92af792ab68d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f1856b7-04a0-4ec6-b558-138ebeebed8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afcd5cc1-5d89-4627-93cd-aef673147ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ac5a1ba-25fd-4b1b-b7f9-b223fc3767f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c51b1f-38d2-41a3-8a7c-38ae531fc67e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf46dbbb-8215-4782-ac3c-da2bfbd3db28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d53bb5-8cba-4b94-9578-e61455050f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcdcbbd-1008-402e-befd-84f97f502113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1a6f841-680e-406c-870f-3c074e87bd55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d5622d-a3bc-408c-a1d9-35c5a51118f8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6d1810-e4e4-4582-9718-a8a760dd56b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87091ebd-025f-49fc-9157-cb400f3e3e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c563fcb-2deb-4dfe-b129-17ac78df619b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83e6592-5db1-410a-bea1-6b965c879c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2daefbb5-3050-4245-aa30-a3a97ca6a62d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd84100-d473-4d2c-9ec7-f69b9b781cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "921a45e9-c700-4070-827e-794fb5949ad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "483615b5-a7c4-49e3-a978-56ea848816a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6466a532-1f51-4543-bef0-938f47e2c5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45473641-300f-4b82-a932-13383ed4628b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253d8dc5-1f6f-4e8b-8a56-b6b2f6a85038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aea53b4-1e2d-4bd6-9e7c-30f235a894d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd1cd48-a67a-4732-ba6c-9a265c20ebc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57a682c5-c613-4015-ab63-dbce06116321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d66dea1-a374-4fac-98cc-a94e386b870a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15671745-c4ff-4894-9260-9511f20aa0d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80f7f2b-a55e-490a-9f3b-9607dbca18e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef31886-8e60-4d85-923b-fedf4b09d830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b758072f-991f-4c5a-854b-c4f68b156966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c822a9ed-51b5-416c-8a10-7b8d4581e2ad",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fcbd80-45e0-45da-ba0e-b17f2733a556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e243d8-0d54-449f-a633-ab3ede1953c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ed1002-367a-413c-a6e1-68c90d72772b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f30fec8b-ad20-42f5-939e-191609eb7d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1408e3-52f4-4eed-a632-ef554af60d6d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b65b145-7821-4735-96f3-bf80192c8407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70a290ee-acd6-4991-98ea-f17be76d1a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6803677-80f1-4b93-b675-7bc7092466cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be943b0b-ce71-479a-93ad-e351ccc8ce02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94005eef-e495-4be9-b1aa-ea155098a96b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa38387-231c-4c88-b513-eeaa5c5ebf19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675677ac-8166-4002-83ec-64441f6a9c9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e1dc65-6617-4af9-99f0-432985c033eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2700d69d-9ddd-4082-bda6-2d74a99c1334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8346e03-14c6-4ac8-b07d-54a785e96503",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf3aa87-7642-4206-9245-fdadf8c9458b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faeaadae-e778-41cc-9a67-e125f765ba2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "084f1594-0fcd-4ed9-a608-5736391129af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ccc43ab-d76f-4cd2-8913-20cd64cb4633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70878b76-d641-4186-bed7-6c9bf619c0b3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888be5f3-82f1-4c07-8948-5e89e112fce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f1ead64-5b9a-4aa8-a031-674c9bc91f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d776e76d-28ea-4038-afdc-ab6eac944665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "661ff2cf-9d00-4f6c-9f6f-f076bf621c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c6c48d-3d0d-4f6e-b74a-7edf030d9c47",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c59c02-31df-48b4-a437-d578f943761b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c410f0-5fca-4f87-ba52-25525f50d2a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23cce65-3441-40b9-804e-0c54e757205a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a32b27-6eed-4c95-a5b9-9044cea0954b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a46b73-8d8a-4bf1-878b-6d59df230ff2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b20151-f545-4eaf-9058-f4a5846ee29e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c4ce7bf-515a-425f-bb4e-042a0ee40f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e24f6fa-adf8-41c7-819d-5a2c29020aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ee616d0-2628-428b-aab5-b384d4ef28a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff44c9fb-38a5-4d32-a628-ac29489ca831",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e42d8c-e50f-46f9-b631-0fd4a05ccb87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a483efe-3482-47b2-a12c-86753bccb5a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b480b356-6103-41f7-b008-40e7ae185f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a6781b9-7d97-4189-b29f-de384f8ee240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a640f850-8b44-4d75-b5fd-6cf8656dc22b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2b8456-a03a-426f-9aab-74bed015b4e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d08c73f-47e3-4d30-b1c5-4c8c04a2d7a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a128bf-20d0-433b-8481-9e64a04310bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec75223-c975-4901-9d37-58aa61ba9b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee50c2d7-ed43-474a-9658-74415d7b999b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b629dce1-8ab0-44ec-85eb-42661fd154be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b54eda13-4de6-42d8-af1a-74932548267a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f377ddca-ebc9-4d50-8edd-2619ca402345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56768386-840a-4925-abd9-4830fa884f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9122ee99-a7d6-4b47-8066-ca471c912344",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0640b759-aa86-4df1-8342-ec99bbeb61d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373f21e0-ff3b-44c5-be46-df469bed2422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0af465-a5d3-48ed-b54e-bc97ef1edf58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fca7d65-8b43-4874-823a-52dd1bd43bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da96f20-3ba3-47bb-b20b-ae35bf90a9e0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c16b3d-edac-4f29-990d-07d1c0603fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdbe0107-552a-47c5-a1c7-3cb5c74332c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "277a6619-0c3c-47db-8f93-f60ef4d06ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0296ec2-34e5-4d7f-ae2c-e2fd8106990c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e686e86-b258-4013-9eda-4c9c5ba74e51",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5045edf-3717-4dd4-b60d-498171e66a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a79b44ad-5456-443c-adaf-4c38de6652a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab209c7f-1cce-4f67-a892-01b6a06b2c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4204dbfe-decd-46f4-8653-748fc81c6e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4573cd-2aaa-45fd-8141-0bdbe6a0c0cf",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a6d277-174a-4ade-9e08-6a991160e3d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56f88328-c5ee-4e73-a0bf-ea78279764b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f625b63e-1336-4119-8aae-9828a8cd23a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed46b08-6c6b-4954-b438-008c4575889b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd19293c-1e8b-44fc-9f50-95f011736851",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3bade6b-617c-4d43-a79b-420e2856c24a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63b6031e-f413-4a39-abae-0bbc34730e4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484cd850-8e9f-4845-b752-39017234c4e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3167661-35cd-4fb5-98f4-c563c4c4f073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084bfb0d-6144-4b34-ba9b-19ff12b95a46",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f574eeb-6018-4521-935f-adccfb388c0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0536d398-f84a-43a3-88e4-f796524019a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33d1305-4aff-4ed0-8398-32abde001a10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a07d765-fb48-42d6-b05e-5e8d01852519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf674a7d-9396-4e46-8cbb-74592dca0faa",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c22bff-0c37-4d29-93e2-afb65c145f87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3548b8b4-222f-48ef-add2-d5e231069ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8526957-15e7-4c6e-8555-f4d3da3447cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e4cf9f2-7711-4a44-9b44-c60b948d266b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f970a411-99a3-4bee-bd5b-e5c4368e8ee3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0583d7f-cdb3-49ec-a099-c5f72230b649",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f7a6c96-45c9-4a2e-9cfa-93c4ede8bc8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf9bf8b-00dd-4f62-8e15-a06136249b4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c1fba2-7b19-4ea8-aec3-7bbfad85ccb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c88bc4-0dcc-478c-a228-5e2c45dee4e5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46a801f-ba9a-450b-b364-fb7891a46403",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09bcdf8f-16de-4184-825f-fe78d145fb41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9675aa0-cd9a-4a46-b36f-69520000842b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa338367-ed73-4a3b-84eb-c371d9b0f410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4fa607-e6f4-4263-8856-b6f95fa46487",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66e261c-b82a-4cad-bf2f-1bd43864d66a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f9be2df-ab81-4ab0-bf93-3849476986bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d634819d-c0f5-48df-b0f8-afb5b5f2c453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dad835b-f0cd-4f36-bcea-dc0aa3521865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850f5c36-1c04-4a7b-b5ce-361ebd0fce14",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd006ad-c5e0-4466-9c5d-eb8d74d593e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12af9f41-a02b-4ed6-90bb-9d11b43c95db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a91019d-c475-4757-ba64-e69b6115d29f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005a3999-5c19-44a7-9137-5d4d7c6da860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0dcb674-8372-45bd-8610-16aea5593908",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9a3ac7-61e0-4250-b303-b416a98c3030",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f67a163d-bbae-45b0-865b-082b36495e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d1f969-8cf1-439b-89df-7f4c8cd9b290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ef78f7-acb4-4e26-9cd1-30c8a434759b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac22776b-3d95-4111-af7d-b655e1179733",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a47146-9588-4453-b9cc-0fdd5d13d4cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5260da09-d7bc-43d4-85f7-741e284dbb70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a21e96f-a108-4a8a-8146-54c772a4a75a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89656aaf-1eaf-453b-b923-9169e88405b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805c6b90-ebf2-4340-8858-3459a44f89d6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8092cc9d-39cd-442d-af9e-115e44512980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc444eea-1062-4498-863d-bca72366ad90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad16b70-3b7f-4ea3-a7ca-6cb5cd5d9734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b40f2b54-a7e7-4564-b253-6ba8c781205f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be20f46b-2c4c-4d7a-b915-cbe83d6faeb9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfebbf3b-300b-475e-ac16-51328a0e10d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df7d3872-d72b-45b2-8911-c15fa216cf14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c454607f-90f4-4d1b-a96c-2f0f433417dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4015e66-f1cc-4976-a9b3-e9ead45e75ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786b9e90-0d6f-43b0-97de-93845fb9bdba",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9199c0-4a28-4a37-8a7f-49b4635c8bbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccae54f5-38e3-4f34-b76e-07cbb427668c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd03535-7bae-42f5-902d-3b54eb022cb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7dacdc0-a3a9-4214-a191-63c8596872b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6394b9-2124-4bfe-a6b7-0cad4563e796",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5f2623-0e08-4f04-8a59-182b57c38ad9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d24ecd31-4ec9-46ef-9b16-0ef00176ef3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34583f00-5619-4ec3-8ed8-2d0b896e6132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bbd4a2b-593d-4a08-afe4-84fb687207c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1409badd-8c1c-4645-affa-8f87e5de62c3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f28fc19-739a-4645-841f-79092bedff9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7311ee96-203b-4cbe-93b0-a95a7953eea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57646fc5-5371-457d-898a-facd30b63d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c848be61-7e65-46fa-a18f-989ac3df2513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8a7a72-563b-4b64-a14b-6baf46bc62a2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8abe236-0694-4392-85c6-aa42839c468c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37922e41-96f5-4557-b42f-ed24a3bb90b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e16c4b-04b2-4a95-91a9-0217bb6da564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7befd6ae-30a6-47b9-b717-b500d4718382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3fdc6b-e3c9-4d34-971a-24d71be631ac",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9e24bc-cb81-4506-89c4-6246370cf194",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "563190c8-3367-42f7-a927-9da5d79df593"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c62188-23a5-4f2b-a3cf-25c41ff8c399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a39735a1-87bc-48d4-a684-37db30db059b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5893c2b5-9f0f-41c5-b258-154c16bbdfc6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9038a6f-6920-48e5-b25f-79ee4628c4be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de165ff3-e14e-4ba3-b586-f87f0644fde5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4dc77ee-c11c-4fde-b063-f1b225544c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e80621-a6cd-44c8-b5e7-352d6c81bbc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e42d3c-9da6-48e0-a89c-6dcb92931daa",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024e7c2f-4b47-4d87-bb75-be24c10ff6c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7f36a3e-4bfd-408b-a819-79b6933e8363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efac05ee-9402-448e-9312-1df1f8e98460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5906f99f-ace8-4f34-a3f2-7bb91840ed8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa34a846-d002-486a-afc5-bd868f3dc581",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f57341-1e6b-47b6-a84b-331ba94ff36c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fce6a81-7d47-4cac-804b-ece77132c728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13b98f1-22c0-4685-9b7a-11fd6332836f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ebab9d-6298-46db-8bef-fbd38038729d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acea633e-eab7-47bc-899c-accf61123d25",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e74fb6b-4e43-4157-93ae-69ea7470a80e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e91012c-e0cf-4392-94c1-dfac9fc8c068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ac418f-1e0b-4a6f-bbf6-475646fa10a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e55ee24-e4c8-4e89-997c-95b52fdc0323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4ba567-a46b-42f9-bbda-da0b156b4a85",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3c54b7-ca3b-4af0-add4-bf2b6be5d285",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93131e04-c3c0-49b6-9651-05a023e1862d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "553f9dc4-0df1-4210-8f17-c27171224a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9241b4e-3885-49c9-abc3-56363e724469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3799dd81-c2ce-4845-9609-615433f1916b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7ebf13-1e61-4672-a3bd-4dc1082137d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "104bb58a-a1bd-472d-8200-1bb4ed2dc74d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83dfb411-2195-4963-aa12-c1f8fbefbfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1276c365-e428-4668-86e1-34b38363f156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b141fd-e2eb-4351-a0c6-a6533f09daab",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75d4b21-4a49-43e8-a039-5944dc7aa71b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86823f81-6162-482f-af7f-5c3d5ee60b77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7d0e95-fd13-47ef-8e22-fdcad52b234d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262cb1d4-868d-4733-860d-e47085781676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f38be9a-aaa1-4fe5-bc59-2565c2c668ea",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a83acc5-d20c-4ba1-8b9b-5428773344e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68f713a9-2141-47cb-b07a-e7875f923adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7c43e4-a4e9-490f-b148-2eeef2e1271c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da4377e-beb3-4a70-ad5b-b13b0f6ad1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb3cae7-5769-45f7-afb2-f32aff6e35c3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf77037-0ec8-4a78-b9ef-49ec82a32beb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ec18e69-8085-4e89-9aff-41644de2c851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb757e87-707b-4a1e-8b67-f5f558b8cfbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b4c4366-4098-4b0b-94e3-75fb8f7127c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3020ae37-4076-42c2-ab9c-5dd314d13446",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14011678-8171-44ea-b67a-2613ee0dddc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e652917f-885e-4c09-b071-ad3e282125e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa9ba25-6b65-42c0-943a-020597ec1938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5672a2c2-ffe6-4942-9f6a-6233808df930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9050e2a5-37bc-4fe2-a11e-38e1fd45d9fd",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e607224-b448-4fe2-be4a-41b3ab27c3f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84862932-3e97-4800-8f91-afdd20324ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "432a348e-dda2-4047-b1a5-eed63813b58f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a26a15-9817-4737-9fc9-87878eee525c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f2f4ac-7d39-43a3-8b37-1c9b2917f71a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9347dc2f-35c7-495b-a6a5-ef80a9e98787",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b080a01-fc4e-4a3e-b26f-dc53eb56b75d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "553bdec5-8430-4374-a0fd-dd4a4957b6cf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b33913f4-4a51-4a0e-b43c-f4cbdc04d40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4739d5d4-2719-4a91-a4a7-08c1c32e2c70",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9a53ea-0431-4434-9a1d-ca31ff7b50f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a673205-808f-424a-8327-fa4942d69fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66642734-2bb3-497a-b4d2-a493c9b34728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c10912f-ac91-4deb-9484-d0729bf6778c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2369258a-4eb6-4418-a94d-781c675208c8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb1f84c-ac84-4e4b-8946-2659b86175b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e7f9538-d41d-4018-a26d-be2c35f6014b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c537f3a8-ccc3-46ed-832e-18245a9e3129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b0801d7-9bd8-417a-9af2-9451f669cd20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e69255-93eb-4e64-be0e-509f025e6e65",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f52ad01-e500-4db3-87d8-62f6c3cd705a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc4473ec-4b4a-44c2-aaf1-1d3b2df7ed8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eff9f0f-cbc7-40a7-a399-4b66d4eea578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c3442b-7d4c-4350-bd17-93f16854d96a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda110d9-1708-40b9-88c8-b397b46c681c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a124fed5-2a32-4beb-9510-cbb05839638b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e6bf737-c5e9-49ff-adaf-b395642ceb77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5aee57-5dbe-41e7-9a21-fbd459b3f638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1e50d6-6775-460e-846a-33a9c66b7312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba38414-4949-432e-aeb5-56e4a66c5424",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d38d6af-3d25-446c-86a0-fb6068dc0ae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2283b9bb-3b71-45a9-9aee-1c42a74763bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9514a965-a628-4fd6-aa51-7df1efcaf3d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5364fa6-7f3a-43f4-bc9e-2f239cbeddc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45528d29-4e4e-4fde-9ed0-15307d95d5e5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db1d1b4-858b-4489-a279-0bde16c95cdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14cb3f3b-4e16-4299-a114-7512c027bc0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f3b488-898b-4214-965f-cc2620d7e3c4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae69e7a5-8855-4f49-8cb2-e128fc6ac5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93901ce8-e34c-4298-bcf8-ff02ceb8ea84",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "770ad68a-b97e-4e32-a700-d9f7f4190ec8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47171fce-5b29-4b1c-bf7e-d8868ca1c730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acebd4e-798b-46ab-85f7-ee5f17695340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29749739-7fc2-46ec-bbf2-51f6f5482f55"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3f6cfcf-a121-4e41-b2e7-59d3c1380867",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5992d1f9-8d37-4139-a777-7ed64fe5d3f3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "701ee36a-2486-4501-b9bb-d1b67bd0251f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61b38d87-bf02-45a8-91ed-d4e49a1fe508"
                    }
                  }
                ]
              },
              {
                "id": "36a03553-9a81-4e14-954f-a0af6add9825",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a0cc760-efc2-47e9-a2be-7d9261df9478",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd2ea8f-64bc-472b-bc87-a2bd241663be",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ae573b8f-02f1-4a33-8370-aa0cfbe85c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02cf4840-c77e-43e8-9c60-59880348a704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0726046e-d524-4b54-ab4f-cc5f1fd791be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5423737d-9b38-467e-ae10-7f5006d16ee1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "362ba192-6624-45b5-80da-82c4b829a7d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c65b2805-b54d-4194-bb97-675c68356768",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d699b398-0c38-4003-8554-e3dc29c411e3"
                    }
                  }
                ]
              },
              {
                "id": "9beea866-2ceb-4e70-805e-3190dd15cb88",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "808e0889-dc46-4091-8eed-f7e59aa4e9a2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eded97f4-5604-4624-9bd5-69582fbee21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c72a8975-b274-422d-9b8d-fa3b07aff769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0590ea-0cd4-4b4b-8072-9464989e0c56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66eb4aae-ec3b-485b-ac16-f2bb55dbb10d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "16d5d747-b4a1-4d76-9b05-c671ff550f0f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a7affd26-8f3b-45fa-917a-26e65ab84fc9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "528f9629-05fa-469b-901c-c845389e4175",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "56a34162-7953-4b4f-8576-d00009a65905"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c632040f-460d-4ad9-b7b5-8ac98be75f4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "554751f4-9864-49c2-a395-9f584575d9b9"
                    }
                  }
                ]
              },
              {
                "id": "f5e983f7-af0f-4d77-859e-9033835eba94",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea44fa15-ef05-4f99-899e-e2d6d60373a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1ec89f56-c18a-4b80-80ad-4261e3e8dcc6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62785317-5d10-467c-8753-dc24c27443c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf94810b-190e-43b2-ad51-80ab682353c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f1a05ac-1512-4b26-bbf0-c69e67bf0cb3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "82a9cef4-bf49-4711-998c-e8c02cb552d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d4feede1-b21a-413e-a290-1f5414494546",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eb8c2f85-9e88-47b5-beb9-e085fcaf329b"
            }
          }
        ]
      },
      {
        "id": "3c0abda2-2867-4d60-956e-4a30af0518d5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "271ed0c1-db5a-4163-a425-fd06c64664be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21565f88-0b19-43a6-a749-0aac414ea848",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4803f1bf-3ea9-49c0-ab34-885447d47df9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b2280d-1470-4338-98a9-07fea2b3a983",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3a0cd027-1846-4e01-975c-bb1cd7aefea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4106be71-6479-480e-ba7a-7c399e0ff36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "813661be-a40b-46ab-9ce6-119be19a124e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20180ba0-3f9b-4414-912d-a85d34914dca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2c861b6-1092-4643-9564-5515b949894d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2291586d-5b1e-4204-8b8c-8f58aedf9546",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3026187a-78ff-44ed-a7a3-7280880d8fb1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4e957c2-20e1-475e-8f63-4a2c3ee4b109",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4c8978d0-c846-4b1c-bbeb-49b1f959d4b5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3ae66bec-dd2c-4852-9687-3d559476a5ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3af63a2f-76c3-44ec-bcda-6e1a70962b9e"
            }
          }
        ]
      },
      {
        "id": "2031866c-6cda-420d-9fa5-5feffaae5c3d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c7ddf737-bb65-4bd7-8959-a896a6edcf5c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e3a6cfb-16aa-4e76-b542-644cfc23f090",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "57c3f6a9-5d27-4ae8-bd9c-b341ef02a3b8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899fef98-0b41-4668-abac-d17168e06380",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b27044a0-492d-4b7a-96ab-a526375dc181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b99d20-4ee1-4919-a5bc-c3c8fd77153b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee092f1b-3133-465d-beed-49df146c567b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe11f17d-17c4-4955-ac61-a5e81e7a8c76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37135291-4672-4baf-8646-ee7484325744"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1e05628-8b4a-4f82-8a23-ca1fc95630c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93bd4a22-b56b-4c5f-9d18-449c682d7f92"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d67bde65-3f69-4da7-934a-264e4cefd6fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6953cb5b-a777-4d24-9dac-7d57e6826b9b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4cd755c-605b-4096-bb51-2a09b4a2502e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "753137e5-eb8d-4651-b7d8-fd95016880f0"
            }
          }
        ]
      },
      {
        "id": "b0d4f429-cd41-476e-ac2c-15a4d6369755",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "34a88775-ad95-46c3-9686-c31f6cc0997a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4c39d30-41f1-4c4a-8dd3-10d98cdd80a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "65ac3916-d053-40fe-9d6a-75d16b21959b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e695f8e-b3ad-4bd4-b1f9-65533f850172",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9909e3dc-9cd1-43ca-9665-037d7e97d5da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9044e4df-2ca5-4379-81a2-c88a72123a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e41a324b-0194-4e82-885b-173f19376d89"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34319bf3-bf44-4787-b22c-8d446d4d34dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aeaf8326-1894-49ac-a508-7ffe334ff815"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5ffdbcf-d40e-4477-8d24-054b51db70ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8131dae7-01e5-4e48-b553-2b52e7707caf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3c853cd3-5854-4c27-b669-87fe794852ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "df504b37-bae7-487c-9263-0b3f07ed4478"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "658b89c8-fdf2-4cb5-9c87-31d69df555a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d05ebfa5-bd77-4678-b911-2b492bfb7e4e"
            }
          }
        ]
      },
      {
        "id": "8602938e-33f0-4869-b8c0-64eaf0185b88",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09c5da25-4ade-4f78-94b8-8299282313af",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f132c60f-b750-4ac9-8858-0b8a6becf466",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8ccbeca1-e5e9-4779-96f5-a7f9869a76d3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4bbc75f0-9692-4ed2-b299-e70393800493",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e3d56613-420c-41cb-9fca-9edb65f394ad",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 68.87017543859649,
      "responseMin": 6,
      "responseMax": 637,
      "responseSd": 69.27302192510359,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711153991568,
      "completed": 1711154020421
    },
    "executions": [
      {
        "id": "2294d64e-a937-434b-b0f3-325eed9ab4c6",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "36f81843-a02e-46f1-9c74-733cb58d1405",
          "httpRequestId": "5edbadc8-928e-4505-aa7b-f812047a487c"
        },
        "item": {
          "id": "2294d64e-a937-434b-b0f3-325eed9ab4c6",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1fad32fd-244d-49df-b235-0e9a97457310",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "e02a9df7-6f2a-40d4-a492-76ab7e2d9a21",
        "cursor": {
          "ref": "cfc0f83a-3459-4d88-9b48-0d2ca4b2e9cc",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4bf2f79e-d83e-4f4c-abb4-5053a5eb9fac"
        },
        "item": {
          "id": "e02a9df7-6f2a-40d4-a492-76ab7e2d9a21",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5834cf1f-5cd1-4091-aefa-82f43bdb155c",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "f6086552-aa4b-4257-9291-a507d559263a",
        "cursor": {
          "ref": "6c275cff-40aa-4c07-8bec-709aeeead43f",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8049396e-a9ba-4dbb-9aaf-0a9863d770a3"
        },
        "item": {
          "id": "f6086552-aa4b-4257-9291-a507d559263a",
          "name": "did_json"
        },
        "response": {
          "id": "9ccbf58e-a0f6-437c-9c2d-99472f6346f1",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebba21a-69ac-491c-8ce2-28ba1403e91a",
        "cursor": {
          "ref": "64f36cf3-017f-480f-a9a6-2ea3f949dc82",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d80b5ec7-164d-490e-b6c6-87440ad22392"
        },
        "item": {
          "id": "bebba21a-69ac-491c-8ce2-28ba1403e91a",
          "name": "did:invalid"
        },
        "response": {
          "id": "66fd7316-5883-4494-8109-c4e278ac5c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bebba21a-69ac-491c-8ce2-28ba1403e91a",
        "cursor": {
          "ref": "64f36cf3-017f-480f-a9a6-2ea3f949dc82",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d80b5ec7-164d-490e-b6c6-87440ad22392"
        },
        "item": {
          "id": "bebba21a-69ac-491c-8ce2-28ba1403e91a",
          "name": "did:invalid"
        },
        "response": {
          "id": "66fd7316-5883-4494-8109-c4e278ac5c2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846e53d6-c9d7-44ae-b6b2-2a0fc91711e4",
        "cursor": {
          "ref": "b950b60b-e23d-4398-8e2e-65434fd97bd8",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c09b3183-e931-42bb-bcfb-cab9f6727bb5"
        },
        "item": {
          "id": "846e53d6-c9d7-44ae-b6b2-2a0fc91711e4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7af0d7d3-9ecd-4a50-8322-c989ef31f0f3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 159,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c035fa4-62c6-437c-94cf-cabbb10bb089",
        "cursor": {
          "ref": "54d953eb-7c63-4d70-8541-b8b9914f78d6",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c81641ea-1843-4d7a-967e-2c22df033985"
        },
        "item": {
          "id": "9c035fa4-62c6-437c-94cf-cabbb10bb089",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "89f78a23-02ba-4177-8cc1-98249658a5ab",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97b813d-c2e6-4eaf-a10f-a587abe12f43",
        "cursor": {
          "ref": "7e8349a8-e131-40a7-916a-fba34bf63b1c",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a40f71cd-94c1-4f22-9504-9a00d8a79ed3"
        },
        "item": {
          "id": "e97b813d-c2e6-4eaf-a10f-a587abe12f43",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c983afc7-1772-4df3-80d3-b2cb4589b775",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be65d081-dd0e-4ea9-bdb8-24878fefcba9",
        "cursor": {
          "ref": "a77efca3-7a54-4b7a-ab36-ace8555b8a2d",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "deb2fa5d-a283-4906-9043-be1c4d0d3383"
        },
        "item": {
          "id": "be65d081-dd0e-4ea9-bdb8-24878fefcba9",
          "name": "identifiers"
        },
        "response": {
          "id": "d5702fc9-d490-4fad-9e32-e98dcbcaa0b9",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc0e72a2-0925-4b90-909b-6f025a21cc83",
        "cursor": {
          "ref": "5eb33a0f-510d-457f-aa2c-1629d1ab2884",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7f16bf0b-6926-46a4-9c32-395ca3d4ddcb"
        },
        "item": {
          "id": "cc0e72a2-0925-4b90-909b-6f025a21cc83",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4b47946b-75b7-4070-af58-fb96220fc4dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eacc74bd-80a9-48a0-8687-f149fd327811",
        "cursor": {
          "ref": "1d0008ff-23c3-463e-9aa4-1dc8271149f8",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5ffb8057-8119-41b9-87b5-f88ca84fffa6"
        },
        "item": {
          "id": "eacc74bd-80a9-48a0-8687-f149fd327811",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7384f7ef-c33a-4313-a3e0-cfc0bbd570a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91495fcb-cbed-47ae-9d83-6aec38937ae3",
        "cursor": {
          "ref": "3a3437fe-e556-4ded-b301-d3f4842d8dfc",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7c1c14cd-c356-4141-bc6f-03295c2ea715"
        },
        "item": {
          "id": "91495fcb-cbed-47ae-9d83-6aec38937ae3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9a6096a1-e800-40e5-bedd-2a044486baed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874b942d-f25b-4be0-96dd-9ea856498d97",
        "cursor": {
          "ref": "093abc4c-38a2-42f8-bc0b-2b045df8a04c",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "aef1e7b6-492f-46d4-865c-4608b65324f7"
        },
        "item": {
          "id": "874b942d-f25b-4be0-96dd-9ea856498d97",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "34e35916-de1e-45f2-8aee-975c38bd56ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995e7761-b640-479c-b790-2f8251513baa",
        "cursor": {
          "ref": "23145cd9-25eb-4eaf-ae6e-452e004e6f26",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6e43fb19-109e-4831-ab1a-e31d7c68cd20"
        },
        "item": {
          "id": "995e7761-b640-479c-b790-2f8251513baa",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6083b7b2-8e56-46dd-bf28-2a75b3e987a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4cabe62-eac9-4204-a102-beaffa8d2e9a",
        "cursor": {
          "ref": "0e2082e5-a913-4d5d-912a-74a3f7968b6b",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "46a7b4e6-bbd5-4e78-91d3-cd3d4843bb50"
        },
        "item": {
          "id": "f4cabe62-eac9-4204-a102-beaffa8d2e9a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "18c65e47-138e-4d48-8f64-998ae519850d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba23db46-d389-4a0b-88fb-4b6bf6b0d890",
        "cursor": {
          "ref": "5d95ec51-bbd0-4c5f-9800-4ee4b75c7eff",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ae2d6361-2ad4-41fa-b388-aac177c432f4"
        },
        "item": {
          "id": "ba23db46-d389-4a0b-88fb-4b6bf6b0d890",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a90fe942-e5bb-432e-918e-78f126725967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670f0483-bfbb-4dd4-bd19-791bd69e4e07",
        "cursor": {
          "ref": "cc8e0fc0-e828-4a0e-8064-bfea4291052a",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "cf60555d-9291-42b0-b0e2-2e90ef6dde6a"
        },
        "item": {
          "id": "670f0483-bfbb-4dd4-bd19-791bd69e4e07",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "26df4969-2032-4a26-bcb9-2f19f42d73ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4a7e05-16c9-4f65-b76f-866c6adfacbe",
        "cursor": {
          "ref": "b4a915f8-e3e1-466c-84ec-5d3a3f35a491",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d1530bc9-8b5a-4910-8721-d6a190e6ec52"
        },
        "item": {
          "id": "1c4a7e05-16c9-4f65-b76f-866c6adfacbe",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2fdb4335-c838-4879-a78c-0ee5bbe0628f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f94467-2db9-46dd-a608-8c7bf8576bfc",
        "cursor": {
          "ref": "d8b324dc-864e-45f4-a110-aec493ca9837",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "71a8ed18-6629-4029-bcd9-1bf673669976"
        },
        "item": {
          "id": "43f94467-2db9-46dd-a608-8c7bf8576bfc",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a42d2e2e-ef78-4c9d-b7d7-acd64dc5ad2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cb5051-8a16-4251-abad-e80534382990",
        "cursor": {
          "ref": "4d53bb05-c1db-4ee7-932a-b52855701968",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fe92ebf3-3c9f-40f6-9dcf-b4d95211b578"
        },
        "item": {
          "id": "e0cb5051-8a16-4251-abad-e80534382990",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4fc478e6-caf9-4e46-b148-32a5c714bc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1b128c-4350-48a6-b223-acd8eae8a4c6",
        "cursor": {
          "ref": "06fe9643-4145-41a0-8ff0-1c93f5e8da61",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9b6d7ffd-b5a7-48fe-bf76-f344007e7ae7"
        },
        "item": {
          "id": "3b1b128c-4350-48a6-b223-acd8eae8a4c6",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3c6ec2da-9c07-40b7-a794-e273b89b5507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2fad1d-cc78-49a5-9f0e-d8b856f484a5",
        "cursor": {
          "ref": "b702fbdb-3702-4d15-8d95-d9fd85629e68",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3863d4c9-e085-4616-be34-3800176267eb"
        },
        "item": {
          "id": "2c2fad1d-cc78-49a5-9f0e-d8b856f484a5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7dc126da-66ba-4f13-9b7f-47fd6b67d112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55921c50-9a64-4fd5-a51d-0b99e11f1d78",
        "cursor": {
          "ref": "fddfb4b9-d3ed-4e39-970d-1023984a53a5",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f6378317-5525-4250-b16c-e3e481a8585f"
        },
        "item": {
          "id": "55921c50-9a64-4fd5-a51d-0b99e11f1d78",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "fb13e315-3889-4e21-b267-5e60ad5bfa79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf6125d7-69db-4723-9e4e-d0102a15f8f1",
        "cursor": {
          "ref": "21f83e4b-7ec9-4a68-85f6-f8b89dd097ef",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "62bb8079-20a2-4642-8299-f6801a3354b4"
        },
        "item": {
          "id": "bf6125d7-69db-4723-9e4e-d0102a15f8f1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c210fbbd-f2b1-4572-b5d4-a2fc168fbc46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdb758c-2ddf-403b-bc86-fa068afc99fe",
        "cursor": {
          "ref": "d1b9c71c-75cf-4b6f-be6b-8c26d821ecbe",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "e44b13bf-4dc7-4e15-8536-3804c355bfc0"
        },
        "item": {
          "id": "3cdb758c-2ddf-403b-bc86-fa068afc99fe",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b7d0a07e-9908-4ec9-b6b9-05aa7141f7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7581d44d-955a-4501-9f30-abb05cd119ca",
        "cursor": {
          "ref": "0722405d-d1af-488d-86ac-f1c4447c4401",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c516ed04-5f66-4b37-ba47-3d8e0cdb4da2"
        },
        "item": {
          "id": "7581d44d-955a-4501-9f30-abb05cd119ca",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8e27d0b3-ccfb-40da-97ac-5cd718761d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d9af98-0b14-48e4-8ac5-5ee8e76c981c",
        "cursor": {
          "ref": "76e2d838-2b0c-4928-977a-0d1b625f5b32",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4d5388af-0821-4ac7-b2bf-dfc4c5957f12"
        },
        "item": {
          "id": "80d9af98-0b14-48e4-8ac5-5ee8e76c981c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a4908cfd-82ab-487f-8d0e-b9433c0124ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd9cdf6-e0c7-4473-aff4-87224dc34041",
        "cursor": {
          "ref": "4beacbe1-0c39-4d8d-914b-88c83c20ecd8",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6dc8ef4e-2fed-4699-bc15-34d79831f7a5"
        },
        "item": {
          "id": "cfd9cdf6-e0c7-4473-aff4-87224dc34041",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5130eeab-7595-45ff-9685-2c3d17e312a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d230a25-2f1a-405a-a98a-64761d7829fa",
        "cursor": {
          "ref": "cba61360-078e-448e-92d7-31e26c7990ef",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "119f2e14-1822-4a51-adb5-40753b7a710c"
        },
        "item": {
          "id": "3d230a25-2f1a-405a-a98a-64761d7829fa",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6f040f62-5ae1-4dec-9d02-bc05c3a17cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f3b750-921f-4c12-b464-e3193f9e0bad",
        "cursor": {
          "ref": "03817f90-340d-410a-8d7d-f664fcbba192",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ccc69785-2a43-413b-af4d-4f562bf27655"
        },
        "item": {
          "id": "57f3b750-921f-4c12-b464-e3193f9e0bad",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bf130892-4dd7-470a-b245-3695747693ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c96ef93-33b7-4c59-8519-986ab82d02cf",
        "cursor": {
          "ref": "87425ac4-dfcb-4978-9bba-94d97f2f08d1",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a805ab65-ad0b-4303-9605-855e785ebe09"
        },
        "item": {
          "id": "6c96ef93-33b7-4c59-8519-986ab82d02cf",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a645f2c2-a5de-4f85-8aad-6b44ce60afda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a0dfdba-e65f-4b4a-8f34-d156e6e7b810",
        "cursor": {
          "ref": "2036df2f-3447-4e20-abea-e8e5b9a778c5",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6856acb7-fc87-450f-afe6-b7f1b3255675"
        },
        "item": {
          "id": "3a0dfdba-e65f-4b4a-8f34-d156e6e7b810",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0f9a3c49-f401-4e18-a8cb-fd30cc3be670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672819ca-e76d-4a7c-aa5c-b77e47b69e29",
        "cursor": {
          "ref": "92dccf1a-14be-4266-ba83-42addc533b7a",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "55856a5d-763f-4a7a-a2af-5b4127b25178"
        },
        "item": {
          "id": "672819ca-e76d-4a7c-aa5c-b77e47b69e29",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7503bbe0-3aaa-43d5-898e-c4e303d6077d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e63049-c7cf-4429-aa95-746e7adb7ac7",
        "cursor": {
          "ref": "203b9798-f218-4726-be37-bb24cb3f8db8",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f4bc61cf-2052-4724-a95a-940bbf1fed56"
        },
        "item": {
          "id": "40e63049-c7cf-4429-aa95-746e7adb7ac7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b0970498-935e-4f5e-b236-6611a9526e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b883f9-3a3b-48bc-9005-7a67423bb991",
        "cursor": {
          "ref": "9d2f6ec3-0618-4988-b727-3ba37256fc65",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "45112808-c903-4b19-80cb-6529e87d940c"
        },
        "item": {
          "id": "37b883f9-3a3b-48bc-9005-7a67423bb991",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2a6776ac-811c-4824-9f66-c54478d06a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103633f3-ff30-4525-92c7-a31a6e6ffc08",
        "cursor": {
          "ref": "3bb362d1-a600-41db-aee0-edd88c6a2330",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "796ba704-5fc1-46e6-8bf0-be477df45244"
        },
        "item": {
          "id": "103633f3-ff30-4525-92c7-a31a6e6ffc08",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7a13af71-0a78-43b2-899c-dd34466cdf43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f41b7d7-50e4-41c1-b4c6-20cba5813784",
        "cursor": {
          "ref": "64c6a1f0-edf7-45d4-b3d9-1f5484bd63f9",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e7331122-60dc-420e-8e03-92555e30fabd"
        },
        "item": {
          "id": "5f41b7d7-50e4-41c1-b4c6-20cba5813784",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d6678af3-b309-4123-abb9-2ef39a953e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1efc21-6033-40dd-a7e2-5d89d808bcf9",
        "cursor": {
          "ref": "98b02ef8-3777-450e-83eb-359f077fdaad",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d49a9989-2d20-47a1-ad13-4c8e68aa30a2"
        },
        "item": {
          "id": "fa1efc21-6033-40dd-a7e2-5d89d808bcf9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "919ec2b2-c3b9-47a2-a384-f746ff0d33d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9bc692-3302-441d-9ff4-0317753777b9",
        "cursor": {
          "ref": "e726f63a-91c3-4161-8fe7-e155c819ab38",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "20ebb6cc-aaf6-4089-bb01-22d48292b700"
        },
        "item": {
          "id": "1f9bc692-3302-441d-9ff4-0317753777b9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "91015fcd-25f0-4dbf-8574-09f26c1d5720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f4f837-5453-49e5-b040-71cd01906732",
        "cursor": {
          "ref": "44556dff-b494-4a17-8127-dd3fcd020ea0",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a0619b6b-3f13-4109-b56a-0dc07cf41b71"
        },
        "item": {
          "id": "86f4f837-5453-49e5-b040-71cd01906732",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0fff2ae7-d3be-416a-b516-1870f42b7cb4",
          "status": "Created",
          "code": 201,
          "responseTime": 637,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "5cb5a189-4364-4fd4-9c11-33b10784a857",
        "cursor": {
          "ref": "6092db10-085c-461a-97e6-7418f73aef8e",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2022d5e9-a5de-4f07-80c9-a16cc549afe5"
        },
        "item": {
          "id": "5cb5a189-4364-4fd4-9c11-33b10784a857",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "662feeb7-c7f8-4592-a8fe-63dc87c08324",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "38370707-ec85-4dd7-8a67-5d27bedd523e",
        "cursor": {
          "ref": "e77a31b5-58ac-476d-a0c9-9ff93242bd57",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c8485be5-a88d-420a-917a-c98e0b64a58d"
        },
        "item": {
          "id": "38370707-ec85-4dd7-8a67-5d27bedd523e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ea334d4e-acff-4011-a36e-cbdb681f0632",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "26562f08-3e13-4c40-a1e1-39d19ffc6149",
        "cursor": {
          "ref": "192e638f-f26a-4f5b-bc68-92b021475639",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c89ffcda-304f-4f96-9377-9166394c5776"
        },
        "item": {
          "id": "26562f08-3e13-4c40-a1e1-39d19ffc6149",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "488e32e5-1256-4e59-b4e5-513da5177a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62748078-4677-4ace-8690-377137c280f6",
        "cursor": {
          "ref": "06d6774e-8259-47bb-ae68-ef3577ecbacf",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "faa844c1-5329-45ba-a6ed-01c1d3194674"
        },
        "item": {
          "id": "62748078-4677-4ace-8690-377137c280f6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "04371d60-f3b2-428e-9a36-800709a7f6e5",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3d6f725c-4321-41a5-a8ac-45461018367e",
        "cursor": {
          "ref": "d16185d2-1f6d-4372-bdcd-e22bff6880e0",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c80fc347-66dc-46ea-ba6f-6e90107ba459"
        },
        "item": {
          "id": "3d6f725c-4321-41a5-a8ac-45461018367e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "8588ced4-83bf-4183-84b7-7041e4d634be",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "be43b01c-7fb8-42f8-b5c8-72a9b82db150",
        "cursor": {
          "ref": "7de98f34-1a7b-46ec-8509-826443b6a802",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6a8e0121-2716-4ed4-b234-efe3f08d1df6"
        },
        "item": {
          "id": "be43b01c-7fb8-42f8-b5c8-72a9b82db150",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bc4466ee-18e0-464e-92b3-e6ff7f6cef4e",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "55db1b36-97eb-4a25-986a-ba0bc5845458",
        "cursor": {
          "ref": "8c4402fd-1ea4-4de4-bf1a-fa615826d742",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b2df77ca-2738-4afc-a94b-0a5df22492bf"
        },
        "item": {
          "id": "55db1b36-97eb-4a25-986a-ba0bc5845458",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e5106e2e-d3bb-4101-bb13-9184f04aadf8",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2245c591-e70a-4584-b0e8-98298cb81a5d",
        "cursor": {
          "ref": "94ad26ec-457c-4640-bf1d-cd25dc4e2a74",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "eadff747-4d9e-44d4-b1e9-93cecfc7576c"
        },
        "item": {
          "id": "2245c591-e70a-4584-b0e8-98298cb81a5d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c17551f2-04ee-44f8-9f9c-a43af9028a7f",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1acc6ef9-f49b-46bc-bda9-7f5a68b9a104",
        "cursor": {
          "ref": "0291841b-50ae-4afc-bbe8-63908efb02f5",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f3dfef4b-a126-48ee-bd75-2b4a24de318c"
        },
        "item": {
          "id": "1acc6ef9-f49b-46bc-bda9-7f5a68b9a104",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1c27c0c7-b858-423c-aeed-339148880063",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "4fcad340-2b02-4ffa-8a7a-6c13183ef688",
        "cursor": {
          "ref": "8a589dc2-e31b-4889-be75-9b10262773ff",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "56c07e1a-dbf1-495a-9a05-001c996da30f"
        },
        "item": {
          "id": "4fcad340-2b02-4ffa-8a7a-6c13183ef688",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e4a0f87c-68d6-467a-a3a3-e80dac6624a1",
          "status": "Created",
          "code": 201,
          "responseTime": 423,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "9a548453-4fca-488c-8a88-4d91d190e60c",
        "cursor": {
          "ref": "3eafa616-4e59-4c81-8f6d-82efde419c76",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6a5f3f22-6188-420c-ac67-a2391ea509bf"
        },
        "item": {
          "id": "9a548453-4fca-488c-8a88-4d91d190e60c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b9fa4ba7-4ac0-4a0e-bf5e-9ab4d266d101",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "77633b6b-b9a0-4c45-9132-95ba3848f333",
        "cursor": {
          "ref": "c2177e36-f6ca-4546-95fd-0e870dc94c07",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6528085f-98ed-4ac6-a943-0422ee559495"
        },
        "item": {
          "id": "77633b6b-b9a0-4c45-9132-95ba3848f333",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "72172de1-c9a9-4250-8ddb-7c880f383618",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0c5f8ebc-c719-463c-b8b2-d6be4a58be23",
        "cursor": {
          "ref": "edf7c681-2022-42ca-b097-7aab5cd24023",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a4a7c2a4-f384-4744-a42b-1d4e58db3d99"
        },
        "item": {
          "id": "0c5f8ebc-c719-463c-b8b2-d6be4a58be23",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b7a871bc-62ac-4d99-874d-d2fbabe385ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5143c468-86cc-4cc7-a216-1343a9f2a078",
        "cursor": {
          "ref": "26e649b4-223e-448c-8c44-51c4bfa42592",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5085bcaa-8f92-4dbe-a2d7-5143b6cb5b48"
        },
        "item": {
          "id": "5143c468-86cc-4cc7-a216-1343a9f2a078",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "49ce61e6-d97d-4aa7-ba42-c152391709b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cb59e0-8607-4d69-84ef-6b36aa6119b9",
        "cursor": {
          "ref": "23e420d6-748a-4b68-b6d6-cb9d50f6bee3",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4c29c08a-1bc6-4dea-a298-616e5981fad8"
        },
        "item": {
          "id": "38cb59e0-8607-4d69-84ef-6b36aa6119b9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "20ec1e16-f704-4d52-b5ea-77d5679b0131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e90fdb6-ec8c-4cc6-a05f-c96fc9cd8bd4",
        "cursor": {
          "ref": "9bbeb396-cfc7-42d9-a95c-eeb16b8ee8a1",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0e82cf8a-4aa1-4c07-9d13-e8fbafd66f17"
        },
        "item": {
          "id": "1e90fdb6-ec8c-4cc6-a05f-c96fc9cd8bd4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0f227d84-0baa-4726-ab9a-4916cfbb5cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04cee09e-81aa-4325-8555-8d71466ccadd",
        "cursor": {
          "ref": "84013fe5-fa0f-4c80-9664-99670a0853d2",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4db4054c-7fff-4a6e-93b4-e2b66396ff07"
        },
        "item": {
          "id": "04cee09e-81aa-4325-8555-8d71466ccadd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8210565c-713f-4254-b4b6-25e532c664a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbb768c-8491-4201-b07d-b168d22968f0",
        "cursor": {
          "ref": "396ebf2b-94ff-4218-a5a5-69c4c08e2aaa",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "987a47e1-43ef-4771-91df-85d7d530ae99"
        },
        "item": {
          "id": "1bbb768c-8491-4201-b07d-b168d22968f0",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9d04c913-2a87-4cf3-9a61-ba38253dda90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d84a5c-cc27-4d40-82a3-c995c096bb3a",
        "cursor": {
          "ref": "54de86ca-f470-4961-9280-33a23078e37a",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c01a1fba-4214-4ced-8271-2ee34df0cb74"
        },
        "item": {
          "id": "b1d84a5c-cc27-4d40-82a3-c995c096bb3a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ef34ff6a-fe79-414c-bee2-43360a071556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38285abb-471f-4cc1-ae7a-8276bb2e1177",
        "cursor": {
          "ref": "b0ee8933-903f-4696-bba9-0b7aa608bf1f",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "57517e64-facc-43d6-8f78-34dd0c567a69"
        },
        "item": {
          "id": "38285abb-471f-4cc1-ae7a-8276bb2e1177",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e8ec6dba-1976-4180-89a5-fec5f6ee4da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d036e816-7be6-4d52-8c98-4da3296b0bca",
        "cursor": {
          "ref": "4aa6b7d6-e3be-4cde-94f3-29d799b5eb3b",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b4436e4d-3e2d-45fd-98f3-bf274d56b9b6"
        },
        "item": {
          "id": "d036e816-7be6-4d52-8c98-4da3296b0bca",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "52bbc18c-a5c3-484c-9529-6bb1a1d25552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7d8ee2-65d1-4724-b0ca-2191cb6eac23",
        "cursor": {
          "ref": "8abb4259-58b3-4d7a-95cf-83a4ee6c47a3",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "72287739-244b-446d-a461-f0c37744c48d"
        },
        "item": {
          "id": "4f7d8ee2-65d1-4724-b0ca-2191cb6eac23",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1d75f9ee-c5be-47f2-a6d7-4f3fbd828c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530e57e5-076c-46c6-8d7f-a9ff645d94bd",
        "cursor": {
          "ref": "bf387f11-ce50-4a66-a648-d9aadd289f2e",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c0988f03-3070-4d72-9180-49e76bd5fcd4"
        },
        "item": {
          "id": "530e57e5-076c-46c6-8d7f-a9ff645d94bd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c7312c84-03b2-443c-8391-f1623203e249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df09c27c-87f9-4a8a-bb47-02b858d439d2",
        "cursor": {
          "ref": "91d4b5fa-2f05-4eac-95d9-f868c407b7c6",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "34bd49ff-61de-4388-8b9c-47ed61b2e7ef"
        },
        "item": {
          "id": "df09c27c-87f9-4a8a-bb47-02b858d439d2",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8ad34e46-fd21-4947-ac4d-613762c8fb9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a017d2a-9439-4c36-8035-348fea6c852a",
        "cursor": {
          "ref": "68ac357a-7854-4291-b893-1abd8d50ce10",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1565121c-df08-48a0-bef7-25680b909ad8"
        },
        "item": {
          "id": "8a017d2a-9439-4c36-8035-348fea6c852a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5b34cf70-94da-40a5-9a10-d3c1b2f8b202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb90e6e9-a713-4040-b1be-e612835f8d83",
        "cursor": {
          "ref": "88f2be7c-7c00-4494-ac06-b41cde063e1e",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a1f37194-af03-4365-ae55-ae4f51fbd8fd"
        },
        "item": {
          "id": "fb90e6e9-a713-4040-b1be-e612835f8d83",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f11db98d-b9c1-4d46-88f5-36e47a4b1237",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "2fa8487f-7592-466b-9ad2-6b5fd8590687",
        "cursor": {
          "ref": "8bcc5b06-3d5f-4730-bd73-27c4b2a7f6ed",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "bd078b95-1a03-4b31-8e09-22a4d4f8b13e"
        },
        "item": {
          "id": "2fa8487f-7592-466b-9ad2-6b5fd8590687",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d4b9ffe5-f676-455e-b66f-1562b4248660",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "56248611-b167-4a63-b932-917454ad6e61",
        "cursor": {
          "ref": "69dd4620-947a-4fd5-a6de-f930654ed227",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "773b7421-5853-4707-9374-dc82345a6dcb"
        },
        "item": {
          "id": "56248611-b167-4a63-b932-917454ad6e61",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a9c62a68-7e3c-4002-ae21-f0945db3aaf2",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "96a22972-928f-400f-b7a6-badc292ebdbe",
        "cursor": {
          "ref": "601a5a40-4999-400a-991e-5e2685d9197a",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e759436a-5169-4a37-bec9-b1cafb9d5468"
        },
        "item": {
          "id": "96a22972-928f-400f-b7a6-badc292ebdbe",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0263d1ba-73c2-47fb-ac3d-d1d47f7ecb66",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "dfa4fc11-b727-4719-a961-47539475cba1",
        "cursor": {
          "ref": "69a9936a-f950-4887-8683-2f915b007d1d",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5aaad212-aa3a-4043-8b3a-95c640ff9357"
        },
        "item": {
          "id": "dfa4fc11-b727-4719-a961-47539475cba1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3c67cb4e-5a91-4c12-a094-72f9b857759d",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0c07df3e-b5cb-48d2-877b-ad5d3c2f3ba6",
        "cursor": {
          "ref": "a7110172-5527-41ae-acc1-a4e20df022e0",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1a2a9cbf-b79b-4e7f-be03-47e491e3947a"
        },
        "item": {
          "id": "0c07df3e-b5cb-48d2-877b-ad5d3c2f3ba6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b121061d-538a-410f-b189-3359dc6afe37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8cf4860-4e0c-405f-871d-f79ab3214ba7",
        "cursor": {
          "ref": "7bc19dfc-f6b5-41dd-b33e-8bc8b3b4ddc7",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "bc7a787f-70ad-49c9-86ae-2982dd737a6e"
        },
        "item": {
          "id": "b8cf4860-4e0c-405f-871d-f79ab3214ba7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "af223c38-562b-4766-ac2f-edaaec16e4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134fd5ec-8efa-45aa-be96-36e56f737783",
        "cursor": {
          "ref": "14cb77fc-1706-4a57-8f05-b866c8892535",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d15253ef-d9b7-421a-9a1d-0e01a7a129f1"
        },
        "item": {
          "id": "134fd5ec-8efa-45aa-be96-36e56f737783",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3bdfd191-7189-463d-8038-6a37b5150e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd9bd2e-b33e-4011-99f5-cb21cb2fb06b",
        "cursor": {
          "ref": "50e8f189-b57c-439f-a8ef-8e4cfd33486b",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f4686cdc-58ee-475e-a48f-1b8e1945069f"
        },
        "item": {
          "id": "2bd9bd2e-b33e-4011-99f5-cb21cb2fb06b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e2ee8bd3-7ff8-4bd5-9bc6-a06c424d245d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a3d51e-fa83-4154-a3f9-121410e452d5",
        "cursor": {
          "ref": "4040a6d8-2cb2-4b90-b079-e5ca03bfebfb",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e79bca9f-2520-41d9-ae92-83ca2aba43c6"
        },
        "item": {
          "id": "86a3d51e-fa83-4154-a3f9-121410e452d5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "57727f3b-0a04-4e6f-8298-260ab568bc24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68cc8a3-a465-43cd-bd8b-578e5b1963b8",
        "cursor": {
          "ref": "97c1487b-057f-463a-a445-e903484ac6c8",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b2ec9232-c632-4e67-8cfd-9ca04b4d8181"
        },
        "item": {
          "id": "d68cc8a3-a465-43cd-bd8b-578e5b1963b8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "402afd03-9521-4bcc-965d-dbd56733fb8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce18926-fffd-4e46-b08a-c8f8c933e0ca",
        "cursor": {
          "ref": "b42f12d9-f836-4ac8-97d9-64cddd1011be",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "63e4fe78-ffca-483a-b8b6-3ade3856b990"
        },
        "item": {
          "id": "6ce18926-fffd-4e46-b08a-c8f8c933e0ca",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0ec2fa97-63a4-40d0-ba08-e9dfe9767e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e293975b-68a3-4f7b-bad2-c69fdd36b568",
        "cursor": {
          "ref": "47fe1741-a6f4-477d-be0e-467930e9cf9a",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d07e49b2-ee7d-4145-af4b-3c15a9e1a7c3"
        },
        "item": {
          "id": "e293975b-68a3-4f7b-bad2-c69fdd36b568",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "cc89b471-358d-4b96-a8e8-f868a9ccfac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd7fc37-9d0b-4c50-acf9-35c85f9d8adc",
        "cursor": {
          "ref": "47ac8c94-7299-4cbe-8dd7-78fb87579beb",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c734b2a9-dd82-4565-89fa-c8d68cc88d71"
        },
        "item": {
          "id": "ffd7fc37-9d0b-4c50-acf9-35c85f9d8adc",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "88611598-f66b-450a-a262-7b8c7c6aed2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41116009-aeda-4ac4-9e28-72219255ab83",
        "cursor": {
          "ref": "e0b8cc4b-abdf-4572-b0e5-d09f9c50a530",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e29e455b-977b-4c55-903e-21340cd1810c"
        },
        "item": {
          "id": "41116009-aeda-4ac4-9e28-72219255ab83",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e893608a-885e-4365-841c-04430eb77380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143d5299-1ec3-47ac-b07d-f5783465cf63",
        "cursor": {
          "ref": "47275c33-50b7-47a3-9f09-c6000366c681",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cd8a5ab9-69bb-4341-b065-a977f4b60cc4"
        },
        "item": {
          "id": "143d5299-1ec3-47ac-b07d-f5783465cf63",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "63d69fd0-6698-44e1-b1e5-9c763a7762df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12117342-05d0-4a88-9842-163739b2aac6",
        "cursor": {
          "ref": "b12b6f5b-078f-46d5-8611-673170ed94a8",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "522b2092-a972-45e1-b0b5-c8e65c553f7a"
        },
        "item": {
          "id": "12117342-05d0-4a88-9842-163739b2aac6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "98b556f6-05b1-42ae-be88-a45d7154242e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea2c3e5-b81c-4d86-8f7b-e6010d9b3dc1",
        "cursor": {
          "ref": "4d8fac33-1d1e-4621-8e14-533f9d08949d",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f2774aa6-a7b7-4629-935b-1e9009544e36"
        },
        "item": {
          "id": "dea2c3e5-b81c-4d86-8f7b-e6010d9b3dc1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e7b23a73-c645-4ebe-b152-9f61e2e9d4ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b331065-8ccf-4a18-b76c-6bde6af59b43",
        "cursor": {
          "ref": "3bd60f9c-d092-4d78-b172-ec8952fef6d5",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "21a4cf7d-7c62-45fe-9681-2f3d8c99dadc"
        },
        "item": {
          "id": "4b331065-8ccf-4a18-b76c-6bde6af59b43",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f1b44fca-ca44-44a1-82af-52a3afe0d666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ed2f94-6c70-4e64-9911-41514db0a1b7",
        "cursor": {
          "ref": "759df4f6-15ad-46be-b4c3-e9c94bf64c38",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f7defd41-8be3-4a52-911b-cac2bfa78ec0"
        },
        "item": {
          "id": "f6ed2f94-6c70-4e64-9911-41514db0a1b7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8fd06785-e850-4d26-bd92-b041d91ffbfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cff0cf-54e4-4d45-8616-4aed9c871611",
        "cursor": {
          "ref": "b3c3b4f5-f192-49a9-b41c-91226f6f2fa8",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "aa137324-7355-49f7-a5e1-d0bb75fdacc1"
        },
        "item": {
          "id": "06cff0cf-54e4-4d45-8616-4aed9c871611",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "fe3d47de-4d75-45d1-a971-714a6df74b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edeb6eb0-1004-44be-85a7-547bf86fa625",
        "cursor": {
          "ref": "7bb59826-19e6-4b77-8ddb-e456c49c4cb0",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "71529008-dec2-4d5f-83af-ece96e24baa0"
        },
        "item": {
          "id": "edeb6eb0-1004-44be-85a7-547bf86fa625",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3cae08ab-f4cb-4963-8c7e-314ef825a6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4c8d65-cf29-466e-a73e-a5ccbc50e015",
        "cursor": {
          "ref": "a9d11802-f512-4378-a420-ad0e68bc9f1b",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "afc84bce-7b24-43ef-aca2-ae7bf88aedc2"
        },
        "item": {
          "id": "1f4c8d65-cf29-466e-a73e-a5ccbc50e015",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3285ac50-c0f7-4d0c-a44c-8c5813d2c8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9568fc0-2417-476a-925a-9f5e67107d07",
        "cursor": {
          "ref": "747142eb-6f16-4253-ad1a-51f21452a3f5",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e3746a70-de1d-4a95-83c8-a3649b6fa31b"
        },
        "item": {
          "id": "a9568fc0-2417-476a-925a-9f5e67107d07",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "479bcf75-07a2-4412-a28b-667272597280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acf4677-6e17-41a7-907c-e4227a358c6f",
        "cursor": {
          "ref": "8d1e8dc0-ee46-4689-9ef5-6b7a5dc61773",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3ac579f5-8400-4a9d-8efb-d1316cfc7481"
        },
        "item": {
          "id": "9acf4677-6e17-41a7-907c-e4227a358c6f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ef745b31-e912-497e-ba5e-2299fa1fca0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb3020c-0acd-4649-b26b-50b2e417eda2",
        "cursor": {
          "ref": "61185b66-b030-4ce3-8101-335f25c0f1ef",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "be6f7a07-d90e-4a16-a7f2-316c45846191"
        },
        "item": {
          "id": "3cb3020c-0acd-4649-b26b-50b2e417eda2",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "56774777-f089-482d-8556-9e8bdbd66cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aba916e-0805-4157-8dca-90e1701cee40",
        "cursor": {
          "ref": "7c27b9f1-41b2-471e-8699-1cd75c84ac8a",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "27503cbc-2824-4476-947b-15d80ff98549"
        },
        "item": {
          "id": "1aba916e-0805-4157-8dca-90e1701cee40",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d8faef93-19d2-4f4f-b002-0d4875ff45e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809b7725-aa68-4254-a8d9-c3f1973feeeb",
        "cursor": {
          "ref": "4720bd11-5c7c-497d-bd9b-54e0e3e7e5d7",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c83cbfe0-dfcf-4c90-a464-d4b0aee9356c"
        },
        "item": {
          "id": "809b7725-aa68-4254-a8d9-c3f1973feeeb",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9a4bc012-474f-4e5d-980c-28cd5128aaed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c24c530f-1196-4e7b-a4bd-bf89f0f71ea4",
        "cursor": {
          "ref": "c7e0488f-3a23-4670-84a0-2993a5eb6c25",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3213d1d3-0769-43f8-abfb-32ec7b7350c1"
        },
        "item": {
          "id": "c24c530f-1196-4e7b-a4bd-bf89f0f71ea4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ce3e2c64-fc49-4ca2-84c6-b0703c4b7307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d94c3b-c349-4721-8429-bb65460df479",
        "cursor": {
          "ref": "02a4cce8-615e-4b1d-a6df-8e8f588c2e85",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f846a9ac-384a-4752-bbbf-dbb1eac848da"
        },
        "item": {
          "id": "58d94c3b-c349-4721-8429-bb65460df479",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "76bdb7b8-aee8-485f-b064-019131d00b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32d24d9-0a34-4376-a67b-b86e04002736",
        "cursor": {
          "ref": "a5f31e91-366e-4de7-bfdd-08f8c2430014",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "523c393b-0d89-4c4d-9dd4-207c889b8814"
        },
        "item": {
          "id": "b32d24d9-0a34-4376-a67b-b86e04002736",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "fe552b26-aaa6-4396-b333-4a16a9379b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbbb59b-f15d-4c47-b738-e090fa8f525a",
        "cursor": {
          "ref": "dd0fe628-5a56-4342-ac4c-e293460b82be",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "77dfdf65-abdd-47f9-b3ba-52aaaedaea35"
        },
        "item": {
          "id": "acbbb59b-f15d-4c47-b738-e090fa8f525a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c38ca4b2-84fd-4c64-b63d-bc110c6c9e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c3346f-6cdf-4039-9b87-d3038e25ca9c",
        "cursor": {
          "ref": "0461a851-490b-4cc7-b284-dbfbe57a257b",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b00f5452-442c-4c35-8f6f-61aeea3a85af"
        },
        "item": {
          "id": "12c3346f-6cdf-4039-9b87-d3038e25ca9c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c93b1fbb-a380-411a-8a6e-71cdaa4f6372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc1d497-205a-49c1-afd7-66d9b900f88a",
        "cursor": {
          "ref": "49843606-013b-4e80-9a0e-5d77f3af359b",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "737fdf75-ae71-41b7-8165-de3cf9c6b89d"
        },
        "item": {
          "id": "0dc1d497-205a-49c1-afd7-66d9b900f88a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0aa9aa9a-53b8-477a-86fd-34958a97becf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a277f86-cbf7-452b-9316-f02c12179b2a",
        "cursor": {
          "ref": "616e81b4-948f-4bf4-884c-c2e87033e180",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0151c5af-df48-4ae5-a656-689701cd636e"
        },
        "item": {
          "id": "4a277f86-cbf7-452b-9316-f02c12179b2a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "225d6def-61a6-4e60-aa09-66d953833e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84014dbc-a57b-4c7a-bf77-1644d3c59d68",
        "cursor": {
          "ref": "010e22d3-1889-4038-84af-b3545bdbf576",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4a65f6ac-23dc-467c-83ff-28165606ee38"
        },
        "item": {
          "id": "84014dbc-a57b-4c7a-bf77-1644d3c59d68",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e0dbf7ad-e4e9-47d9-b79e-321ae0c64a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9f3ac6-ee7a-43c1-b7e4-9be79ff64668",
        "cursor": {
          "ref": "97f2b39d-ed6c-4cf3-a1c0-cb8f7bdd8218",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "fc9ec1e7-01a9-4c10-8e6d-d00a368085e6"
        },
        "item": {
          "id": "0d9f3ac6-ee7a-43c1-b7e4-9be79ff64668",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "47875559-dfe5-423e-9824-3dc3872384f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cee3c00-d48d-4795-a944-b3b96cc7481a",
        "cursor": {
          "ref": "776ba1e4-701d-4c60-ae2d-f39bafc5f2a9",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "00c65bae-f3cc-46da-934b-e9314fa2f4d1"
        },
        "item": {
          "id": "9cee3c00-d48d-4795-a944-b3b96cc7481a",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "90a9c038-34e8-462a-b0ec-75cd2ea0ce92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "3f7a4b10-a27e-4a6e-b5a5-fca45a647446",
        "cursor": {
          "ref": "3f639a05-87da-413f-9154-16906eae462b",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6a85a207-aef0-4d76-8fe3-f44d3c937d6b"
        },
        "item": {
          "id": "3f7a4b10-a27e-4a6e-b5a5-fca45a647446",
          "name": "credentials_issue"
        },
        "response": {
          "id": "623b9cc6-bfd8-4495-94f5-3853848620ae",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a7c87b-215b-4ded-b50e-89b4a09b3897",
        "cursor": {
          "ref": "1034958d-ce7f-47c6-b4af-879c4202241d",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7bf84bae-1146-4464-9e0d-06aa2e7e7187"
        },
        "item": {
          "id": "91a7c87b-215b-4ded-b50e-89b4a09b3897",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "cc5534c5-e389-4a35-b07b-8b9b985c7deb",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4224f6eb-9547-46c2-9eee-23c6680546cb",
        "cursor": {
          "ref": "06de792f-5d6f-4f89-a8a1-5209a2a0f92a",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1a1851d6-5751-4c5a-ab80-c2c6a797a1a1"
        },
        "item": {
          "id": "4224f6eb-9547-46c2-9eee-23c6680546cb",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "dc9ab069-6c3d-4e24-9c18-59dc219e50c0",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3e4f63-2ba0-4d10-8778-9d8531e51e30",
        "cursor": {
          "ref": "99eb17f0-58ab-45e4-a55b-eeab2b37b39c",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1c8902c3-d6fc-47f8-8a88-32e6069a261e"
        },
        "item": {
          "id": "eb3e4f63-2ba0-4d10-8778-9d8531e51e30",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "117dcfbf-743b-4764-96a0-8ee853f39923",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1516ab-ab0c-499f-ae52-d4437d194131",
        "cursor": {
          "ref": "d4e7f2d2-8260-452b-bbe1-b4684fa95e66",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8bfa48bd-1b14-419a-aada-60ac5e95170d"
        },
        "item": {
          "id": "fd1516ab-ab0c-499f-ae52-d4437d194131",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "99fa913f-10a0-4120-8427-dc411f45f5b4",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-23T00:33:25.876Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-23T00:33:25.876Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d9b40dfd-38cb-4dff-add4-f215685d9fdd",
        "cursor": {
          "ref": "997ec929-263d-47c9-b4b9-e6a08e692dc4",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f8d57aea-8555-488e-bddc-fb2822ea992e"
        },
        "item": {
          "id": "d9b40dfd-38cb-4dff-add4-f215685d9fdd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d0d9c148-4cac-4151-bf92-65e649bbedf6",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b77b5c-4e6e-406b-9baf-86d67a3390a6",
        "cursor": {
          "ref": "346dfb78-b061-4da2-b330-8e4760db1205",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ae115cc7-5f9c-4b32-827d-4eae336fff50"
        },
        "item": {
          "id": "17b77b5c-4e6e-406b-9baf-86d67a3390a6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e839f499-7f07-4d49-a5ae-a65fe8e68dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4adae0ee-fca9-4154-8063-eb440793c522",
        "cursor": {
          "ref": "d567c7b5-da13-481f-a64d-8f558d812ebe",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "817b7f80-82c5-4651-a6e3-d8eea3e8b12b"
        },
        "item": {
          "id": "4adae0ee-fca9-4154-8063-eb440793c522",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9c8edfea-4983-4564-81a7-b81615bec0f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d34c78-7f27-42da-8b41-fec2db7b538a",
        "cursor": {
          "ref": "9927b079-8e06-45cf-9dd8-39dd522169aa",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "98ccb645-1f18-4d35-88a1-ff65adf57474"
        },
        "item": {
          "id": "b8d34c78-7f27-42da-8b41-fec2db7b538a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e4cf1d1f-880f-4a94-aed4-eeb7869e6417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f63c005-5c0b-41e2-bab5-38cb82db53d8",
        "cursor": {
          "ref": "de2d56b7-c41c-4d32-9189-b89b93fd985a",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "111a0942-10ba-41f2-a3bd-17658bbc5be2"
        },
        "item": {
          "id": "7f63c005-5c0b-41e2-bab5-38cb82db53d8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ab481f3a-9d3f-4429-a97c-4f9e044f9ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e3066b-76f4-4e97-ad6a-acdcebd0b28b",
        "cursor": {
          "ref": "b478539b-a075-4547-a4b0-db7ad58463e2",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f251772f-494e-4876-aeef-aff4fe6d299d"
        },
        "item": {
          "id": "70e3066b-76f4-4e97-ad6a-acdcebd0b28b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6ad77716-fd40-431c-ac5a-6a71dfc96ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7e1a77-75b7-4060-924e-63af2f50fb8b",
        "cursor": {
          "ref": "39715216-a5cd-49d9-82bc-8e9bcd049a7d",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "223ffad5-a9e0-4567-9f3f-1fe8f1cfad8e"
        },
        "item": {
          "id": "7d7e1a77-75b7-4060-924e-63af2f50fb8b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "656a0577-7961-47b1-92df-8faab06e9a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e4f508-e261-44f3-b0ee-041bcb0ec5dd",
        "cursor": {
          "ref": "10194789-6c95-46f7-9d76-88262de2f100",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5fc73413-97b0-4c5f-bae6-ff47a57a3408"
        },
        "item": {
          "id": "92e4f508-e261-44f3-b0ee-041bcb0ec5dd",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "837fd4b6-ed7a-4fff-be52-8715fb929edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f6836b-8fee-4965-91e1-3d4ac4fc83b7",
        "cursor": {
          "ref": "fc81b779-bc74-4df2-a514-c5fad8fe9829",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "129843df-3078-4547-b69c-a6714f7afa2a"
        },
        "item": {
          "id": "c5f6836b-8fee-4965-91e1-3d4ac4fc83b7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7a49aa6a-17f6-45e8-a81a-8e194168409e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a78201-7157-4a2d-83a7-a821e05623c7",
        "cursor": {
          "ref": "3b6c1fb4-0e52-409f-a782-e02afa1012ed",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fa21b514-bb8e-483c-bdb0-29d0f1968047"
        },
        "item": {
          "id": "26a78201-7157-4a2d-83a7-a821e05623c7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b95c2225-60e7-4551-baa9-3020c1433e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad7667e-5649-4ffd-a041-31eabf430449",
        "cursor": {
          "ref": "b085a11a-5f38-4280-a9ed-cff1ef80681b",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d3d2b597-6372-4606-a992-d9ba9a18936e"
        },
        "item": {
          "id": "0ad7667e-5649-4ffd-a041-31eabf430449",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2c20c399-8b19-4f49-8c7e-757fd0ed8044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013108fc-6050-4de1-973b-a362a7e7c347",
        "cursor": {
          "ref": "f92b7623-63d8-43e0-a120-c973aa478b44",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bc15de42-b805-46e2-9f21-398cd982acf3"
        },
        "item": {
          "id": "013108fc-6050-4de1-973b-a362a7e7c347",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8774a080-efed-4327-9acd-3198c3101ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63db402-49f2-4f31-9240-905fa2535e80",
        "cursor": {
          "ref": "37675c90-914b-4f7a-b20a-28c81f8c5c07",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "eeed5c4e-cfed-408e-a4e3-59244495a7e4"
        },
        "item": {
          "id": "b63db402-49f2-4f31-9240-905fa2535e80",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2b894533-48ae-4e61-ba7e-0aef1a4bbdcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57361207-089e-4829-be8f-1d4466a8a339",
        "cursor": {
          "ref": "9a14fa9a-36b9-4588-b629-a2ef6829d410",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0aabcd3e-b830-491c-9cea-4fed1a26efc0"
        },
        "item": {
          "id": "57361207-089e-4829-be8f-1d4466a8a339",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "c85cb48a-2ef7-4c5a-87b1-536281dc27cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "af34f1cd-4e39-449d-8aed-0dd03d2b0d9a",
        "cursor": {
          "ref": "e0fa5816-072f-494b-b69a-d86831476128",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d9153bb2-8a37-4ab5-a447-4c99dcf4fd69"
        },
        "item": {
          "id": "af34f1cd-4e39-449d-8aed-0dd03d2b0d9a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9ee5d591-6451-40c6-9e33-6831bdea5cbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "37780526-b524-46ac-836d-10ca3dee97c9",
        "cursor": {
          "ref": "bc72a19b-50ad-4c8f-8749-85195a0baef3",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0108c6c4-1f29-4467-b426-67cee4b7c686"
        },
        "item": {
          "id": "37780526-b524-46ac-836d-10ca3dee97c9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ecbd4fdf-16bd-4226-9cb2-4875995731e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07b8888-50d0-484c-a2dc-de49b8153ff9",
        "cursor": {
          "ref": "ce2e2013-bb50-4474-8816-842f3542b7f8",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b99410be-0668-4514-b49e-bf50323ea26f"
        },
        "item": {
          "id": "b07b8888-50d0-484c-a2dc-de49b8153ff9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "97cf85d7-4e5d-459c-b640-81edff13d084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ad4e35-f1f5-4f27-9780-958a0e53c784",
        "cursor": {
          "ref": "e631e861-b4e6-4fe4-b431-77a9b11fa4d2",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "af031b2b-e345-40c2-938e-8122bea98dbd"
        },
        "item": {
          "id": "f8ad4e35-f1f5-4f27-9780-958a0e53c784",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6e46102a-c74d-4889-93b9-ee4246407cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d01fbf8-e556-4a6c-9452-b54b70a1dc83",
        "cursor": {
          "ref": "af7ab999-ece2-40be-aba8-ee88fdb01be2",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "aba7b946-a9da-4c5f-b162-88f749c5086c"
        },
        "item": {
          "id": "4d01fbf8-e556-4a6c-9452-b54b70a1dc83",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f764dee5-963d-4983-866a-9b271a89088b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91566c1a-9757-4c5b-a76f-c0154a7ba573",
        "cursor": {
          "ref": "ecb024b2-3482-4454-85ba-598e6109d32e",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1175a492-da91-4cbe-8477-9b8d34ba008c"
        },
        "item": {
          "id": "91566c1a-9757-4c5b-a76f-c0154a7ba573",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8497350a-9f3a-4adb-917a-b229fa1687ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f563d054-12aa-4a84-9a94-d0952f57ea30",
        "cursor": {
          "ref": "a9fb8607-ee95-4e61-b0fd-869458b56824",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4fd2e72b-98f8-44d6-8b00-2d591aa68424"
        },
        "item": {
          "id": "f563d054-12aa-4a84-9a94-d0952f57ea30",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c965c150-2204-4260-a20d-a433b730437f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e0c6ac-3d48-4bef-9cb8-630253839d4f",
        "cursor": {
          "ref": "49adaf5b-c1de-4f48-919a-01904567f45d",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "14835965-3b10-44c7-a60e-4f897946b1f3"
        },
        "item": {
          "id": "91e0c6ac-3d48-4bef-9cb8-630253839d4f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "40e2a428-2f6b-433c-afef-39a0127a2e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750a4bae-cafa-4090-ab70-901f4c3773eb",
        "cursor": {
          "ref": "956f7dbe-ce0b-4098-b48d-8095ba320251",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "97aed794-6d34-46a4-ba27-d6eeb611b6c0"
        },
        "item": {
          "id": "750a4bae-cafa-4090-ab70-901f4c3773eb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "825d0a0c-dabe-441c-a2d0-5ce75dd700d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b975cb-ba31-4317-8366-f95f2e54755f",
        "cursor": {
          "ref": "67a1092b-2eb0-4a45-9257-88075d52f6fe",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "265f91ae-c448-4471-9a94-63e412f781fc"
        },
        "item": {
          "id": "d3b975cb-ba31-4317-8366-f95f2e54755f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cc8531ef-e96c-4ccb-9fb2-d31b32df4d24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341a777b-b28a-4787-bbfc-8314b43c37d6",
        "cursor": {
          "ref": "18b0aae2-907b-4dc4-8327-bc01b9eb072a",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "171acd6d-263b-49ca-a0f1-83d9c4351ad9"
        },
        "item": {
          "id": "341a777b-b28a-4787-bbfc-8314b43c37d6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "71edb13c-3328-46dc-a289-550a03954461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e5c5dc-2de3-41d0-87ba-a8f15b0e5beb",
        "cursor": {
          "ref": "723e2412-c719-4f32-96a9-392ed883945c",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "237867e4-af30-4dae-83da-5f0c1e5ef570"
        },
        "item": {
          "id": "02e5c5dc-2de3-41d0-87ba-a8f15b0e5beb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4d4c34b0-8779-4501-aa99-756832e9ad27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f25411-45c5-4a9c-bb6e-ae2fc2802488",
        "cursor": {
          "ref": "1358233c-a1a8-453b-bae7-c053abdf72a5",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a0c5841a-83bd-44d4-b2fb-5a2295910365"
        },
        "item": {
          "id": "e7f25411-45c5-4a9c-bb6e-ae2fc2802488",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c5854149-f962-43cb-bcb3-24e2548085f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe46e2f-1f1e-4319-abda-cd983bcf2dfd",
        "cursor": {
          "ref": "a01a7def-314e-4e82-98fa-406d2c82bd63",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b26a635c-92f1-4059-b9a4-0e85d0f3dca6"
        },
        "item": {
          "id": "5fe46e2f-1f1e-4319-abda-cd983bcf2dfd",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "14b87ebe-8e5c-43c6-bfe1-33d307451a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35a39d1-2f24-45d8-918a-7bc07f368959",
        "cursor": {
          "ref": "07d08b4a-63cf-447c-8dc7-4f93fe7591bd",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c19cb55c-2b5e-4aa7-b147-8bb2fafd516d"
        },
        "item": {
          "id": "d35a39d1-2f24-45d8-918a-7bc07f368959",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "04413bae-c582-4af6-9e10-5152f5d2b894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f05225-970b-4e06-9e5b-86bc69992421",
        "cursor": {
          "ref": "a117dc88-bee5-4982-851a-884576000ca7",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d8744225-1ed9-4e6c-841e-851a72cf5bc1"
        },
        "item": {
          "id": "d4f05225-970b-4e06-9e5b-86bc69992421",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "43320e1d-8653-4b8d-bf8e-c8e69b819b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5330a23e-5020-4169-b9a0-8a463473df54",
        "cursor": {
          "ref": "054018af-cac7-4099-8005-14f3da470c35",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "be408eee-b3b4-4f8f-a70b-4409bc5ca7d6"
        },
        "item": {
          "id": "5330a23e-5020-4169-b9a0-8a463473df54",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ec75e8bc-955f-4021-b80f-78c6fa3fe994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4287fb1c-005e-4aea-ba5c-4a08b436e298",
        "cursor": {
          "ref": "944ac628-4ead-49f7-95a4-3e3e7f9d16f9",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "68a7088c-aef1-4802-b3f5-dcf76604c8d2"
        },
        "item": {
          "id": "4287fb1c-005e-4aea-ba5c-4a08b436e298",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "527ce4cb-6e07-4e9e-9755-aa794a28a844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575cb518-2435-4dbd-9fb1-a3998b4daab6",
        "cursor": {
          "ref": "310157f2-57c0-47e1-ad4e-c64d88e2e4e9",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "6d5f6e5e-89af-441b-9da2-4d4caf3f74cb"
        },
        "item": {
          "id": "575cb518-2435-4dbd-9fb1-a3998b4daab6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2b1805f9-37be-4d48-aa5e-df0ba76b2b83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "63e345e8-90c4-4b10-bcb5-7b4efd856ac2",
        "cursor": {
          "ref": "7b23b7fa-69c9-430b-986b-89f56d7a7496",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "465f745d-dc64-423a-90cf-67ca17dc7e87"
        },
        "item": {
          "id": "63e345e8-90c4-4b10-bcb5-7b4efd856ac2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "dd347122-a8f9-4a35-a484-cd642f3ee294",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b57953-6e8d-4e7d-8427-a95dd6866e1b",
        "cursor": {
          "ref": "4ae68e65-e272-4f28-a0ed-70f26596cb56",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8211daa3-c181-43de-bc24-06164bbf8b49"
        },
        "item": {
          "id": "51b57953-6e8d-4e7d-8427-a95dd6866e1b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cb2f3fa2-228f-426b-a45e-7cb4e3e1547d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c87b8f7e-9871-46dd-9a7d-2c347c1486ba",
        "cursor": {
          "ref": "55652253-c34a-4c5f-8eff-84cac2913913",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a8ed5904-15b3-45b1-9b14-3a095f084ceb"
        },
        "item": {
          "id": "c87b8f7e-9871-46dd-9a7d-2c347c1486ba",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "96105ada-44bc-42d7-beb5-835a1dd5bc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4baccc5-226d-4db2-84b1-6b7fe8c0e0d2",
        "cursor": {
          "ref": "269eba8a-a3a0-41ba-b07f-3742b012b21f",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "30edc35a-8cf2-41e7-afe2-d5e3b5eae99f"
        },
        "item": {
          "id": "c4baccc5-226d-4db2-84b1-6b7fe8c0e0d2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d95aeb6d-0210-4206-be74-efd735ba21db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e9054b-7eec-4efc-99be-fd234751a35d",
        "cursor": {
          "ref": "44c902b6-05a2-486e-a20b-20549e3861c0",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "449ca6d7-b015-42a0-b8d3-df13a8fe3183"
        },
        "item": {
          "id": "c4e9054b-7eec-4efc-99be-fd234751a35d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "795424e1-81c1-448a-90b1-f34bb4155629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e5803d-d82b-4b1c-8c10-cd925d10472b",
        "cursor": {
          "ref": "123096de-5f4f-418e-81ee-22cc81bcc0e4",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f671c4ec-9bc2-469e-8eeb-e455cb8c3836"
        },
        "item": {
          "id": "63e5803d-d82b-4b1c-8c10-cd925d10472b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "874d7727-a4bc-4003-9190-83c9699d5a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85fe4286-2ae0-462c-8ccf-0194871568ca",
        "cursor": {
          "ref": "679cee6f-1882-4d9e-ab51-f01f486af6e1",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "47f7160f-14f4-4891-b3b4-a02aa6f9d3b5"
        },
        "item": {
          "id": "85fe4286-2ae0-462c-8ccf-0194871568ca",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b1468a8e-47ee-4610-baa2-b16a9af2a7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714de390-5f54-4b13-bfa3-62e95ee10416",
        "cursor": {
          "ref": "d3383315-f0c2-4b49-923a-4dae2bffafe6",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e03d60ef-8c9f-4f2a-af1b-23af527e20cc"
        },
        "item": {
          "id": "714de390-5f54-4b13-bfa3-62e95ee10416",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2f866bb0-9606-4a87-b89a-36752ffd5294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2b93a2-a5f4-407b-9481-b8200c36f1f4",
        "cursor": {
          "ref": "3db9879a-0e5e-4933-85ab-0c671b0ad9cd",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1bc1eda6-2720-4d0d-a720-903a160e6962"
        },
        "item": {
          "id": "fe2b93a2-a5f4-407b-9481-b8200c36f1f4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "506f34c1-981f-4541-862a-dbc7f1ad4d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f423fd05-0983-452e-a680-e10a3f37d76c",
        "cursor": {
          "ref": "7fddd63d-0112-4275-af37-ea7cc47f9d39",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0ca96ed7-0753-4c12-b9f1-5dc1e899f789"
        },
        "item": {
          "id": "f423fd05-0983-452e-a680-e10a3f37d76c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bbe34738-fd2f-42d6-8bf2-c768df51463d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38da87b6-d028-4887-9b48-812b3bca15c3",
        "cursor": {
          "ref": "fa39f2c7-512a-415c-9284-c4330787c5cb",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "35b85fc4-59ff-487d-9db5-68de6fab0c30"
        },
        "item": {
          "id": "38da87b6-d028-4887-9b48-812b3bca15c3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e0029f5a-f018-482a-a933-440c44c25132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8184348d-647d-4ad0-9a3d-f0b1838cb4ed",
        "cursor": {
          "ref": "40ebe978-a0ed-4c91-8ab5-e26d5ede6c47",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "78403a55-d97b-4651-abe1-100ed23d1a0a"
        },
        "item": {
          "id": "8184348d-647d-4ad0-9a3d-f0b1838cb4ed",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "384326dc-7a26-40d8-b14b-300ef6a4f333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296888ce-a3f0-45aa-a463-462fa1afc3bf",
        "cursor": {
          "ref": "02d45977-c530-47e3-bd63-ddec7f909157",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a37ff8b2-8ee8-4250-a8b7-cc9dfa009067"
        },
        "item": {
          "id": "296888ce-a3f0-45aa-a463-462fa1afc3bf",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8c2c4d04-40f7-40c0-9349-8c7ce84ee692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6aae2c-910d-4907-bd5d-e288ac614ab6",
        "cursor": {
          "ref": "3e793cee-be68-4904-9a08-20e69e7bc68a",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d42aee59-8786-4cc4-a67a-d356deac395a"
        },
        "item": {
          "id": "2f6aae2c-910d-4907-bd5d-e288ac614ab6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b45275f3-dc93-4e43-b5d9-14b56c6c7ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba40ae2d-9622-4bfa-bf63-e4cc0e6dd9b6",
        "cursor": {
          "ref": "0acc55b6-5cca-42c0-bb46-4787526bd2d3",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "69d428bc-6bd9-4615-be52-77bd08b05496"
        },
        "item": {
          "id": "ba40ae2d-9622-4bfa-bf63-e4cc0e6dd9b6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a68ff5cd-eb7a-451e-bb1d-599b07b994c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "c98dab53-880b-46e1-9b44-7a9c6e61c9eb",
        "cursor": {
          "ref": "83e1bde8-dced-4ac1-a506-acd8935e217c",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "98a49f35-e201-457c-bf12-d88b87c6537a"
        },
        "item": {
          "id": "c98dab53-880b-46e1-9b44-7a9c6e61c9eb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "911c491d-9638-451f-b1f2-3c5108a4edda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f53517-6e40-4fc4-beca-d07d5342ce71",
        "cursor": {
          "ref": "8403141c-2bd0-4907-992b-3ba3f5e262ec",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a6572590-bd24-49f3-81f1-5f4c149d9285"
        },
        "item": {
          "id": "93f53517-6e40-4fc4-beca-d07d5342ce71",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "93dc0c0f-e1ae-44b3-a3f4-364700b4e79e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c12c96-dbf6-48aa-9275-6c1a42dda447",
        "cursor": {
          "ref": "006e9447-7213-47af-bcd1-9e5badae1f37",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4cf1cc12-61f2-4221-8cd8-772005a9aa46"
        },
        "item": {
          "id": "c6c12c96-dbf6-48aa-9275-6c1a42dda447",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fb2da2fd-092a-43bd-b87c-328d5b9e27df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f73a81-e47d-4f71-9bfe-5f7c5096a59c",
        "cursor": {
          "ref": "01a2bd95-2e5c-4a71-94ce-5a82f1204435",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c7f18ac4-d182-490c-8a74-028bb71e78f0"
        },
        "item": {
          "id": "65f73a81-e47d-4f71-9bfe-5f7c5096a59c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "57b7d983-d77b-407e-8537-23e8d7e0bfcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7024743-f599-45a3-ab81-cb7ee9a5aaba",
        "cursor": {
          "ref": "f8eb0bc8-08e9-42db-95bb-49ef42cfd232",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "665b4cb4-faf5-4f4d-9681-5dd0bd23f2bd"
        },
        "item": {
          "id": "a7024743-f599-45a3-ab81-cb7ee9a5aaba",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f7447612-b57f-4d93-a3ac-ca2e65d11014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68db8506-606a-455b-b92f-086f82d34903",
        "cursor": {
          "ref": "a01bc8bc-f1d5-4f01-a25b-653e9f6cf69b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fff630d4-6dfb-4a54-a60a-904f6634452e"
        },
        "item": {
          "id": "68db8506-606a-455b-b92f-086f82d34903",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5392da8b-c152-4e01-b0bd-1ae8f46eb1f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de80b721-7f0d-4e77-bb37-7f3ed4e0c37b",
        "cursor": {
          "ref": "e467ca9c-34ea-4126-afb8-7407f2faacb6",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ed80df52-5057-4a8c-8194-701d3637eb0a"
        },
        "item": {
          "id": "de80b721-7f0d-4e77-bb37-7f3ed4e0c37b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1857bd6d-367d-4c66-9780-1d7c23df173a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e966120e-6946-4704-8f89-952b96f4e32d",
        "cursor": {
          "ref": "3d0b4110-a62d-4a27-a0fc-aaef81475ed7",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1947e648-6f48-468b-b13a-69e914de7c1f"
        },
        "item": {
          "id": "e966120e-6946-4704-8f89-952b96f4e32d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3f7e37fb-7e48-44de-a47b-600bd94a3105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f0c6eb-cf07-4bb3-b6e3-9187305492d5",
        "cursor": {
          "ref": "da8332bc-5732-4d08-9d40-102e4000e538",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a252a8e0-fe14-4ef2-a3d2-cfbf659bae16"
        },
        "item": {
          "id": "e4f0c6eb-cf07-4bb3-b6e3-9187305492d5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "20f4b0d0-3f8a-4cf0-a3e1-c28689a082dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a3d4210-8503-4a46-ad52-1cc0e1874202",
        "cursor": {
          "ref": "6e4f5045-2c2b-4a73-af5c-7c98706bdcfe",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e18e754b-bee9-4023-9aa6-5f1734451977"
        },
        "item": {
          "id": "7a3d4210-8503-4a46-ad52-1cc0e1874202",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8c1be217-d072-4b1b-ad7a-7d7c55c84259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c20b81-a168-418b-9526-87b4bd6e4dd6",
        "cursor": {
          "ref": "a2f129c0-e801-4e6f-a323-99fca8a75997",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ff678461-5708-4da8-8514-40933bb94f29"
        },
        "item": {
          "id": "c6c20b81-a168-418b-9526-87b4bd6e4dd6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "32847991-1cf5-411c-8196-1721948ba714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849e6f7b-e7b1-42a6-a37e-a1f63268a5c8",
        "cursor": {
          "ref": "90cd3fb6-bc76-4d79-be3c-4cd718e0d03f",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "555e519f-1a9b-49a7-bd96-f7ffae44b415"
        },
        "item": {
          "id": "849e6f7b-e7b1-42a6-a37e-a1f63268a5c8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b4130bc8-c4cd-4daa-b0ed-3329257c56dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1814457e-81b3-4c9d-9d7b-d83d52d88a52",
        "cursor": {
          "ref": "de575400-3cb5-4f57-b71d-3a4b34fcee31",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e482cf75-51b7-44f3-b7d5-4b79d2d1ff74"
        },
        "item": {
          "id": "1814457e-81b3-4c9d-9d7b-d83d52d88a52",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c8fabbdd-5fd4-4282-8596-56c40c556a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99f47be-a378-4487-8e41-7aa17a0ab13c",
        "cursor": {
          "ref": "0a6a811f-dc29-4d6d-851a-186359dc66d7",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9315a372-6eed-449f-a736-1adb11c800d5"
        },
        "item": {
          "id": "e99f47be-a378-4487-8e41-7aa17a0ab13c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1b5f9b2c-eef9-4208-9c20-4822b80ced20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ea7f4b-f475-4e40-910c-4b332816c581",
        "cursor": {
          "ref": "5a63de47-f940-40f6-819b-3f3448129c23",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4c48139e-fafd-4dd4-b686-6390dff29a2b"
        },
        "item": {
          "id": "b3ea7f4b-f475-4e40-910c-4b332816c581",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "88bd27e7-bd95-4c23-badb-ee8af1f66583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7284ac75-2ebb-47e5-bf93-a43e0d2f4bc4",
        "cursor": {
          "ref": "471c7cbb-d65a-4d6b-b08a-3ab3f020f9e5",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0dc6c90d-6c17-4a9a-999f-2928483c3bd0"
        },
        "item": {
          "id": "7284ac75-2ebb-47e5-bf93-a43e0d2f4bc4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d580b0cf-71f4-40bd-b503-9c3423fad0a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff337610-b135-4853-b8da-6a15370d885b",
        "cursor": {
          "ref": "4e5adb78-be73-4d3a-8925-b685038836b0",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f48babbb-95c0-4e64-8556-82bb4da9be69"
        },
        "item": {
          "id": "ff337610-b135-4853-b8da-6a15370d885b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4b959af5-d8f2-48e4-adb6-ee282abf20dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebfba573-e1d4-424a-b055-06d0f2e23030",
        "cursor": {
          "ref": "b6d1e5be-183a-416d-9cc1-3254f851fb2f",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "3fabb95c-f061-4e1a-aa07-52be4dfad995"
        },
        "item": {
          "id": "ebfba573-e1d4-424a-b055-06d0f2e23030",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "9366c11f-7eef-46fc-8119-839b744c503a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc49ef4e-f7d1-4223-a7d3-9861af9e27d9",
        "cursor": {
          "ref": "e24f9105-cfab-42f4-bfc0-ec370d7420f3",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "38903e43-1535-41f6-b6a4-06529ef8fe3f"
        },
        "item": {
          "id": "bc49ef4e-f7d1-4223-a7d3-9861af9e27d9",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "815e5a4e-1565-4dba-a805-9a0d1baa09f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b71ea8e-c7f9-4976-a268-b4b7ae226b56",
        "cursor": {
          "ref": "4301ddb0-096f-46a5-a278-448cd158f712",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5e716161-b8f3-44f9-839b-dc0c1ecf90a9"
        },
        "item": {
          "id": "9b71ea8e-c7f9-4976-a268-b4b7ae226b56",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b65b447c-de52-464b-970b-2e15bcee068a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320c8ec7-4016-4326-9f4c-898ded71e743",
        "cursor": {
          "ref": "70246cff-bd0c-4b5c-bd17-612739f7a245",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3f2a682d-3013-4414-b85b-9262a95a89a4"
        },
        "item": {
          "id": "320c8ec7-4016-4326-9f4c-898ded71e743",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "29922619-7fa5-444f-ad6c-dbe89e8a521d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d217cb-592c-44dd-9b37-732cd6b49ef4",
        "cursor": {
          "ref": "33321146-ad49-49ed-82b9-7276638312ad",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b9dac331-45e1-416f-9f69-10449e8800ef"
        },
        "item": {
          "id": "69d217cb-592c-44dd-9b37-732cd6b49ef4",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f2fb4cab-6518-407a-be08-97dd5b1202f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec91d8f-1705-496c-9133-08bf1346184d",
        "cursor": {
          "ref": "7a69551c-76ab-4fe6-9fb9-1171877f7215",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f22361fa-dc17-4023-8d66-ff614284591b"
        },
        "item": {
          "id": "7ec91d8f-1705-496c-9133-08bf1346184d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2bbf231d-3fa8-439c-a3cd-ba63e6cdaa20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128eb531-0af7-4e81-b450-81f6922bba4c",
        "cursor": {
          "ref": "b1a0ee4a-7093-4ccf-bf1b-54a7f08f1869",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f10968a3-e8a7-4b0f-8780-299ebf7a846e"
        },
        "item": {
          "id": "128eb531-0af7-4e81-b450-81f6922bba4c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "af616b59-fd6b-4f17-8194-0a1efbaed3d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71788d9e-005a-4b8e-a955-0b2d4f4cab46",
        "cursor": {
          "ref": "eda3e2bf-f9d4-4118-9fc8-c8eb5715c21a",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f379e0ea-2442-440d-bcc3-5617d9234954"
        },
        "item": {
          "id": "71788d9e-005a-4b8e-a955-0b2d4f4cab46",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "924dab8a-70f3-4d04-b6f1-5ee2eebc96b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb289b38-137e-47e1-a3e9-eb94545b57e7",
        "cursor": {
          "ref": "a450fb80-7a36-4b5c-83b2-baf7ec2a0608",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a904cdcd-e55a-4128-8f17-89a3344c386a"
        },
        "item": {
          "id": "bb289b38-137e-47e1-a3e9-eb94545b57e7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "66114201-f00c-40fc-abfb-a939559f4769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb1fce7-a5d5-4175-bfd5-18a37d3071ac",
        "cursor": {
          "ref": "383dc25f-5e06-4776-ae0b-39a42cd07c2f",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "701d8505-e6ca-4baf-a574-99542679bec7"
        },
        "item": {
          "id": "8fb1fce7-a5d5-4175-bfd5-18a37d3071ac",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1fe5e5be-4b86-4f7c-acb6-74f74ec617a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7ed4d4-a1f4-4bfe-8190-cb54f6a2b8b7",
        "cursor": {
          "ref": "f3edba84-0a4c-4c93-ac3d-ae3abe529aaf",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f487ac37-a8d8-4f46-ba60-455afc74c2fa"
        },
        "item": {
          "id": "0b7ed4d4-a1f4-4bfe-8190-cb54f6a2b8b7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c135b999-166f-488d-827a-e8bfb68bbb3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d87143-a54b-4823-bc50-f29311ff59ba",
        "cursor": {
          "ref": "3e612d94-b4c8-4848-a4d7-2f98087f9b7e",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "275b0e12-b003-4940-be23-18e78b10bbd3"
        },
        "item": {
          "id": "a0d87143-a54b-4823-bc50-f29311ff59ba",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b0b17479-fb30-4b35-88aa-e6ccd68d5590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d4215c0-bb30-4556-955a-8a7f6b894031",
        "cursor": {
          "ref": "a2bf8616-076b-45ea-82e7-cd2cdc91be3f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "77ed2bc2-047a-40af-9ab1-494edc4f2fd2"
        },
        "item": {
          "id": "3d4215c0-bb30-4556-955a-8a7f6b894031",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e8777b29-100c-4262-9402-f362f9cc7f08",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "ec618270-57ac-4b6a-88fa-12ce2eb225f9",
        "cursor": {
          "ref": "f7d89e7d-b569-4435-bdd6-117d2317602f",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3b41d5b2-4062-4888-a83b-1aced56b5f72"
        },
        "item": {
          "id": "ec618270-57ac-4b6a-88fa-12ce2eb225f9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0df77f31-707d-415f-8e9b-18d6f0b88181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355c4360-c02c-4ec2-b883-5bf511fdbf7f",
        "cursor": {
          "ref": "37d3c929-e619-4a52-acaa-99b173880190",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "97c0354f-eba2-4999-a3ae-e5da0079e92b"
        },
        "item": {
          "id": "355c4360-c02c-4ec2-b883-5bf511fdbf7f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2fcdcda2-5395-4c70-baa7-dd0a61cfae40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1418a8de-6859-4604-8a9c-176884c66946",
        "cursor": {
          "ref": "465f4730-f0ad-4a03-808d-56b6d609006a",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "24ae01ee-b3dd-4dc6-8890-fa0d52158e80"
        },
        "item": {
          "id": "1418a8de-6859-4604-8a9c-176884c66946",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ea1548ce-b98b-4b04-9c06-079c90ae0c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d13ab6a0-b389-4c1b-9991-12598288bba3",
        "cursor": {
          "ref": "c08fd47b-fd97-4d09-a969-299e612a6b8d",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7de3a45a-11fc-4169-aade-1729f82e1bf1"
        },
        "item": {
          "id": "d13ab6a0-b389-4c1b-9991-12598288bba3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fe62f079-d0bd-40a7-bb66-875562396a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b187fa-9d26-4943-9305-58fdb8069d21",
        "cursor": {
          "ref": "96e3fa9e-763f-45f5-b5dc-8402f3b0eb75",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "29f53d96-1204-4fd0-a846-2f132fa72930"
        },
        "item": {
          "id": "68b187fa-9d26-4943-9305-58fdb8069d21",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9a737c5c-bab0-407e-afe0-dbc0cfd28344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023f5635-3b75-4f23-a33d-51c3d0363f4a",
        "cursor": {
          "ref": "b177387a-6f1a-4064-bb1a-80699e8974c5",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bbf28758-d8c8-40c0-be46-bde19c0c8ada"
        },
        "item": {
          "id": "023f5635-3b75-4f23-a33d-51c3d0363f4a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ad34b276-08e9-4f0d-8534-17237b8f3626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70cb6ea6-fc12-4b43-841f-f931f097d0b9",
        "cursor": {
          "ref": "83f75982-e404-4859-988a-dca3904c5066",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f8dde57a-4695-498c-b08b-becbf324c8b1"
        },
        "item": {
          "id": "70cb6ea6-fc12-4b43-841f-f931f097d0b9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4925be5c-75c9-4c14-8980-7f42f89896a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8886969-0929-46b4-a0e3-538f38fb6a14",
        "cursor": {
          "ref": "f4b7a216-04ac-4544-a717-583e7ceab53e",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "36b3c1be-e589-48bc-b2d9-12854110e457"
        },
        "item": {
          "id": "c8886969-0929-46b4-a0e3-538f38fb6a14",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7c0e3cd5-6a61-46a1-a762-f57f9a4a3f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5155ce1-b506-46ab-9f02-600956b3e707",
        "cursor": {
          "ref": "d96bf9ed-f7de-4a79-94b2-ab0b9edef06b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "37022c18-c72f-4406-a3f7-d95c71d2ab4e"
        },
        "item": {
          "id": "c5155ce1-b506-46ab-9f02-600956b3e707",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0580aabb-9618-40be-8987-39976df580c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a181b9af-4160-4712-aa51-63a8039dabcd",
        "cursor": {
          "ref": "cda8f908-70ce-4b2d-8632-5a119553cc80",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3a1ac8b1-8d74-4209-b01a-182256c29f7b"
        },
        "item": {
          "id": "a181b9af-4160-4712-aa51-63a8039dabcd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d44162d7-86ff-47c8-a554-bbc3f935a050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6db7f80-a9b8-4443-a532-0f13aa2530bb",
        "cursor": {
          "ref": "3b7c6db0-c9c8-407f-8f85-de280ba2f4a5",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c669d91b-d52a-487a-b735-67058909f4c3"
        },
        "item": {
          "id": "d6db7f80-a9b8-4443-a532-0f13aa2530bb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "48a549b7-e80c-4853-8673-1f2cafdd9214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf3c864-cd63-4de0-b1c1-01c5209da878",
        "cursor": {
          "ref": "70559884-219d-4897-a010-c3d7ea2408ea",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1e2e2302-eccc-474b-a317-f3ad29131483"
        },
        "item": {
          "id": "bcf3c864-cd63-4de0-b1c1-01c5209da878",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3e5e29fe-6126-4d0b-805d-9dc98896102e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6aaa79-003f-4aef-8d56-78bde96503ca",
        "cursor": {
          "ref": "96f80381-6189-42d0-a685-c8e860ecaacb",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d66ea34d-dc8e-414e-8691-98964ed2bd96"
        },
        "item": {
          "id": "2b6aaa79-003f-4aef-8d56-78bde96503ca",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "80954875-b97a-40be-89d3-105642648684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0dfffc2-26d4-4d56-a306-9a8e26423487",
        "cursor": {
          "ref": "fb652c0f-69ca-4554-b8a6-5fd784b2f809",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5ca6074e-68e5-4205-a03b-1e04e6bd58a4"
        },
        "item": {
          "id": "e0dfffc2-26d4-4d56-a306-9a8e26423487",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "822a2889-b85f-4d5c-92f2-88d5e36be5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df4e80b-4fa7-4a0f-a93c-d17a16d6eded",
        "cursor": {
          "ref": "c7d9b199-9063-4aed-aa34-b386820730c0",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c999463f-cd16-4130-bc36-d76689b7c722"
        },
        "item": {
          "id": "8df4e80b-4fa7-4a0f-a93c-d17a16d6eded",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5aff7455-f474-46f7-8d70-7068de36ba2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a9f56f-36a3-45d1-a399-dcba658284f0",
        "cursor": {
          "ref": "cdf795cf-a846-4f48-b519-31ff2c97994f",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "15898438-8b66-42c7-b95a-1ca763762164"
        },
        "item": {
          "id": "d4a9f56f-36a3-45d1-a399-dcba658284f0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c2225d72-4f49-4245-861c-25ded5bfeafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e853fb49-87f4-4e04-a80d-7ea1bb5bd916",
        "cursor": {
          "ref": "b6d23c12-5c2a-42b2-9575-4e952a1e07c4",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b8ae99d8-d1e7-4caa-9c9f-38b3359e8e4f"
        },
        "item": {
          "id": "e853fb49-87f4-4e04-a80d-7ea1bb5bd916",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a28d8629-c857-4626-a9f1-5de060125c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76eb15bf-2b68-4993-921e-8f20554cf44d",
        "cursor": {
          "ref": "2e708b67-5604-4f6d-bdfa-7136055f2eaf",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "be0c8568-9996-4a68-be5f-b8b887fc4523"
        },
        "item": {
          "id": "76eb15bf-2b68-4993-921e-8f20554cf44d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "df068e54-75db-4d49-b6ce-f5f5652bccea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013a4fa5-6932-49b9-a185-820d23b70313",
        "cursor": {
          "ref": "ded3fd61-542b-4aed-b3cc-d1db5b8484df",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a250bff3-94fb-42e0-8f10-77c728087ce5"
        },
        "item": {
          "id": "013a4fa5-6932-49b9-a185-820d23b70313",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2bffbe3d-5bc1-4ad2-8ef3-b339aec1ae17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ef3e5f-94a0-4ead-a9f0-1cd907a080b0",
        "cursor": {
          "ref": "16d64048-3f18-4ba7-bfa9-e0f8c95ebbd3",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e6a2ebe3-6f0b-41d0-bbd2-3fc4b3cc1219"
        },
        "item": {
          "id": "b0ef3e5f-94a0-4ead-a9f0-1cd907a080b0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "870ab0e5-6c84-4914-85bf-56e87fc1367b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ca421a-f879-42de-a0bb-04681b93e4dd",
        "cursor": {
          "ref": "9e55eac0-a74a-4bf5-bbd0-8568425fc7ff",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0d207eb0-cd45-4679-bba0-33e5e557ae8e"
        },
        "item": {
          "id": "71ca421a-f879-42de-a0bb-04681b93e4dd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "32d6db33-4091-4511-aa39-dbca1f9c9e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2d8df1-fb9e-4818-ab1e-b6c0e83563b5",
        "cursor": {
          "ref": "87fa859b-da65-4bb1-996c-50cb2a4a5eb2",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "564d582b-1b15-4761-8305-9e9ad6e66705"
        },
        "item": {
          "id": "7f2d8df1-fb9e-4818-ab1e-b6c0e83563b5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1b520dd3-1f8a-4993-ae33-0eb25ee074de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb696e93-ff70-49c5-8e1b-73c3b5fa9254",
        "cursor": {
          "ref": "90d54e08-629e-4bdd-b029-706b70b6dd09",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a579011a-3e03-4569-903f-ee38462b9926"
        },
        "item": {
          "id": "bb696e93-ff70-49c5-8e1b-73c3b5fa9254",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b2010862-9b65-447a-bc8e-78d4a2814425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a9aee9-d25f-4dad-b7ce-ed8e9dc0c405",
        "cursor": {
          "ref": "fc7a156d-3ee1-4b66-bb1f-cd937111209d",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c3e2e2b5-b700-4915-be83-eb3ba1101ae8"
        },
        "item": {
          "id": "f2a9aee9-d25f-4dad-b7ce-ed8e9dc0c405",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b4eff56c-9406-4af7-a0a3-a494e1b141c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed6d3cf-20de-4481-b4d3-529aee03ea00",
        "cursor": {
          "ref": "623742a1-69e2-47c7-963b-257c27fd1880",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f3dc628f-a486-4825-acb3-763adefe9b23"
        },
        "item": {
          "id": "8ed6d3cf-20de-4481-b4d3-529aee03ea00",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "40fe65d1-c733-42a0-bbe5-3488579612ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add6fb5e-87fb-4005-b434-d46ef0b789d4",
        "cursor": {
          "ref": "3cb5383b-916f-4cad-abbd-321da541896e",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d5a08d64-3d9f-4464-acf6-0ad341521e94"
        },
        "item": {
          "id": "add6fb5e-87fb-4005-b434-d46ef0b789d4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "fcc46b91-9433-42f8-a7b7-4149cf0fb74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aee0a46-54e8-438e-b254-5cbad51841b1",
        "cursor": {
          "ref": "32ae391b-610d-4f8b-8241-18f98512120a",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a975c02d-2303-4a48-9264-69a976b13d10"
        },
        "item": {
          "id": "7aee0a46-54e8-438e-b254-5cbad51841b1",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "42e60001-3afd-43e6-b221-c182f2f42d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53508dd4-ea4f-421e-b8ee-8fd732000343",
        "cursor": {
          "ref": "dfc6c1e2-6496-4804-969a-bb355e85cb79",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "3372d543-74aa-472b-91f3-909e3bf7c0a2"
        },
        "item": {
          "id": "53508dd4-ea4f-421e-b8ee-8fd732000343",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2620cb0e-293c-442b-8cf2-40130091ed14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324be6c1-2473-4102-b2a0-6be1a256dbf5",
        "cursor": {
          "ref": "520df908-989f-4718-ad54-d065376b9b52",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "dffbb4aa-46a3-4b2c-a2f4-2680ee68e02c"
        },
        "item": {
          "id": "324be6c1-2473-4102-b2a0-6be1a256dbf5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f060c227-51d1-4505-90c3-ac480cfcdf2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab10df4-7255-4476-8084-962450c90790",
        "cursor": {
          "ref": "135158ac-8d1f-43c1-a9d5-cf4d72c416b5",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1df589da-6a41-4515-b9e4-d245fa1d754a"
        },
        "item": {
          "id": "9ab10df4-7255-4476-8084-962450c90790",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0426bb18-5ed2-471f-91ee-13e27e4eaab7",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "271ee7fe-e593-45df-ad7e-b32e48c7dc72",
        "cursor": {
          "ref": "9d9692e0-09c4-4171-93f8-15ea31761d4d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "13a4d7fb-47df-45f5-820b-c15d5dfb50c1"
        },
        "item": {
          "id": "271ee7fe-e593-45df-ad7e-b32e48c7dc72",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "782bf30c-38bd-4dba-adb0-de9bc813ae17",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "cb21fc1a-2f6b-4b6e-8401-a05f4e6dc676",
        "cursor": {
          "ref": "86b5f822-9aa8-4ec5-b5d7-e90364f8748c",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3be9e7dd-9a81-4cfd-a457-abb64d27edf6"
        },
        "item": {
          "id": "cb21fc1a-2f6b-4b6e-8401-a05f4e6dc676",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "55f62e92-2900-4688-b2a6-1709f124b192",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "da58309b-2dd5-4e98-a390-d15286685e91",
        "cursor": {
          "ref": "d2296e00-f2e0-4612-9af7-53218126a220",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a302b38a-f188-488e-a085-646ec3fcdcc3"
        },
        "item": {
          "id": "da58309b-2dd5-4e98-a390-d15286685e91",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d4be1480-19eb-4071-9ebb-735deee74f63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2f7cc1-cda6-4baf-9419-3511d6487b6b",
        "cursor": {
          "ref": "01a6d2df-4a1c-4886-a2c5-de4e22f0c249",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "10819996-f259-4841-bb8b-e4253e909854"
        },
        "item": {
          "id": "9f2f7cc1-cda6-4baf-9419-3511d6487b6b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ebc4af31-9e1a-4d33-b91a-c92b2830d94a",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "1711107a-7dec-4ff2-9b72-e951feb2e312",
        "cursor": {
          "ref": "6e8abed5-9e7d-4a75-84ba-155018cb2026",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ee9485bb-3e4e-4567-a093-bf072052a765"
        },
        "item": {
          "id": "1711107a-7dec-4ff2-9b72-e951feb2e312",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cdcdddbb-40d8-49c2-a094-3de8b74175ed",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "3dc42209-14e8-488c-8a92-0f66b08c98ba",
        "cursor": {
          "ref": "8daf42f9-7b25-479a-a589-ca29cb7f34cd",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a60203b4-52e3-42d6-9949-f7692eab4129"
        },
        "item": {
          "id": "3dc42209-14e8-488c-8a92-0f66b08c98ba",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9a755c62-3933-47df-b6ea-b8a10cbfaecf",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "8bfac691-141d-4421-a7d9-35bbc99881d5",
        "cursor": {
          "ref": "bc3a9632-c188-41ce-b720-74260f1af123",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "22b1e368-f89d-41ee-a92c-21aaa75e5b18"
        },
        "item": {
          "id": "8bfac691-141d-4421-a7d9-35bbc99881d5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "95099ad4-9bee-4705-988d-cbddee1e1394",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "46c51b1f-38d2-41a3-8a7c-38ae531fc67e",
        "cursor": {
          "ref": "b78995f3-1459-4bd9-9bf0-2b4d22d3c529",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "588bf4b7-9700-486a-a861-fcf238f4ad6e"
        },
        "item": {
          "id": "46c51b1f-38d2-41a3-8a7c-38ae531fc67e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d947d27f-8d6d-4a55-ab7a-d54f0fe819ef",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "d4d5622d-a3bc-408c-a1d9-35c5a51118f8",
        "cursor": {
          "ref": "db7db7db-c6b3-470c-aa10-570648bc140f",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "00823ccc-4a86-4c9d-a733-1f034d3aeb4e"
        },
        "item": {
          "id": "d4d5622d-a3bc-408c-a1d9-35c5a51118f8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8ae22e5b-e93f-4eae-a27c-ac107b0d9b28",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "2daefbb5-3050-4245-aa30-a3a97ca6a62d",
        "cursor": {
          "ref": "37d9bfef-f711-4751-ae0b-0e04bae8c4b0",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "44385d61-77ef-4a7c-ac78-1d3e5038e67d"
        },
        "item": {
          "id": "2daefbb5-3050-4245-aa30-a3a97ca6a62d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "df5da1ac-bf49-4d22-9913-ea9b89560814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45473641-300f-4b82-a932-13383ed4628b",
        "cursor": {
          "ref": "4355a1c2-f379-4481-a23d-f7347680ce41",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "df0a09bf-65a4-400a-8150-11ec2799cbb2"
        },
        "item": {
          "id": "45473641-300f-4b82-a932-13383ed4628b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2d6d05c1-00bd-4225-930e-167dc6775204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d66dea1-a374-4fac-98cc-a94e386b870a",
        "cursor": {
          "ref": "cf8bf0ec-bbe1-45ef-acb4-8c8385876de0",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "46ef1a3b-95de-4be4-bc50-a22b5f67169a"
        },
        "item": {
          "id": "6d66dea1-a374-4fac-98cc-a94e386b870a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "429a5133-a05b-409f-9ba0-bdb250af2c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c822a9ed-51b5-416c-8a10-7b8d4581e2ad",
        "cursor": {
          "ref": "62d18193-1828-446b-a237-160507c6eb78",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "fee7cb1c-389e-45c5-a86c-707dada909bf"
        },
        "item": {
          "id": "c822a9ed-51b5-416c-8a10-7b8d4581e2ad",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "aa87c832-43b2-4dc1-a136-e68d675627f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1408e3-52f4-4eed-a632-ef554af60d6d",
        "cursor": {
          "ref": "30849dc7-e28c-455c-b4fe-3c68e11d0d42",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c2e4b0a7-5001-47ad-879a-f7cca15d0b18"
        },
        "item": {
          "id": "3d1408e3-52f4-4eed-a632-ef554af60d6d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7c530cf8-9ff3-4a1d-bf08-a2ff096a983f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94005eef-e495-4be9-b1aa-ea155098a96b",
        "cursor": {
          "ref": "a24e9a61-989f-426a-85ba-d3a0bee0e30c",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9149257f-5cf3-45d8-a936-7b6776e49084"
        },
        "item": {
          "id": "94005eef-e495-4be9-b1aa-ea155098a96b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4269a2f8-c4f3-4d68-9aed-ed1e5e8c8c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8346e03-14c6-4ac8-b07d-54a785e96503",
        "cursor": {
          "ref": "3cd6c42b-7e99-4d6b-9692-1ac1a62fc6a9",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "01aa134e-c23b-41b5-b0e4-3aedb083d98f"
        },
        "item": {
          "id": "c8346e03-14c6-4ac8-b07d-54a785e96503",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "98d0726a-aa4e-4fa9-a910-63e384717fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70878b76-d641-4186-bed7-6c9bf619c0b3",
        "cursor": {
          "ref": "457a586e-feda-46d6-8d79-1b89dc4b04bc",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fbac734a-0ad1-417a-ad5d-5480d8d12e66"
        },
        "item": {
          "id": "70878b76-d641-4186-bed7-6c9bf619c0b3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8c75d696-d387-4bf2-89db-0ffc44567d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c6c48d-3d0d-4f6e-b74a-7edf030d9c47",
        "cursor": {
          "ref": "b3782e19-c13b-4a97-995b-a3b0f6209c94",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "02e128c9-e993-414c-bca7-b6f1252d1a31"
        },
        "item": {
          "id": "79c6c48d-3d0d-4f6e-b74a-7edf030d9c47",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d43b76ec-901f-4c10-bc02-a398de99155b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a46b73-8d8a-4bf1-878b-6d59df230ff2",
        "cursor": {
          "ref": "419bf6b8-d842-4c27-9ca0-9a166f7ea043",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fe722a8d-0009-4ea9-b8af-b0a08a295b60"
        },
        "item": {
          "id": "45a46b73-8d8a-4bf1-878b-6d59df230ff2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7e1ec2c4-1acb-4c8c-8eda-ee7e3749766f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff44c9fb-38a5-4d32-a628-ac29489ca831",
        "cursor": {
          "ref": "b7a21625-c58f-42ed-9fe5-186df83a44b4",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "11ac48fa-aedb-4294-819a-e5c8e53035e7"
        },
        "item": {
          "id": "ff44c9fb-38a5-4d32-a628-ac29489ca831",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "532570f0-8c1c-4f82-901c-399d5aaae906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a640f850-8b44-4d75-b5fd-6cf8656dc22b",
        "cursor": {
          "ref": "3959b8b2-8114-40d2-abcd-f4778a64bf86",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4bdd6959-f7a8-4507-88e3-23ca0a08f434"
        },
        "item": {
          "id": "a640f850-8b44-4d75-b5fd-6cf8656dc22b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3c273750-69af-4b67-ab8e-8496f0c28e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee50c2d7-ed43-474a-9658-74415d7b999b",
        "cursor": {
          "ref": "398575e8-8d86-453d-8361-25d21c71e005",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "313c023e-aa79-4bf7-a156-c5d959ca2fe4"
        },
        "item": {
          "id": "ee50c2d7-ed43-474a-9658-74415d7b999b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "976dea08-7b96-4287-923d-50af7f3de69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9122ee99-a7d6-4b47-8066-ca471c912344",
        "cursor": {
          "ref": "bb45cfdb-6160-40a7-add4-4c9e0d905559",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b1388f5e-2843-4e0d-868c-1ddd57c61a46"
        },
        "item": {
          "id": "9122ee99-a7d6-4b47-8066-ca471c912344",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "927f2a3e-5eb9-49c8-aed8-5787588e7d51",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7da96f20-3ba3-47bb-b20b-ae35bf90a9e0",
        "cursor": {
          "ref": "87a9974d-dbe5-4a03-988b-abffcc925602",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "39902916-6c5b-4214-8b4e-1996b268d1d2"
        },
        "item": {
          "id": "7da96f20-3ba3-47bb-b20b-ae35bf90a9e0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "944c8fb5-92cb-43df-ba51-3e7535e487c7",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "4e686e86-b258-4013-9eda-4c9c5ba74e51",
        "cursor": {
          "ref": "7f81e00f-f315-4cb9-9111-63000da6d9d4",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "df1d239e-ae68-43cc-8b21-1e5b0bc6ca1b"
        },
        "item": {
          "id": "4e686e86-b258-4013-9eda-4c9c5ba74e51",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ebc9aaa2-7b55-4c77-be28-ee4581d49a85",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2b4573cd-2aaa-45fd-8141-0bdbe6a0c0cf",
        "cursor": {
          "ref": "993143d1-2521-4ce6-b8d7-ab02edc73662",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a09c1f53-fa1d-4a1d-876a-5d3948154029"
        },
        "item": {
          "id": "2b4573cd-2aaa-45fd-8141-0bdbe6a0c0cf",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5fe67d4a-d712-4a2c-b323-0071fdbbb71e",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "cd19293c-1e8b-44fc-9f50-95f011736851",
        "cursor": {
          "ref": "26d03cf6-8a1d-4952-a14e-c2a028b3d374",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7e470255-fbbd-4a24-b836-3136d3017a50"
        },
        "item": {
          "id": "cd19293c-1e8b-44fc-9f50-95f011736851",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "761b1935-870f-4695-b454-9403ee4db383",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "084bfb0d-6144-4b34-ba9b-19ff12b95a46",
        "cursor": {
          "ref": "7c9d7759-6f0a-4046-9797-3e01ee706471",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "232828ca-0b0e-4c4b-aa13-fae1747fab61"
        },
        "item": {
          "id": "084bfb0d-6144-4b34-ba9b-19ff12b95a46",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "83ae7288-3425-4f34-ad95-240990a32b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf674a7d-9396-4e46-8cbb-74592dca0faa",
        "cursor": {
          "ref": "8758fbb2-857e-4757-bba8-606a3ef3333d",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d5a438dd-7b53-4b68-9f44-5ff43b2d09f8"
        },
        "item": {
          "id": "cf674a7d-9396-4e46-8cbb-74592dca0faa",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cfe76772-badb-4c01-bb0e-fafa7a403c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f970a411-99a3-4bee-bd5b-e5c4368e8ee3",
        "cursor": {
          "ref": "611cde0a-9734-457f-83de-502eeb18fd2f",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b9735213-057d-4380-b6a7-b216f8a9a295"
        },
        "item": {
          "id": "f970a411-99a3-4bee-bd5b-e5c4368e8ee3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b555cf86-55f8-4c75-9aef-15093f9236f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c88bc4-0dcc-478c-a228-5e2c45dee4e5",
        "cursor": {
          "ref": "c9786aca-f7c9-442b-8c9d-49eab9c19343",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6edd2ec7-5a85-4858-ad52-93e60929605b"
        },
        "item": {
          "id": "24c88bc4-0dcc-478c-a228-5e2c45dee4e5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "aa83c363-ac64-4a40-8c3d-babadb5b6932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4fa607-e6f4-4263-8856-b6f95fa46487",
        "cursor": {
          "ref": "8a80216c-c33d-4afe-b936-296fb62556c6",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "8f024dd7-2c20-4ab4-873e-9cddd73e413d"
        },
        "item": {
          "id": "fe4fa607-e6f4-4263-8856-b6f95fa46487",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ba01a13e-6f8e-4a0e-932c-61fe7ae52a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850f5c36-1c04-4a7b-b5ce-361ebd0fce14",
        "cursor": {
          "ref": "44dc8e12-0bef-4399-9170-6f24e97e41be",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3daf2d39-a2b4-4b72-88f8-553f266ebd82"
        },
        "item": {
          "id": "850f5c36-1c04-4a7b-b5ce-361ebd0fce14",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7ccfbc9a-1d05-4692-8a9d-198022b885c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0dcb674-8372-45bd-8610-16aea5593908",
        "cursor": {
          "ref": "8cef6cde-3a22-48bc-a201-3bfcfec4ef0f",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d6967dea-e2ac-4c08-9f03-4ea92515b47a"
        },
        "item": {
          "id": "d0dcb674-8372-45bd-8610-16aea5593908",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d849be9b-fb0b-4266-a17e-cd01c6ec2de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac22776b-3d95-4111-af7d-b655e1179733",
        "cursor": {
          "ref": "3b71df69-6d2c-4efa-bd27-35f0d8f4daf6",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "42a17e05-c250-4948-b308-cec48ac0799b"
        },
        "item": {
          "id": "ac22776b-3d95-4111-af7d-b655e1179733",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "579fa744-04af-46a6-9e20-9bb5011b6b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805c6b90-ebf2-4340-8858-3459a44f89d6",
        "cursor": {
          "ref": "fef94bb6-f928-4c7b-9cbd-3380dd34b420",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "680250c7-2329-4147-a87d-dca4d648813b"
        },
        "item": {
          "id": "805c6b90-ebf2-4340-8858-3459a44f89d6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8c35b473-638d-4342-afdc-876c358a1fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be20f46b-2c4c-4d7a-b915-cbe83d6faeb9",
        "cursor": {
          "ref": "516b80fe-303b-4808-98d8-ff51671f50c2",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9ad989b1-d8ff-4206-b4ff-cfa4fbd5c68d"
        },
        "item": {
          "id": "be20f46b-2c4c-4d7a-b915-cbe83d6faeb9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d225ad61-04c0-44f7-a3b3-259a8484ffd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786b9e90-0d6f-43b0-97de-93845fb9bdba",
        "cursor": {
          "ref": "b0044a3a-722b-416e-b6da-2ca9265dbedd",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1eb3640a-be82-4aa1-b223-5f5b3af42657"
        },
        "item": {
          "id": "786b9e90-0d6f-43b0-97de-93845fb9bdba",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "709046b2-a165-403e-b076-54ba47fcd21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6394b9-2124-4bfe-a6b7-0cad4563e796",
        "cursor": {
          "ref": "f83a96e8-05d3-4c72-8da5-f5b1b6c1c23e",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2bc46913-60c3-4dc0-aaf4-904e3e439591"
        },
        "item": {
          "id": "ee6394b9-2124-4bfe-a6b7-0cad4563e796",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2db4a4a3-708a-40b3-b6e1-71d986c4efec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1409badd-8c1c-4645-affa-8f87e5de62c3",
        "cursor": {
          "ref": "bf16e0c6-fddd-4b67-95a9-039d0a7e1244",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "8c80f897-41c7-42b0-a836-5ffc77756b50"
        },
        "item": {
          "id": "1409badd-8c1c-4645-affa-8f87e5de62c3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "82722d1f-cb29-47ff-9b76-bcb6e4617a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8a7a72-563b-4b64-a14b-6baf46bc62a2",
        "cursor": {
          "ref": "2ad027fe-ea1e-49e0-8474-6ca82afd7c66",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "e1a4e751-74eb-456c-b780-614bdc98304f"
        },
        "item": {
          "id": "8f8a7a72-563b-4b64-a14b-6baf46bc62a2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5d0fa524-fa3d-4e49-b9cd-0dcaa6e561ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3fdc6b-e3c9-4d34-971a-24d71be631ac",
        "cursor": {
          "ref": "2dd51a30-a5f0-4b76-a8ed-678b9cf7d69f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "614ed449-5135-4dc9-84d1-54a7130b4ed9"
        },
        "item": {
          "id": "8e3fdc6b-e3c9-4d34-971a-24d71be631ac",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5af7298d-25c6-4608-84fb-a7aa0373070a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5893c2b5-9f0f-41c5-b258-154c16bbdfc6",
        "cursor": {
          "ref": "9d2f31a4-b2be-4b6f-a657-9ed0e67e65f5",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "a62f783a-b67a-4720-9dae-a511b4277ac8"
        },
        "item": {
          "id": "5893c2b5-9f0f-41c5-b258-154c16bbdfc6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "99bf2c98-9920-4653-92e3-bbdbef2359b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e42d3c-9da6-48e0-a89c-6dcb92931daa",
        "cursor": {
          "ref": "04529abf-57fa-4903-9c07-65321ae0bf0d",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "4d53409b-b76f-4202-9eb5-29fb019c3bac"
        },
        "item": {
          "id": "69e42d3c-9da6-48e0-a89c-6dcb92931daa",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "48c8806a-e6c3-4e09-a698-020590e02a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa34a846-d002-486a-afc5-bd868f3dc581",
        "cursor": {
          "ref": "0228345e-b4e0-4c07-b7ff-d96d3c1599f0",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "f4d842a0-724e-4b7d-9e20-78351c3e474a"
        },
        "item": {
          "id": "fa34a846-d002-486a-afc5-bd868f3dc581",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "11b7068f-7e8b-4290-ba51-6fa8cae339a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acea633e-eab7-47bc-899c-accf61123d25",
        "cursor": {
          "ref": "14e6e9ec-d9ee-4984-86ad-219d34edc9ba",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "92fdfe45-86e1-4b77-8767-c4a51d5de77c"
        },
        "item": {
          "id": "acea633e-eab7-47bc-899c-accf61123d25",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4423fc5f-bbe7-48ea-a66d-2cc7f602e8b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4ba567-a46b-42f9-bbda-da0b156b4a85",
        "cursor": {
          "ref": "1005951c-356e-44b1-a2d8-4707a4bcbdc7",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "e763da12-005f-4e25-8fab-2f6b5f2cd672"
        },
        "item": {
          "id": "9a4ba567-a46b-42f9-bbda-da0b156b4a85",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b7dd7a4d-5092-4e18-88cf-363a2f2ec818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3799dd81-c2ce-4845-9609-615433f1916b",
        "cursor": {
          "ref": "38131d08-65c6-4c04-bac2-5780fbffd9f5",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "4044341e-bd15-4ce7-8a36-bb0e302b34da"
        },
        "item": {
          "id": "3799dd81-c2ce-4845-9609-615433f1916b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e5815d57-6282-4b3b-9a44-12e94b6cc575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b141fd-e2eb-4351-a0c6-a6533f09daab",
        "cursor": {
          "ref": "fee301c1-320f-46bf-8a3b-1a4c3b9289e5",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "ae0e5b6e-8e9a-4b8e-929c-514024ec19e3"
        },
        "item": {
          "id": "23b141fd-e2eb-4351-a0c6-a6533f09daab",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7d084781-d5f5-4659-8d76-3bcf5c59bc3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f38be9a-aaa1-4fe5-bc59-2565c2c668ea",
        "cursor": {
          "ref": "e316e57b-6557-48e2-a9b6-ce900e0ab423",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "de56351b-07ee-4116-be68-69634e7f2af4"
        },
        "item": {
          "id": "0f38be9a-aaa1-4fe5-bc59-2565c2c668ea",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7e7857b9-5ad1-4dda-9f1c-436b10edf651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb3cae7-5769-45f7-afb2-f32aff6e35c3",
        "cursor": {
          "ref": "82246ef8-8b01-4a8a-be69-8218779d9e41",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e054d035-9e58-4ab6-adf0-4cc71c11bdad"
        },
        "item": {
          "id": "8eb3cae7-5769-45f7-afb2-f32aff6e35c3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0229c723-7f84-44e2-8a6b-05ec1c4cb19d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3020ae37-4076-42c2-ab9c-5dd314d13446",
        "cursor": {
          "ref": "29144548-5c3f-42c6-b6f0-294ad6b5ebab",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b8a5c07b-3191-40b3-a1b8-ac8a0021028c"
        },
        "item": {
          "id": "3020ae37-4076-42c2-ab9c-5dd314d13446",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "98991134-9068-4543-a99e-221ec0c5a52d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9050e2a5-37bc-4fe2-a11e-38e1fd45d9fd",
        "cursor": {
          "ref": "08e143f1-b985-482d-abdd-a80eb85bd509",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "6d097f3c-a791-497c-bdb9-81ba965a9b27"
        },
        "item": {
          "id": "9050e2a5-37bc-4fe2-a11e-38e1fd45d9fd",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7d6ba0cb-fdf4-42ab-9d17-01ed682c2024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f2f4ac-7d39-43a3-8b37-1c9b2917f71a",
        "cursor": {
          "ref": "6512600b-580a-40d4-93a5-a0904e79feef",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "ee80c4be-e16f-4e88-9383-6327dd6cb408"
        },
        "item": {
          "id": "46f2f4ac-7d39-43a3-8b37-1c9b2917f71a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a9a78a62-8661-477e-a27e-9b6370fff7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4739d5d4-2719-4a91-a4a7-08c1c32e2c70",
        "cursor": {
          "ref": "46d322a8-1d17-4a30-bfef-79ffab35b3a3",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "98b17a4a-8fea-4bbe-a130-c9927804b968"
        },
        "item": {
          "id": "4739d5d4-2719-4a91-a4a7-08c1c32e2c70",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b0dcf59b-377b-42c5-bcd1-e7405667a7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2369258a-4eb6-4418-a94d-781c675208c8",
        "cursor": {
          "ref": "ba9ee3ad-6de3-49ce-a2b8-9ebe4ce051ed",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "1b3f20e6-a39f-4a0c-be93-f8a9e43a08fd"
        },
        "item": {
          "id": "2369258a-4eb6-4418-a94d-781c675208c8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "823f1e51-a97e-4cff-b993-21fe8a47569e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e69255-93eb-4e64-be0e-509f025e6e65",
        "cursor": {
          "ref": "31920ff8-1599-47b2-9db6-30f6e415f540",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "cefa57ed-df5b-4736-9336-dd4042928a11"
        },
        "item": {
          "id": "56e69255-93eb-4e64-be0e-509f025e6e65",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c748a499-b07b-4051-8f4d-207bbbc8346b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda110d9-1708-40b9-88c8-b397b46c681c",
        "cursor": {
          "ref": "1f0296e5-31d2-4d44-9ca8-90954d3db447",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2b3bf7af-1684-4877-94b7-c01da1df6892"
        },
        "item": {
          "id": "cda110d9-1708-40b9-88c8-b397b46c681c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "dc3c30f3-a6fd-4c2e-9721-d24bb04c2028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba38414-4949-432e-aeb5-56e4a66c5424",
        "cursor": {
          "ref": "9bf2adee-0616-4664-8558-fa3c206a3778",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "544b67fe-c4df-4870-878d-aa832a7b49d1"
        },
        "item": {
          "id": "0ba38414-4949-432e-aeb5-56e4a66c5424",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6e494617-df02-478d-9669-f130ae4f1b1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45528d29-4e4e-4fde-9ed0-15307d95d5e5",
        "cursor": {
          "ref": "6bfd2904-7efd-49bd-a6b7-5af34987d9c1",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "ea967e0b-3fbd-4ddd-8c5e-da12e3a5a102"
        },
        "item": {
          "id": "45528d29-4e4e-4fde-9ed0-15307d95d5e5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cb6535ed-74b8-464a-9199-8b207ca13e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93901ce8-e34c-4298-bcf8-ff02ceb8ea84",
        "cursor": {
          "ref": "dd91c5ff-4c5f-4f22-bee4-c0b085b2a5be",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "00383abf-4118-4757-81d1-7e44cf11a010"
        },
        "item": {
          "id": "93901ce8-e34c-4298-bcf8-ff02ceb8ea84",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0089a8f6-f13d-4ed8-9387-ab28e9abb0ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0cc760-efc2-47e9-a2be-7d9261df9478",
        "cursor": {
          "ref": "c55afa2e-6cd0-47ae-8e03-9a243fcfe617",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "a049b926-53fb-466d-8f65-4e60afd2e657"
        },
        "item": {
          "id": "6a0cc760-efc2-47e9-a2be-7d9261df9478",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "68ffacef-c6c2-4fa5-95cb-713984de4455",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808e0889-dc46-4091-8eed-f7e59aa4e9a2",
        "cursor": {
          "ref": "b4bdcf50-81b2-497f-ba6c-7da80d489a55",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "12002da0-c2dc-41cc-8771-bacdbcae4aaa"
        },
        "item": {
          "id": "808e0889-dc46-4091-8eed-f7e59aa4e9a2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "57dabe35-5b57-4261-9dab-b49100d1a7fe",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "a7affd26-8f3b-45fa-917a-26e65ab84fc9",
        "cursor": {
          "ref": "31780fc5-f553-464d-a7d0-6fc91a2d2b54",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d894299c-8d23-4944-92e1-d7d033cd5f2a"
        },
        "item": {
          "id": "a7affd26-8f3b-45fa-917a-26e65ab84fc9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ad6be53d-1c20-4c88-a1eb-06813054234e",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e983f7-af0f-4d77-859e-9033835eba94",
        "cursor": {
          "ref": "1363bb41-7656-461a-8871-c7c946099227",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "cb324f96-edd8-4392-8b6b-040af03a1146"
        },
        "item": {
          "id": "f5e983f7-af0f-4d77-859e-9033835eba94",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b9f30fc5-340e-4eab-85a5-e51a24bdb56c",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4803f1bf-3ea9-49c0-ab34-885447d47df9",
        "cursor": {
          "ref": "ef5000e4-597d-4857-84d5-f2f2e029559e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "025a3144-8c97-48da-9986-6eb59d473028"
        },
        "item": {
          "id": "4803f1bf-3ea9-49c0-ab34-885447d47df9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c54c1280-a105-487d-87f7-54fa40adc18c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4803f1bf-3ea9-49c0-ab34-885447d47df9",
        "cursor": {
          "ref": "ef5000e4-597d-4857-84d5-f2f2e029559e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "025a3144-8c97-48da-9986-6eb59d473028"
        },
        "item": {
          "id": "4803f1bf-3ea9-49c0-ab34-885447d47df9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c54c1280-a105-487d-87f7-54fa40adc18c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c3f6a9-5d27-4ae8-bd9c-b341ef02a3b8",
        "cursor": {
          "ref": "7aec7995-72e9-4519-a6a3-fa213416a6e1",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ed855b74-3d36-44a9-afdd-eb946c3ffdd1"
        },
        "item": {
          "id": "57c3f6a9-5d27-4ae8-bd9c-b341ef02a3b8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "09e3a291-decd-4038-87b5-39c6227bab00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ac3916-d053-40fe-9d6a-75d16b21959b",
        "cursor": {
          "ref": "d0cbfaa4-5e28-4658-8b5d-d7f20fb8b6b6",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "e647a5b8-22a3-4b4b-950d-f29128ba1f39"
        },
        "item": {
          "id": "65ac3916-d053-40fe-9d6a-75d16b21959b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "2508f4ce-ff5f-4f7a-96c6-2f89ea57b50b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}