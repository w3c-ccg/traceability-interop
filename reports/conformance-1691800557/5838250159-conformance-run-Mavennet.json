{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5c2b2ac5-0519-4636-a396-8c83d7fc6ddc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c19a2e3d-a022-499b-b456-b7e987b87b0c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ffba93ce-c409-47a6-ad70-73c7aa87f030",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2f517cef-7be8-45a0-a829-7e8d60de7c25"
                }
              }
            ]
          },
          {
            "id": "032cb2ed-3ad1-418d-9aa5-292d0f494826",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b6d7ac6-902f-447e-8f8f-651316b5b227",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ddbe7fb7-c375-4b7e-9e88-ea9ab9b48a5f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c467936d-96bd-482b-8836-70349b05b395",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "035475bd-e1af-4d79-bb61-71788773c46f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "15e18326-58bf-4901-8209-7c7eb6c6462c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdb90a09-6b57-4bb9-93f8-ad056705c1bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "51b0ec75-7c27-48db-b1c0-fbe38ac3c3a1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "34766965-8914-4674-bab2-6a507b30806f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fe573e5a-4819-4fcb-81a6-602eb88dcfb2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bfc8dcde-0359-40ee-9bfe-9f865e2c50f8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f69676df-f85a-40e5-bca9-34549dc938c6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ccda9e59-fc60-4103-b82d-5b53a1a85ab9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b930bd40-3bf2-4452-9a02-f3754ce11580"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa92cae5-1a9a-4c36-bd86-fcaac0db5d1e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e997120e-cc65-43c2-99f1-80f2d1e9ce7a"
            }
          }
        ]
      },
      {
        "id": "000c52f1-265e-46d0-8839-1c4033cc0586",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bedcfa33-8600-4de8-9f5e-f82532caa6b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d7000e79-ec11-4862-b710-7d6dfff3aeea",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b0174359-67d0-4c06-b8b1-d5d64dc6ca89",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1d74e6-ccb6-453b-9e66-f17cdc23d133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0771d1b5-b6d7-45fa-9d37-254a2c3d953c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee214998-a612-4710-9583-8f9a44bd883b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87da513a-315f-4bab-a28a-54fcd474b132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4154ec30-2114-4f51-b4a8-65cf678bf676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4617e0-42ec-4f6a-9b1f-bd719cf0b1a2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2351fc9-8e18-4ef0-b26d-5ee4298ef0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3b32c6b-c34c-47de-b562-6daa6745e1e6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5b8b67d0-2aa2-427f-b749-24d723b6e0e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "16902895-f0e6-4b74-bdd8-bf1b96c84979",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e21ee82-cb83-4cbf-aaf4-01feb4c10346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b00bea0c-f95f-46c5-bc68-7f3a4de29bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb90a721-b372-4ea1-a477-68554ed2dc46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "774f0741-ecaf-48ce-b4d4-1a0f2bc682b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "08d56f97-ce5e-40cb-9eff-37e9f08056b1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b4b3471e-ce8f-46fe-a2ca-d9a47c7ce35d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2af2a0e-17e6-4e3d-8bc6-076e67bf4fb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "73b8a208-fb62-45e3-aa30-2b6cedc9df9c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d7ef5800-8eac-4bc7-a1f1-7e9f25e6c103",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f23e4599-4810-42e3-82c8-669e24ace5c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b0d04d7-3207-424e-bd5b-5ce2608b79b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ad38058-0cec-4ec3-864a-2900e6271f49"
            }
          }
        ]
      },
      {
        "id": "a97d4192-3ebf-4d6f-b716-3bba0293917a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "cb6ac638-8989-46cb-b40e-bedb051e994e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "850e8edd-e4d6-4a1b-8232-e5e342847d62",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7c08e013-1c8c-4dd6-805d-91bdb9af6308",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c08d8a1-e28b-443a-8c88-e2e0b5b5ee90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5f4840-feb6-45c4-8348-66936a5d45fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964aec8e-ec31-4906-aae8-2ab26948c4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f00dd6a-da58-434c-b695-d2c96802ba3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e3dacdb-58e0-4f3f-bfe8-1224422d58c2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c6a6ad-d55e-40e8-9cfc-a0a47f621c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a2975aa-c686-4b15-aaf0-411b10bd384e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f030fdce-530e-403e-aa3d-a3f5d2618990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc0a1b62-d77e-414b-b965-714975dec2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617bc933-8501-4e85-a6c4-c85f976ebb0e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be533fe-d5e4-4f4b-b1b4-b9dc9ca2c06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f0c2fb-ccef-4a62-9e28-09e0a685c1cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95177fa-3383-48c9-b053-eb2d31776c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f785c84-0f2e-4303-a939-4dc5bf23bd23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8050a159-3d11-47c3-aa58-0c15439806cf",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba456a96-a1a9-49b4-ba07-c9515ca268bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45085b7-a895-43af-ab84-b94a94a3a370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6444cbec-cbe4-45b3-aa04-a9d58b45015a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "451e9120-1963-4950-8ffd-6f6807e66c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a0aec7-d9e5-4c83-88b0-24cc9409516f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4485edb6-7847-4ffa-a7ab-3a47d3ec7db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e37ac385-6def-435a-a1ba-10c16563a996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf3531b-1994-4316-97a4-2b36079e3cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bef4899-0c33-4887-8bef-83ccb7808cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75f6f19-6cb2-4015-9f60-4fcaa043d87a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79a3faf-8616-4d62-9571-8aea1d587050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb6ac29-217f-4257-a10b-674c07adc2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9b761b-1050-4676-a9da-d24e4dcedcbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5c3780c-4ebc-47cc-b63d-9a72ff1bb786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eecfb95-2e3a-44d0-92bf-ea3408228fa1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08347d33-8b4d-4c5c-b9f1-b8bd95d73209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf74a77f-644d-47d2-9fa4-c14d761b8f54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1402554-1381-48ab-b244-96e8052e7de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "882b4b90-83d3-4868-b679-193a9d8e90c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8cfd14-e891-430a-8bc1-367de20bcdb1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a4734f-0d1d-45df-963d-f4f9bacb8ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb81977-b08e-4706-801a-21cecb70f22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2b61a5-5802-4418-a6b7-b9d07a939587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b182d68-0ae9-4233-bcc9-9baf91bf8532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2bfc6f-4c12-4311-a909-710e1f45415a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a27b1c-9460-4e22-93f4-6390e3e3688b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3462ca-089c-40ce-8e3b-229f92f3315b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836693b6-8e0f-46e7-ad69-f065e8008824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1316029f-13a0-4c7b-8686-96f11866c001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d8b851-ca43-464a-ab3c-47fcbf5d6583",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30481267-a8f5-4a20-8e18-99332d46c094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d45249-1fdc-4cc9-9228-d6ada5c60c75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f51b69-6cae-4ada-b703-60aee0d6b12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a9e38f4-558f-440f-8a82-140fc4ee32a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c35959-554e-4063-9b68-579a6b270a28",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb5c6db-204a-4d10-9c33-d38eb1166f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a39b58-e36b-49cd-b5f4-5df51f71e0c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700356f1-8e9b-408f-92b8-d2fb804d596b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ff5cf64-ee87-4ac7-a88d-645d15ee73dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26cc995-a7ae-42b8-8908-c884539734d2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "658042b1-cb8a-4d4d-aa62-e5671cae5dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d86b90-95a6-42a3-995c-4979a3e61a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c8814b-a1d7-4b20-97bb-70b1fe36bba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44aebb10-42c4-4c66-8d07-fb5688e43a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f112d2f9-99a8-46ac-844e-c1808d634c17",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2c745c-6eaf-4b44-bb08-e0f3c69e7f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5130c55-0de9-46c6-8d0d-cd7e032f1e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e4d408-f347-4fff-81c9-f00ebaf9c6be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73521f43-4653-4a29-a3b5-0ad9f48dbdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94696402-af63-4d20-bf91-df45d2c5e8b3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e481b8-1632-4f47-bd20-5e83c121d278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ddb95f1-ce02-4ef5-969d-4baa404f2e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b033aff0-d249-438f-9fc5-0407c17e0dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00f85e1f-304b-4f17-933c-d930ac152e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86255e3-487c-4843-99c6-38628dacf750",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "decb73ba-4dad-4e54-8262-565cd7b97f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b1157b8-58f3-4857-8801-903bda8996aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a795a57-10bc-43c0-9334-5c8e16e7e2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ac72cad-0ef1-45b7-8b5f-2d4f359ab21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b0ba6b-24cd-4001-a00f-6003fe81b5df",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c92e19-011e-4a2a-bdd7-90c3da64130e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a27008-d093-467b-ae98-a7fde8d06662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322e0e67-440c-414c-b077-90a1885257b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4aa24a7b-4925-4bea-ad02-64c9de4168d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b842ff-8165-467f-809e-ba9241374ac7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00472ead-8610-40a8-aa3a-1848270fee1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0714fca0-f9d0-4cb8-ac02-69605b44b74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a7be81-0e3a-49a5-ae0b-dd147a390f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f07241cc-2ded-4055-9839-4440b0f3db6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b225a7cb-d428-438d-aceb-1f9efd45ee65",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ab938c-e5a6-488b-a9d1-5fa02e1bd24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6631e8d-b5bd-4cbd-b59a-bff38993e351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44020814-3652-49ee-8fc4-ab628917dabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1791cb71-6f59-45da-ab33-21e1c939c707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76bbb403-d8cf-4517-9a6f-f681ec77ea84",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19cc5555-02c1-4214-8cfa-4137d4db9eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe5f469c-2523-427c-ac7e-5b167b869629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ed4b47-b050-4304-979f-137cbb34dcb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "96626093-4d8f-4e8a-bb0c-7b99bdb71955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee36c05-80b1-45c4-8d4b-1fcafb881c59",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a64d14-ab19-4201-b1a4-fc29acfc3f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959c967d-9ff2-406f-ae10-a8979c8a4941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b41f0a-bd8a-4b9d-9eab-03c54e8e3101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "206a19f5-654e-4c62-a5fd-60b9cd088bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354f733f-4bf1-4200-9288-0a2f6c03b00f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5af215d-f858-4b8b-86a1-7abf8d43c07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558bab10-f9e4-404d-bcf1-15a2be0ac194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fdf83b-9d74-446d-9a7a-34c24d220dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac80439-0afa-4f87-99f0-4d15f9baa326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c592c336-3f27-4bec-bc75-c5939fe99bba",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3540164-8100-4fd4-84ae-f16bd5cf95f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19dfd68d-e30f-47d4-8742-dab0d6b48701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd3b5ab-91a9-489e-bf39-1af0c9675c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "beb6c3ff-4d94-437f-bc2f-3275b8b6ae6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a50a02f-416d-446c-995e-aa5b0e422eaa",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6ad88a-0743-4cca-bf8a-631d9ddd6490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d311945-bc6e-4255-bbdd-eae683be156d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74437e99-7c79-4d01-a532-eb412a636599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "212136f9-89de-4383-b512-636aba3c09fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b78f0d4-8586-4a0a-8ad4-43fddac16ba7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa598c14-ad75-41f9-a957-89008149a14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e72b276f-32ee-4284-9537-c5b7d57bec93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9031e50b-8ef1-465f-b220-7d8957b5f76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "61c63dae-c3b3-4a60-9904-ef5ac4980cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afadf73-d3b7-4ebf-b829-d39d405d16b4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5aa43e-418b-4ed4-ab34-915ba3404487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de684051-7a6b-45fc-b56b-570872c29fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a64802a-11b1-4760-ae9a-ab65129849eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf4680dd-772b-46b6-b8da-f2172b13dacd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b824916f-973a-4252-a442-9d6c87523f61",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5acf51b-7ca4-439c-8fb3-125caa4d1c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd1cdbb6-e5cb-4fb7-bfa1-0db0d05980ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efc439b-7f7c-4485-bb98-39f7d2bee160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9650ab04-f687-4338-89f3-1d2573a8aff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99b61af-2e22-4843-96fb-d9cc8b164909",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "694851b1-db27-4773-a8c1-f9b8f07b8b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6122a460-6add-4c9a-a13c-272c0e59fc26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5593f731-f233-4bc8-8bc6-f623993b4ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a402dcd0-8dc0-42a7-a433-585c552e38e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53fc7aa-3a59-4199-92d5-66c2279b89a0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d116013-efef-47dc-a40f-e833f57ff115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed2c1f3-c0b6-445e-884b-71d61a782412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3c8e12-675c-47aa-a3b0-53ac9ec83c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "664f140a-09e4-4751-8882-b848fc49fe09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beed20b9-dba1-459e-b986-e91e58493257",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2687a230-092a-461c-b1bd-65aafcf8dc9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a94558-9553-4046-bf22-f0c3e3867e80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb969e12-c679-4977-8140-0342b55dae68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "329c9fb3-c84b-4a4e-ba1b-16510445b9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "084cb32a-5ccb-4e5c-a04b-b360c119d7f8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f64081-b428-48d1-869f-aa753809ac21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c999ef-3868-4e1e-9440-f407eb4cce31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d13413-4378-4d41-8eb9-3c5a87240632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "65394502-c76c-4eab-9e87-23541c7aea79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450f4217-055a-4c14-886f-faa8235f1aec",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19f8920-3ac8-4efd-b069-49f33da6ff65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "711de716-db6f-40ed-9718-d9fed4076d18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf3d7a8-bbb8-4dc3-8679-15d67cfafd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "323a6848-b0ea-4456-9b41-738bb0102248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77cfdfb-0024-4619-8e7d-7a0ed71c3530",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebc7db8-42c8-4d77-970b-f89693bc9cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3690d16a-4e0c-4482-99c9-2bc85f071b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33dc5d83-fc81-4ee5-a88f-c6625215c20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "784a3ce2-2a95-497c-b43f-90007a345c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df0764f-b61f-42af-9c3b-8f888b434482",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3158364d-48fb-474d-a213-b8aba308e0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067f7995-59c0-4ae9-9200-f47bc608bd1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ba912b-62d5-4bf1-87e7-d4733dc8a3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e420c8a0-74e4-4867-a589-7228dd32720b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d95af4a-121c-4632-9a41-08d28d67bcb9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d83f47-be90-4edf-a0da-a241d2f85070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ebda23-3e91-468f-af2e-b388d2ae85b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2248a7-8682-4a65-ae3c-d457e6ec0d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8763b364-ecc8-46b5-8147-1dd8914aa5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f37a908-b2f1-4512-9ac3-22088ede34f8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "514748b8-b4a5-4b23-baf9-2705e752cdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a2061ae-5741-4471-b62c-aa611a61b58b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dcab820-a90a-4298-b1ff-e842d142b919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "525f12d5-5987-4c8a-950e-643f2153da7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f756aaf2-aac0-4519-aa93-f3b19afc9c92",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93961017-31b3-43c6-aa4b-6fe31fb356a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1cbd7b3-c3f6-4748-a75c-d5077ed0d8a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8904f1-651e-4326-89db-4a7dd116d9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "704967e5-2d0b-4776-a7cd-b6cac68535f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f96178-02ed-42ab-af92-e149d4ddc046",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2eec8a-60c1-4372-a2c8-b9d117fd71ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6fcdae-b65c-4f13-b446-8fed4f8ca674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3399b7f2-811a-46f5-8dbc-c27f307f2024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ceaee38-04b0-4d57-b217-e4448c0c921d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6d3a98-dd3e-45f2-8c54-cd253deee272",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92ab715-b352-4bc2-b676-78df9b0038df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7477a83-8aa5-4bd2-98a1-1cb09084d909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f82cce-56a4-442b-b8c9-26d7e6c32460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dff75dda-f671-4764-a812-434f733c3909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee435014-978c-4986-b30b-9f53c0d3e652",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5be6f0-5af7-449f-80b9-34f46e2d1b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "def2ddf9-319f-4c8c-9e1c-1202421be335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5c43e2-6c97-44ac-8b11-9ed1a59474f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d667a6e2-bac0-4da6-8a63-31602a7a989c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7da3d15-288c-4766-bc9d-dcbf5a1fef08",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36fe4949-a0a9-43c3-b86b-f683b9134fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b09278f-3d05-434f-a3e4-23a2e491d13b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e0fabb-1367-484b-9426-831f07346b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6da9347-2f59-451b-bd94-e0c61a6fd912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd21ccb1-46e3-49cf-9610-7eda85515bd2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ee5b16-e19a-46ce-a3d8-000ee20d129c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "536acc08-87ab-4fe3-a5f4-32b525d4ebc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d84a8e-36f8-4e51-b483-9b96a81af4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2771b568-4dc5-4c87-9003-1bad31394421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "611fd457-e57b-4b83-b6fb-5f1061e8aab5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92406b67-ed2e-4050-acec-7767dbd369d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92bac28a-a3c8-4974-b261-c7f2d633c894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d95510-7035-4830-b44d-29f6fc6a3f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "822cf993-0bcd-405c-9f80-12a0d95a20bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1905a9-8ce4-49bf-a1ce-d535c789ca79",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc75e4d0-8d30-475f-8237-4c88fc980f32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52f924e-b822-4316-838d-9ee498d8b68a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf9ff40-5048-4f79-8459-ec82067a3bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "49bb870a-99e5-4e2a-86f4-b2f7f08f0a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c8d921-17c7-4f03-a3c0-c854ae7e29a2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "228aff71-c8b6-4e12-84b4-8ace6c618d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3cd58d9-8bcb-4000-b372-1c87295bb040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576c4be7-f91c-43d2-81ee-f4d1b68818eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a21db5d1-4f68-4843-806a-3abcb51f5bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9272b49-1dec-43b5-b2c3-a9c95520176d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb342fd7-01d0-4a17-81ab-7a3005a43419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24e565b-694e-4d06-bd6a-800fcf8a4451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb7cd68-55ff-4357-8f78-c5c6186f0556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b9e4f87-2939-4b27-a29a-d8f75164f7b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b88201-8026-4bd0-8f6f-4d977e3dcc77",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8eb5a0b-f585-418e-a122-7add03754b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9c8da8c-6fe5-44c5-8656-7c122fc1ea52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718fb0b4-b366-4f00-9793-2504ecde7f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f69c9355-bbc1-45f1-81d5-8c762f4fedd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffbaa108-029c-459d-bab8-79bee31abd8d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1758ce04-0cc5-4b34-ac01-e9ae84c2b936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281ef90d-9af0-4b5d-83ec-194826fc1bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c621a6b7-6f0e-4721-ad67-0d33a1962156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6757eaf2-44e4-4ba4-a822-849b0830adc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982e77d6-98cd-4978-8bdb-1941e9103ba7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6656c105-087c-45ff-b6dd-0de4630807ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf5482b-ab85-42bd-9320-a66f264057d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020bc6b5-20f8-40a0-b338-a39a910844b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33e6a60d-1808-4662-8588-d243e31ad06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cbe93fe-1e5f-4a7b-9f09-88153de1385b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe11171-d477-438a-a8dc-58a1fef04084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41df5ed2-68a3-4f03-9570-9212ba64ad40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b335e3ac-fde0-4e77-a09f-4d8a53b7913e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a37e0fc3-0383-4be6-b88c-b4de73528160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34847852-811b-428a-8e5d-be7c9e640dc3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b680b9-5a88-41f5-a627-f322fb3593f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f115eb54-5446-48c6-844e-3f8491032736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cfb66e-1d68-4bfe-8479-0936930a0eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b976bf7-143f-4261-9a24-fd2335ca7f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a3f5a5-9899-4e00-83f3-728225b1c34a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085b787e-3ad1-4558-b579-f06dacb132c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceca9050-c6ba-4c12-92f6-042d2208405b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ba7aa6-ef84-4bfb-a2c1-a918ec2d2204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "300a6239-6674-4ac6-b198-a5da5cb7ce96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e49fb2e-e411-4d9b-b752-b1446fd75439",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5fc0c7-ed02-463b-b728-b6eebe1ef7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee3d3e4f-c479-42ba-bed9-92950b148bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9dad7d-ab2d-4629-ab8a-d6ec1b867198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79999f54-1714-4158-abfb-2d2286475a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5268e84f-17bc-4cd3-81ba-5fbe32c72ed4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44805e5-e406-4cd8-892e-16289da8e661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f5f22c-2366-4ec6-860b-64be0bfa99f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b64f1be-9b56-48e9-a5c6-ad510985d99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8da7dcb8-1f2e-4642-bd51-6b39465286a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce74be65-6283-466b-b9fa-4bf5e24a6ae1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b02bf64-d9a9-4580-b381-f336491af58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140887a8-f573-457b-b87d-daaf1565d74f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361f18e5-d0e4-468e-b730-42da2edc46da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c04cc1-aef0-4ff1-b78f-46563661b24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9003032f-db75-4525-a7fd-8637cc914c2f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1baa37c-d142-472d-80e4-cf3b44f8bf72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45fa6546-a1eb-4e40-b21c-883557060279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1623050-c408-42ae-8fd5-982dab3ad9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "afb93e6f-4416-44a4-85b8-ed97107ba4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd66f451-77b8-4fbf-a610-b57cee7977c5",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec6eb48-2c06-41de-b74a-56ddf29cb17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52317e0f-a294-49ae-9d4c-ed64e23f0afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a14091-ee64-4741-afac-94d046f68651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f41802d5-30b4-46f5-92f1-2e4da643000d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a005b678-8e3e-4bc4-acad-43df54731851",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f314fefe-a172-4b2e-82d1-946dcd192a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6281471f-56f2-49ac-97f0-c26b2ff37bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7d98bc-d938-428f-9812-1adce83d9d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cad6e058-a07f-4d56-91c7-9e810de9b919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f61f7e8-ac31-4148-82a4-9ff7da374c1a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f34465b2-143e-46d6-bff1-81e221619dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d1a7c5-80c5-4f91-8807-e29b77132896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a468cf-a4f6-4b6f-b214-d0849730f767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "91a2a5b9-f204-4480-bd89-2b63c645f0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3469a0-2429-4aba-ad9b-c33bb598c8f2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51841bb-4f37-4b67-af18-377fd1017fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9aa7cda-fb27-483b-996d-6dcc1528b648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915dca03-60b5-497b-aa1d-2bb72f5508fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb79f070-0c63-4eaa-8c52-543c4d8bb870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340265f5-1292-4c84-801d-7d8f2fa4c079",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fb3ae5-256e-4085-8f8f-9836570fc179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5d14d81-f544-47e5-a5b3-6b050f013056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a5e941-28e9-4fb9-9649-fef3a1a0d60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "48b63467-570a-4447-9488-06a68ea0caea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "372d0d19-63e0-4d6a-b5ca-a38821822d6b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79163156-269f-4a3a-8abc-91e9d5ae63bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be5f870-bb88-486e-a270-f69297d81aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f541c8fa-7cbe-428b-bbe4-9abea69dd858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf14b18e-4ca7-46e7-a152-8c2949b59809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922ad207-eaa3-46da-82fe-f2d722c44e72",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3cd2ef9-e318-47a3-83df-3dae4566dd18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "725b7896-6ca9-4414-9654-75b84c9cd37b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4fbb64-b1cd-413e-b145-a4d881973dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d41c7478-1b1f-41b5-bff6-0d0bd2a491f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d29782-9954-41a2-bfa9-51a71f948534",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5649971-06d4-4d49-b868-2604f05d90a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59944fee-8212-4136-b3dc-662370416e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9c334e-9c21-4331-9495-e69a549b076a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "25411d62-7a68-4ff3-880f-c4acbbdaa1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a02911-5062-4df1-9a35-b77d0e507b75",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc1c9ed-5e9b-465f-bbca-6fd28cebfc06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0794f0f5-bee8-4b22-b364-00cdcd7a73d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e22fe6-8353-4b95-8b7e-c0c0418508a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed4f5348-57ba-4d50-ba56-94ae06d68f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26aa40d0-9de0-4feb-8d17-c4f780e50c76",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac4fc21-948a-49e4-9794-49ccf84065a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1737de37-e7b2-4d5d-8611-d0ffe723eb10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1601dd70-01b1-4ff3-9794-e92fe800f120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "346bf18c-755c-40ed-bf47-3415f34cbe5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddfe754-6353-4d99-a01c-adc2edfb32b0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063aab69-4dde-4349-af8e-b1789f905a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b410c4-989a-450f-8d57-2aaa4032c621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7458f41b-1c79-4b7f-b70b-70dc0636b6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4bf18c1-ee2c-4688-abad-df3abc052cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d911cc86-efcf-44ee-9a40-747977d7826b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908a73d7-c20f-4c8e-962f-f5813f760352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c74a97-e5fe-496b-b564-14d80b9eace6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b673f464-fd8a-49d6-8551-3196a77a988a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2413f24-0bb5-4a75-9e36-153ed2d2b191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269ea187-2fa8-4a9c-b0e4-c6b51148ca4a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e1331c-45cb-46bc-955d-37782ea94c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b61624d-7f1f-40d5-8c4a-5bcac45189e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4cc38c6-83ee-47dd-ba3b-978f707335fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c008907a-d383-4840-8216-48fd32f4cb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0533128d-01af-469a-b4eb-d63b808e5a52",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "875dbaf8-be4b-4fb3-a217-52ad86eacf2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f33e3c07-5b13-43f3-88a0-34ac6dbd61bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e41b345-00eb-48c4-8a05-6d3829b5ccb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aef344ce-8c6c-4167-ba62-511cf6801a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8f303d-db3d-4d9a-8cda-1f0f2fc1c69b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16da6bd2-66c4-4f98-94fa-73614a4574a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6be9c29-17ae-41a0-9d56-df3275ecb6a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288467dd-11fa-4533-9669-5d93320fe0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f28458ba-2e2d-4440-8bb4-3749052bc5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5130c9f0-a1be-4b3e-a8c5-f78888228d5d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20166366-4323-4417-8132-b320e23788a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32cbef50-c8f0-439a-a82f-e3b7e0171feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d83b7f2-97e8-4955-a5fe-59b53443357e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49547b08-5746-40ec-ba8a-c02312e7c908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55403d9-bcd0-47fd-a803-795e361dd274",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9db67a9-f2f1-4789-bc27-bafc3452b583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4689db70-2392-460f-bc68-b762ab01818c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8916362-4315-4bd0-8369-dea1e4833ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca07e1a7-7ae3-41ad-89f1-77154a6a2771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6f0c40-56f7-4b61-aa33-0e3933e243fa",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12ae054-221d-4f3a-8356-694a4707fc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb0f1b1-ebc3-4d13-893f-04d98aa2b002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7925a65c-2c8a-44c7-87d1-ff0998e4a9e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a4117e7-1219-46d9-b815-25aade44d8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2aac69d-24f5-4918-ba63-49860ca4eda5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab3d040-4765-4988-97fb-b9c4453cd77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cbb47d2-5813-4428-9d82-ed5fe5a6401e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ee44b7-5dad-42a3-b21c-1510033a8f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c3fa067-adc9-47f1-8515-6fd4382813d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a179866e-5041-433d-a71f-55fd5cdf94bd",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4559bc-f934-4ad6-a235-0e6a976b7560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af12d4c3-e02a-4d08-ab94-5ba2991a160e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93adfd8c-7672-496f-9b6f-00b17c5cb5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "896cc9b6-48dd-4891-9756-5d0346061601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cca2830-ef66-4dc1-866f-4c85503c0edf",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a928255-8947-4f97-8be1-920e7adc85ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca461ac-af74-4ab4-a625-3abc3b29a421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3039e5c7-3c32-4ec8-a792-c5d30bc5ae19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "653ffee4-46e9-414f-acc4-0f6b582fb6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e832448-4bdc-4253-aa43-a859b2192fa0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92e590e-aadf-4042-9004-bc9708529c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e254268-9d13-4035-afdc-040081710d44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2721d461-1533-4b58-8052-ac960e556f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7993a6df-4853-4000-bcea-f708fbdeb8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6b8d7a1-afe3-465e-9be8-d98a5e5e3f03",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9997534d-354c-4c68-9c2c-dcbb8bcd111e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "462069f7-cdab-4fcc-bbae-67d6861fb78f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b763283f-97e8-4daf-b8cd-bfff0ebc23db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb865c88-5f44-4c71-b57d-0a77509006ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f039c2-1e58-4cbe-aca6-35ae4530d5e4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd661bde-4714-43cc-b170-e846ee55bcdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72fef0d-f9e6-49d1-bfbd-bf8cffe3f8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c042e23-c3ad-4c7b-b207-c00d599ff125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2235a4eb-811e-4213-bc80-2b386e9a4530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1a7fd41-ab64-4b79-a6b7-2a3b00dad16f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef22cbcb-9159-4f65-aa6d-0461ab54572a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43ddfda-d80a-4be8-a525-12ae8a8eb56b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4745366d-62c1-4258-9ba6-9a910f904b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac993fb1-4881-43bf-8a16-780d427c8801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a851a4-c9e1-4433-b052-f8afa7ba2b33",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ff817f-7b0d-42c7-b071-5d4e85ec5c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97dc3a61-10d7-4361-b04f-7b4611eb42b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a606608d-8a89-4e3f-88f8-583b10004463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec94d57-6011-45d6-8066-5677f2dc1292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c644fce-435a-451a-8ab5-0cbbce2f2d91",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b28e2a5-f58f-43f1-acea-579456d37361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd01679-a0a6-44c7-b70c-e41f18d987a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f531da1-9d18-4872-b12e-233bc2f2056d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fead985-8538-4a61-8585-5fc9f6f58dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fec2d14-a36e-4bbc-a0ee-2ef32ef6450e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6e190d-ef3e-4246-b76b-7be201cbf701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e95bd9-6013-43c1-8f10-31b322cb4ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1da5eb-1a26-4b54-aa62-98cad787c464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fe389a4-1c38-4ce8-8b8c-8733272cd45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da685e4-33c0-4047-9387-6facbfe33739",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d1091f-e285-4fe1-b332-14d65e021927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfacdc94-7dee-412d-b58e-7490f84ae46f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea499440-48e8-4c01-923b-1742dfd3073a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd2be1bb-e24c-4e90-8aa8-54902825be8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371d52ac-c6ee-4984-adda-1f2760464f49",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "475c0dd1-4c6b-4609-9550-bae22c34a10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20af0ccc-5058-4c2b-a062-ce864c46cd1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581de9e3-4dfd-4743-8006-6bd873d76124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "deee840e-be65-4d6e-a28e-c40a08ca731f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4843bcbb-4b21-404f-a269-f0a3a803cdcb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c659f0b-6572-43ef-bd32-213f790b6b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "835fce8a-f625-4189-bd22-a65694cfa07f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8996915a-7509-4f99-87a2-a183db6f2334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "30a7dcf4-ebe5-4d9b-971e-ff31d059baa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfac564-241a-4ee2-9eab-c5dc020e1d78",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40906773-00a4-4be4-9b0e-f3314ffdc177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824ae169-7fa9-496f-9156-a570a6b26e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26dc3ae4-4794-48ff-9c41-0d4068b29822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0420fadf-9e80-4253-aac0-cc4ab85e8807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0161f1ef-6c9e-4b7f-b5c6-bf7950e86a81",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f18e94-808e-4ff8-a421-172db08ff738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be679e9c-4738-439e-b86a-b11aa73ba304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9197d27d-26d9-413c-9e38-d6a81eb5b922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bdec4ee-47da-4889-9552-bb3e20aac719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7841b0ee-ae62-4d8e-a973-ad4f1f8b6a20",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c03ab9-3c95-402b-836d-1c899b4f9fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e37725a-e9c0-47b4-be5f-9b4a8a274cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936e5bb0-16f8-4f38-a6db-3a63497231dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4fc3cf9-9594-45f3-a5df-b58d7c0d5279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af9bbeb-0f29-44c7-8967-949ee1028616",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af98603-d29f-42b3-834b-9bda896a35cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7fe742-ebb8-4042-997a-3796a8eb3848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12efce52-fff6-4ccb-b6e7-53ce75b59b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cbade6d-88eb-4c27-b280-60e31039c3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153f3c99-8978-478b-9d9e-347cf2bcfc96",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1fcab2-edd2-48a5-a671-cc2f5a68bfcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "842f156d-87d3-440c-be69-39237b97a64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd03729-f08b-4c36-88ac-3779a3bc6d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "17de4142-2156-497e-afa9-3c3edaaa9eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a30d1a4-791d-4a86-8c3c-86b1348477d4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e5f24b-91fd-4883-afd8-412e04c28de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "16d29d2c-727a-43af-8fe8-409dae0a50a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8351f06-68cb-43bf-bc4f-2f8b82e8452d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a19c9035-cf4a-4493-9098-ec9c7c691fb4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "731f4cce-02ff-432d-b0b9-5d951e1fe026",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3b80460c-498e-467d-9186-25979ed0c56a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8ddd6d-8b85-44cf-9256-7c34669bf1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73947585-d1f5-43ab-a7d9-1b171b79f997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0989c5a7-2dfa-4984-8721-a8ad8e6ae9d6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d12b3ab-1800-4bbf-aef0-92d5a45a7914"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43109a3b-534b-43b1-91c3-ca7722917c71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f6194e4-e8d8-4564-8e2f-269350539a51"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7f9c1db-b4b9-42cd-bae4-084a1e20e7aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6dc4bdc0-97b2-469a-a8a6-dc7db42c0fcd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c4023b87-096b-4680-a5ef-efd974a0a99a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "93c2038b-ff48-4779-9f9a-1feebfcfbcde"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b4277ae3-2f7d-40db-b820-cc1e430a4007",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e694c5a2-ca68-43ca-95ad-cad687d21914"
                }
              }
            ]
          },
          {
            "id": "6a942645-57f5-4c00-ad14-cb7c2b117c09",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b485d9ca-ea90-4c1c-becc-8fbd5e487b7c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7cd9e6d1-c63c-436b-a6bd-1989ea403854",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bbcae29a-161a-4d04-ab29-5b8a4069f682"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff10313e-e9df-43fd-a5ac-8b58c84dbabd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7aed6050-03da-45fe-83c4-4a5e8257ce3d"
                    }
                  }
                ]
              },
              {
                "id": "2d1243b1-df10-4803-b0fc-082ada69e8d6",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d04b4406-806b-44ef-95bd-24b6b4c24421",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b25652d1-2fe6-4972-9e53-39bfff6c45d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a9eec61-c384-448f-b509-fb6e7798382a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b81a6126-59b1-4c18-bca7-b17c36500289"
                    }
                  }
                ]
              },
              {
                "id": "33aceffd-7fb8-4aec-8097-3ad2fa173a7a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8222d406-14e8-4cd2-bed0-00768658acd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "22685221-f928-4c66-a042-2967f6ac3032"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48de4ac9-6f3d-43b5-b4b9-519fa8876d59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d6e9e143-b8c8-4669-a93d-359f0d6b0f66"
                    }
                  }
                ]
              },
              {
                "id": "1cda40a2-505b-4faa-93c9-058c55b75e38",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b39333e1-547a-4d6e-bd46-3a2d6b1a0153",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9f0b662c-38dd-4b10-b4ef-67a6f14771fb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8f37f55-ff54-45de-9087-f0eaf0864f3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7ad9dba3-e53e-4b23-9a22-fb702e5de4af"
                    }
                  }
                ]
              },
              {
                "id": "2d3b0a69-33ad-458f-a39d-081a57341c96",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01b78620-8d3b-4707-a3a5-c60c29fd9c97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9f1a097e-7065-471a-8a82-517e2a7b2e3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8af43f3f-e458-4da1-864b-16bb3750f97a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c47b2952-8a28-49ff-879c-00609821a41a"
                    }
                  }
                ]
              },
              {
                "id": "dbf0fe1b-3d3c-49ce-8a58-5138d7a68de2",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5224a15-684f-46c5-91ea-41238dc3d2d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb869eed-9ca5-45e4-b73c-a49ee176ea51"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f1d0f5d-e364-417c-a03b-3801ac9d7cc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7e366183-0ad4-498e-a649-7165560a68a6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "368bd738-5018-46f0-93d2-befde0c6f2d9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "edb86052-5d10-4f18-9d57-c063e95c37a4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0ce1e67c-5a87-41f2-b937-a9b15f36b29d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b17cd57b-8219-47c7-89c2-cb9fa5f8d2ef"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "176d6aba-3522-45c5-82a5-adc766c1469e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a5146956-28e5-4223-9249-11e30f032645"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fed1c61b-c988-476b-84aa-5d88a7225b82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c784b4a4-2486-4cdd-8c15-d11af699776f"
            }
          }
        ]
      },
      {
        "id": "babf2812-296f-41bf-bb0e-445ebdcf2fc8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0f28190d-2bf4-4f1c-8c1c-bfa0bdaa5593",
            "name": "Negative Testing",
            "item": [
              {
                "id": "76b6c7b2-168a-4f49-b2f3-ca92e82cda05",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d44a1945-3dfa-4a03-875e-bb2f38acfe47",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54cade7f-4503-467a-a409-3ce942ceda4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e1610dc-30d5-45f3-ab21-f65bc9132925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c240535-a113-4776-8f7a-66ff85ee7548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a939e8a4-c6c8-48e2-a455-f0ed80e4b827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ef5fe2-ee05-41af-bc5a-036ed5513045",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972ee8e8-80f1-421a-864b-d92d4148f2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c458f79-0f1c-4813-ad74-3e17b7af86cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98581e07-d5b1-4eaf-b3dc-800d844417b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "153cd0f1-c589-4d62-b0df-5ce3e263adcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511ae4f7-74f4-43fb-83a3-950180e0c54d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12534354-85b0-4530-9789-f577ef2321f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8214936-ffde-4be7-b022-4c98df720896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558e112d-7771-4bb5-963e-7eb08efcc2f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "981b8041-6998-4975-a774-4b3fdbe1d244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e825991-7ec4-4038-a63d-4fb2bb2b2eb2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1229c0-72d5-40fc-a558-be9d55c6f431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad9da107-26f3-4d34-ab41-f26124b16830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2abdd5b-cf18-4dae-86e8-299f8a688201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da639988-6ecd-4fac-b2d1-6fd0f35b63c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c045ad0a-adad-4893-9fe3-475b957b1846",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079c09d5-c63e-499a-839c-66136f778513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97424a46-4507-40ee-8e5e-8f597fd3648c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8faf314-1376-4bf0-8581-98c12c857b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "231f940d-55cf-4545-aa4c-575b5bab0b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d700c7-8ed5-4848-8c02-bfd8d9dde08b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fcb443c-4ec1-43cb-ab54-232d6c9ee86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b612b2bc-cba1-4a64-ba30-688905f74ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8df6be-fe96-44e5-89fe-8f42da68588f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14ebd774-3aed-4fd1-9689-e7e6be6f1662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ff1de3-1b2f-437f-a868-9e5604e882cb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "186d2305-153e-43f8-bce7-b153366a4896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7afd45-1cf2-4443-8687-23ec9b27fb62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f46cca-a7b5-4c4b-ad3b-3bf1da3bc809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "633e5c2d-05e9-42f4-8ef8-f20b062569e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78be349c-1635-4028-8def-1517971a4b3c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe31df0d-10f9-49f3-900a-9cbb32cb66da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a7ddee-61e0-4ceb-83dd-2409a1f95a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e7f479-6ec4-4a81-8f7a-664374f0f674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8819ae1f-f945-4bac-9a28-696b4b19e678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb79e0c-a58f-49ed-95f0-1c68e61923be",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752ce36d-989c-4205-8121-81736b365983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f611e9-d45d-4927-98c4-09a1299d0673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fb6636-e514-4c65-b45b-371dddccbf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e70017-c9d3-4b57-89db-0fa891e1b9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16ffe7f-343a-4489-8dd1-8c6ba0f1f803",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40f7d5b-181d-4bbf-b90b-e558a3b7d1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "503f7e03-4029-42e6-bb80-0fb84561ed98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0e3726-6e5a-490e-b51e-372f24e1036a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c028024-6e03-4e02-97b9-09c5e8746ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4feafe3a-3689-4835-a2b9-570be5f6e6cd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b724613-66bc-4c11-8c82-9f7cc02fe3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ba5eff-ff65-4b4f-affa-f12adfd42436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e92a97-78fb-48e7-9e8a-ebb1473fcf31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba7f431-ca0b-43c7-b083-35fffaa58279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50939546-6e29-4e75-b1d2-8a969dba7cec",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f30e432-a69d-40cb-a2e2-f82c649daa61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0818a56a-3422-4c53-b85e-b99a89cc4890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a334274d-d3bf-4a79-94a4-e2cd7f8881f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5fda5374-c36b-40db-9e27-35ccf4ee4a89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719c5612-a45f-4025-9044-bad48e4d9ba3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509360c3-c56a-4c84-a382-1fa4a11fa834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07093f44-6550-4413-889f-635d730834a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2afe265-6e9f-4539-8691-164000e96bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a60213cd-6261-454d-8f02-144fd3c00ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560db378-1b7f-4bcf-bda7-063c857bf614",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80efabb-9aaa-4431-9fe1-0f7bea8da79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e026472e-c39a-4919-baeb-a63341dc549c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b022970e-26ea-44cb-81cf-a55fa9200cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3c19e13-6fe0-45cd-b625-ecbd5a8432cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d370794e-17f8-40e8-b156-c65aa12de965",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8565accc-faa1-411f-8c07-e3764c8e9e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72673ec1-a975-4ea5-926d-b76c1790e0fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf9ec2e-f338-4e16-a22d-92252b8b6eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1652e4c3-f8aa-474b-9b20-03d1564ee243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d794b26-a720-49c1-b0f7-30c93ab291f8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94eb2bc-cf6b-4d58-8616-f7eda9b80470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0ac2a4-b6ed-4e7f-bbc2-248f70690381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65dc34c0-4391-4794-876c-ae69b24df419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e86fe9d-a783-4038-b251-772b9be26d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc92cff2-c685-44e7-9ece-1590dc6f53b2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6424e2ae-1d2e-464f-8f05-cb6e063f4d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7ddbb9-74ca-40b8-8b44-3c5f95cd6bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf3d2c1-8fc2-48a7-bf0d-b293f107d926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "933eef08-97d9-4f43-b051-e7b63c24435c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463f4e9f-20b1-4a01-9376-b599b8f764c6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4840a5c4-8b8e-4861-875a-cf7bbc80ed4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdbd9f75-91b7-458a-a76e-d9af84323d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8921babc-3041-4719-9b21-0e24b9105f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9082f86-767b-4949-8dfa-f01ffb01e331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cd0143-9074-46c0-8e1d-a1e275434a8f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60246f10-d4c8-4a8c-adc0-148b146421fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e7bdcc1-ae34-4147-ab41-d9453901ed53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f5df8d-a4f2-4243-9ccc-1a352f103962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aed01b7-023c-42dd-b097-ea9a7c59abab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ca7bca-ade8-4fd6-bb8c-eb130742d2fc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e947b1-7a42-4bcd-a46f-f5acf20c7fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c534fdb-deeb-4215-bede-6ee8d11e8b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb31d527-9a35-494f-8918-88ed7dbe85d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c76594b-6a85-45fb-9831-16ca021e626f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982bdf3b-57f1-4665-a97f-118b819bb3ee",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab025a3f-746d-4899-a32d-f353b34128f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e74016-d76f-4569-aa7e-f127a197a501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122b3993-f738-4a87-a3a5-3b55f4e45c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "316a7da3-a388-4542-876c-8d76a56927b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f31d7e0-c2dc-4071-a06a-867a542ddc98",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e0efed-a560-4bc7-8414-5d1040210ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387deab9-1c28-40e6-8dc5-1721e302babc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69456010-d5ac-4203-b36a-0b303074975f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07005a97-4596-45b3-bd2e-0387151c83d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ae8bf2-7ff2-4f21-9cdb-c2e81aec51aa",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc8f300-41fa-4eb8-937f-41c4fd9b4c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51242c64-cda2-44e5-8557-690b30721347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6110b76b-6460-4a32-a030-4d17516168d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d6b8297-f7a0-49eb-92da-b2386020d608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f179dcc-b7d7-4d33-a569-160004c70d86",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b539cbd-b46a-4b7e-a52f-765328388412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48585de9-9e18-4a15-aae9-0796ad71a234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1a1214-792a-42a7-ab3c-a6b06fe13f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20014267-8cce-4044-a502-8f5302cd80f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c8873a-99d7-4a3d-9c54-080b3d289f47",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a71171a-b14c-4905-bef7-89b738a91717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b63887d4-d819-437f-9131-48da8e2783e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933b8a6c-b7b6-45a7-8d42-51ae7e9cf9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c646c57-8f01-498a-828c-8e9cbaa0b105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50fcbfdb-414b-4b49-a68b-f9efe9991de2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e13af92-b35e-4c5f-80c5-4cb6b7c63cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e8423c-9846-439b-b40b-bbf47fa0e923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6575d4-82fb-4d4c-8e8c-cac9f2a1c923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60729e5c-d02c-45a3-a72c-5a5e7c11b4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8997e691-cf8a-4a34-9abf-0d1d89d60049",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b179c2-b170-4ad0-af80-f9fd873dd60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd9fcc2-a808-4c92-96bf-0bd150ca3cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d5d538-bf4a-4f8d-9ecf-14525fd6249f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f6656e5-8187-4468-85ad-cc59aa9c080c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719800da-90b2-4750-8e88-81da4e4b024e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641c9fa1-4068-400e-8f4a-49962c0b113b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a3d13fd-959a-441c-9564-3169248c22b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8b8d3f-af53-450c-9879-4fe5e88462c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf654e8b-ad8d-454d-8c55-832b2ff7c78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e38d40-e4e0-41c2-87b6-47843c84f937",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6df9c9f-8c01-4896-99fd-7ada8f47d82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06ad932b-cb2e-4f26-916d-4b743ebc0245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ba8904-677f-4c6c-8852-21b4b24f1b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2267641f-efe5-44fa-8ea8-df1a0f948d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb8603b-da25-4e04-8241-a50ed1d81ec4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c11892-a758-44b9-a3f5-6a79dd72a87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "906aef11-3e26-47ef-b8c5-020bfb1f595c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752b475f-7fed-4a90-bd7d-3d05b7df2b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f74297b2-eb38-4523-9cc2-ca55f0c4a7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9bb321-634d-46df-b05a-2d60f939b8c2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b02b4f6-2f14-4b13-bd42-a90b03b63d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1d7c59-58f0-4cb4-a210-49b7a89f09c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2a1dfe-8ee0-4460-b430-aeb74d1d2ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a1fe5c5-2acf-4521-8b99-558662b6ca08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bcae2ed-62e3-4de1-91b7-83235fe6be9f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1801de00-c001-4b95-a73a-e7cef58be135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67957750-6587-4551-ab3b-19d3bf809426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189f3f4d-6cca-4171-aa5f-fba45352bcd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f45c13e3-39b0-4f90-a370-69895bec5864"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "54cc249b-4268-46b1-a765-37ce61cf6d22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e7d573b7-82b9-419a-adac-4634950f5bb4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c7dd24-bd5b-4807-b54a-a8a74dbfab70",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "07f46a54-b8fa-44b6-908c-0d12f742ed39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ba5a5a-a860-4a7f-9dc7-28895ff5dd20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51f688f5-5527-44bd-9cf1-d5875bcc8df6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6166737d-f7e6-4306-9c1c-79ef100bf8e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "860dc22b-546f-444a-aa61-12f71a5ef2ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8cd86cb-dc50-420b-ae63-c3045785ca13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0374e7b7-16cd-4e25-8581-13f9c0c20e29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd7941da-5b43-4515-b38f-cc4103a6b43d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "930b5336-a457-43e6-8df4-3753a32c5640"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "53e23eed-adde-4dee-a9cb-d69fc4c734b8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a0484efb-fbc1-4777-a9e8-0fafbd648b29"
            }
          }
        ]
      },
      {
        "id": "ff97c09c-dd0b-44ac-ae07-96cc9bbec7ea",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "fc2082f7-bd98-491f-8308-c6eaaa207d46",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4223b13f-fad0-46c1-976d-7da01af4992e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9aba0e6c-debb-446d-b7fc-3d9f1ae32cb2",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433c6627-e519-4112-9070-1180a0068640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e9ca5b-efeb-4196-b4a9-03f6bd49293d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1e6698-4cd3-46c3-96e1-3e4cfdeb6d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe26ba9-9f8b-406b-a6ea-b332a49b43af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80e8fae-d1c0-47c4-b186-056dab11d701",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb7a33c-d22f-49d9-a5ff-b106e9151bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8713504c-892b-47bd-b3ba-f2778237e67b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c5666f-5126-49be-89b7-4021c90d5b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ee641e-4136-4133-b221-1cafd0fe075e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a980196-1894-4d7b-b73f-c1015c462146",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e6aaf1-5fd4-46cf-a9d1-99a4808c71fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043b71c6-e570-4279-ade9-85283f96753c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e831a31-2166-41cd-8145-91eb72ef9e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4af50252-bfd0-49bf-a31e-94502775a5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2c2c04-4020-4fa9-b52e-96f529f221a2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978925ba-c945-4fe1-bd32-53efc2e2d201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc8be24-2238-40b8-8cd5-3f50ad870ced"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9715c0d2-af08-446d-a5ca-124ccaf955d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "50786931-8f5b-4c4f-9b5d-cc190d9507d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d900a46b-5173-4bde-b992-8f9ac00e72c6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f0af13-0f0a-4caa-9bc3-ac69201923ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e170be7-75d9-43d7-a4b9-fbc64c5bf8a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ce5743-aa29-43bf-8d87-d02d438671a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ca9437e-a697-4d25-b98f-503e650a59b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c549d840-f13d-4a04-b368-561813cce8ac",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0e098e-81d6-46c7-84a2-5a1518cd712c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "714f9899-c780-4ca6-9a84-a8e618b92535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabc6676-1623-4ecc-b334-f4dad72fdef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8187e26-01de-44ea-b81c-c53ba8d70fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfbb5b4-ce8e-41ee-92e7-9161c9bcc6ef",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1dce82-45f7-43fc-a123-18aa12c36f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051f4511-019a-4d16-abb1-60a5d8809c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756a2376-e9e3-482a-b16b-d6aeb90c3d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad2f86e1-2f02-4c44-9a3c-f48c507a4015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299f6ede-24b6-434c-88bd-ba41e813c9d2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3863971c-c100-4a92-82d0-6bd8f2b5473b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70af08ba-87eb-4946-9361-9ebea7f7760a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42718f91-f4ef-48e1-96f7-cccd81713a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19bad439-3d9d-4bb8-ab66-7718837a2252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a455268-25da-4f92-bf95-022453b71bfd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb8796b-711a-4b53-bec9-8f221cb9eef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07af1e3e-ed6b-4f2c-816d-7863f81bdf7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ead295-911b-4442-8e3f-19a60aa9d4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60ee57c3-a4a3-4600-aaab-1460a4b1a0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10340502-48af-4717-a4c5-d23eb8400cd2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9ebf3c-ff11-44d2-a1a6-22d09c780285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16ab90bb-f972-4b35-9655-aa5e18c22bfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d94ea7-7b47-4d26-b937-dc99fe1ba859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63c3cc01-8c46-4add-88ec-dbb1b0a492dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279c7813-5310-4617-a387-bd8d290ef6b6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc61cdf-4602-42f9-be34-0dac5715bb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f113344f-f299-4655-add6-48630e5c6ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbf84dec-fec1-4659-8965-3cc1d3d04f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d91b4e65-0ae0-4b5d-b47b-bdb855495831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba92c10c-c494-461e-a40d-438cac86a6fb",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8a742e-8ee1-456b-815a-20ee8def840b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8dea8d3-1551-4902-a48d-3fae222aa127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa6c766-c87e-4415-bb5e-db13e4113303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "faf0f5f0-fec6-4819-a72e-c7914e75ef6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac5c3db-fee1-4c4d-b464-7fc99319f5b7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "740abf65-3e40-4189-8a57-051df47c63d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "829f9cc1-46ee-40df-9701-ab1ce30a1e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2975c1e3-1059-4475-8ddd-8ce9364414d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5fa29e5-293e-4fdc-93de-4d5bcfb6ddba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb72b133-b26a-44c2-9d69-451beba14427",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ee30b9-e66d-4cd8-8fd7-23decf17017c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8378ae0f-3dd3-423e-808d-55f44fbf75af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4d1674-816c-4c2b-ae6d-a0b4e6027059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2effbe-e3e1-4ec6-92e0-f8581fcffe0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb551ad3-0c86-4fbf-836d-3e71a22e4c72",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074f5c37-2345-4583-ae38-e6458da37d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f806ab64-56ca-41a7-bfe9-904303dfa4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa77f2c3-3d04-4db6-a4e6-4420cb015461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf5fb45-6e36-437a-bc28-bcb2ff8a7934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f07a1b1-df97-4f05-86e3-8fe61bc256f3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf633300-0bb4-47ae-b46c-87a864e56cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76bef10-2335-4de3-b157-865ad2d685bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f56d6f1-bb71-4a18-aa50-81033147a78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "66a04c02-71c7-45e7-ba87-c702b976ff17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9cbb934-8488-4e65-8cc5-5122997c2b0b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a904ee82-8af9-4a3c-b3a1-326b20e9d273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bcff4d2-2dd8-49db-a713-a53b3bb7661e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa720c29-7d2a-4f84-98e3-c4c66bea2f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc853e6-d669-4d8d-b2c7-bfed32fe3fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f348ae-c1dd-4d0e-8368-4d4d7747eefd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f81b154-517a-4c95-8a3e-43ca243d17c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6942635-533c-42d8-a03b-b5b310a322f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb96100-5b16-4ceb-9441-cbbc17eefd51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3447a43-ab2f-4403-a773-4d4fc42cff75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b56f14-74ea-4375-bb35-edab3a005d1e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "831b682e-f417-47f9-a1af-e16d37617418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01165e82-1184-4815-84d4-58e914ef583f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657e6bae-95f0-4441-88fd-14c3624b9a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e66f06c5-9347-4260-9468-7ab54cc4157c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0efd368-4883-493a-ba7b-3a3199296de5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df69665a-76da-4c36-98e4-b27f6f47c70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1b684d-1730-4e5b-b89c-37f27e4dd55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7406f6-6d4f-40df-aad3-5c7ebd353841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "470dd97e-41ec-4dcd-94fd-7903c7e58ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0553a6-b389-4f63-8074-99abf8547bc8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06809815-16df-4b98-8786-6a6ccf7c63c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a881310b-8813-4262-a76e-e14308048b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a698e6a5-1448-4bcf-8b80-6be4e35e51f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f26e38e-304f-42cd-98d1-5f08dd994364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10839153-1868-4835-a94f-63fd7e0aa0b6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9401f9a-bf4b-42a1-9887-140d731bf901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e268593e-a59c-404b-9b65-c6200e97814f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936cf4eb-03a2-4e74-bf01-3b12f46144be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c370a8b-f6bb-49c2-b467-dc05feeb82ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0ad008-285b-40c0-b714-e46f3168530c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca651ef-81db-45c3-80e7-d62ed9d7c759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0e8640-2d5e-4350-a4e7-6461ac6c70dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069164e9-acb3-4596-8df0-2c9728b02c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98850900-cb52-4a14-a0a0-c1ebff5828c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224420c2-4c57-41f1-a5bd-89e5b730024f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93138074-be70-421f-976d-0fad2c46671c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ff13d7f-face-4730-87c0-f5c558c00f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a646084-d6f6-4c96-955b-3a46ec9c3844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f4d003-5650-4397-81d4-875f033f415f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd11055d-733c-4cbf-80d9-ed7833abcdd9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a8cca1-b243-4442-94a5-4f87d328f60c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0df5d44-f631-4529-8494-b7f6d8da60bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981ef13c-136d-45e7-87e2-6bd7bb8965f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "697945aa-44a5-43c8-9013-06bfc3623fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d7f757-ab31-44eb-8722-f6ec94885f01",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b92f38-1707-479c-8e18-753385b38948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7988b57-0df6-4a0a-8179-a9fc73c6da53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7754fc-34e9-444e-a5ef-2c08019a83d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "393c2d17-1872-4878-8c3e-9d1dfea1fc79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774bf360-3af2-4a0f-8adf-42c90ee55cdf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbcd3ee-86d9-45f2-82a9-888b016788db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c3ed9d-74e2-4fa1-a05b-f49c3536df93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8a21f7-a9a7-451a-8089-d52982659ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40a4695e-1ad2-4d30-afd6-76dbd897d30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1461fb5b-b031-4c44-8708-e26606d3dff3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10494734-3297-4fe4-9936-cfe3f4560a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6922548b-4923-45a7-a2dd-d5be85e58c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24885b95-7e3a-4a3d-b898-f9ae667fa7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ec4bd1b-d5f2-43d0-92c0-3a70c3ff2a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb68ddd8-1b87-4b8e-86d5-6c0e9ddda238",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3781bcca-2296-4438-9edc-ee4960a0af54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb872273-f8b1-453c-af34-cb2658da4c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41671c03-783d-4b11-b2f9-c856e6df5ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12be6153-a3fb-46b4-9d57-dab28fbd66ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68022cd4-a99f-4c41-b93d-4fa73393b4ab",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059e5e1f-51b8-42eb-b96e-c9fe819269e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba0d349-6995-45d4-bc2e-b9f5573a26e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7ab87e-9849-4e5d-a30a-7af6535d6aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2143e5d-eb97-4580-81be-9f08aeb7d3e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac4d0e7-a000-43c0-a04e-0bd6fc37061a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824f50a3-7c41-4718-bcd2-24b723b4982f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c799b87-9e4b-4dae-bcdf-33cca03a8dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "752545ad-7dbf-4bd5-99e7-69f3e9fe6bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f7c4a8-7133-4f7a-acc6-00ac17ffafdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c589ab-2afb-456d-914c-d259a50d0bb5",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59ed8b0-519b-4bf3-9c08-2859d2660ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c2cf6d-42b2-4db1-bb2b-911b1b1174e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53473a5d-e9da-4fd7-8931-696829d0dc3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dfb7af3-5080-42e4-86ca-5f7f60208b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0959d2f8-60d8-4884-b35f-ade57be64d5b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e4999f-badb-4843-9c39-12d5b24f9c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dff2a0c-6bdf-40ad-bd04-691c28470ee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480e311c-db5f-45a8-afd5-69930294bed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "167dc8bf-b955-4000-8ee5-bcfc136cb739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587760ea-16f9-4a99-bff6-abd6ccf6912a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5333fb89-a0ac-4b64-87b7-c2d56afe1a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a453b2fc-1f02-4b09-8c76-d616c9e19cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974375d9-3111-47bd-84b3-8967b28de0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc77bd12-8659-40e4-ad89-c9f7ae30f18f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57614d57-2c5d-4e56-8374-c3c75a64c746",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b75786-1048-4e2b-af67-c8766db80f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226bf52f-96b3-4041-afb6-2829fb79e026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6e11cd-7bef-4cbf-8b84-4f148d15f59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "451d97d2-6192-4987-9e3e-babf3da34d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af8b085-3aed-47e0-93d1-df015d19040d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17389205-0eaf-42a4-bd28-8b47937096d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8bec87-bfd1-411f-bea2-84695639d243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa98c710-9957-4e76-a252-48299853b8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72363351-918a-488d-8089-d7bff8d65a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029154a5-00d7-4c43-a0e9-d4647ef394d0",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c082d22-c05c-4d95-8bf0-b9fb02ac97d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53f23ab-d20d-4796-9fcf-eb394492daac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db659a8b-a575-4205-8858-ef9c44125960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "031f2224-ddb7-4d9a-b099-440b9edd9835"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f891e810-15c9-4813-a3fc-6f35713c860a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "622eabb6-abf4-4504-90ea-7686e7e0cddc",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a417d34-0d25-4772-ad0a-52f89e6f48e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "888b2fce-f662-4085-9a09-0a2a7c5ac719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f703f8a3-899a-40e9-8a19-66df90b7f8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eaa6e1f8-740b-427f-8656-a6a829ea1c6a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4aa61815-282f-41d0-9fd8-b442fa2ffc1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee683a3d-ce0a-47af-81ea-532f97bf1028"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ef55964-099e-48c6-8c18-4be2b8abb8a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb5e4e7f-f595-44c5-939f-7ca17fbb67cb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5b9f960-a913-4175-9c2b-4c40c23efe76",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7367e644-d45c-4484-b375-410903bd973c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0b0781c-b7ae-4531-855d-b8e0ccbcee9e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "973287a7-5a98-40c7-b7e7-942b64610735"
            }
          }
        ]
      },
      {
        "id": "5bfe4db9-3447-4408-ae25-3656555123ec",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "009fd019-516d-44b0-90c4-23e5e588271b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8fd3392a-7f97-4906-a82c-a39e677e5186",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bdc416d2-f487-4d0d-b9da-1e47d6d3d0ce",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcf10c2-0f7b-424a-8508-f9caa94ab034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af47c71a-1d25-450e-b279-aa47ce6556a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5193a8e9-d690-4d84-bdf8-6afc3fbe7f4b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78af6760-ddf3-47cd-9388-aa8b251f2443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "015029dd-8b82-4f36-8faf-5d33295c455b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6430ac-9146-4162-920d-9577646904a2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f375c1a7-c35b-47af-960e-11b42dfada31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1657972f-cf14-4592-bd95-19ac574a5a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ae37d7-c017-4fd7-8f6a-dda02ea6e728",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac6fb56-38e8-4454-a804-e811f5fd08d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39813496-2d12-41b5-82f8-7001d9456f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d623a9fc-b2f0-4358-b2e0-73d947f02e83",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077ce00f-932a-4495-8614-22cc08ae4930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3617f76-69da-497a-a0b9-46212aa55e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deecaa03-c4d1-4a4f-b686-af3892045463",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a0668f-b63d-4ee2-855a-a5cb5bc8f46f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8f95744-cd8c-4148-acbe-c4a7c13f433d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be60be1-6e2e-4cd7-9c2d-62710b580e6f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5649bd4-47a0-4a87-8dac-ac95503f640c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "103505be-12a4-4d31-ba8e-25a358da7220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "702e310f-25ef-4a4c-86b1-504ce643a092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f5c882-4410-4a84-abb8-e825ca14023c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08015bd1-56cd-4545-b558-f15b02f6850d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046c0394-0e72-4be7-a984-a6f401db7338",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbbcfae6-dbed-4a1f-8982-107a673c267c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee24c7c8-ae72-4188-9bc3-9dfa16fad454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af28a262-f019-4102-bf2b-d916eb2c6574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a83cf2-2139-48e5-961b-ee92c7d44a53",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e354b7-4c28-49da-bf36-dd693f10088e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aad3d91-4dd3-4940-b079-488d26073d87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d871557-bec2-4338-802f-af56bdcca01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f89c692-b276-41c1-912f-87d4ea79d00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d973d665-095c-47aa-85d3-a8c49cb42ad5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919ca763-7804-469a-81c7-6fc03e30540e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f07e18a-393f-4318-9677-684ee32c0775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76095a9b-83db-4034-903a-cd10d12dbcc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db414717-2237-40cc-ad44-24ba70a073e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85792ade-98b6-482c-8c12-1afa332e1a7d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ebd056-e666-4888-9ed7-62c580db6fdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc5526ea-227e-4db8-a78a-c0e78a915776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "408c46e6-de4d-49cc-bc50-3471fbb6c75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3367c782-64c9-4a63-93e8-74aaa444a3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06d61d9-9dc6-4894-80be-90916bb769c8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8662c77b-e3ac-45f6-8346-d8672bfc8ded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22acd6d5-352e-483b-aaa9-b3948e308eea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9ff0a0-d185-4488-8496-f63383c32881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb45581-8f67-482d-abaf-dc92ac32e368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847eb47d-1487-4e69-b342-9d7e613e8692",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3ff941-8c04-424d-8feb-7a3c906ce1a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0b4c16a-7a73-4a62-a304-2a67cae61654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a058f80a-e12e-4458-86a2-f3d1db2bce76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a40560b2-d5af-473d-a7b9-3fb85df756fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840e9a3f-a75c-439a-8074-eaaefc05afd7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2753ff57-9e1e-4ce3-99c4-1a4a7642c541",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4a5e353-e5e6-47cb-b5ae-2557241cafd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0ee9e9-d504-4b30-96b6-e91c649df474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994d1756-2609-4f15-9d7e-91385dd9c33a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5b5f6a-6cfe-4acd-b3c5-2f5afc8f4c36",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3f3071-0628-472b-82c7-caa45d4d0ae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13e939df-b81a-4a38-af46-494c0f581801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e098e2-5306-43ff-b7bf-9d2e358b4a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd9491c2-5a48-4d9c-9eb1-8087413bc41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c711d8f7-de40-48a2-8f32-69b8784b75c8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da08a7b7-602c-40a4-80f7-58398cd38b34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "194a85b5-56f0-473b-9e19-1cc5782e4915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65de4b05-ed69-457d-9c65-586ad2af61c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2609e31a-2799-40dc-ae2e-ef7e15ea4a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d7d7a4-f636-4c72-a36f-7c135b654c81",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569346f9-fcb0-4b25-904f-855fb1680fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e707d8-40ff-47fd-b6e4-b5b932f31880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1589c4-db02-4944-a818-2fe4d5b83d6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08bcfb9e-ee61-4b81-af0e-7c6d8677ef1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715cbefe-4d64-452f-9069-b356765e8f88",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf6f3f4-e6ea-4b02-8a68-5a268be7cad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7d7d34-5f46-4500-a1f2-996239ab24f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a31a1c6-df48-4ef1-b420-b4d8c3991f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d140a495-97b7-42eb-b0c1-070f448aab44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03379a14-bcf9-4b10-935c-6377978e55d3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54852941-e5c7-4946-a60d-44d42f4a12d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b574b816-f9ba-4ab5-9b6b-75e176702262"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af88cd5f-047d-4c63-afe8-7d25db51b84e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78f14295-7aff-483f-9742-e5a686b6d417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb7ae7d-691d-4518-9783-e63fc0d0f19f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a609ca9-b883-4e49-bb99-669ec68396b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f03b8f8f-fc73-41e3-8eae-d0aed936d96c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c881c2e3-b3fb-4236-be3a-4bf980b33097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98b14a4-1daf-4e70-8f55-2d89a5323db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39aeb6de-5b80-4960-85a5-4e16159fb8a1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721a0828-22fc-4a74-b507-ab1849547f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9299eaac-ce14-4a9b-973b-4b1f945a3556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aede0a12-d7e2-4ba1-9934-819efe61169d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b18fb5e8-3136-4517-a4da-dc94cdc91a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0090713-c52f-4ed5-bb64-e02d78c8b5f0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc493322-d6ab-4e02-b43d-442b54e28eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b617948a-82cd-42b9-b21f-94cb486ff1ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a6393a-1f6a-4fb9-8b5a-33be466f75d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb91c0d1-87c4-466a-8242-a464e46c6c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f195d4e5-8738-43ea-953a-abbad01a9e5e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58205dc-207d-4bf8-bb73-e18eb890d4bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fed8fec7-6c2d-40ce-8cfe-5157feb54ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4db50f5-17ab-4323-9232-7b052b779a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7beb2e68-7eb1-4917-a2aa-88978373b860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a456d5f-581c-4987-941a-8666fcb809e4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3aae36-9353-4220-b4e5-867b8b1af994",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87c1f23c-27c7-4e88-825e-76f0cc29d9f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c102ee56-f435-4c69-a5de-e24b570afe66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b865219b-4a46-4193-87ef-2c5ac6995578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68aaef7-ba3e-4fb9-843e-2b2da2150a58",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5272f13c-a7e3-44f8-8ad1-1511ce8b221f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6e21557-060c-4ca8-9150-160fac4764c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ee5091-b949-41ab-877c-79ab3747689e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd54433-747e-4081-b1d4-82ab893f458d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6139f9e-9092-4265-9393-fc371d848b71",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb6e498-2f67-4cee-b7f6-9d6499eb5aea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7abdf2b6-bee0-4be4-b8f0-042df47603f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e229bd3-1554-4af0-b0bd-1d03260107fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e2acdd3-cdd2-4f27-9bce-c29a8a24a502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736583aa-9439-4c7e-af1c-805ed11d6e01",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d749d05-d33e-4793-9329-c41aad0090a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6075f4e2-783a-4d1c-816f-3f5cc5d3bd39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93c16b1-3a1b-4d73-8e9a-e3e42b17426d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6fa3ddd-8020-4eb7-bec9-f6b646abfbca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a382952-4d84-4c13-ba2d-b4af1c040367",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b17222-1825-4bc7-902b-4a0343ef15a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "052b2a45-0c21-42ce-9285-d7cc9a8c6a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b341ce-baf9-4926-a5c1-00e9c573bfb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72cc0b8a-adf7-4cd2-96a4-46f2c45eba6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a72bdd-8dd2-4d58-a36c-ff6c970693c9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad3c458-ba87-4043-b77b-da8285fd66f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66983185-2dce-47ae-8c39-aaea3ff3822d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ca1c1d-8745-47d6-a7cb-1de8d807ae80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eedc73c-08d7-4816-9d60-abed6553e58c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237d64d3-3da8-4c3d-8bc5-8aa1e8c845d5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5fdb56-94c7-4ff4-9d35-83ecc0f7f2de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "047c09c2-05ee-47b0-bb88-e7c83716a58b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c142655-6d63-4bc2-80b4-4c84447ac246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06eb9d0e-b447-4207-aff2-639cb549aa3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383dd162-a861-4581-b5f4-0fad16458a3f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b597c284-c7d8-4150-8d4d-4ecc9594434e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbd276f5-3a2a-4855-ab25-8ced984193e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd87d9e-10c4-4ca3-850c-ba45c166f3b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9f6f10-b072-47fc-89b0-632f6203c59a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a547db1d-895d-4753-86a3-101e5310bb5f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d718814-ef54-468f-8063-58b03c8dfe61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "978b2ecb-8577-4bd8-903a-3576b442c4a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc727cc-b802-41c2-847d-b2a3686a4546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54e2ee0d-d851-4814-8a67-5380e88f0e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0709ce-40ff-4455-99d0-3d5f842bb3b2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0f3209-c576-4817-9673-6e964b46a1ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22116615-2c4b-46a3-abde-91913a25ce38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48b8f03-3ccf-45b8-984f-55db319712c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18061ec3-5a12-4057-9ff3-4df01c7813de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6762069-04d2-4e05-a6a6-2d986aa6b8ee",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808979aa-408e-440e-b317-a430596ae61f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a30fa9f4-3f27-44e0-a109-ad6d34080b52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f2705f-c431-4804-8544-8455460081ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf577da4-4054-4ce7-92bf-dd84512b150a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ed308c-d05f-4d11-b668-72afd5b7c79a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82dfedb-b364-424c-b681-2a3047e312ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8d01a33-0135-46e2-a4c8-c238dc6fffa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b49b684-9640-4dce-bf2c-aa50535b1366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17a6300d-fbd7-4d38-8bc6-953a8a75d73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde26ec4-ac0c-4ac7-8e63-4b56c353d5db",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9eda7f-a180-4d5d-968e-3568bfbb2bd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "595e7397-c4b9-4278-befc-6da392e3b7dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "282fe20a-90e9-4f61-a005-e9450365cf41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a2b6b15-8fd2-4148-9efa-5cd9c96189f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511f2449-65cc-4b87-a12c-46d338a8829b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d050a91c-2620-4b5b-b132-80d7c210b400",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c1f0048-4540-4ca5-90ac-1c6453ed9c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4a13d2-1df1-48d8-8e45-dd700e336486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84402803-affb-42eb-b737-3812b208b326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9009e9-3b9a-4611-a044-70cea0c985ea",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac2799c-8498-4ca4-be23-7644593f5b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c6605d-13e0-4180-9d10-429b16330dfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9b96a0-a839-40b4-81e5-a69f2a7f6946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31416478-cc92-4851-a044-40f9b1139be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee090b49-901d-4b65-b269-9b1db45526ac",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d575269c-2321-404c-92f4-8ee88fcfd768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f506cb4c-247c-46a8-9251-1032d034b011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db09bf6-433b-4872-9ac0-5d9651ec31d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6667585-7685-47c0-b62f-fced22ee4d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0438c48e-f09a-48cc-b65c-719ab0c0cfc2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce500469-b6d5-4d08-8f9a-710cdbece272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e7a1b6-a8b2-4be5-9835-ddadf9455daf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29839732-8fe4-481e-b335-8d80102c5ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4370398b-cd6e-49a4-b9bf-d7427a89c216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fedd72-7d49-4d67-a330-8ea58d6243e0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340a7d24-f7c1-46c8-8fa3-f9c395aa9f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc382e17-2cc7-4211-9d86-183f2da30fed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ef7f0b-560e-4c4c-8114-e701e8131460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "498b3430-0420-4614-a6c0-8015c2edcb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bea475a-9022-4b6b-b2ee-1e0a5abe55c5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976f0af0-cba4-4764-9806-5c1e29f47ebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb50017a-a6c0-48ad-a796-1b0e306cbda7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a80eee-bebe-416f-8027-9fa342f1a3bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b04d2b-480f-4f31-b697-70134787da46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd2e683-d803-44c2-9829-301d9e4c88e5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37bb3f1a-3fd1-490c-a57c-1911f9c0894d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8ac34c-788d-4b1a-a135-4adf2e0b0e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2848292-943d-4677-989b-ae3342a810ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1502bee-0213-4650-ac86-ae3cfa6ac7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7fb4fb0-a390-41c4-96ae-9120d8f10fc2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15656517-bce1-40d6-89e0-a57283dff900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52411dcb-42db-4152-8d38-cc85e73669ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5faff21d-b87c-4bd6-a47a-928968779243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5d53002-6b9f-429d-b89f-9163c56e0c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d645f6-4071-4ebc-b363-88f37e39004c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb37b1bf-fdc1-40aa-9dcd-56bdedce60c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d2fa8b5-f2d9-44c9-884c-35553af6ead4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff81e2ca-d62a-4af1-b3c9-3eddda23840d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebff788-42b4-4fea-8741-a6c864299a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c21252a-5373-4474-acbc-2bd313d25cb7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40030a61-d5b5-40aa-a532-6dd87ee9bfbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f0c963-2d49-42af-a3f8-b6caab97674d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b782de5b-3ae9-4c5e-8237-22d77153d3c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f710db2-74ff-402a-a321-a673c4549623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5108d137-b8e0-4693-99fe-91110986f6db",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6804f4-f5e8-49c7-868b-71203da4b1a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c941df5f-4eaa-4a24-8fbd-b8616df8dbc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2409e6-312e-4861-9119-4c715d53a9fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b649b7-9528-480d-997a-a0716861e083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4eb398e-e88d-44eb-b5de-041249862da2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7fe11e-00c7-4d2f-b9e0-bb51ad861c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7efb0035-09fd-4cdb-93fc-03257ceca629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd72833-ffb3-40e0-b5de-3afd1dbfd467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1edbb210-2a33-4c7a-9e78-02b6096f7757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ef331c-9250-44c1-9e32-52388f82cb10",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46023ce3-98bf-4433-872b-e75c61b08dc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd31a1f3-ce36-4a28-ad6b-8c164a705d4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6fab16-e6a7-440d-a73c-0e6d507f6cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d657f997-e20a-4ccb-be10-3b065c547186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae351997-c716-41d0-9efd-7236151467e1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e87727-e9a8-43e8-8260-0ae406dbdbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a61be3-b583-4d90-9ca9-cdb4921386b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24951587-825e-4fd3-9d71-d1ca33659257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19d273f-d153-4198-a582-8cee46b2750b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5608fa77-c1d4-441c-a7ea-e67464e33e58",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122e71c3-ecb3-4b7f-92c4-b5f78ac7d6bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a909ce2-1179-430a-91b8-9f9b822d4c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7dc61b-b8e8-4fc5-9964-047e203d921a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edcb93db-3e8f-45cc-a049-590659c58b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f72630-df2a-43bc-ba69-5a5b13dd57b8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fab9bbb-b276-44eb-9ec1-15c3c0ee1228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d47a15-1d4e-4eab-a00b-7bf60aae60cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a581230d-02c0-413b-b101-c38cbc00cb6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c2af0d-eda4-45d3-a3b7-c8f434ae746e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba281eb1-7889-4a98-a445-ffd657d0e688",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c7fd29-d0f5-44d5-acf7-f1aa129be626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d670d8-7bd5-45b2-83cd-3157a4627ef3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0c4e70-3816-4e30-8e59-420365eabdfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ab8aad-915c-4a56-833b-7d0f67f74092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2edba1d-a902-4b9b-be2a-ccc4c0d726c0",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158e3733-725a-4355-823c-4502b9412aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d911cc0b-3007-48bb-9432-f201ea9cb835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f75da6b-df71-44ff-ad92-a829fcded1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "318ded1c-143d-422e-aa29-df81e03d790b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697da9f5-a13c-43e7-ada6-99c3b47a8312",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "127a2886-8ff5-46ef-8162-e0ff61fc6be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029570d0-b433-4539-ac6b-35597f2bef39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7361efc0-8ec5-460c-9b4c-48573426433f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd14ff6-fa5f-45c0-966b-1eb84215f96a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c978ec2-49ea-47ab-a1c2-d3ed6ef04989",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7acb21b3-6fa9-4442-b93d-eb0a287f3b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c787723-5988-4000-b6ec-e81327024b91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c901dab9-763d-45c6-9416-7d8ef7f85be8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158b3e5d-7eb5-435e-9d7e-accc5ac8bb42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffba01f-e47e-4db8-b7fb-c10a4772491a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce8e9a2-a7e6-4e03-82a0-e74c72770dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d549609-e802-4f3c-8a1b-a2b5a9399b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf0fd6b-cee1-4376-8892-a8066c5bd2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b88a197-8228-4df5-8bd9-33f54292f514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12eacea7-0a1f-4634-9389-5421ddbbf3d2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fa5bca-4d3e-4dd9-88a7-06e618c305ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9743dd47-3f46-438b-b625-981b7cd2de21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8142f10-b9eb-416d-bbc4-5f2b61599777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a54a3c11-da52-4f24-b097-39ea86ba4190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb12d81b-bbb2-444f-a9db-625677dcef51",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a6577c-6ba0-4ca1-b102-9d4afc2cd067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17180def-23d4-49db-aa28-edeb1279bd35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "725e57bc-7961-4ba1-ab0b-bed0d029962e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d44ea6-66b8-4985-a804-56033ca17469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc76312-4fd6-4e5d-844a-d5f636be98e0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c10e217-3600-413a-9d4c-81562f8a06bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e314b133-b00c-498b-9cf7-9a591c2fdd5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc7e96d-9440-4001-8661-529977a74e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55e7c81-eda1-4188-b7e2-b351a523e71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7baea6d-c9bb-4f58-a2a6-0defd86aad8d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948bf3ce-19e3-4c0f-a8c3-b86815b86cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff62a68-0636-4ec2-8fd3-6ab67800e1ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e81d909-c381-4c8e-81cb-dc5a16ec3e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ea0491-e922-45bc-878d-d249ed0514dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564e0fe8-1fa8-461e-924f-723eb44f7e89",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296ce18d-2d70-49a5-88a0-fa8caa0a2c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22197fe6-e623-41f1-aaba-10626f6ecf9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f8c8e2-04c7-4a49-8b2f-424fe47ee70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf586a1-0bea-4a67-bd58-e8bce0df7159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b334f3f1-16d3-4bcb-9348-795e3ad022ec",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18963b5-d4f4-445f-9aeb-e8ef089dc5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca98acf0-f8b6-4d38-a530-949fb4dd0639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "970d5813-ba39-4201-acab-e853d48ffc3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7534abc-cd7b-4ab3-9fd6-e06f8c631540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d17154-0719-4799-b3d1-32a078df9843",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4dad9e0-87bd-441b-bd85-b08065dc633b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85307a49-d451-4b50-b2ab-a409adefef3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9200fb71-1e99-4739-a236-290ee2fe32f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198cb684-88db-4c0b-97b2-c2afab611f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5017f87b-712d-42ef-8dd5-6218cc1650ff",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b95331d-b611-4525-acd8-ebd35a6d88a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2d7b970-dab4-46ca-807c-aa9d56c74e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3337750b-c18a-4ce5-87a5-dcb4f8e5d7f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bddcdd67-90a6-4622-b139-7ef39f954a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f943aee-8f5c-4091-b7f7-74d16e495ca1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc1b526-1317-4335-8768-b3c9fe380cab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b944179-9eee-47b0-8168-7876b854438b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c0ed27-24e1-458b-93ba-a2bcfdcb943f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a10f50b-e3e6-4f12-bb31-87c0c82c2874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ffb832-da2f-44fb-96bb-cdda912df24a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9186c0-f521-4e2d-9a83-6d0c6353fe24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "775fbcfb-2129-4949-a9a7-768c244c05fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2ecabb-507c-4f14-83a1-258f14b55b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a0fc09d-87aa-4f1c-9223-21ed9495e049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715cd178-20e6-47a1-b168-c70a6416442a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636bc539-f3c4-4f10-92ec-0901996769ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c99d8e8d-0987-4660-88ee-dc107350eb88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbca5797-5601-497c-83d2-88d6708d0a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af18b8c-8636-4a7a-9444-cef496b8e43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a9e7f1-eee6-4644-a1e5-3ff128601a4c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41227b2a-7a86-44d5-9243-19fcb6e59243",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09974740-31cd-44af-987b-fe23b2fafa05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb26479-35db-43c8-af1d-d0fd561a9e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab06f04a-b473-4810-a940-b6af6454baf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45456f70-89f0-4ad1-bf27-0dcd8b976f34",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be303a1c-775a-4056-a30c-7f2784e1137f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f1a583e-c504-4a9a-8ac9-b30d05754d2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd47b8bc-5904-404b-ae19-2f18537338f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f60f0ba-725e-47fd-9c11-4acabab560f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f02bf6-6ca4-47c9-b114-6739015a5765",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8268a1f4-cc70-4c7c-94f4-7e524ab13b5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b69606a-a308-4d6c-9554-2819f1a1e27c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a9a2a1-258e-4050-abff-a8c35ec83e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf474b62-a194-4a79-af57-0b366afe5475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb22139-eced-4f67-9ab5-0e5a90582611",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91600661-778c-46a7-a1f5-9ba253b501e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c2bc5bd-90ed-45df-9333-d004de1e4ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be90746-8332-4263-aa33-06d64341aa9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954786d4-08a9-49f5-b957-eb09370eecf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a90f2f-eb48-454c-b248-ffef00c4554e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167f662d-7abd-467d-8dc3-9f3a1d801451",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51a74904-f0a1-47f0-8cbd-518b1c40238d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a745b39f-4120-4c48-b20c-9623f7ef800c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84cd98dc-4894-4fa2-9ff6-9ec788261f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca766070-58ec-4489-9426-39f4e29532de",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6506e0ea-eac9-43c6-8ba4-b692e7ca93d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe9e2013-4668-4073-9053-00e1692a9a1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e85de9f-5e73-4245-acb1-b35ed1cb073b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f85e2b-f167-4a26-b5fa-b8dd7ee684fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b04b84-c8aa-47f7-bccc-a3a0aed1625a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22a4619-6d57-4cec-9600-1b5d20689458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f6e190f-4a61-49d6-849e-f18729766e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b4cb25-00c6-4e71-9852-26e95b954e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535244ae-e3a3-401a-bb6f-ed264323d56d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb7f670-9c3f-4485-97e9-58f6f29443d8",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405619a3-fece-40a5-a3b2-41706446b9cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "199f6d3c-22fa-4fed-80e7-c420675943b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a39d0c-9742-4e87-a2ec-fb2747188869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8b7ae0a-21f1-4e04-9dcc-f27642553a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e60688f-46ec-4144-ae5d-3a075a49535d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f1fa9d-24d7-468f-9e88-aacb735740af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "182a8c2d-edc0-446e-bbf9-e70c61863050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d944459f-c266-4e3f-88ca-99e8968b5007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfcf10d0-1595-44ad-8b18-563e572ff81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07c036d-42b8-464f-9f28-c35b54f49619",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be39d9e4-0e4e-4225-bcf5-90943e4c202b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a6fd91f-2166-43da-a9d5-fc6300d0f891"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06155410-7649-4db5-8716-ca6ae6886af3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaf62dd6-0ee1-42d7-beca-bd207e1e4eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef19ff2-458c-466f-912a-6284853ec436",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fee91e4-c70e-4734-8667-6f951568aa41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "202baa1a-76ae-4941-82f5-3757e1c922e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bd07c7-9f78-4194-9681-320382077139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc275b43-656b-4311-ab50-fb0535a2a909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5bf492e-a3eb-4254-b4df-da22faf069b3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b74a565-b14e-4804-a107-fc71f321873f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f3c0b39-b175-4e6b-9662-5aff1a12f357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee649f4b-c632-48e9-ba4d-d9a9520f4074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bfefdd-e362-4434-b96b-868c5e68dbfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24535f06-d5f3-4180-b119-10dd0c787f1f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935e25e0-da18-4560-8b06-6fd9cc78d390",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da9b7d31-53db-4e37-ab2a-022c6ff3c013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e08d099-8455-4e0b-9392-f14e6e113894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b93debce-5e6d-472f-9175-447ab4f9956e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3fee68-1605-4890-9212-9f7976633925",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2f9c50-c640-4e98-a2d7-19060ca5da3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3c9f975-e0b9-4e05-9da0-9f8df3467809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6570674-c899-4237-a7ff-82ba9805d0bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a38b61f5-c9e6-4f65-9018-92c415fa35fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbcc10a3-be05-4b7d-91c9-2c6777e9d906",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1807f4b9-4edd-4003-975c-76081798b318",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67f3b11c-6451-4a54-8514-1e11caab93c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3468dc8c-5039-495c-98f3-af46df7b0d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f8414a9-276a-4101-ae0f-ee8f36ff1298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdadaeaa-2f28-424e-a1f2-50d88eb3a1d8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d4acfc-c40f-4e21-b159-ac8b5a99b2f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24e1a0ec-cc5b-4511-aa96-2c77b2079b8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf566c44-a17d-495e-8492-ca9fc93c870f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e40c2ec-371e-4e53-9d4f-b9030888b08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13007e97-4bf2-45f4-8ef0-b62ef96a8a3e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3363b4e6-e8db-4efb-8211-a1cc46cd859d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d6d42fe-44f9-45fe-981a-2d680588139a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "389f5691-a6a5-4076-aa25-14844c181be2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363f18f1-99b1-4935-801d-79a65646e271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d4eee6-8105-4e2f-95d5-84b25882b214",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f3e2e4-f763-4286-b222-b3e9945a55b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5d1612a-a9f0-44e3-a7ac-bbc50fa02951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e3b2bb-3b3c-4774-9d05-45c946a6ae06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224b9fdd-6f78-4aad-9aab-2a16b23cbb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914b203f-7171-407c-9b56-9528b5317fbe",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57bed6d-056a-4b3b-a6f3-8435c3de8c26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "314581fa-8dc6-44b5-9580-b61d748dd2f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39db63cf-1dc0-4e3a-b680-8b655e1456cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e09a5e-ee93-4a76-9f49-3eff5bc1518e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a28e345-d20e-4e82-9ed6-68b501ece2f5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a84ecf0-a189-4524-9789-41fe6154daf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66b79b79-8118-42f8-aa24-4e4b229e5227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefd5844-4f97-4591-b62e-a8f1f3838554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd4aa5c-0ff7-4076-b64d-dd48afc9b124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1801ec0-fa02-4c17-9748-d13e3b4aa73e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad10525a-46d2-4029-aaa4-6cac5969bfdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e4b5bb0-5f5c-48c2-84c0-bacfe61c3e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b482590-6943-4ef8-9ec0-fb1e9cebae31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e7dba4-d67f-474b-b87b-96923fc076c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375e0291-fea2-49f3-ab67-dc5af1aafcf9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60470c6e-ec02-468d-8e0b-54401ec8a80c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dca0b4c5-35ec-4642-90c5-6cffa6c22678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72269475-d67c-4da7-9cf8-ec690bdfa9f8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad565ad1-9965-462c-9024-432d32f02838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12675c1f-fc3d-4c62-87a5-01e62105047f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008fe071-2e84-44e4-bb2b-74a065bd1aeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "724e398e-7528-40c0-893a-03430e7e32cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e933673-ba25-4f2d-9ad6-863c20051a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad9da02-41c8-437e-96a5-105b91182cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442a8e1c-a4ab-44c2-ba08-42e331a2a4dd",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3346a105-3829-419a-a7f1-357e52b91a6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a22ccbdf-4a3c-41c0-9ca1-cc868f80a168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f3944a-2a9c-4707-9364-82963278edc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa91f84b-05d0-4730-8f91-a4e552799791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08157689-7b9f-45ab-aaec-cc3d20a54d7b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081100e0-387b-465e-a50b-53c38b0f62d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d1e524b-ff18-4a0d-83c6-284f4e21fd66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3989723-b290-4cef-a296-23ea524631d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7626c96b-6f4d-451c-9f72-00d176442126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a7a308-578b-4847-9f96-ffe4a3e11332",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47191f2b-d5ce-4dd7-bb10-6100e768efbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02af7630-89cc-414e-8f92-c0a1f557b1f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbbaadc-2887-4be0-8ab8-3f79e5da2c7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee801c9-dfdb-4498-b437-29f1fbb26d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa97b5d-0fa7-42b1-9b2a-d9796f542e5a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79c84a3-cc46-46b7-81d3-31c5d9f11fb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5803d637-4b4f-4b2d-b314-574bb59be0c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edc4ce9-7c23-416c-80d1-e2c22d223ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce2c3c3-59a4-420b-a049-f3ec3c267ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a6ad6f-ccf9-4153-8e85-d782ac2284b5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cfc2055-ba77-4d38-a03b-262b2b2f8bde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60300465-d2e0-44ea-96c7-03b07e3b20d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e851fe9d-efa1-40a2-b55e-2631eef8c053",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94db6a81-30ac-44e5-a69d-01c1c9864a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb4db8a-80d3-4ea8-92d1-eed1aee0feb8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f030f3-b655-4975-a591-7c4a2458de3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a07d85b1-aa82-4258-8f31-232fecb19333"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57c918b-0a14-457a-9beb-2fecdb3a7117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0aea127-8552-4d46-a72c-3f45e37e2a9b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0c63c80-8c5e-4184-8f90-3b163e7a9887",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c14a6438-c01e-45b0-809f-5cfac8a479c0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b78d5a49-6247-42f1-94b8-65de01f3468f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d4f7427-e843-4ec3-bb1f-c76914c768dd"
                    }
                  }
                ]
              },
              {
                "id": "d161b96f-83ab-4b92-a1b0-6b2ac99717d5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c6353663-c274-480a-824f-2bccd9ccb004",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb71ec5-2235-497c-a4c0-6f29bdb88fad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "457063a6-d7ad-4c43-b557-cc3d638e5a9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3683964-642a-40cb-933b-9b36a4bf03f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adbdc12a-df81-435f-a276-c334c9e6886f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bedf455-2991-48ed-960c-2bbdee330fe6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c99aa994-7a62-42a6-a969-4aa5738620af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "01322730-f44c-470c-8424-9edc710aec5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cdc604ac-92bd-4f8f-9975-1fedd5c53fac"
                    }
                  }
                ]
              },
              {
                "id": "5f32755c-c966-41ec-9c39-61f6cf08ce7b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "13e9eda8-3f76-4ad6-b273-ce38499356bf",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "081e4664-d90d-4d69-8bb9-e88ba656c51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4b31ff2b-ec19-4759-82ff-d720c911d433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09837e5a-2d29-4ea7-a163-3f4ec4dfdd3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6af0d0e-d2f5-449d-b3f1-8989eb6642b3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b5bb91df-7dab-46e4-b9aa-79cd569507eb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "031c7cd8-89c3-435b-8c40-5548f1cdd9df",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38efdbf2-21ba-463d-8a3c-c762b0c24dd3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0e1f8242-8637-4e25-a3c9-72a9fcb00cd4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c04898ff-603f-4bdb-9292-9a275f68f472",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e959664d-f837-49f2-87ea-b262c0370dd3"
                    }
                  }
                ]
              },
              {
                "id": "581a37f8-6c7a-4f54-a0b9-5a87409a0b5f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bae02309-641f-4bc5-bb06-f26f87e451eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a2f1743f-4fef-4cbf-acd7-eef47b1bfe51"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "feaa7cea-cf9d-44ba-9339-67463315b6ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "966eb335-bb54-44b4-a315-6241938fbc16"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cdbaf4c6-aca0-4336-a5c4-5f07c1be64fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "18daacd6-92ca-4753-8026-e6a82ffdd536"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0b62b871-58e3-4cce-975d-0e3026c7d06b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "272b9b78-dc41-4f3c-b38a-0dd76f7ad18b"
            }
          }
        ]
      },
      {
        "id": "e9d39b82-e080-4251-baa4-63b9b738b220",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7a7c0b23-bb15-40b2-ab54-af7371982ff9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "35c0ea08-1aa2-46fe-999d-3b263878b524",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4df09886-907a-42f7-a17b-6a3d77a3676c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64293587-73f8-4dc0-9610-0f1f774f4a5e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6e927fc1-0bf1-4385-b5c3-727795e79db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25c0e75-59de-41d4-be89-6608db9365b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2a7b677-d9c3-43d0-968a-261d83b3978b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "172a1478-b0e2-4e65-a64d-9d31ca1f44da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ec9a15d-a7b2-4cbd-9722-6284efef8e3b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a6f9ab7-ada0-484c-b0b2-f71242ea7ebf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45181201-a5dd-4e44-b215-2dbed4c1317d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9279a96-a27f-4c82-91ab-4fd694c59c6b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7d527ad4-d533-4e82-8600-764dbe73385e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7ab12fb-893a-4ffd-a968-a73b463520ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26abe3f4-7a63-4e9f-beb0-3d26bb5843ed"
            }
          }
        ]
      },
      {
        "id": "752041f1-104e-414f-b9cf-e0219edb75f1",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "adc7d6fe-a9b6-44a9-844e-823bce363cb5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8a4f44c6-ddad-493f-a35c-edbe8cb665bc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0fc1ee08-fb78-4eef-90d0-10c48413123f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fac393-82f7-4207-b945-72521b4e82b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ba28a21-485e-49b0-a874-8c46a973dccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54e919ae-0f2a-47fc-acb0-f71b7a3137ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a4042c4-9e51-4d2f-a87a-cbd463c1712c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df79e467-a60a-4cfd-8c71-d4f9747094ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9e5b49a-63a9-4aa3-871b-d67fea976256"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8ea59fc-7c2a-431c-a7de-ae367b0aebad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd1fef2a-b42c-4a27-ac5a-88db969dc6cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1154313-8838-404a-9533-26afddc4c7ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aaa602ba-bb63-4ff1-adce-55516475397a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "723b235f-f932-4cf4-8e26-c520992cbff8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e367f99-50a9-4197-8baa-60d20e59a2ae"
            }
          }
        ]
      },
      {
        "id": "e2a04ced-3c86-4a08-badb-bd7bed1fd8a3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "aade0591-7555-4698-895f-75f4c6cd9ea8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c45da8e2-c518-4a22-a1ef-a198920aed0a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c6d967fc-ae50-4c34-899f-6272a82595a7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f377ac67-0025-4804-b19a-e84083005424",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f4c346e-5f7b-4695-a775-b85699f7b6e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c25489-e8cb-4de2-801b-9e5d0d82c050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4225b96f-c66f-4889-b3e7-34eebdc7eb02"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed2b0b17-1c1c-4e25-8d8e-8e3693138093",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b746e823-78b5-4e43-a917-721bd72fe164"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3e9b43b-b55a-4ada-9a9e-42414d603932",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cac468f6-14b1-4f7c-93cf-46c305c5a7ea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "398be1c6-79a7-4834-bfdd-e099d74eab6e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "270eb4c9-1e65-4d90-ac3b-3c6094d5d6c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f3e15dc-8175-4ae4-bd46-de16ce32275d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1cf7f18a-4c07-47fc-9e4f-69e9fd6c5d13"
            }
          }
        ]
      },
      {
        "id": "a43c03c9-cb82-4b1d-b57c-42ca74dd7a83",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "609659e4-ed8c-45d6-a04e-4c74c1345c13",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a97848f-71cf-4cdb-9471-d92579942082",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6626a83a-d308-468c-8f9b-f189a9d224cd",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "317bb2eb-5de3-4d4a-a52c-5d566ae3f8e7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c34d41b8-8dcd-47b5-9209-c259afc2af95",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 64
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 163.9049295774648,
      "responseMin": 8,
      "responseMax": 2181,
      "responseSd": 257.74831069444497,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1691800238431,
      "completed": 1691800299689
    },
    "executions": [
      {
        "id": "c19a2e3d-a022-499b-b456-b7e987b87b0c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "56c1eeef-8a59-422a-ac39-ace5358a9b16",
          "httpRequestId": "cb5b87d8-de6a-47ba-9bbf-e93c062f3747"
        },
        "item": {
          "id": "c19a2e3d-a022-499b-b456-b7e987b87b0c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "30c9154a-63db-451f-b93a-69791e038b4d",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "032cb2ed-3ad1-418d-9aa5-292d0f494826",
        "cursor": {
          "ref": "55784d79-5647-4c94-ab1d-698083f7a2cd",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ac60aa4e-100f-48e8-bf4e-edd122b76716"
        },
        "item": {
          "id": "032cb2ed-3ad1-418d-9aa5-292d0f494826",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2f0242e2-5fd5-480b-b3f0-97b292612782",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "15e18326-58bf-4901-8209-7c7eb6c6462c",
        "cursor": {
          "ref": "5ef2a9fd-5f89-4cec-91d8-4e64483e7a0a",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6dadeee3-b689-4459-821f-5e3b2b96c0ca"
        },
        "item": {
          "id": "15e18326-58bf-4901-8209-7c7eb6c6462c",
          "name": "did_json"
        },
        "response": {
          "id": "24158f52-7263-426b-a454-e4bfb789258a",
          "status": "OK",
          "code": 200,
          "responseTime": 408,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0174359-67d0-4c06-b8b1-d5d64dc6ca89",
        "cursor": {
          "ref": "ee747315-ecc3-4653-aacd-1ec6de024380",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aa339d86-1214-48ff-bbb3-78932b00229b"
        },
        "item": {
          "id": "b0174359-67d0-4c06-b8b1-d5d64dc6ca89",
          "name": "did:invalid"
        },
        "response": {
          "id": "7af7faa0-b5fc-4054-a807-e713d7869df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0174359-67d0-4c06-b8b1-d5d64dc6ca89",
        "cursor": {
          "ref": "ee747315-ecc3-4653-aacd-1ec6de024380",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aa339d86-1214-48ff-bbb3-78932b00229b"
        },
        "item": {
          "id": "b0174359-67d0-4c06-b8b1-d5d64dc6ca89",
          "name": "did:invalid"
        },
        "response": {
          "id": "7af7faa0-b5fc-4054-a807-e713d7869df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee214998-a612-4710-9583-8f9a44bd883b",
        "cursor": {
          "ref": "4ad9aa9c-92d1-4667-9c3a-4e7c552924c3",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e35c0f1a-b870-4b53-a833-13c1d4945916"
        },
        "item": {
          "id": "ee214998-a612-4710-9583-8f9a44bd883b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "24ed4454-10a6-430b-8af4-6059c0f96ee4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 147,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4617e0-42ec-4f6a-9b1f-bd719cf0b1a2",
        "cursor": {
          "ref": "07382633-b61c-4c44-954e-53fb8013ba14",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fd032ac4-e71f-44a9-b3be-11aea0b9e5f2"
        },
        "item": {
          "id": "1f4617e0-42ec-4f6a-9b1f-bd719cf0b1a2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8e7d1104-6e78-47c6-803e-f210bf25d172",
          "status": "Not Found",
          "code": 404,
          "responseTime": 108,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16902895-f0e6-4b74-bdd8-bf1b96c84979",
        "cursor": {
          "ref": "522fac18-7514-4113-8e6e-0bfdc99ce328",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "523b318f-8295-49b5-a480-c24b87bbcb20"
        },
        "item": {
          "id": "16902895-f0e6-4b74-bdd8-bf1b96c84979",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "69f231f7-b258-4b80-9880-bd66df9baea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b3471e-ce8f-46fe-a2ca-d9a47c7ce35d",
        "cursor": {
          "ref": "8ca50e03-2d70-4848-b34e-dad99a2baad4",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6ab1e211-c4a7-4192-814a-5213654be970"
        },
        "item": {
          "id": "b4b3471e-ce8f-46fe-a2ca-d9a47c7ce35d",
          "name": "identifiers"
        },
        "response": {
          "id": "df74102f-8dc1-431e-abac-dac5cc72d326",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c08e013-1c8c-4dd6-805d-91bdb9af6308",
        "cursor": {
          "ref": "bc4b5f10-3208-418b-8c4b-813f9e779d56",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8eb51b67-4f51-4d9e-9292-efae66ce168c"
        },
        "item": {
          "id": "7c08e013-1c8c-4dd6-805d-91bdb9af6308",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7123bb7b-74bb-4de6-ba16-f41e3e8dc84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e3dacdb-58e0-4f3f-bfe8-1224422d58c2",
        "cursor": {
          "ref": "36ec3a80-16e7-449f-a199-27515e7b87bd",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "47fb15c6-3a27-4750-bd41-4ef6587a8bf9"
        },
        "item": {
          "id": "1e3dacdb-58e0-4f3f-bfe8-1224422d58c2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6677028b-06e8-470e-90d0-eaeaea8de34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617bc933-8501-4e85-a6c4-c85f976ebb0e",
        "cursor": {
          "ref": "d5a2b90f-b11b-4b87-9f52-93477e98322e",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4bd22993-69db-4830-a60c-34e37d88fbc4"
        },
        "item": {
          "id": "617bc933-8501-4e85-a6c4-c85f976ebb0e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1c95a5fe-9bc2-4678-b7bf-335841332f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8050a159-3d11-47c3-aa58-0c15439806cf",
        "cursor": {
          "ref": "7ba7a1b1-daca-4ee2-8909-840fcf3db62d",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7bc999d9-5c6e-4104-a6c4-6529d2004232"
        },
        "item": {
          "id": "8050a159-3d11-47c3-aa58-0c15439806cf",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "38344673-9d19-47a0-95bf-fecb12f7f6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a0aec7-d9e5-4c83-88b0-24cc9409516f",
        "cursor": {
          "ref": "8d0d3096-d5d6-4420-93c8-2fce9d91de28",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5a09f09e-7fd4-46f7-b9ba-4bf00b50d8f0"
        },
        "item": {
          "id": "77a0aec7-d9e5-4c83-88b0-24cc9409516f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4de6df78-6053-444a-afac-ea56865aa0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75f6f19-6cb2-4015-9f60-4fcaa043d87a",
        "cursor": {
          "ref": "62e992e5-ae1d-47f3-ac2c-bc31871f2a97",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d987c188-7679-465d-8f62-daacae67cf57"
        },
        "item": {
          "id": "a75f6f19-6cb2-4015-9f60-4fcaa043d87a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d6dc6b02-9254-45ff-ad38-1a8734e45267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eecfb95-2e3a-44d0-92bf-ea3408228fa1",
        "cursor": {
          "ref": "d1cc5bd4-a4fe-4a13-9439-26c8435ee502",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "575ee2c0-1eec-4ffb-b7f0-fd0fdfc7ac52"
        },
        "item": {
          "id": "7eecfb95-2e3a-44d0-92bf-ea3408228fa1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "d3e7451f-ae3d-48f5-aeef-a9dde3e7aab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8cfd14-e891-430a-8bc1-367de20bcdb1",
        "cursor": {
          "ref": "1bbb3b97-79df-44e8-ab73-6c16c932703a",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "db7848fc-fda9-42e9-b665-e66ee57d079d"
        },
        "item": {
          "id": "5c8cfd14-e891-430a-8bc1-367de20bcdb1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4e0b5a4d-cd0b-4d30-8aa7-6269b791e612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a2bfc6f-4c12-4311-a909-710e1f45415a",
        "cursor": {
          "ref": "ea132852-ba01-43bd-8208-09cc50bb34f6",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7092d752-330e-4965-9dd2-9be3ac5afddf"
        },
        "item": {
          "id": "7a2bfc6f-4c12-4311-a909-710e1f45415a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "19a3ec92-8dc0-48c3-8638-a7564de98458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d8b851-ca43-464a-ab3c-47fcbf5d6583",
        "cursor": {
          "ref": "a45623b3-d887-43fd-8a68-b2f8d52347b8",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "139cc875-0a34-40af-bdea-499278d07fb1"
        },
        "item": {
          "id": "56d8b851-ca43-464a-ab3c-47fcbf5d6583",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "49578935-a2f2-4396-8812-ada2b8545c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c35959-554e-4063-9b68-579a6b270a28",
        "cursor": {
          "ref": "704c9ea9-c535-42a6-b676-46feb535b8f3",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "89024914-c71d-4403-b3ef-c7d8f82cb58e"
        },
        "item": {
          "id": "47c35959-554e-4063-9b68-579a6b270a28",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6fe0ac15-e6f0-4bd3-a69c-ec37ae2fd1b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26cc995-a7ae-42b8-8908-c884539734d2",
        "cursor": {
          "ref": "db6ec465-e66f-48e0-ac4d-401c614ce6ae",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "04e6db1d-8f22-4e10-a674-c23bb7cfd69b"
        },
        "item": {
          "id": "f26cc995-a7ae-42b8-8908-c884539734d2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0cfb41a8-9b56-4e45-a91b-d27ccc45abca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f112d2f9-99a8-46ac-844e-c1808d634c17",
        "cursor": {
          "ref": "21cdd93d-4f1c-47bb-8c4b-ee4ac89d4871",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "576fbd0d-fdb8-4afb-9d05-726615034fd4"
        },
        "item": {
          "id": "f112d2f9-99a8-46ac-844e-c1808d634c17",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e4930f7f-1132-411b-bb86-f12206a52ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94696402-af63-4d20-bf91-df45d2c5e8b3",
        "cursor": {
          "ref": "7cbcca04-eb68-483b-a03f-fbd534e3bbac",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ded32b7d-dc7d-4371-9043-855681394f85"
        },
        "item": {
          "id": "94696402-af63-4d20-bf91-df45d2c5e8b3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "345e5873-4ecf-4fff-8e47-60bf0e31513c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86255e3-487c-4843-99c6-38628dacf750",
        "cursor": {
          "ref": "d44d2965-1da1-4cb8-bef3-db83915a9523",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c4445bbc-d21a-40da-b31c-66ec6f42f512"
        },
        "item": {
          "id": "e86255e3-487c-4843-99c6-38628dacf750",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "44b82ea9-1438-4824-8ae7-fceff7894824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b0ba6b-24cd-4001-a00f-6003fe81b5df",
        "cursor": {
          "ref": "6c48eec9-6a6d-4354-9991-1821b1c69326",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bb1f1c6c-b416-4735-9199-4c2e58376a03"
        },
        "item": {
          "id": "17b0ba6b-24cd-4001-a00f-6003fe81b5df",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "783bfe30-65ae-4db0-8b56-d1a22893ca78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b842ff-8165-467f-809e-ba9241374ac7",
        "cursor": {
          "ref": "8adb0633-88a9-4a05-952a-fb84dfdf9650",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "df3bcfb9-19b7-42d5-a9e4-ea86a531ede6"
        },
        "item": {
          "id": "43b842ff-8165-467f-809e-ba9241374ac7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a9a2c6fb-cdf6-4d55-ae8c-80f9bc83b860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b225a7cb-d428-438d-aceb-1f9efd45ee65",
        "cursor": {
          "ref": "008cb44a-42d7-4d0b-bc0d-6883082cb84c",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "daa2b69d-af6d-4ead-bdc0-4a611586a191"
        },
        "item": {
          "id": "b225a7cb-d428-438d-aceb-1f9efd45ee65",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "44213241-a647-47fa-9d52-0f2f7389fdd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76bbb403-d8cf-4517-9a6f-f681ec77ea84",
        "cursor": {
          "ref": "b5b3a57d-7446-4091-857e-ab88afb9053f",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "34ce32a5-fc5e-43d4-a3c2-fee69a8c5d4f"
        },
        "item": {
          "id": "76bbb403-d8cf-4517-9a6f-f681ec77ea84",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ebee5bd5-a57d-47dd-b86b-6696893eb813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee36c05-80b1-45c4-8d4b-1fcafb881c59",
        "cursor": {
          "ref": "d633da67-ae82-4f37-88c7-05fc3e05cc00",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2c0b4164-fa94-40c9-a107-a4ae3b24e488"
        },
        "item": {
          "id": "5ee36c05-80b1-45c4-8d4b-1fcafb881c59",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4862355c-dc26-48be-b6c9-9d6832c71f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354f733f-4bf1-4200-9288-0a2f6c03b00f",
        "cursor": {
          "ref": "ef09b6a1-4053-46be-9d67-03f218cd8837",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6d6502b3-6305-4ef1-b2a0-168eb952ddb9"
        },
        "item": {
          "id": "354f733f-4bf1-4200-9288-0a2f6c03b00f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8db6ee11-1bef-434f-a023-86b88587a367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c592c336-3f27-4bec-bc75-c5939fe99bba",
        "cursor": {
          "ref": "285666c9-fc78-484a-9a71-5bda138133be",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "16d99b8f-7a3f-4e3b-a7b2-cf912865e981"
        },
        "item": {
          "id": "c592c336-3f27-4bec-bc75-c5939fe99bba",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "895cfb47-b98b-4768-95b9-b0ec81101628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a50a02f-416d-446c-995e-aa5b0e422eaa",
        "cursor": {
          "ref": "e5c4e7d3-2ef2-4e66-9ffa-700f38f10588",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b3a5dadd-651e-4546-ba66-b71f6ac9c38b"
        },
        "item": {
          "id": "8a50a02f-416d-446c-995e-aa5b0e422eaa",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "170f0553-95b4-4c85-b97e-acf1945e3a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b78f0d4-8586-4a0a-8ad4-43fddac16ba7",
        "cursor": {
          "ref": "5dadaebf-84bf-4b3c-a9d2-ca18ba628613",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8defcccf-c103-42c2-8cd3-a37c8a185c96"
        },
        "item": {
          "id": "1b78f0d4-8586-4a0a-8ad4-43fddac16ba7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7bf3a59e-0183-4b79-b60e-f5ede3918bdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afadf73-d3b7-4ebf-b829-d39d405d16b4",
        "cursor": {
          "ref": "bb855a78-c6dc-4eff-8064-b2e3cfbf728d",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "831316dd-e421-42ae-b653-2ec2112f480a"
        },
        "item": {
          "id": "2afadf73-d3b7-4ebf-b829-d39d405d16b4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "23fef7d3-ca85-477b-9d0d-85a95f721bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b824916f-973a-4252-a442-9d6c87523f61",
        "cursor": {
          "ref": "505068ba-d66e-4e54-8fd8-b644bc0eea79",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d2340965-3e31-434f-ac3f-b0b9e307c2e4"
        },
        "item": {
          "id": "b824916f-973a-4252-a442-9d6c87523f61",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "da8ef562-f41e-4ded-a55d-b12d11ec5653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99b61af-2e22-4843-96fb-d9cc8b164909",
        "cursor": {
          "ref": "451e5cf9-9381-482f-8280-e4007be2ff73",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0ddbc241-8a34-4fb2-a0ea-98ef4501eaf6"
        },
        "item": {
          "id": "c99b61af-2e22-4843-96fb-d9cc8b164909",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "31a646be-2448-440f-885c-707c648579b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53fc7aa-3a59-4199-92d5-66c2279b89a0",
        "cursor": {
          "ref": "8c7a6a77-cd57-4f77-bf43-a5898dd95205",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "95abc97e-0d34-42e8-838e-338c0c32ecc6"
        },
        "item": {
          "id": "c53fc7aa-3a59-4199-92d5-66c2279b89a0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0e2f21db-49a3-42c1-abf0-9c6166f77ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beed20b9-dba1-459e-b986-e91e58493257",
        "cursor": {
          "ref": "3fd3db5f-d003-4df7-89d8-a1e4769da977",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "297c7e3d-b753-4d07-b0f1-c82dabfe8e2e"
        },
        "item": {
          "id": "beed20b9-dba1-459e-b986-e91e58493257",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ed95d6a0-827b-43d9-94c2-797eb4dd7ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "084cb32a-5ccb-4e5c-a04b-b360c119d7f8",
        "cursor": {
          "ref": "a3f49788-9840-4b40-86ae-fa7dbb712e16",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4cf3e43e-a0e4-4167-bbd5-7216bdab9016"
        },
        "item": {
          "id": "084cb32a-5ccb-4e5c-a04b-b360c119d7f8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5e2855aa-733e-4ac4-a20e-ec52b5afaaee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450f4217-055a-4c14-886f-faa8235f1aec",
        "cursor": {
          "ref": "b692eef1-640c-4875-8ac2-89e77626d7b1",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "aa8ef658-7132-4d95-bfc2-b24d49976027"
        },
        "item": {
          "id": "450f4217-055a-4c14-886f-faa8235f1aec",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6273b4e4-d57f-406b-8817-5ba5e3ded54a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 235,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b77cfdfb-0024-4619-8e7d-7a0ed71c3530",
        "cursor": {
          "ref": "440069c0-07c3-48d3-a807-e7dcc075966e",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6376e802-3eea-4361-9574-11420bb500eb"
        },
        "item": {
          "id": "b77cfdfb-0024-4619-8e7d-7a0ed71c3530",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2d79340b-2f53-4f60-a7c8-5c189f892b5f",
          "status": "Created",
          "code": 201,
          "responseTime": 2181,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3df0764f-b61f-42af-9c3b-8f888b434482",
        "cursor": {
          "ref": "e23bbf99-f3b8-4eb1-aef6-8f234f187b9d",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "769e738c-468d-408f-969a-88538370e770"
        },
        "item": {
          "id": "3df0764f-b61f-42af-9c3b-8f888b434482",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7a49087c-1e68-411b-9271-dbf0177683fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 182,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0d95af4a-121c-4632-9a41-08d28d67bcb9",
        "cursor": {
          "ref": "dbcd2af7-95e5-4206-98e0-4bdea83eb5bd",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b8f93dc5-8c31-477b-a01c-eae58c2819a7"
        },
        "item": {
          "id": "0d95af4a-121c-4632-9a41-08d28d67bcb9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "dbf225b3-2978-413a-8e47-14151eab2167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f37a908-b2f1-4512-9ac3-22088ede34f8",
        "cursor": {
          "ref": "27137731-d54c-400a-ad7e-f9aebf18c058",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "963c855d-bc60-49e3-bb8f-58f6c7601c2c"
        },
        "item": {
          "id": "0f37a908-b2f1-4512-9ac3-22088ede34f8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c4e6f660-b7a8-4191-a21a-c05c68a72c1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 168,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f756aaf2-aac0-4519-aa93-f3b19afc9c92",
        "cursor": {
          "ref": "0cb9d24e-6a05-4b3d-b267-f393e2db9d4b",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "609b353e-c687-47f5-b24d-a08a3556e989"
        },
        "item": {
          "id": "f756aaf2-aac0-4519-aa93-f3b19afc9c92",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "80cea5e9-0dd6-4518-a1f9-859715903d72",
          "status": "Created",
          "code": 201,
          "responseTime": 1190,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c9f96178-02ed-42ab-af92-e149d4ddc046",
        "cursor": {
          "ref": "efa11a9e-4d0a-40bd-b7fd-84d7f2dd753b",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f4901fb4-0c6c-4348-8544-332fce8f6ce0"
        },
        "item": {
          "id": "c9f96178-02ed-42ab-af92-e149d4ddc046",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "4b8704ad-8552-4e79-92a7-7a11edab8c88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 154,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ee6d3a98-dd3e-45f2-8c54-cd253deee272",
        "cursor": {
          "ref": "8438d202-e58c-4ff1-be01-f8241b5e1a7e",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3b9f0f21-b3b2-4a52-8678-aef33cdf5fce"
        },
        "item": {
          "id": "ee6d3a98-dd3e-45f2-8c54-cd253deee272",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "dbfed870-e548-42b9-b1c2-956390f41890",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 946,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ee435014-978c-4986-b30b-9f53c0d3e652",
        "cursor": {
          "ref": "cf9a2316-27f5-4d7e-9e13-7328ab2ad7f8",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "051eeae5-03ac-4862-81c7-efc1361da788"
        },
        "item": {
          "id": "ee435014-978c-4986-b30b-9f53c0d3e652",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "687eadb8-a54d-48ec-b453-f325d287afe3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 169,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a7da3d15-288c-4766-bc9d-dcbf5a1fef08",
        "cursor": {
          "ref": "4677f8cc-31d4-4b6d-804c-a4d43ce860d9",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "be92beb1-e767-48d6-8ac4-9b4ffe997674"
        },
        "item": {
          "id": "a7da3d15-288c-4766-bc9d-dcbf5a1fef08",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "51b3335a-1430-46eb-a3bc-5d957341dd27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 159,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "cd21ccb1-46e3-49cf-9610-7eda85515bd2",
        "cursor": {
          "ref": "ae839b8c-0b2c-4530-b806-a604329f204b",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ef2d9766-c782-451c-9fbb-93e6e589424d"
        },
        "item": {
          "id": "cd21ccb1-46e3-49cf-9610-7eda85515bd2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "30dfc2ae-9094-471b-88dd-4e1a5fd4a12a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 167,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "611fd457-e57b-4b83-b6fb-5f1061e8aab5",
        "cursor": {
          "ref": "248e535e-19d3-4f44-8dc3-08967561bcf5",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7cffbb0f-a769-45f6-9663-27059372d908"
        },
        "item": {
          "id": "611fd457-e57b-4b83-b6fb-5f1061e8aab5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c40f2231-9d8d-45b0-8721-a618b5e921a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 155,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5c1905a9-8ce4-49bf-a1ce-d535c789ca79",
        "cursor": {
          "ref": "839a673b-086d-49bd-b970-efe13134b0b1",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "bdd55039-7115-4eb0-93d2-88e373f0ac77"
        },
        "item": {
          "id": "5c1905a9-8ce4-49bf-a1ce-d535c789ca79",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7d9d1762-647b-4ecc-8ac0-549ea2b0be81",
          "status": "Created",
          "code": 201,
          "responseTime": 1089,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "20c8d921-17c7-4f03-a3c0-c854ae7e29a2",
        "cursor": {
          "ref": "e6a60c3c-3330-477a-9554-595ded19f271",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f075da76-a958-420e-885c-babf3a6108bd"
        },
        "item": {
          "id": "20c8d921-17c7-4f03-a3c0-c854ae7e29a2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f1f1be27-585c-4f89-8ab9-8965c1063a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9272b49-1dec-43b5-b2c3-a9c95520176d",
        "cursor": {
          "ref": "32647e1c-d372-4150-b508-857f7a0c2480",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "36fb84ec-3f3c-4e2d-a69f-d07786d338c8"
        },
        "item": {
          "id": "e9272b49-1dec-43b5-b2c3-a9c95520176d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b7b964bd-ef5e-4ec1-a8cd-03bd4cde6293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b88201-8026-4bd0-8f6f-4d977e3dcc77",
        "cursor": {
          "ref": "51dfa152-e7fb-4bc0-98fe-9a83300eff7f",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "aec3a7af-01d4-4518-9f3d-4ae5dd21faae"
        },
        "item": {
          "id": "07b88201-8026-4bd0-8f6f-4d977e3dcc77",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9bfef2a2-07f8-4b71-a330-9c234827ae48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffbaa108-029c-459d-bab8-79bee31abd8d",
        "cursor": {
          "ref": "da6e78e9-38f2-49b5-b3b0-ea5e99ff7e04",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b138bbd0-9ba1-40d7-9e9b-2cf73128e7f2"
        },
        "item": {
          "id": "ffbaa108-029c-459d-bab8-79bee31abd8d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8e26a228-6836-4887-88c1-68f215f7cd6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982e77d6-98cd-4978-8bdb-1941e9103ba7",
        "cursor": {
          "ref": "26dadc3d-8659-4ab0-a965-d038f822af0d",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6b609423-544b-4674-9dc4-d9f3baff930f"
        },
        "item": {
          "id": "982e77d6-98cd-4978-8bdb-1941e9103ba7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "82f1ab98-10eb-4321-8035-c51a2cfbddbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cbe93fe-1e5f-4a7b-9f09-88153de1385b",
        "cursor": {
          "ref": "6e14325a-3b16-457b-94de-4cc7170c7e5f",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "37ca405a-2e86-4aa7-aab0-309b24251fca"
        },
        "item": {
          "id": "0cbe93fe-1e5f-4a7b-9f09-88153de1385b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6e37910b-7746-4108-917c-e51f75dc6a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34847852-811b-428a-8e5d-be7c9e640dc3",
        "cursor": {
          "ref": "4bb8c33f-c041-4bab-b971-27ed9135f1eb",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c8d0aa22-02a6-4b84-8a52-092017342f3c"
        },
        "item": {
          "id": "34847852-811b-428a-8e5d-be7c9e640dc3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bf39eee2-c6d5-4a99-b243-308f5598df08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a3f5a5-9899-4e00-83f3-728225b1c34a",
        "cursor": {
          "ref": "f651270f-8266-4cbe-822d-b6967df4c39e",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e271fd7b-93f1-44f9-a7d6-1ea86dc64f01"
        },
        "item": {
          "id": "84a3f5a5-9899-4e00-83f3-728225b1c34a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "976e9a01-933d-46ef-8fc7-9173e6021c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e49fb2e-e411-4d9b-b752-b1446fd75439",
        "cursor": {
          "ref": "12024af4-a67e-4956-9764-d21001ea1499",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "aa2f94a5-7a04-40b6-8679-7c71b9289c8f"
        },
        "item": {
          "id": "6e49fb2e-e411-4d9b-b752-b1446fd75439",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3731f8ef-7fbe-49bc-b512-7702b78e61b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5268e84f-17bc-4cd3-81ba-5fbe32c72ed4",
        "cursor": {
          "ref": "5f0e9450-ea5b-41e9-8c9a-126ecf1b9ca6",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7de1f39f-ed49-4b51-9d77-3f960af6b95f"
        },
        "item": {
          "id": "5268e84f-17bc-4cd3-81ba-5fbe32c72ed4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8c254fc8-1079-4895-b717-4b9b13033519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce74be65-6283-466b-b9fa-4bf5e24a6ae1",
        "cursor": {
          "ref": "7b26a8b6-739e-48b7-bd54-bbb0eae62012",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6b359815-0286-4931-a140-3388dfdc4a5e"
        },
        "item": {
          "id": "ce74be65-6283-466b-b9fa-4bf5e24a6ae1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "172df88d-bdd7-49ce-a825-cd53708d1267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9003032f-db75-4525-a7fd-8637cc914c2f",
        "cursor": {
          "ref": "52f07f67-342a-443a-b85d-f05702b4be9e",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c9e113c2-b365-4e50-9cad-2cab148f117d"
        },
        "item": {
          "id": "9003032f-db75-4525-a7fd-8637cc914c2f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f7811a1d-44a2-462d-ac48-3159ccccd65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd66f451-77b8-4fbf-a610-b57cee7977c5",
        "cursor": {
          "ref": "d187b2ef-e486-4aa1-9ae3-ac72cd958495",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2dc479ce-9c4e-4ada-97c0-9dcaea24852e"
        },
        "item": {
          "id": "cd66f451-77b8-4fbf-a610-b57cee7977c5",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "94e8c9fe-3373-4e14-a9d6-e224281ff723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a005b678-8e3e-4bc4-acad-43df54731851",
        "cursor": {
          "ref": "df8018c1-a015-4940-becf-46d5f1b17780",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f1700c8e-7222-4e0f-b6a9-669ed8205b6d"
        },
        "item": {
          "id": "a005b678-8e3e-4bc4-acad-43df54731851",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b6d8e9a6-988a-4e99-bed2-9a5807369784",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 850,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5f61f7e8-ac31-4148-82a4-9ff7da374c1a",
        "cursor": {
          "ref": "5735bc7e-2f93-4d1d-adec-b8a179fdaf68",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f5c8881a-f1e0-47de-8db1-e3a8a6ae5899"
        },
        "item": {
          "id": "5f61f7e8-ac31-4148-82a4-9ff7da374c1a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "31e2d1dc-9ce9-4de2-8ea1-260b836ae0b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 856,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "9f3469a0-2429-4aba-ad9b-c33bb598c8f2",
        "cursor": {
          "ref": "792869ba-5787-4a2c-940f-6661064ad299",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "60172097-d9da-408b-8def-0e40dab03ead"
        },
        "item": {
          "id": "9f3469a0-2429-4aba-ad9b-c33bb598c8f2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1c5fb581-7134-4cfc-a45c-4477562d86b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 152,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "340265f5-1292-4c84-801d-7d8f2fa4c079",
        "cursor": {
          "ref": "f72fada5-f03e-4b92-a51d-77cfa32747ff",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e0a8fa18-371d-463b-83a8-4f355a9bcde9"
        },
        "item": {
          "id": "340265f5-1292-4c84-801d-7d8f2fa4c079",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "bc0291bc-4b5e-4503-9bdd-76222f291979",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 847,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "372d0d19-63e0-4d6a-b5ca-a38821822d6b",
        "cursor": {
          "ref": "6a7aa046-5144-44c0-ba71-10e07668c6bf",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a4bcbfab-5cac-40e1-ace8-12b0158557b9"
        },
        "item": {
          "id": "372d0d19-63e0-4d6a-b5ca-a38821822d6b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e64e40cf-aa32-4183-96bb-24ef1c5997a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 144,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "922ad207-eaa3-46da-82fe-f2d722c44e72",
        "cursor": {
          "ref": "9270789d-e08a-4903-82b0-73df963b89de",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b809a994-d4d9-43bf-908d-b495dcd36c9a"
        },
        "item": {
          "id": "922ad207-eaa3-46da-82fe-f2d722c44e72",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "536a79bb-c190-4045-96ea-973a12997474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d29782-9954-41a2-bfa9-51a71f948534",
        "cursor": {
          "ref": "f11b51c5-1d61-44b2-b70c-9e4fbb48b75f",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "efaf3342-eb91-4420-9776-a2e4c47b7fc3"
        },
        "item": {
          "id": "c4d29782-9954-41a2-bfa9-51a71f948534",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "26827c8c-2bb3-4b85-b917-16df1a738edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a02911-5062-4df1-9a35-b77d0e507b75",
        "cursor": {
          "ref": "fce68a27-1257-4ffa-945a-53f80719e066",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "cfc6d92a-0a8b-4f25-9df0-fade9094503e"
        },
        "item": {
          "id": "b4a02911-5062-4df1-9a35-b77d0e507b75",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3c111456-a6f5-4626-b0d8-c50f057548e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26aa40d0-9de0-4feb-8d17-c4f780e50c76",
        "cursor": {
          "ref": "722a3ebc-1b19-449a-9d45-a95ea1c6d23c",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "09b6b055-f39e-4d74-8fe4-0082ee68106f"
        },
        "item": {
          "id": "26aa40d0-9de0-4feb-8d17-c4f780e50c76",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "9606a876-d441-4dc6-8685-a9f6641beddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddfe754-6353-4d99-a01c-adc2edfb32b0",
        "cursor": {
          "ref": "9d756338-e128-454c-b3bf-62b9386a345f",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "39f25d01-d9af-426b-aa4a-8527faee031c"
        },
        "item": {
          "id": "9ddfe754-6353-4d99-a01c-adc2edfb32b0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "4f68d71b-816b-4491-bcb7-56f8417089c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d911cc86-efcf-44ee-9a40-747977d7826b",
        "cursor": {
          "ref": "85dbbae9-11f8-4be1-ac22-355435bec011",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b03f9b53-9a12-4437-8ab4-c623246f2d2b"
        },
        "item": {
          "id": "d911cc86-efcf-44ee-9a40-747977d7826b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "67c729eb-d5f1-4d38-b1b9-4bd168e78092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269ea187-2fa8-4a9c-b0e4-c6b51148ca4a",
        "cursor": {
          "ref": "e8ec318f-4423-4069-a2e8-c05d7083bea3",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "136feab2-09e3-47b3-abcd-ba48cc9cd892"
        },
        "item": {
          "id": "269ea187-2fa8-4a9c-b0e4-c6b51148ca4a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f35725e8-8c35-4962-8e44-99efff74b6fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0533128d-01af-469a-b4eb-d63b808e5a52",
        "cursor": {
          "ref": "f339acd2-3ca6-49db-a504-a454ff9a343a",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "652117fd-79e3-4d01-8b90-7cdaf8fef829"
        },
        "item": {
          "id": "0533128d-01af-469a-b4eb-d63b808e5a52",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0b03963a-5397-4f74-bc3b-6d5bedd92271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8f303d-db3d-4d9a-8cda-1f0f2fc1c69b",
        "cursor": {
          "ref": "054a40b6-0730-4895-af55-ab88af6e20ca",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c388f25c-0887-4607-b5a8-6bd3835af80e"
        },
        "item": {
          "id": "da8f303d-db3d-4d9a-8cda-1f0f2fc1c69b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9a4f2af5-d7f0-4185-b9d7-06617d1958d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5130c9f0-a1be-4b3e-a8c5-f78888228d5d",
        "cursor": {
          "ref": "a3735fba-beb8-4b64-be05-af3042bd21c4",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ca7894f0-186a-4d2f-9321-7b45ddb871d5"
        },
        "item": {
          "id": "5130c9f0-a1be-4b3e-a8c5-f78888228d5d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "bada3977-ee64-4dc4-baba-5d8a4a851cbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55403d9-bcd0-47fd-a803-795e361dd274",
        "cursor": {
          "ref": "1b280853-b7fe-4099-b5e2-13adf53c75f6",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "eeee97d3-68f4-42c3-8439-643036a9ef7d"
        },
        "item": {
          "id": "a55403d9-bcd0-47fd-a803-795e361dd274",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "be5b736c-e452-4883-a676-eaeae652b0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6f0c40-56f7-4b61-aa33-0e3933e243fa",
        "cursor": {
          "ref": "46c29256-baf7-4ff3-ba1c-a27319226122",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c788485d-beee-4def-8948-2be5249d7a2e"
        },
        "item": {
          "id": "dc6f0c40-56f7-4b61-aa33-0e3933e243fa",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3a1ad5d4-49a4-44bc-8d3e-376a00baebfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2aac69d-24f5-4918-ba63-49860ca4eda5",
        "cursor": {
          "ref": "2e4f6dec-8f51-4e75-9d35-a96a003a54c6",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c5f2c1b5-bd67-46d6-90a5-1ed02d360758"
        },
        "item": {
          "id": "f2aac69d-24f5-4918-ba63-49860ca4eda5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "efa7025a-ecf5-468a-ad04-1b106b272ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a179866e-5041-433d-a71f-55fd5cdf94bd",
        "cursor": {
          "ref": "7ffcf87e-a76a-417c-9b99-e7e1f8a8cdbe",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "89ded527-f0c0-4545-ac59-23b746d4bd77"
        },
        "item": {
          "id": "a179866e-5041-433d-a71f-55fd5cdf94bd",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "515cf68b-d773-4454-a363-6396c7e42de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cca2830-ef66-4dc1-866f-4c85503c0edf",
        "cursor": {
          "ref": "5c81b49e-40cb-4035-a523-fd2606f0d11c",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8e9eced2-a91f-47de-952b-7edce0d3de3a"
        },
        "item": {
          "id": "4cca2830-ef66-4dc1-866f-4c85503c0edf",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2baa61b3-5b40-4912-a028-993c6b21794e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e832448-4bdc-4253-aa43-a859b2192fa0",
        "cursor": {
          "ref": "754eba36-e5c5-4346-936e-298acc6dbba0",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d9c0cfd6-1ddf-4d9f-8679-5776984a29c5"
        },
        "item": {
          "id": "5e832448-4bdc-4253-aa43-a859b2192fa0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "feb4f077-ce92-4f8b-aa93-be1256be662f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6b8d7a1-afe3-465e-9be8-d98a5e5e3f03",
        "cursor": {
          "ref": "34f512c5-e846-46a7-b804-fc0bf22cc49b",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4816ef93-b4c5-4968-b0b1-df56ce4333bc"
        },
        "item": {
          "id": "e6b8d7a1-afe3-465e-9be8-d98a5e5e3f03",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "52bb24fe-1628-4086-a82a-95254d2c5116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f039c2-1e58-4cbe-aca6-35ae4530d5e4",
        "cursor": {
          "ref": "df5dd6fb-9eb6-4cad-8c50-ce354c646b1f",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d5bfc452-5346-45fc-83be-a5e7fffcd5ff"
        },
        "item": {
          "id": "a8f039c2-1e58-4cbe-aca6-35ae4530d5e4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c8245e74-b7a8-438d-9085-94ea3ab5046e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1a7fd41-ab64-4b79-a6b7-2a3b00dad16f",
        "cursor": {
          "ref": "c473cfa7-9e63-4df4-a7a1-af2c3332c1f5",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9007c3b1-663e-4f01-b878-6dd4e60514df"
        },
        "item": {
          "id": "b1a7fd41-ab64-4b79-a6b7-2a3b00dad16f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "63862dba-6859-4f36-a10c-eb3c192e8ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a851a4-c9e1-4433-b052-f8afa7ba2b33",
        "cursor": {
          "ref": "ae3a10a6-b2c8-4ad1-8ede-52c8a596113b",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "700081f9-ebd1-4f43-aefc-0d99bff5a011"
        },
        "item": {
          "id": "52a851a4-c9e1-4433-b052-f8afa7ba2b33",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "005eaac6-4fc9-4cba-aa25-eab458c90dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c644fce-435a-451a-8ab5-0cbbce2f2d91",
        "cursor": {
          "ref": "cf74a444-cc2e-4111-af79-48a2f1b7e738",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e5cfeff9-2a27-4c2c-bbbc-5e3d38f64f56"
        },
        "item": {
          "id": "2c644fce-435a-451a-8ab5-0cbbce2f2d91",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a7692090-6ff9-444e-a009-9c4797c549bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fec2d14-a36e-4bbc-a0ee-2ef32ef6450e",
        "cursor": {
          "ref": "7df99884-2f02-4ad7-aafb-e5c443b22e1b",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "de870cb1-ab2a-45ef-961c-b208fe6b051c"
        },
        "item": {
          "id": "1fec2d14-a36e-4bbc-a0ee-2ef32ef6450e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f0661960-97c9-466d-997d-d8ee071921af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da685e4-33c0-4047-9387-6facbfe33739",
        "cursor": {
          "ref": "1629d521-b943-4a4a-beb2-32d99d85440e",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1987a271-70ec-4984-9877-2e4c06ce8def"
        },
        "item": {
          "id": "7da685e4-33c0-4047-9387-6facbfe33739",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "93f7c35d-723d-4e60-8bbb-e44f0df51f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371d52ac-c6ee-4984-adda-1f2760464f49",
        "cursor": {
          "ref": "931df0fe-cfe2-4294-980b-595d932dd1ce",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8e91ee95-bd01-4fd7-b8f0-8141484d325e"
        },
        "item": {
          "id": "371d52ac-c6ee-4984-adda-1f2760464f49",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "847cfc0f-5b2c-4cd9-a5f0-0194aa6f71e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4843bcbb-4b21-404f-a269-f0a3a803cdcb",
        "cursor": {
          "ref": "0f23665f-2fb4-4479-969e-bee14d6d7bcd",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e4d1e362-7c5d-4d04-834e-75c52ba4fa8c"
        },
        "item": {
          "id": "4843bcbb-4b21-404f-a269-f0a3a803cdcb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "0c720d02-a085-47e5-a46a-d0681c6d80ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccfac564-241a-4ee2-9eab-c5dc020e1d78",
        "cursor": {
          "ref": "f1278ff3-b45a-4300-b4e2-2bf35c2401c3",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "153c5a31-2a6f-4b44-ba30-a506e6ebd871"
        },
        "item": {
          "id": "ccfac564-241a-4ee2-9eab-c5dc020e1d78",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "5dddc62e-bd0d-4ae4-a0f8-db7d68f8534b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0161f1ef-6c9e-4b7f-b5c6-bf7950e86a81",
        "cursor": {
          "ref": "fe7e495d-c450-4c95-af62-1a143424bf76",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8154ef05-fd59-418e-9e46-246c337d56c6"
        },
        "item": {
          "id": "0161f1ef-6c9e-4b7f-b5c6-bf7950e86a81",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ec28cc48-838a-4034-8451-ec87b0223f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7841b0ee-ae62-4d8e-a973-ad4f1f8b6a20",
        "cursor": {
          "ref": "dd1615ec-8314-4764-afbf-ad20866bc570",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c5ef3984-386e-4c6a-94d7-c096b7aabd24"
        },
        "item": {
          "id": "7841b0ee-ae62-4d8e-a973-ad4f1f8b6a20",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b56ab7b8-2fc9-41c3-8edf-c16d4182cb09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af9bbeb-0f29-44c7-8967-949ee1028616",
        "cursor": {
          "ref": "757822cf-c7f3-42bf-8730-23d58ffe1a5a",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7a5c8e03-b0c8-443d-ad44-fdf14f41c9c4"
        },
        "item": {
          "id": "1af9bbeb-0f29-44c7-8967-949ee1028616",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bb4dbf56-9c45-4def-b5b8-ad68357edad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153f3c99-8978-478b-9d9e-347cf2bcfc96",
        "cursor": {
          "ref": "3f15f4c9-7891-48d3-a9e7-5957765b9985",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ea7b0208-09dc-4f0c-a67a-213a6fc13ce9"
        },
        "item": {
          "id": "153f3c99-8978-478b-9d9e-347cf2bcfc96",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3856acf3-49e9-4ec8-b66c-25bb336a63a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a30d1a4-791d-4a86-8c3c-86b1348477d4",
        "cursor": {
          "ref": "1effd132-1467-4279-9ae0-b0862658d575",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "95a4bb51-6aa0-48b0-bb74-e88756adc750"
        },
        "item": {
          "id": "4a30d1a4-791d-4a86-8c3c-86b1348477d4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8ff750a4-cf23-49be-b05a-f08a81688ec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b80460c-498e-467d-9186-25979ed0c56a",
        "cursor": {
          "ref": "c2843437-a12b-45e4-a97d-109d9bf8e3f2",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "718f7949-5010-49be-a9fd-0794295870ed"
        },
        "item": {
          "id": "3b80460c-498e-467d-9186-25979ed0c56a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "19ce549d-b44e-4de8-bdbc-d475142f5db4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b485d9ca-ea90-4c1c-becc-8fbd5e487b7c",
        "cursor": {
          "ref": "9afb5280-9efb-49cf-95cd-b2dcfd1d2a62",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6be4e361-62cb-4fad-be17-76eb77167775"
        },
        "item": {
          "id": "b485d9ca-ea90-4c1c-becc-8fbd5e487b7c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ae359260-6190-4bc9-9ae0-b0c50ce7acab",
          "status": "Created",
          "code": 201,
          "responseTime": 1076,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1243b1-df10-4803-b0fc-082ada69e8d6",
        "cursor": {
          "ref": "da4dc6be-9e5a-49d1-b7d7-082849102f72",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f337d0c6-a843-48f1-991f-961c7decb66d"
        },
        "item": {
          "id": "2d1243b1-df10-4803-b0fc-082ada69e8d6",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "00cbe17f-19ef-47b3-bbda-7bb8cf760130",
          "status": "Created",
          "code": 201,
          "responseTime": 1035,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "33aceffd-7fb8-4aec-8097-3ad2fa173a7a",
        "cursor": {
          "ref": "53053270-d2fb-4228-833e-72beb5d3526c",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ffb3a342-b798-47ff-b314-5e69a4099810"
        },
        "item": {
          "id": "33aceffd-7fb8-4aec-8097-3ad2fa173a7a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4b675563-6961-423a-8507-d2f2801f2e3e",
          "status": "Created",
          "code": 201,
          "responseTime": 1154,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cda40a2-505b-4faa-93c9-058c55b75e38",
        "cursor": {
          "ref": "862786d4-6705-4b4d-afc6-9fcec83e7343",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4f8e1d70-f80f-4a18-9f02-c7618de5742b"
        },
        "item": {
          "id": "1cda40a2-505b-4faa-93c9-058c55b75e38",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9df96fe4-d0e6-41c0-9d46-9bfa97b8db3b",
          "status": "Created",
          "code": 201,
          "responseTime": 1034,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3b0a69-33ad-458f-a39d-081a57341c96",
        "cursor": {
          "ref": "e2d5f7da-d289-4b72-b68a-9b8b0c03c2df",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6bd585a6-5e09-46f6-8242-164132f8ffb6"
        },
        "item": {
          "id": "2d3b0a69-33ad-458f-a39d-081a57341c96",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3f64582f-c76b-4c65-a71f-0096940705ea",
          "status": "Created",
          "code": 201,
          "responseTime": 1031,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf0fe1b-3d3c-49ce-8a58-5138d7a68de2",
        "cursor": {
          "ref": "1930c901-ed94-465a-9117-9437f89e9096",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "82a99764-240c-4dae-b659-83473127307e"
        },
        "item": {
          "id": "dbf0fe1b-3d3c-49ce-8a58-5138d7a68de2",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "af23b78b-2cb9-410a-a438-3ea08a8907bf",
          "status": "Created",
          "code": 201,
          "responseTime": 1505,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44a1945-3dfa-4a03-875e-bb2f38acfe47",
        "cursor": {
          "ref": "3991d56a-9a76-4ccb-9a70-f12bcf25b827",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "eb86ab2f-f843-41d1-8632-0cf098cb33ab"
        },
        "item": {
          "id": "d44a1945-3dfa-4a03-875e-bb2f38acfe47",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "089b5a3b-f679-4684-a93f-576c81403cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ef5fe2-ee05-41af-bc5a-036ed5513045",
        "cursor": {
          "ref": "7f77887d-1d71-41c6-80e7-a510383c530d",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "13a7c76a-46bb-4714-9033-710a06f79c2c"
        },
        "item": {
          "id": "14ef5fe2-ee05-41af-bc5a-036ed5513045",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0681c943-9d72-4257-8d36-814bb2cda42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511ae4f7-74f4-43fb-83a3-950180e0c54d",
        "cursor": {
          "ref": "d1821b84-8bfc-44c0-878a-8b49d0fb35d3",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "68e71ece-3f10-496f-a8c7-cc7c621dc193"
        },
        "item": {
          "id": "511ae4f7-74f4-43fb-83a3-950180e0c54d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b96797e6-a821-4f51-ab7b-f7ed063760fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e825991-7ec4-4038-a63d-4fb2bb2b2eb2",
        "cursor": {
          "ref": "27cf4205-e628-44e2-9399-1119a7328876",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "83d32681-6bda-4f6c-995b-9821edfa0602"
        },
        "item": {
          "id": "7e825991-7ec4-4038-a63d-4fb2bb2b2eb2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ddd80739-c9e6-457f-a75c-cef5e299e809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c045ad0a-adad-4893-9fe3-475b957b1846",
        "cursor": {
          "ref": "3e85f9f7-733f-471d-8807-11d9fca948c0",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b4f13ee7-548e-4d09-b8cc-55ecd3775f6b"
        },
        "item": {
          "id": "c045ad0a-adad-4893-9fe3-475b957b1846",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5365e268-f73c-4176-87be-8b12e8fccd52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d700c7-8ed5-4848-8c02-bfd8d9dde08b",
        "cursor": {
          "ref": "55a7f694-183a-46d1-96d6-85ca4c5e8311",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1aaca4fb-90eb-417c-812a-3bfb4cd33bd3"
        },
        "item": {
          "id": "63d700c7-8ed5-4848-8c02-bfd8d9dde08b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "00ffffa7-f6c5-4981-a416-58748b18a15c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ff1de3-1b2f-437f-a868-9e5604e882cb",
        "cursor": {
          "ref": "f9b97089-2e78-49f0-8ea8-84d43decbfdf",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "679dd3a2-3bb4-4ac0-ab4d-13257b31bd9d"
        },
        "item": {
          "id": "f7ff1de3-1b2f-437f-a868-9e5604e882cb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f6f61a14-d468-48fa-b90b-a2535961b0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78be349c-1635-4028-8def-1517971a4b3c",
        "cursor": {
          "ref": "4962d39a-2b96-4569-9d7e-1ebfc6168862",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8cbd9fd0-4047-4557-8653-b1133531e054"
        },
        "item": {
          "id": "78be349c-1635-4028-8def-1517971a4b3c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "32286b71-9068-4260-92c0-894577091231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fb79e0c-a58f-49ed-95f0-1c68e61923be",
        "cursor": {
          "ref": "dd24063f-91ac-4fde-894f-72f20751f1b2",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3bee0b31-6784-4f7e-8839-a7413e401b9d"
        },
        "item": {
          "id": "1fb79e0c-a58f-49ed-95f0-1c68e61923be",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "72575850-0cf9-4312-974d-4b2026612473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16ffe7f-343a-4489-8dd1-8c6ba0f1f803",
        "cursor": {
          "ref": "b5e9bdb0-7f03-4ef1-91a6-ee59b3c11701",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7b588c85-5a3f-477a-af54-30df3790b874"
        },
        "item": {
          "id": "c16ffe7f-343a-4489-8dd1-8c6ba0f1f803",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5cbc3466-0978-4b10-bf6a-9648f3c594c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4feafe3a-3689-4835-a2b9-570be5f6e6cd",
        "cursor": {
          "ref": "15f525d9-1b46-472a-9ff6-925f185c1d0a",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0ba24578-4a95-483f-a9f5-faf4cd672086"
        },
        "item": {
          "id": "4feafe3a-3689-4835-a2b9-570be5f6e6cd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a0831269-3f38-455e-8988-c5656a6b7bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50939546-6e29-4e75-b1d2-8a969dba7cec",
        "cursor": {
          "ref": "c68166c1-0e1f-4f20-a639-9fc3c059933a",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a041edd2-b0a0-4a6a-9bb3-a38bb3331454"
        },
        "item": {
          "id": "50939546-6e29-4e75-b1d2-8a969dba7cec",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1f828ac2-8bef-4dad-884f-7414cbb7221a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719c5612-a45f-4025-9044-bad48e4d9ba3",
        "cursor": {
          "ref": "91da1933-22c6-4e0c-9900-b7a76d643241",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "026eb18c-62f9-496f-b575-71c586e7cca5"
        },
        "item": {
          "id": "719c5612-a45f-4025-9044-bad48e4d9ba3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dc7d0544-ca18-48dc-82f7-122a5be4dbc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "560db378-1b7f-4bcf-bda7-063c857bf614",
        "cursor": {
          "ref": "e8c03e37-e987-4872-9d82-f1d2690e738c",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b9a38c06-7e6c-49cc-ab21-76005bf96b0c"
        },
        "item": {
          "id": "560db378-1b7f-4bcf-bda7-063c857bf614",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "71e867f2-6a0a-4a99-bd25-1637bc8224ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d370794e-17f8-40e8-b156-c65aa12de965",
        "cursor": {
          "ref": "4cba8bfd-7d10-43e9-81b4-3a4f8129023f",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "af76845c-9487-42fa-95c2-5be49c7f8186"
        },
        "item": {
          "id": "d370794e-17f8-40e8-b156-c65aa12de965",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b31f260c-3543-462b-bf9b-02c327c6ab84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d794b26-a720-49c1-b0f7-30c93ab291f8",
        "cursor": {
          "ref": "28ff0b08-5f5a-41b4-b0c3-c006d0e2a36b",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "591264a1-5931-4dea-9cab-7a428d906cc2"
        },
        "item": {
          "id": "5d794b26-a720-49c1-b0f7-30c93ab291f8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "694999ef-4316-40a1-8c04-cafb97e86f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc92cff2-c685-44e7-9ece-1590dc6f53b2",
        "cursor": {
          "ref": "0f3c4351-ad27-4647-841b-c41ba61c7329",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f4c607f8-87be-42a9-8da6-baa1c33940eb"
        },
        "item": {
          "id": "bc92cff2-c685-44e7-9ece-1590dc6f53b2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b846f441-49a7-4586-9a65-53645d275221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463f4e9f-20b1-4a01-9376-b599b8f764c6",
        "cursor": {
          "ref": "2d91a6e4-3f1e-4365-8bf1-ec7cc2540b27",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "be4db125-b28f-42bc-aafc-8a490d2df39c"
        },
        "item": {
          "id": "463f4e9f-20b1-4a01-9376-b599b8f764c6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c4b04f3d-11d4-4cba-b1bc-02e5d5fafa2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cd0143-9074-46c0-8e1d-a1e275434a8f",
        "cursor": {
          "ref": "ee5e9f04-91f0-45cc-accb-8345a4af7e59",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0eeb346b-2b36-421f-b309-1afa051f9646"
        },
        "item": {
          "id": "52cd0143-9074-46c0-8e1d-a1e275434a8f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "54944bd0-f331-4f26-b2f0-0dc59e02bb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ca7bca-ade8-4fd6-bb8c-eb130742d2fc",
        "cursor": {
          "ref": "e28f04ec-8d0d-47ed-afd1-6d0f1396e17a",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f887b563-a453-436c-824d-0a2b242a7628"
        },
        "item": {
          "id": "b5ca7bca-ade8-4fd6-bb8c-eb130742d2fc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c4710e1f-4515-438c-8973-2fbccb4b65ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982bdf3b-57f1-4665-a97f-118b819bb3ee",
        "cursor": {
          "ref": "b83b37a4-d57d-4923-bb96-4c9753609e9a",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8f938aa4-2564-40f3-843b-a845f0976d72"
        },
        "item": {
          "id": "982bdf3b-57f1-4665-a97f-118b819bb3ee",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6b3b20bb-7780-452e-a407-25157a5608b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f31d7e0-c2dc-4071-a06a-867a542ddc98",
        "cursor": {
          "ref": "95d7c315-ebe9-46c8-9cff-fed53f89aa94",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f24cf5a3-5bd1-48cb-a041-e63a7ce879d5"
        },
        "item": {
          "id": "2f31d7e0-c2dc-4071-a06a-867a542ddc98",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e8b16848-473e-46ab-b164-58ebe5a463a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ae8bf2-7ff2-4f21-9cdb-c2e81aec51aa",
        "cursor": {
          "ref": "48128b88-ad18-44fb-8476-f1bb676f2442",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fc2ec1e7-9a10-4791-938b-343557616a5c"
        },
        "item": {
          "id": "26ae8bf2-7ff2-4f21-9cdb-c2e81aec51aa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "409cbb49-9f0a-4aed-9c2e-e3a65166a305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f179dcc-b7d7-4d33-a569-160004c70d86",
        "cursor": {
          "ref": "a14ccba9-9fb5-4886-be73-a5ad24f19735",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2bc723b5-fde0-44cd-bc7f-1734e5e59e61"
        },
        "item": {
          "id": "4f179dcc-b7d7-4d33-a569-160004c70d86",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "94a4741f-5132-4aab-9098-ed3be332d8e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c8873a-99d7-4a3d-9c54-080b3d289f47",
        "cursor": {
          "ref": "904b6cf3-9cfb-43ac-81e5-3b58cb523fd9",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "82d3ceae-617e-4f00-8425-ca3686c7b731"
        },
        "item": {
          "id": "f8c8873a-99d7-4a3d-9c54-080b3d289f47",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dfb13762-722d-4b35-81be-22d7df3d315a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50fcbfdb-414b-4b49-a68b-f9efe9991de2",
        "cursor": {
          "ref": "ada81001-c1fd-4bf9-ad78-3b82e3e185c6",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "15005602-2c41-4634-9af1-f456ad81e910"
        },
        "item": {
          "id": "50fcbfdb-414b-4b49-a68b-f9efe9991de2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b1589517-3189-42d1-954a-6ed9a7a40a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8997e691-cf8a-4a34-9abf-0d1d89d60049",
        "cursor": {
          "ref": "7d8196f1-eac2-416a-b036-c4bd7c7ef136",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "80602738-1e16-4cfa-8f04-716e1f607a57"
        },
        "item": {
          "id": "8997e691-cf8a-4a34-9abf-0d1d89d60049",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c6844ca3-4fa0-4aae-951d-45c631c36523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719800da-90b2-4750-8e88-81da4e4b024e",
        "cursor": {
          "ref": "bdfcaa2e-ef61-440b-966b-a0fe80cbf5c1",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c1ec7e0b-bfb4-47d4-9b2d-736747e883b2"
        },
        "item": {
          "id": "719800da-90b2-4750-8e88-81da4e4b024e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "e1cde971-6119-46e5-82e3-b2e930ed9663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e38d40-e4e0-41c2-87b6-47843c84f937",
        "cursor": {
          "ref": "2e71cc1f-3ee8-4e7e-8af7-a95c6b2563e3",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "61234173-ccce-4ba4-8587-e226d98775d6"
        },
        "item": {
          "id": "38e38d40-e4e0-41c2-87b6-47843c84f937",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "776214ca-3788-4090-9c7e-e03bce736848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb8603b-da25-4e04-8241-a50ed1d81ec4",
        "cursor": {
          "ref": "ab307855-9139-4199-94a5-d6fb56f27839",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e5b5d02b-03d3-4d45-81e5-5aec8b3265db"
        },
        "item": {
          "id": "ceb8603b-da25-4e04-8241-a50ed1d81ec4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d3e345e4-9885-4f15-93f9-f2dc0999bebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9bb321-634d-46df-b05a-2d60f939b8c2",
        "cursor": {
          "ref": "f54dd15e-2bea-4d0e-a0ed-f62dd524257a",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0943f406-5d4d-461c-be53-82baf0cb2235"
        },
        "item": {
          "id": "cd9bb321-634d-46df-b05a-2d60f939b8c2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9f8a8129-ce1a-42c3-8d49-f432f1346e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcae2ed-62e3-4de1-91b7-83235fe6be9f",
        "cursor": {
          "ref": "0212151a-d80a-462b-93de-68a2982e674e",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "86546fd0-0522-4843-af77-7ba733a165f2"
        },
        "item": {
          "id": "6bcae2ed-62e3-4de1-91b7-83235fe6be9f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "1fbd84f6-33cb-4b55-b467-7f3a2177e274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d573b7-82b9-419a-adac-4634950f5bb4",
        "cursor": {
          "ref": "926bd072-4aaf-4615-8415-981c409f3c65",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ea63c168-a81f-4974-9110-cb3bef7153c4"
        },
        "item": {
          "id": "e7d573b7-82b9-419a-adac-4634950f5bb4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "726f3036-13ec-4235-95ec-d13e331abb0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aba0e6c-debb-446d-b7fc-3d9f1ae32cb2",
        "cursor": {
          "ref": "49c8eebb-c94e-4558-89d4-ba685e787de0",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1a3e7cb6-cdbb-483e-b3de-edc88c6658af"
        },
        "item": {
          "id": "9aba0e6c-debb-446d-b7fc-3d9f1ae32cb2",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6304644b-4939-4a13-8390-61cdbcc49310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80e8fae-d1c0-47c4-b186-056dab11d701",
        "cursor": {
          "ref": "6e3509f0-8b72-4241-8ba0-4ca8747ff73d",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8a3bb14f-cde9-4ddd-8f98-45218e3bd02c"
        },
        "item": {
          "id": "c80e8fae-d1c0-47c4-b186-056dab11d701",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "82d2c136-9342-478c-b039-7fb62cc93f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a980196-1894-4d7b-b73f-c1015c462146",
        "cursor": {
          "ref": "f6c675b9-2600-4075-8485-9e0a5b15aa4b",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "c4f7aa8a-e0b5-4643-b88b-a2a4fbffe742"
        },
        "item": {
          "id": "6a980196-1894-4d7b-b73f-c1015c462146",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "90c1d985-a445-4c89-b5eb-ae4ae5653d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2c2c04-4020-4fa9-b52e-96f529f221a2",
        "cursor": {
          "ref": "3d7d8646-fd36-427f-8e0b-6e1e66c9b835",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "11cf1709-d486-415a-83a7-4b61e25e9240"
        },
        "item": {
          "id": "2d2c2c04-4020-4fa9-b52e-96f529f221a2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1867bb66-5ecf-49e5-975f-d2fb990af1d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d900a46b-5173-4bde-b992-8f9ac00e72c6",
        "cursor": {
          "ref": "68ba96a4-be01-402d-9296-1416c8731219",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "12c36109-b5b5-4e81-8f3a-4270d58617df"
        },
        "item": {
          "id": "d900a46b-5173-4bde-b992-8f9ac00e72c6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f0fd6115-54a7-4b5d-be0d-eeb137dd409f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c549d840-f13d-4a04-b368-561813cce8ac",
        "cursor": {
          "ref": "1c862341-060d-4837-8b5b-555801ea918d",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d79d1a93-a987-463b-9089-d15b7b959fb5"
        },
        "item": {
          "id": "c549d840-f13d-4a04-b368-561813cce8ac",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "dd8dffa4-33f0-40e5-aa5e-429eb32c7446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfbb5b4-ce8e-41ee-92e7-9161c9bcc6ef",
        "cursor": {
          "ref": "336012ae-f687-4122-8990-390b8b7d86ca",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9c2f1b32-c1c9-41a2-b9e6-e903eec1cfc8"
        },
        "item": {
          "id": "9cfbb5b4-ce8e-41ee-92e7-9161c9bcc6ef",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f8f0c468-dd01-4c4b-8f16-f88778cc6130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "299f6ede-24b6-434c-88bd-ba41e813c9d2",
        "cursor": {
          "ref": "1b9dfccf-394b-4e80-a331-79f3de2463f0",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f4c61e3d-f92c-4e45-862c-df77c39a9bec"
        },
        "item": {
          "id": "299f6ede-24b6-434c-88bd-ba41e813c9d2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d3fa2098-dd50-48fa-b8db-a45caf2609ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a455268-25da-4f92-bf95-022453b71bfd",
        "cursor": {
          "ref": "e7d8ce6d-42bc-4dbd-93df-f2dc4690c045",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d2bf6b30-064a-4da5-a68c-f8ebd15245cd"
        },
        "item": {
          "id": "2a455268-25da-4f92-bf95-022453b71bfd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "70d7391b-e840-4cb7-94a6-cb0557ade4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10340502-48af-4717-a4c5-d23eb8400cd2",
        "cursor": {
          "ref": "a23ece34-4719-42d3-bed9-29ddc7e52953",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a38d0fbb-e42d-42f5-9f98-985c70e9ed8d"
        },
        "item": {
          "id": "10340502-48af-4717-a4c5-d23eb8400cd2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6a0abe1c-01e2-49ec-88dc-e1328a5e0cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279c7813-5310-4617-a387-bd8d290ef6b6",
        "cursor": {
          "ref": "8ba24ab5-db99-42eb-a813-04a4f8b91508",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "22ea082a-dfe8-485c-8338-22ee8a954c73"
        },
        "item": {
          "id": "279c7813-5310-4617-a387-bd8d290ef6b6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "283f00a2-f702-42f8-a761-7bf010ffe02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba92c10c-c494-461e-a40d-438cac86a6fb",
        "cursor": {
          "ref": "13c8af70-2c1d-4444-b5a1-aa9955be26f4",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "652a3b09-2ebe-4387-be96-94113ab4ecd5"
        },
        "item": {
          "id": "ba92c10c-c494-461e-a40d-438cac86a6fb",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "abb5e460-804f-445c-ace9-3bf156e8963f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac5c3db-fee1-4c4d-b464-7fc99319f5b7",
        "cursor": {
          "ref": "dfd9ab86-a2fc-44f3-a178-9c8c13a4d112",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "581ff2e7-b47b-4b51-8897-b4a986668f52"
        },
        "item": {
          "id": "0ac5c3db-fee1-4c4d-b464-7fc99319f5b7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "30d0bde8-9a56-4af8-ba9e-7f15a395de48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb72b133-b26a-44c2-9d69-451beba14427",
        "cursor": {
          "ref": "bb0e1fe4-7dde-4ca1-ab9d-026df3e0dfa0",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "777ff6d7-6145-44f4-a517-6313f1eb2cb6"
        },
        "item": {
          "id": "bb72b133-b26a-44c2-9d69-451beba14427",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8300b951-fed3-4e69-879c-3ec553af7dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb551ad3-0c86-4fbf-836d-3e71a22e4c72",
        "cursor": {
          "ref": "26142fb7-f5b1-4c85-84be-90af2ba90a2e",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "17abda5e-631b-4118-ba5b-2e96a636c33a"
        },
        "item": {
          "id": "bb551ad3-0c86-4fbf-836d-3e71a22e4c72",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8a0e1151-1778-4b3b-96cd-24abe36812f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f07a1b1-df97-4f05-86e3-8fe61bc256f3",
        "cursor": {
          "ref": "c6e9c8ee-c309-4ca9-94ab-df70a4d0d151",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b0df6234-d924-4278-be6a-2027fb2cd9f2"
        },
        "item": {
          "id": "1f07a1b1-df97-4f05-86e3-8fe61bc256f3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a09e5365-e8ea-454c-9456-cf83a1a67b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9cbb934-8488-4e65-8cc5-5122997c2b0b",
        "cursor": {
          "ref": "4c531b98-7017-427b-bddf-60c8909ee5ed",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3bdf585c-7d48-4d85-a373-88b568bb7fc8"
        },
        "item": {
          "id": "f9cbb934-8488-4e65-8cc5-5122997c2b0b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c3bbb3a3-25ef-4213-b2fa-753bd846ddd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f348ae-c1dd-4d0e-8368-4d4d7747eefd",
        "cursor": {
          "ref": "b5cf60a8-2e5c-4ea9-b205-dfa08cc8bfc6",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "dd73daa2-f141-48f9-ad5d-2de6ee47b8e2"
        },
        "item": {
          "id": "e0f348ae-c1dd-4d0e-8368-4d4d7747eefd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8f6530d3-b468-4d8b-b80e-ad3b599f3f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b56f14-74ea-4375-bb35-edab3a005d1e",
        "cursor": {
          "ref": "819d4833-2482-48bb-8d1e-1de92c08d131",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1393efe0-89ad-4baa-99b4-9d3b8dd305ed"
        },
        "item": {
          "id": "39b56f14-74ea-4375-bb35-edab3a005d1e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b31fbcc2-84c5-4fab-90de-6d17d2aad622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0efd368-4883-493a-ba7b-3a3199296de5",
        "cursor": {
          "ref": "c0ac87d7-cfa1-41c4-bc22-49cc333baef9",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "faf9d0ec-7483-4c28-9ae4-3c6813dbe3e3"
        },
        "item": {
          "id": "e0efd368-4883-493a-ba7b-3a3199296de5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "19dd101d-447c-4483-a743-0e49710e7c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0553a6-b389-4f63-8074-99abf8547bc8",
        "cursor": {
          "ref": "efe06450-1ab3-4fda-b37a-3ff568fe7ebb",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3d2697a4-8402-494a-8c6f-cc4fc6deb596"
        },
        "item": {
          "id": "4e0553a6-b389-4f63-8074-99abf8547bc8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9741067b-50f8-47ca-897e-902418e17fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10839153-1868-4835-a94f-63fd7e0aa0b6",
        "cursor": {
          "ref": "8eb35b7c-67ab-45ce-a21f-a65005b6379e",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3d1d3be5-c5ac-4202-92ee-891cf6cfbe9a"
        },
        "item": {
          "id": "10839153-1868-4835-a94f-63fd7e0aa0b6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5e6b48fb-57f8-470d-9b45-c04ff09470ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0ad008-285b-40c0-b714-e46f3168530c",
        "cursor": {
          "ref": "29060fb3-01f8-4b49-b33f-cd6d02528550",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "290f5460-b6cb-493c-9552-4aab201fc560"
        },
        "item": {
          "id": "de0ad008-285b-40c0-b714-e46f3168530c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "38b8d165-fac2-42ad-89a4-4a8280ae4d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224420c2-4c57-41f1-a5bd-89e5b730024f",
        "cursor": {
          "ref": "63e31a7b-60d9-4518-8581-b8f0aeedb56a",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9c0585ae-bf30-4a74-a49d-42f2191a3dd1"
        },
        "item": {
          "id": "224420c2-4c57-41f1-a5bd-89e5b730024f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "dcc3d8e3-9b88-4652-a2b0-0c132d2ad376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd11055d-733c-4cbf-80d9-ed7833abcdd9",
        "cursor": {
          "ref": "eb42fb42-cbc9-42b1-8ff7-15983b317185",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "48a7e1d1-d18e-41af-9b74-346d2128d74f"
        },
        "item": {
          "id": "bd11055d-733c-4cbf-80d9-ed7833abcdd9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d78f11bc-b2b6-4025-b1d0-e8fc8be34c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d7f757-ab31-44eb-8722-f6ec94885f01",
        "cursor": {
          "ref": "2f5fe099-8968-49bb-a641-9b7739f9b0d6",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4bbe3c3d-c0d1-4808-9be6-68c179f3111e"
        },
        "item": {
          "id": "c3d7f757-ab31-44eb-8722-f6ec94885f01",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "95e06bd6-2052-40be-9469-589909902d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774bf360-3af2-4a0f-8adf-42c90ee55cdf",
        "cursor": {
          "ref": "5edb398c-3e58-4284-88f7-63a2516791c7",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dad8a238-0f33-4f67-9a30-b11e88501c65"
        },
        "item": {
          "id": "774bf360-3af2-4a0f-8adf-42c90ee55cdf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "687b02e3-2f08-49ca-9e24-4ccb5b31dbb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1461fb5b-b031-4c44-8708-e26606d3dff3",
        "cursor": {
          "ref": "6c6f419f-bd24-47f5-9284-f643a6e6ade6",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "48d121fd-6022-49bb-bfa6-2ee1e9680a80"
        },
        "item": {
          "id": "1461fb5b-b031-4c44-8708-e26606d3dff3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "aaf15f65-dcc9-47a5-808a-ce96c79817a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb68ddd8-1b87-4b8e-86d5-6c0e9ddda238",
        "cursor": {
          "ref": "b9b8850b-1220-41bc-9bd8-4bf2be4390a3",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "269dc985-df1b-4714-bc9d-ffc1f316601e"
        },
        "item": {
          "id": "fb68ddd8-1b87-4b8e-86d5-6c0e9ddda238",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "56f196b1-2f4b-4650-93c5-af5b42e89719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68022cd4-a99f-4c41-b93d-4fa73393b4ab",
        "cursor": {
          "ref": "78190ea4-4dca-4dfb-8fd2-540e4e5621ba",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d24f93db-b69c-4a50-9b94-e7a196e6aef2"
        },
        "item": {
          "id": "68022cd4-a99f-4c41-b93d-4fa73393b4ab",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "77408033-f200-4c35-9a7a-bd391e1c172b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac4d0e7-a000-43c0-a04e-0bd6fc37061a",
        "cursor": {
          "ref": "527478af-6da4-4a76-9abb-2497cf0b928b",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "51d054a8-e4d8-47b3-b524-dcbbb89164fc"
        },
        "item": {
          "id": "6ac4d0e7-a000-43c0-a04e-0bd6fc37061a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "310727b0-3ff9-4ec8-94ae-7a58288e3f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c589ab-2afb-456d-914c-d259a50d0bb5",
        "cursor": {
          "ref": "49cf5230-f2b0-4e95-8ab4-63bc4516226d",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a42a4a5b-03de-4c93-969f-3a8af5ee18c4"
        },
        "item": {
          "id": "d0c589ab-2afb-456d-914c-d259a50d0bb5",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d4fe7d10-d961-4aea-8fae-644d3bb91af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0959d2f8-60d8-4884-b35f-ade57be64d5b",
        "cursor": {
          "ref": "f0cf93fa-624d-4e53-9940-0453b80666ee",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "10754554-9559-40bb-b180-b4df2019b212"
        },
        "item": {
          "id": "0959d2f8-60d8-4884-b35f-ade57be64d5b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c274d9b4-f7e6-4ef8-9a7b-18774978be5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587760ea-16f9-4a99-bff6-abd6ccf6912a",
        "cursor": {
          "ref": "f23f601a-dc52-4e7e-9069-653c24ff3f0a",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6c453c21-d70d-4e3b-a174-0a6ab47774e3"
        },
        "item": {
          "id": "587760ea-16f9-4a99-bff6-abd6ccf6912a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a72ecb5f-ae85-4c25-8e36-096214710207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57614d57-2c5d-4e56-8374-c3c75a64c746",
        "cursor": {
          "ref": "40e88fc7-1270-4aeb-984f-dc60e65e2620",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f086a8f5-72cc-47e7-8dc9-16edc5b110d7"
        },
        "item": {
          "id": "57614d57-2c5d-4e56-8374-c3c75a64c746",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "576b4889-898a-4343-8041-ed2f4092621e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af8b085-3aed-47e0-93d1-df015d19040d",
        "cursor": {
          "ref": "3deef8bf-1d96-43fa-807e-15059d8e4331",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3bb058e0-1508-4288-94e1-569b34a4a300"
        },
        "item": {
          "id": "5af8b085-3aed-47e0-93d1-df015d19040d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8c88cd8c-6010-40de-9ed3-a34b639400b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029154a5-00d7-4c43-a0e9-d4647ef394d0",
        "cursor": {
          "ref": "f148211d-90d6-468f-8ee5-40136952bcfa",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "cf741630-367b-49d7-b0ee-97ca90304b90"
        },
        "item": {
          "id": "029154a5-00d7-4c43-a0e9-d4647ef394d0",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a971f08f-735a-4b62-b736-235a85099fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "622eabb6-abf4-4504-90ea-7686e7e0cddc",
        "cursor": {
          "ref": "228f5f14-ebab-4d76-8298-6c54d971987d",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2d8a760c-b2f5-498d-a754-4cf276b8cc2d"
        },
        "item": {
          "id": "622eabb6-abf4-4504-90ea-7686e7e0cddc",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5770bde7-78c9-45e8-86f4-4f68fd50ea94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc416d2-f487-4d0d-b9da-1e47d6d3d0ce",
        "cursor": {
          "ref": "320c2d64-5f02-4424-a6f1-583f07d27acf",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e8631acc-465c-4e78-a605-e24289cdc91e"
        },
        "item": {
          "id": "bdc416d2-f487-4d0d-b9da-1e47d6d3d0ce",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2a6a7855-16bc-4f04-8a24-86282a734600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5193a8e9-d690-4d84-bdf8-6afc3fbe7f4b",
        "cursor": {
          "ref": "af05deb5-9a78-4cb5-bfcf-c57103e8d02b",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8a3d2c33-a8ff-441e-854b-b3124f4d3cb6"
        },
        "item": {
          "id": "5193a8e9-d690-4d84-bdf8-6afc3fbe7f4b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fda02a7c-cc6f-47d5-8e8b-7b6be313cbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6430ac-9146-4162-920d-9577646904a2",
        "cursor": {
          "ref": "a2188260-f2de-4cbc-9b43-6fef998d83f8",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "58b12a5a-c2b6-4720-b9dc-3cb56b7a052d"
        },
        "item": {
          "id": "0c6430ac-9146-4162-920d-9577646904a2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a860c8ad-41d1-46cd-8d3b-384c176667be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ae37d7-c017-4fd7-8f6a-dda02ea6e728",
        "cursor": {
          "ref": "420716c3-5d1e-49fd-93aa-7736f557114a",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "294fd6f9-2edd-4a77-bf8f-f1f2615f5a6c"
        },
        "item": {
          "id": "70ae37d7-c017-4fd7-8f6a-dda02ea6e728",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c6725725-a46d-4d7a-ad4d-74efa5ce44ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d623a9fc-b2f0-4358-b2e0-73d947f02e83",
        "cursor": {
          "ref": "5cb466b7-5aa8-4505-8de1-912146a988a8",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d8c91960-b349-4904-8d42-5ba4460d616f"
        },
        "item": {
          "id": "d623a9fc-b2f0-4358-b2e0-73d947f02e83",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "10d9e177-b678-4d34-8178-530e36ac43e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deecaa03-c4d1-4a4f-b686-af3892045463",
        "cursor": {
          "ref": "3aa96c12-6480-4dc6-b340-9d1a63f04736",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "02d54a5b-84e8-4657-9ee8-b6e11eabc809"
        },
        "item": {
          "id": "deecaa03-c4d1-4a4f-b686-af3892045463",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "62ed83fc-8f85-43ca-8879-8c411ac04a99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "4be60be1-6e2e-4cd7-9c2d-62710b580e6f",
        "cursor": {
          "ref": "bb73a2e6-77da-4e2c-8e13-af19a59f3ddb",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e373d9c7-c9de-4a4e-9360-64bff9c52296"
        },
        "item": {
          "id": "4be60be1-6e2e-4cd7-9c2d-62710b580e6f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8a305874-d6cc-4321-814f-e2e273a3f3cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08015bd1-56cd-4545-b558-f15b02f6850d",
        "cursor": {
          "ref": "d938f257-08e7-4643-8495-88ef1f078f88",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "304d1e28-79f3-4479-9d67-4f26fa0a8975"
        },
        "item": {
          "id": "08015bd1-56cd-4545-b558-f15b02f6850d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8a9fd3de-c8d5-4bc7-b682-896b479ff54e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a83cf2-2139-48e5-961b-ee92c7d44a53",
        "cursor": {
          "ref": "f82abda2-2fa8-4edb-b683-c2afb347c83c",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "973c380b-fef6-4835-941b-e17e592ccdc3"
        },
        "item": {
          "id": "07a83cf2-2139-48e5-961b-ee92c7d44a53",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "03883ccf-1c04-4e58-9771-3899bb3724c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d973d665-095c-47aa-85d3-a8c49cb42ad5",
        "cursor": {
          "ref": "86414f22-3bfc-49fc-8d05-e5e0db99762d",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d33c3b60-de6b-4ed1-933a-d94190b41fef"
        },
        "item": {
          "id": "d973d665-095c-47aa-85d3-a8c49cb42ad5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0ccbb548-73ef-41f5-944c-c9ea9ea75bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85792ade-98b6-482c-8c12-1afa332e1a7d",
        "cursor": {
          "ref": "f570c52b-96fe-45ee-a50b-56b91d5e5213",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "87e1ac42-3bf2-458e-9a4e-732fb9d18eee"
        },
        "item": {
          "id": "85792ade-98b6-482c-8c12-1afa332e1a7d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5cc204a5-cabe-4343-96f8-951cf023263e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06d61d9-9dc6-4894-80be-90916bb769c8",
        "cursor": {
          "ref": "ebb559d3-577f-4b21-8e0b-988a70647a89",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c81c82a1-42eb-4467-8e37-a7a267624368"
        },
        "item": {
          "id": "c06d61d9-9dc6-4894-80be-90916bb769c8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f352d5e1-699b-426e-b8a8-9c0c27db3e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847eb47d-1487-4e69-b342-9d7e613e8692",
        "cursor": {
          "ref": "40836e47-ac74-4739-890d-bbf9cc6c6215",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "44935623-f665-4365-a710-4e1acc13d9a8"
        },
        "item": {
          "id": "847eb47d-1487-4e69-b342-9d7e613e8692",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c1c693e5-0b5d-4bd1-a882-b9df756dd46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "840e9a3f-a75c-439a-8074-eaaefc05afd7",
        "cursor": {
          "ref": "f68d24c8-a5ac-4d63-9c17-993268a7d6d7",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d7f5d311-9bb0-41d2-810a-396332955ad3"
        },
        "item": {
          "id": "840e9a3f-a75c-439a-8074-eaaefc05afd7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6b31a419-a7b3-40e7-8eca-16ff94ee1c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5b5f6a-6cfe-4acd-b3c5-2f5afc8f4c36",
        "cursor": {
          "ref": "7a66c25e-3940-4b5f-bda1-ddf576d3eb97",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3b3e3fd4-a800-40f4-a810-21962b5f0a80"
        },
        "item": {
          "id": "2b5b5f6a-6cfe-4acd-b3c5-2f5afc8f4c36",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ee339aaa-2577-4b59-b5ee-ea5ce397f0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c711d8f7-de40-48a2-8f32-69b8784b75c8",
        "cursor": {
          "ref": "9d418cfa-5abc-4fe1-8cc6-ac64a1c4922b",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e4f6aeed-f463-4e5f-920b-8e82924969a2"
        },
        "item": {
          "id": "c711d8f7-de40-48a2-8f32-69b8784b75c8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a89a2994-0bcb-45d5-8983-1fe5c36245d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d7d7a4-f636-4c72-a36f-7c135b654c81",
        "cursor": {
          "ref": "365c30db-f14a-4754-a6d5-a3108c833d0f",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "92865bf2-1a8c-4bad-ae69-f43cb84bbc12"
        },
        "item": {
          "id": "f8d7d7a4-f636-4c72-a36f-7c135b654c81",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d770d1a4-530b-42d6-8ff6-19ed1cd12a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715cbefe-4d64-452f-9069-b356765e8f88",
        "cursor": {
          "ref": "065b6ca4-79b3-4a46-968c-e7c7f67eaca1",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6b9f8d4d-a64a-46e1-9a0a-203cb7d01d9d"
        },
        "item": {
          "id": "715cbefe-4d64-452f-9069-b356765e8f88",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2c07d02b-8236-4bf5-b768-3d2df3e23c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03379a14-bcf9-4b10-935c-6377978e55d3",
        "cursor": {
          "ref": "53ac3fa7-5a2f-451b-9928-7ecaca0c301f",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a0da1600-c6df-403b-9f50-2563d9b8806f"
        },
        "item": {
          "id": "03379a14-bcf9-4b10-935c-6377978e55d3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2bf9e330-9f65-4033-981e-6866fa71c04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb7ae7d-691d-4518-9783-e63fc0d0f19f",
        "cursor": {
          "ref": "12868d28-f525-4d9f-8efd-d2f4604b8b3d",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c7b8b5db-d69d-4a9a-bd3b-737b8282199e"
        },
        "item": {
          "id": "6fb7ae7d-691d-4518-9783-e63fc0d0f19f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "73f4ee30-ca47-404f-a74e-90edf4f847a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39aeb6de-5b80-4960-85a5-4e16159fb8a1",
        "cursor": {
          "ref": "fac74ff4-5d1f-4e60-9ad6-cca772ac9440",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b6b71ad9-c91b-46e3-a54b-64dc0c88aba0"
        },
        "item": {
          "id": "39aeb6de-5b80-4960-85a5-4e16159fb8a1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "854201cc-3617-4692-8e26-280c550063a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0090713-c52f-4ed5-bb64-e02d78c8b5f0",
        "cursor": {
          "ref": "c1a159de-ac60-4ee8-8526-565958b2805b",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b6a6a66b-9660-4940-9f74-d0ebdd8e0730"
        },
        "item": {
          "id": "c0090713-c52f-4ed5-bb64-e02d78c8b5f0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ebe863dc-5811-4876-890c-2b4fb47c9079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f195d4e5-8738-43ea-953a-abbad01a9e5e",
        "cursor": {
          "ref": "c567a06b-defc-4734-a3c4-694195dd34e1",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d96e661f-39a0-4e18-85d6-2c80a22b5ec5"
        },
        "item": {
          "id": "f195d4e5-8738-43ea-953a-abbad01a9e5e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fe66d867-d278-4ba8-8088-155c540188b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a456d5f-581c-4987-941a-8666fcb809e4",
        "cursor": {
          "ref": "ab6ce3f3-4bdf-4795-a4af-4801620d1c6e",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6a0659cf-d818-4072-b83f-f037057b5cda"
        },
        "item": {
          "id": "5a456d5f-581c-4987-941a-8666fcb809e4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f1aa4d47-c339-4bd3-baba-0a39ee1e8e8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68aaef7-ba3e-4fb9-843e-2b2da2150a58",
        "cursor": {
          "ref": "5cc1b2bc-6baf-480c-a3ca-72c429d55e84",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "72adb470-46e5-4513-a254-e08f284fd3c2"
        },
        "item": {
          "id": "e68aaef7-ba3e-4fb9-843e-2b2da2150a58",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ccd46abe-e65d-4c6b-b585-71830a9d9253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6139f9e-9092-4265-9393-fc371d848b71",
        "cursor": {
          "ref": "209e1b08-3c9a-48dd-9f1e-d88bcce17918",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b57bf497-6d62-44af-b9ef-efa509024db0"
        },
        "item": {
          "id": "e6139f9e-9092-4265-9393-fc371d848b71",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "bea4f62a-7af7-453d-922b-a8cbaa817ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736583aa-9439-4c7e-af1c-805ed11d6e01",
        "cursor": {
          "ref": "10650987-235f-476a-932c-c7ba8e0a94d0",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "327a06c1-8327-4180-9946-c86bc071232b"
        },
        "item": {
          "id": "736583aa-9439-4c7e-af1c-805ed11d6e01",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f9ea83e5-33b8-4611-9a35-ba90e75bc4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a382952-4d84-4c13-ba2d-b4af1c040367",
        "cursor": {
          "ref": "03539bda-091d-48c9-8fb6-1fa15475e864",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "296517c7-c0d9-474d-b27e-e16239d67417"
        },
        "item": {
          "id": "2a382952-4d84-4c13-ba2d-b4af1c040367",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "54a87575-ae9a-4615-a9b5-ab7f1ba4ff5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a72bdd-8dd2-4d58-a36c-ff6c970693c9",
        "cursor": {
          "ref": "2135573c-f21e-4138-8bd2-f4ec2fc34d84",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "bd49a63b-5b69-43d8-a595-d8a735c451cf"
        },
        "item": {
          "id": "82a72bdd-8dd2-4d58-a36c-ff6c970693c9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "adb7ebf2-bdaf-454d-a103-edc9d77ffdfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237d64d3-3da8-4c3d-8bc5-8aa1e8c845d5",
        "cursor": {
          "ref": "eed4a689-b0c0-4a8d-a1f4-d4a10089d3d0",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e124e685-e26e-4e15-9221-18189f239497"
        },
        "item": {
          "id": "237d64d3-3da8-4c3d-8bc5-8aa1e8c845d5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c6ea2ce4-eada-4dfa-b5f5-f9c06cb7185f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383dd162-a861-4581-b5f4-0fad16458a3f",
        "cursor": {
          "ref": "f7e853cf-dd58-4700-9100-91aae95fad92",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "31925465-c4bd-4a12-91ec-fb7788582d90"
        },
        "item": {
          "id": "383dd162-a861-4581-b5f4-0fad16458a3f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "71f4115b-f426-467c-8a72-6fe472f2aa1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a547db1d-895d-4753-86a3-101e5310bb5f",
        "cursor": {
          "ref": "e02897e2-38e6-4b39-978c-0ad459dc6f42",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "75444478-97a0-4a3a-acf5-5d2e1e12e006"
        },
        "item": {
          "id": "a547db1d-895d-4753-86a3-101e5310bb5f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4016ea50-2018-4114-937d-70bf3a127998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0709ce-40ff-4455-99d0-3d5f842bb3b2",
        "cursor": {
          "ref": "a90a8361-2137-48e9-9a39-4723ee73535d",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "20661509-bf08-4b33-b52e-52fb7e726fbd"
        },
        "item": {
          "id": "0b0709ce-40ff-4455-99d0-3d5f842bb3b2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1f8077e1-759b-4f23-9cba-6569706cc2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6762069-04d2-4e05-a6a6-2d986aa6b8ee",
        "cursor": {
          "ref": "bdbbc920-3887-4f5b-8ae7-40335618f89d",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3e70f740-93bc-4762-a7e5-f6032590937c"
        },
        "item": {
          "id": "d6762069-04d2-4e05-a6a6-2d986aa6b8ee",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "56a89e0a-136e-4d89-ac62-8911ed4de756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ed308c-d05f-4d11-b668-72afd5b7c79a",
        "cursor": {
          "ref": "fa22bbc0-dea8-4ece-8f09-5c49a5fdd019",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f865d371-77ce-4507-860d-27dcce8ad520"
        },
        "item": {
          "id": "c6ed308c-d05f-4d11-b668-72afd5b7c79a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "664e57bd-a2b7-4087-b2a5-1c781a1e6987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde26ec4-ac0c-4ac7-8e63-4b56c353d5db",
        "cursor": {
          "ref": "aced7186-606e-448a-8e09-abb540843f61",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7b5d7940-b786-4a4b-aedf-ea5095b0d61c"
        },
        "item": {
          "id": "bde26ec4-ac0c-4ac7-8e63-4b56c353d5db",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "9a93f90e-74bd-42c2-94bc-2b3850c04184",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "511f2449-65cc-4b87-a12c-46d338a8829b",
        "cursor": {
          "ref": "45485c89-db88-42fe-b484-e291d69772ec",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f203de27-050d-4d45-b806-ea1c86f590b0"
        },
        "item": {
          "id": "511f2449-65cc-4b87-a12c-46d338a8829b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "76a4d7a5-56d1-4df8-8945-75da6697ee71",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "ad9009e9-3b9a-4611-a044-70cea0c985ea",
        "cursor": {
          "ref": "6bc189d1-21f6-4267-ab85-331b657833de",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "69a262b7-2d66-4979-be8a-b18b712c7b11"
        },
        "item": {
          "id": "ad9009e9-3b9a-4611-a044-70cea0c985ea",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ebb6de82-ace4-46f9-8a32-3e12e7055f2c",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ee090b49-901d-4b65-b269-9b1db45526ac",
        "cursor": {
          "ref": "a6164620-9365-429d-95a9-706676cd0f36",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c8c52879-b990-4183-b4ad-c5b5eb116be4"
        },
        "item": {
          "id": "ee090b49-901d-4b65-b269-9b1db45526ac",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d15202f6-d9be-48d2-bee5-e51860c635b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0438c48e-f09a-48cc-b65c-719ab0c0cfc2",
        "cursor": {
          "ref": "76404f99-57a5-487b-95eb-db3a2159c48a",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "595f34c9-34d2-4567-adf3-34d332a79d69"
        },
        "item": {
          "id": "0438c48e-f09a-48cc-b65c-719ab0c0cfc2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d9f80c49-8e93-4ada-b24c-01e5a1a8a585",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "13fedd72-7d49-4d67-a330-8ea58d6243e0",
        "cursor": {
          "ref": "4bbb72c0-dd68-4b32-86ac-9a3986cb167b",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "f55de09f-a978-4d79-b900-971fea4e4054"
        },
        "item": {
          "id": "13fedd72-7d49-4d67-a330-8ea58d6243e0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "925b75dc-030b-48d9-a85a-7a88ac6b1b5b",
          "status": "OK",
          "code": 200,
          "responseTime": 928,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "2bea475a-9022-4b6b-b2ee-1e0a5abe55c5",
        "cursor": {
          "ref": "90f86ec2-2eaf-47f6-85ea-f583aee7ef5f",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "789f1313-467d-4c76-bbae-18f550f08182"
        },
        "item": {
          "id": "2bea475a-9022-4b6b-b2ee-1e0a5abe55c5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d8860d08-8b83-4e79-a220-7df02f87c156",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "cfd2e683-d803-44c2-9829-301d9e4c88e5",
        "cursor": {
          "ref": "18a3eb80-22c5-4087-be39-1ad714be37d6",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0cba43f8-b134-4490-915f-30b993470c40"
        },
        "item": {
          "id": "cfd2e683-d803-44c2-9829-301d9e4c88e5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a4bd887e-fff1-44a6-8fb0-5d3308cac9e5",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "b7fb4fb0-a390-41c4-96ae-9120d8f10fc2",
        "cursor": {
          "ref": "e4a56f1d-a542-4a4f-8945-0564c4dae7f2",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e83227e0-ba1c-4b59-a335-162cdbbf3fe4"
        },
        "item": {
          "id": "b7fb4fb0-a390-41c4-96ae-9120d8f10fc2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ec0a2b44-234d-4ac5-a866-19dc0365c2a7",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "49d645f6-4071-4ebc-b363-88f37e39004c",
        "cursor": {
          "ref": "ecfe54d4-aca4-4356-97b8-c8943b747178",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5699e3cc-bfc7-48aa-bbd6-3f18919c02ea"
        },
        "item": {
          "id": "49d645f6-4071-4ebc-b363-88f37e39004c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "90ac1874-78ec-45eb-b949-f9673641e8c2",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6c21252a-5373-4474-acbc-2bd313d25cb7",
        "cursor": {
          "ref": "217fd997-ce86-4dbf-aaaf-be69c7ede402",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d0944532-4fad-4345-b0e2-f75d1e95f85a"
        },
        "item": {
          "id": "6c21252a-5373-4474-acbc-2bd313d25cb7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f441ed74-ab17-49e4-9bdc-4854900bc13f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5108d137-b8e0-4693-99fe-91110986f6db",
        "cursor": {
          "ref": "58cab0af-c703-422e-8d28-565fb6f0296e",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "874d25ac-3d5b-4687-ba09-19aee2c1b25c"
        },
        "item": {
          "id": "5108d137-b8e0-4693-99fe-91110986f6db",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "16bb140d-50d9-4a04-b404-3ff23f5abce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4eb398e-e88d-44eb-b5de-041249862da2",
        "cursor": {
          "ref": "19801b50-c5c7-48ca-b0af-1466c2bc19e9",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b3f25739-78a6-4265-ac05-fd7264fc69be"
        },
        "item": {
          "id": "d4eb398e-e88d-44eb-b5de-041249862da2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d7de5525-adf6-4aaf-985a-bf45eccf0283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ef331c-9250-44c1-9e32-52388f82cb10",
        "cursor": {
          "ref": "d1eaf2a5-e522-4595-8178-cc55c0283541",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "481b0679-945e-404b-a1fd-6d3a133c421e"
        },
        "item": {
          "id": "53ef331c-9250-44c1-9e32-52388f82cb10",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "294c5419-848f-42e1-a710-dc7521ebe7b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae351997-c716-41d0-9efd-7236151467e1",
        "cursor": {
          "ref": "e6fea32f-9015-4269-acde-95687688140b",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ba6e47e8-9f53-4d13-a15c-f930d20ae40a"
        },
        "item": {
          "id": "ae351997-c716-41d0-9efd-7236151467e1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0eb31cf9-25d5-4420-856e-23e1cad29411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5608fa77-c1d4-441c-a7ea-e67464e33e58",
        "cursor": {
          "ref": "0dfce53e-d369-4354-b422-a70f39fdee99",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f4510676-236c-453f-a0ae-c0d07d4b9c74"
        },
        "item": {
          "id": "5608fa77-c1d4-441c-a7ea-e67464e33e58",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "71a1cbe8-9335-406a-84a3-27c2eba00e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f72630-df2a-43bc-ba69-5a5b13dd57b8",
        "cursor": {
          "ref": "fcc5ba11-b773-43d4-883e-68265c79d7db",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ca7e3b50-9454-445f-81de-c6e53d624693"
        },
        "item": {
          "id": "83f72630-df2a-43bc-ba69-5a5b13dd57b8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2a858873-3fff-4da4-bbde-2a501d13169e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba281eb1-7889-4a98-a445-ffd657d0e688",
        "cursor": {
          "ref": "1808d7e7-d7e4-4f39-abc7-d56c5784e1fd",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6f6ecf60-d96b-4f7f-b20c-a3ba9b61b3a8"
        },
        "item": {
          "id": "ba281eb1-7889-4a98-a445-ffd657d0e688",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7f60cbb7-932c-425b-b025-faf84641af57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2edba1d-a902-4b9b-be2a-ccc4c0d726c0",
        "cursor": {
          "ref": "d57782d6-b4b9-4327-8a5f-74c5c0ca64e7",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9a2eed90-aaf4-4c73-ab86-c41660f9c7a2"
        },
        "item": {
          "id": "e2edba1d-a902-4b9b-be2a-ccc4c0d726c0",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e2cd3f30-078b-4489-81e2-cacd2773aa8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697da9f5-a13c-43e7-ada6-99c3b47a8312",
        "cursor": {
          "ref": "17d05954-a129-4912-aa4e-88d1ed23d64a",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "75405d89-2827-4de1-b8c2-4f728bd29377"
        },
        "item": {
          "id": "697da9f5-a13c-43e7-ada6-99c3b47a8312",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2563e573-1104-4c71-aff1-96c3a410194e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c978ec2-49ea-47ab-a1c2-d3ed6ef04989",
        "cursor": {
          "ref": "6fc06720-befd-4677-b8b5-141a5b86690e",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "02b8e0b5-30ac-4739-8058-1bd4e2dbe478"
        },
        "item": {
          "id": "3c978ec2-49ea-47ab-a1c2-d3ed6ef04989",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "231fda06-c942-48b5-872c-e6295da9f7d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffba01f-e47e-4db8-b7fb-c10a4772491a",
        "cursor": {
          "ref": "8cc51e10-4bdc-4409-9193-57818274b261",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ccc27ec5-08fe-4fa1-aab7-a77be170cbb4"
        },
        "item": {
          "id": "9ffba01f-e47e-4db8-b7fb-c10a4772491a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "82466eb0-c601-412d-a7e8-314155b0513c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12eacea7-0a1f-4634-9389-5421ddbbf3d2",
        "cursor": {
          "ref": "e20869d2-0327-4fdf-b97f-d3a2998396cb",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "afb2b367-ffe0-421e-9291-bd3d7ba08cd3"
        },
        "item": {
          "id": "12eacea7-0a1f-4634-9389-5421ddbbf3d2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "316463ae-a419-4c0d-8ab5-aeab5402a9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb12d81b-bbb2-444f-a9db-625677dcef51",
        "cursor": {
          "ref": "eb8cdfbc-eae5-4f58-8198-78423e551ac3",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bdbb5a40-4436-45eb-8e89-7ba764942b10"
        },
        "item": {
          "id": "cb12d81b-bbb2-444f-a9db-625677dcef51",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c31ca005-97f6-4392-a283-2f7fb688f4da",
          "status": "OK",
          "code": 200,
          "responseTime": 733,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "4dc76312-4fd6-4e5d-844a-d5f636be98e0",
        "cursor": {
          "ref": "bd674c28-4112-4984-8226-a6d60eb9300b",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "06ab7cd0-8a6d-45ca-a433-1b69b1415ea3"
        },
        "item": {
          "id": "4dc76312-4fd6-4e5d-844a-d5f636be98e0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5752ed7f-bdf6-4ac5-b171-9a0565946904",
          "status": "OK",
          "code": 200,
          "responseTime": 793,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c7baea6d-c9bb-4f58-a2a6-0defd86aad8d",
        "cursor": {
          "ref": "b8fc2068-6dc9-49fe-816d-138cb7227a63",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ccc4fd81-2ab6-47e2-ba61-8766ba279c66"
        },
        "item": {
          "id": "c7baea6d-c9bb-4f58-a2a6-0defd86aad8d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2197d27c-4636-415b-aa8b-e59521c0b740",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "564e0fe8-1fa8-461e-924f-723eb44f7e89",
        "cursor": {
          "ref": "b678170d-d3c8-4ad2-89f0-e9c507e39893",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "befdab62-e010-4aec-b688-7094ccc7134e"
        },
        "item": {
          "id": "564e0fe8-1fa8-461e-924f-723eb44f7e89",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "790567dd-3196-4932-9254-e72818e31050",
          "status": "OK",
          "code": 200,
          "responseTime": 798,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "b334f3f1-16d3-4bcb-9348-795e3ad022ec",
        "cursor": {
          "ref": "116539ec-e701-46f3-b445-2988d9877bd7",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a7641ef5-37ef-482b-9fc9-74d324d86f70"
        },
        "item": {
          "id": "b334f3f1-16d3-4bcb-9348-795e3ad022ec",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2876cfbb-76bb-49bc-a8ea-ec03c825d548",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d8d17154-0719-4799-b3d1-32a078df9843",
        "cursor": {
          "ref": "431854d4-2966-4fc5-87fc-7da659984395",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "74144b73-fc0f-4824-a7ba-58dceced470e"
        },
        "item": {
          "id": "d8d17154-0719-4799-b3d1-32a078df9843",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d3ea3ca2-fa98-4a87-8a32-a9654a3f488d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5017f87b-712d-42ef-8dd5-6218cc1650ff",
        "cursor": {
          "ref": "6eb7d0e6-f5d9-46f4-aee3-db886fb2d577",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4b8bda66-aa1d-49b5-8902-17a14fee9486"
        },
        "item": {
          "id": "5017f87b-712d-42ef-8dd5-6218cc1650ff",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "cffedde5-bd86-4c50-a0e6-9bba89a089bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f943aee-8f5c-4091-b7f7-74d16e495ca1",
        "cursor": {
          "ref": "16bc9e9c-f853-46e8-905f-866c9c27b713",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "118aaeaf-670a-4200-8f62-ce26f15d094b"
        },
        "item": {
          "id": "1f943aee-8f5c-4091-b7f7-74d16e495ca1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b01e4ccc-ac16-4ce9-9ec8-d524e702a5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ffb832-da2f-44fb-96bb-cdda912df24a",
        "cursor": {
          "ref": "f3d7ad2c-2932-494b-b912-996a9ffc0ec1",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "51c60f4b-5843-4fb6-af8f-ecef87f3c811"
        },
        "item": {
          "id": "c2ffb832-da2f-44fb-96bb-cdda912df24a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4efd4a5a-2b5a-4e1a-a06f-ba55bb42efd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715cd178-20e6-47a1-b168-c70a6416442a",
        "cursor": {
          "ref": "b722b243-c4bc-492b-82c5-c9345d5c36c8",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "589b7e2d-b91d-4517-9f57-10c98af72f42"
        },
        "item": {
          "id": "715cd178-20e6-47a1-b168-c70a6416442a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4b4bf129-2661-47c8-bc9b-270939ee0b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a9e7f1-eee6-4644-a1e5-3ff128601a4c",
        "cursor": {
          "ref": "89e7be25-a4d9-4044-9a47-938984d06515",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f31be0e7-6d0e-4ebe-a672-2d9e123e8a38"
        },
        "item": {
          "id": "30a9e7f1-eee6-4644-a1e5-3ff128601a4c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7b007935-0e01-407b-90fe-bc8e95959a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45456f70-89f0-4ad1-bf27-0dcd8b976f34",
        "cursor": {
          "ref": "2cf86df4-35d5-4aff-ae73-e373d15098fd",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "877d33e7-e473-4009-9917-70e9280eb004"
        },
        "item": {
          "id": "45456f70-89f0-4ad1-bf27-0dcd8b976f34",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "238c0405-e3c3-42e6-8221-869742cdd3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f02bf6-6ca4-47c9-b114-6739015a5765",
        "cursor": {
          "ref": "08afe61b-35aa-4a19-9766-d908781b2973",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "cbb07d5b-d19e-4b22-a216-0324657d3a5b"
        },
        "item": {
          "id": "a9f02bf6-6ca4-47c9-b114-6739015a5765",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8481bfe9-97c5-4def-b447-b8527960dfc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb22139-eced-4f67-9ab5-0e5a90582611",
        "cursor": {
          "ref": "a81308e3-4a03-46a6-a73b-65f3bf6719b4",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "23b73492-2d0c-434d-b9aa-22bb9f01455e"
        },
        "item": {
          "id": "3bb22139-eced-4f67-9ab5-0e5a90582611",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "dc1dbd97-d725-4399-a895-4e1fd4d6b88f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a90f2f-eb48-454c-b248-ffef00c4554e",
        "cursor": {
          "ref": "3762f96f-77ce-4a5f-b99f-3b0b90e182c3",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "88253527-770b-4ac2-a82d-2d66761b0b85"
        },
        "item": {
          "id": "45a90f2f-eb48-454c-b248-ffef00c4554e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b1be9d16-8b10-4b78-b426-cdd937b2bb1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca766070-58ec-4489-9426-39f4e29532de",
        "cursor": {
          "ref": "69b70653-5659-4469-ac2b-10beed3ffdf4",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6e2ddf41-c348-4262-b6d1-a4eee314eb7a"
        },
        "item": {
          "id": "ca766070-58ec-4489-9426-39f4e29532de",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "75114ce0-32d0-4263-9035-7142ced8a44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 655
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b04b84-c8aa-47f7-bccc-a3a0aed1625a",
        "cursor": {
          "ref": "b2786050-de0d-4078-9691-33cac957adad",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7d80df47-3a51-4397-af74-a6b996f841da"
        },
        "item": {
          "id": "42b04b84-c8aa-47f7-bccc-a3a0aed1625a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "08c31b0a-210f-425b-93ec-f7467a6ed153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb7f670-9c3f-4485-97e9-58f6f29443d8",
        "cursor": {
          "ref": "7cf28a8d-61c9-4fe5-91ca-b637efdf8d36",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "1fcef5f7-4b28-405b-8120-d05e1a2abf0a"
        },
        "item": {
          "id": "ebb7f670-9c3f-4485-97e9-58f6f29443d8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ecb21799-a9dd-4ab9-b953-92564d828371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 599
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e60688f-46ec-4144-ae5d-3a075a49535d",
        "cursor": {
          "ref": "d535ea78-196f-401f-8c61-983ef5bea525",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "aa2bacee-0bad-4f61-ae55-f9a6951213d7"
        },
        "item": {
          "id": "0e60688f-46ec-4144-ae5d-3a075a49535d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "cf25dec1-e405-4634-8a26-a6ada4611ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07c036d-42b8-464f-9f28-c35b54f49619",
        "cursor": {
          "ref": "bc63665d-b1a6-4c4f-a69a-3ea6b55fc575",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "22c7539c-f280-4ff0-869b-d5ef1b6fb045"
        },
        "item": {
          "id": "e07c036d-42b8-464f-9f28-c35b54f49619",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ec2991f6-b01a-4121-8bd0-f182eb784632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef19ff2-458c-466f-912a-6284853ec436",
        "cursor": {
          "ref": "75ea9830-99d1-463c-95ab-73864903382b",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "c73fd05d-cbc0-4ac3-bdf1-c5e3c1bb9d7c"
        },
        "item": {
          "id": "eef19ff2-458c-466f-912a-6284853ec436",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8bb1762a-d0b7-4307-ab20-fa6ac0e5f59d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5bf492e-a3eb-4254-b4df-da22faf069b3",
        "cursor": {
          "ref": "6bc226aa-189a-4cac-9b42-903309955f90",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "38329e6c-a772-4f9f-a5db-6f29ac5cacaa"
        },
        "item": {
          "id": "d5bf492e-a3eb-4254-b4df-da22faf069b3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "565992ff-4f9f-4c3b-ace4-56e97300a863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24535f06-d5f3-4180-b119-10dd0c787f1f",
        "cursor": {
          "ref": "219c5b2f-0898-47a5-87eb-a8ac20d55669",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "04a17c22-7230-45dc-afbc-7029bcd03930"
        },
        "item": {
          "id": "24535f06-d5f3-4180-b119-10dd0c787f1f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8494bee9-6aef-488c-a81e-b924e1e786b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3fee68-1605-4890-9212-9f7976633925",
        "cursor": {
          "ref": "3b0785f0-d30d-4b67-be75-b14fe8db9923",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "8120e109-9257-487d-8ead-55058b692c1d"
        },
        "item": {
          "id": "6e3fee68-1605-4890-9212-9f7976633925",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1ffb212b-8fbf-43e8-a3c7-22c8ab35378a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbcc10a3-be05-4b7d-91c9-2c6777e9d906",
        "cursor": {
          "ref": "f796fd33-3801-4a57-896e-df82fa31081b",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f84ec3ce-fbc4-4301-9fd6-a0f24d9aab07"
        },
        "item": {
          "id": "fbcc10a3-be05-4b7d-91c9-2c6777e9d906",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "862580dd-67f2-47e1-ac45-b3620b2e7819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdadaeaa-2f28-424e-a1f2-50d88eb3a1d8",
        "cursor": {
          "ref": "66c8156b-f94d-4703-9030-ab2c47cbfdcb",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8957a3f0-c940-4cf0-a069-76f6b5d4f998"
        },
        "item": {
          "id": "cdadaeaa-2f28-424e-a1f2-50d88eb3a1d8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "dee25023-ca37-491b-a262-592ea31d934d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13007e97-4bf2-45f4-8ef0-b62ef96a8a3e",
        "cursor": {
          "ref": "fa571b24-7273-414f-8a3e-90307706d3fb",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "fd5a5e7a-3b34-4b45-b93b-a48d2ad283cf"
        },
        "item": {
          "id": "13007e97-4bf2-45f4-8ef0-b62ef96a8a3e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3df9276b-6d6b-4030-a19c-4199b0ad7733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d4eee6-8105-4e2f-95d5-84b25882b214",
        "cursor": {
          "ref": "1e93c9ed-212e-453a-b34b-2ca86e4ceb66",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7aebe4bf-e270-4ee2-a575-46dca18d3117"
        },
        "item": {
          "id": "d8d4eee6-8105-4e2f-95d5-84b25882b214",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ef7eabae-6a9d-4a96-9e58-8d67f29bfd43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914b203f-7171-407c-9b56-9528b5317fbe",
        "cursor": {
          "ref": "d38c307b-2a01-4787-a120-2e53e61ce767",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "92f9ea15-e179-4d6d-bcc7-5b27205cfbee"
        },
        "item": {
          "id": "914b203f-7171-407c-9b56-9528b5317fbe",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "47e4d90e-abc2-4dd2-99e9-7c8b7e0fdce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a28e345-d20e-4e82-9ed6-68b501ece2f5",
        "cursor": {
          "ref": "60a8466d-dad4-4796-bb56-f698954c8026",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4d9704a3-db9c-45cd-aabe-00a3c997c63c"
        },
        "item": {
          "id": "6a28e345-d20e-4e82-9ed6-68b501ece2f5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "024343f3-8f62-4248-921c-c8e6fade4ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1801ec0-fa02-4c17-9748-d13e3b4aa73e",
        "cursor": {
          "ref": "f31d9dca-37f9-46f8-831f-c967e801d380",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "415b241a-28c3-4e78-8c80-fcf559a1a5bc"
        },
        "item": {
          "id": "f1801ec0-fa02-4c17-9748-d13e3b4aa73e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b69f69b4-68a7-4926-be1e-a67084872113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375e0291-fea2-49f3-ab67-dc5af1aafcf9",
        "cursor": {
          "ref": "1bc76d36-0b93-4f97-9249-755cda2e54bf",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "6733845a-eb18-4f13-b122-2ca0bfc111de"
        },
        "item": {
          "id": "375e0291-fea2-49f3-ab67-dc5af1aafcf9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f93ab538-3dd8-4cc4-8190-2b53e856f551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12675c1f-fc3d-4c62-87a5-01e62105047f",
        "cursor": {
          "ref": "a41da779-b855-49ae-b08f-9fd6ea1c0311",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "d908bda3-f177-4f06-8a63-f8c6fa7ff612"
        },
        "item": {
          "id": "12675c1f-fc3d-4c62-87a5-01e62105047f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "31c9a875-b529-4a5f-951a-41827521820b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "442a8e1c-a4ab-44c2-ba08-42e331a2a4dd",
        "cursor": {
          "ref": "1f9fe4a4-606e-4545-b3ff-8beb6fd01f28",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "79cedc2e-5723-4472-9cbe-f8add9f6aa63"
        },
        "item": {
          "id": "442a8e1c-a4ab-44c2-ba08-42e331a2a4dd",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fb1e22d0-57f9-4ca3-aeda-8c1f360e6fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08157689-7b9f-45ab-aaec-cc3d20a54d7b",
        "cursor": {
          "ref": "926f63e3-3e15-4dda-9f73-bf066a237902",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "70a38f09-9416-4eed-ac7a-1af60a090810"
        },
        "item": {
          "id": "08157689-7b9f-45ab-aaec-cc3d20a54d7b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6b4d437d-784e-4b5f-a806-d4853a665b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a7a308-578b-4847-9f96-ffe4a3e11332",
        "cursor": {
          "ref": "1dc6db6a-2c69-49a5-a306-394cf092d796",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "40ea6435-58ea-43d0-ad0a-3fccc90f93dc"
        },
        "item": {
          "id": "69a7a308-578b-4847-9f96-ffe4a3e11332",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "70aba413-65cd-428c-a3f7-6e88322d39f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa97b5d-0fa7-42b1-9b2a-d9796f542e5a",
        "cursor": {
          "ref": "95c6ae17-2957-4d95-b8d4-179cf7636420",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "3075808a-60a7-4cb7-9331-3a54ef2bc8c1"
        },
        "item": {
          "id": "9aa97b5d-0fa7-42b1-9b2a-d9796f542e5a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ab85e8d3-3b44-4748-8794-63e01aeaa243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a6ad6f-ccf9-4153-8e85-d782ac2284b5",
        "cursor": {
          "ref": "2d795a7e-4f79-4699-8f70-b54a4532bde3",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7e313c67-f1a3-4cc4-a7d7-a49b91b42624"
        },
        "item": {
          "id": "d8a6ad6f-ccf9-4153-8e85-d782ac2284b5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e76c8aad-0226-4387-ae0d-1c1f73c0f071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb4db8a-80d3-4ea8-92d1-eed1aee0feb8",
        "cursor": {
          "ref": "79c43437-b487-459f-af06-5be59759acf3",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a76abc26-26d5-4d75-b576-4810f50c860a"
        },
        "item": {
          "id": "7bb4db8a-80d3-4ea8-92d1-eed1aee0feb8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2b53bd2c-137d-4941-8c6c-e579810988b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6353663-c274-480a-824f-2bccd9ccb004",
        "cursor": {
          "ref": "67524863-c7d7-4ead-b618-ecab3d6bef1a",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "36651a88-416b-4a2b-9b3d-090d60052a8c"
        },
        "item": {
          "id": "c6353663-c274-480a-824f-2bccd9ccb004",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d29fe5f0-0156-4590-8903-71d1c2359d17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e9eda8-3f76-4ad6-b273-ce38499356bf",
        "cursor": {
          "ref": "cabb15c5-25e1-4107-964c-cec256c33909",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "d78a43f7-f5b0-4fef-b9fc-a09a9574903c"
        },
        "item": {
          "id": "13e9eda8-3f76-4ad6-b273-ce38499356bf",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e87506e4-0645-411c-9e72-875775b4ef29",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "031c7cd8-89c3-435b-8c40-5548f1cdd9df",
        "cursor": {
          "ref": "525a2a9b-e6eb-4200-9376-051dfdc8875f",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "9f866e0f-2865-4056-9b58-bc4ca4330e00"
        },
        "item": {
          "id": "031c7cd8-89c3-435b-8c40-5548f1cdd9df",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c9d1d4e7-973e-4662-859e-88e6870cfc4c",
          "status": "OK",
          "code": 200,
          "responseTime": 886,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "581a37f8-6c7a-4f54-a0b9-5a87409a0b5f",
        "cursor": {
          "ref": "a0ec1961-1e48-4d42-aad1-e21c79d25aea",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "1fde1360-c730-4a87-bf87-22dbded09720"
        },
        "item": {
          "id": "581a37f8-6c7a-4f54-a0b9-5a87409a0b5f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1e295a2f-1a08-428f-a5b3-fc8e26f6d6ab",
          "status": "OK",
          "code": 200,
          "responseTime": 1357,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df09886-907a-42f7-a17b-6a3d77a3676c",
        "cursor": {
          "ref": "524e1487-4ac9-4634-a413-c60f69993ceb",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3decef86-af1b-458b-bab6-36c2800956a3"
        },
        "item": {
          "id": "4df09886-907a-42f7-a17b-6a3d77a3676c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f742de6f-9cfe-4e6d-ba3b-07e4df2686f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df09886-907a-42f7-a17b-6a3d77a3676c",
        "cursor": {
          "ref": "524e1487-4ac9-4634-a413-c60f69993ceb",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "3decef86-af1b-458b-bab6-36c2800956a3"
        },
        "item": {
          "id": "4df09886-907a-42f7-a17b-6a3d77a3676c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f742de6f-9cfe-4e6d-ba3b-07e4df2686f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc1ee08-fb78-4eef-90d0-10c48413123f",
        "cursor": {
          "ref": "9b00f355-1ff2-4871-9ba7-f410f2e73c95",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b1b11e8c-ed20-42c2-bec1-8bfb673146d3"
        },
        "item": {
          "id": "0fc1ee08-fb78-4eef-90d0-10c48413123f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9eb11579-ee25-4aaa-9635-3d9f9c7b2c93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d967fc-ae50-4c34-899f-6272a82595a7",
        "cursor": {
          "ref": "ead4f3cd-b1e0-4074-8f17-51d305a08145",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "63365734-aec4-470d-bbb3-a8297edc8e6e"
        },
        "item": {
          "id": "c6d967fc-ae50-4c34-899f-6272a82595a7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e62acf41-db1b-43b8-abe8-5077a65293d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}