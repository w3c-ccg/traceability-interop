{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "45ffd564-4ddb-4007-89e2-61aa70c8bad6",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b3dc9edf-e8bd-4de6-a581-146da2fb1880",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "52f27758-211a-4842-b21a-57af0848498a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "aed43ae2-66d8-4120-94f2-cdca68ef2b0d"
                }
              }
            ]
          },
          {
            "id": "4cf25555-a7c6-4101-bd20-7276b7d0498a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5236bd81-1f41-4f96-8577-b53f1bc93ee8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5205443e-d06f-40e2-b4fe-a0352dc72c27"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ace665d7-7138-4899-9a18-b7db471d4866",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "23375345-c913-42fc-9d67-1150a2761d39",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5b8226ec-2ce2-4871-a689-04fa85a9b0e3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0252dfe6-7a7a-4519-8c32-89cd5034355d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d1e24a1-f7d9-49f5-a436-3df2509472d8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f32174fd-c7c0-49b1-9a56-a85c2eaf6e10",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "da409fdd-8478-48ed-96b2-033536004683"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e93952e-1994-4ecc-aa96-945d46899b05",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0b857044-b06e-4df9-8a9b-cdf5e77cde4f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3487d4a8-9636-4ecb-b57a-ffcc3e0780f5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1ebb5a32-a5fd-4f15-9109-174aabd73906"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1362fff1-98e4-4c3a-9c9b-6f8154ac6f5f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd17a7c5-6e57-4fae-a258-3958498fb748"
            }
          }
        ]
      },
      {
        "id": "7959b7d8-42fe-4b4d-8e88-8cd10527df72",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d480d119-cd59-4a00-978b-53400889d9f2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f398a064-957d-4e9c-b92c-757e6a4e0c2d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4df6ad1e-0e88-4178-90be-f81704958951",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac776d8-0f8b-4f5f-975f-98cc287cf9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc414b3d-e5b7-4763-b093-80318ee78b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6584d253-db60-4d64-860c-2c60c1e3c477",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed2b6a4-0860-467a-bd52-16f9f2dd7275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1ebcbc2-a7b0-4762-a33c-3b26d224998f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a5ee55-768f-48d4-8aa4-d153f3f5f6a6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dae20a7-b374-435b-92d7-199bb463b108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "922c8696-2920-4a40-8723-7a3a0c25957c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "afec52bc-cf1c-4fb8-b675-0ce314f52de3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "234a3212-213c-4154-9a55-50209133a9eb",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221d109f-c1ec-4253-9111-c2ff5f0c957a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc26110c-0917-4ee5-a6b9-1791e0540144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a4265f-e9c8-4c49-9973-e4347086d5b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21a34fe-4605-4cba-87ac-b6fa5b38f478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9bb57c-b78b-4abe-8d50-ab7bcd5e9dd9",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ebb178-3d02-4b8e-a4ee-0605bcd97e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "193a5621-8b09-4764-9b89-32deaa534c81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4378874-e2b9-41e2-a845-453cf912a1a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "eae4f93b-03ef-4e9f-8cd3-1c3eb0fbb8ad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "101ccbeb-9300-481b-8c5b-c3223e3409d4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e8685620-c2aa-42ad-b6af-f2f0f79af812",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e70d6181-29ab-466c-b211-a4d6535435f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6cb7102c-ea4f-425a-8700-93a547aadb9c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfb35a35-0a2d-4b23-9d2a-ee26ee226ec2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "643876bf-ffff-4b0c-aa55-991f3764e068"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "564952b8-6a66-474e-8d14-962a8f7f1f10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "efcc0e4d-6060-4c03-8336-05a29614ddc5"
            }
          }
        ]
      },
      {
        "id": "d2fe0ebc-1f9f-4e22-aaa3-f7cde2703b9d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "04ab8784-3038-45bf-8dfb-d8036b238450",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e66060a-30f7-4b9f-82e8-3e36f47d582c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8dd340ea-b5b1-4b6b-ae8d-2ecc8eef92a6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3306068-4f5b-4ace-b7e7-f51d57b41d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c0a3702-c2de-4552-bf01-081facf7fbde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928b65ed-e489-4e05-befc-c6445f07622f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bf42059-a662-4b71-89f1-06b121be79df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b806d519-8b6b-4fcc-a024-5c045532ff06",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f717ae8-9fde-4e81-8d81-2d6af7568bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a16514b-0e99-45a3-bd86-5a301a78706d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8c3e06-4a25-45d3-ac72-15889f97946d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7c9c30e-dabf-44ca-8702-b6fdc4377176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9f93b0-189b-4000-ace5-35e811f42772",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e0a65a-4628-4e22-918e-cdc10fe57935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0010abf-3e96-42d6-aca9-f53c992c356e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bc756a-554d-4c35-b05b-30df14d2cbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a01b4bbb-28ca-4492-b1b6-380d382ed279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e61755-8994-4a67-8ba3-41bd36a8656f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "843670b5-8830-4ae1-8751-6de9533b5c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1cfb47c-3371-4bfc-ac20-3f2b5b392f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e571656-2b83-4ea4-a2ce-582bd7793cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff48fabb-7377-4cb0-96fc-a70fb7a73260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd12bb11-8fda-4b44-aab1-94f488ee7c9d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9515d4-bb3e-4631-980f-084e87448c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff5bb66b-63e1-4c7c-abd6-6505aaca5c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2736a929-e636-4054-83e2-f7d7cf514ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07cd7ad2-7136-40ad-8ee6-7f21ff8881fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e061f895-4644-444f-952f-4a530ba2d87f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7af317e-ccec-43a5-935d-51ff6ced7eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5dc37a7-1095-41c1-b1d7-d3724c19018a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1aa481-18b3-4c5a-843a-3f295304fe82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc1c2b88-c22c-480b-a390-8e7b34362c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca265d0-752b-4250-bc06-874688a6e5f0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e3b921-4b36-4709-a709-dfbe86e40ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f6db54-c493-4bd9-b484-838dfc74d3cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939bfe0a-14f5-4fd5-98c8-515207664955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6cc5a98-1851-447d-91f7-c59be2e29ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d77dd6f7-2c69-4d16-afa3-2541bb6b3107",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b712895c-73ad-45b4-b52b-85c37adf56dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30963f1e-6b40-4b17-9561-e7a389e0a92e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb99f3b-0e15-468b-b4e8-0814e822c189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51a02c2d-8af2-4299-9155-cdf3e82d0900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169aacfb-ee25-46fe-9ca3-a5d679754071",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b148a107-0917-4494-add6-a630b39491b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed968fc7-ec8f-4dca-9e09-572b1fcbf140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e50829a-d63e-4f64-b5a3-a6adab73f59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b81ad943-116f-4cf6-a278-e3954eb6e401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101dfd06-c230-4901-8d47-e5ae3a86f2e7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b01fa68-bf1d-4a6c-b84e-500ca2bbae4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c115c7e-3a03-43c1-9f27-d65e9e2b9348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b65e49c-0ed5-4e19-ae68-8bf0476ec537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87f72b70-d9cc-49ab-81f4-c71aabf4a4d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a68aa6c-72ed-41a6-91a1-9936f548122a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c919553e-308d-4e52-ad49-8adfd4fa7b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67cbde84-dac2-4666-a15f-51b4a20ada5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d0111b-5fd1-40e0-b84c-c50ff351dee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "407a45b2-2162-40ec-8871-6a58cfffca34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be591e6b-a1d2-44ee-8a94-7d2cd7cecf17",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da693c4-854b-4328-89f2-6b17f9ed81f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acecb540-a6a8-49fe-8ca9-68899ef5dfb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2910c7-ec2b-4eda-b669-4d0d2988f1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1f0395c-94b3-4e4f-9ab9-c23f3ebab5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c4cbac-a051-4fa8-8be3-2f72a1cc6fd4",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab242d5-8cea-4163-8f75-09bfb22147d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d77f4d-bfa3-4ef5-b273-ea3f4427aaab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03513a68-287e-4e71-a2d7-c2785d47a821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7006e3a5-3af2-48e3-92fe-5e2257a9028f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a52ff0-2003-49be-ac10-0fe802985596",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f671300-baa8-4746-b40e-a1c7f0f6066d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c700b2e-55dc-4311-94ab-bed6d48dad70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2073183b-e873-4265-baef-c2a48e2baa49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b2423d2-8a59-4720-9ad9-616f03526998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206be5a3-0ac9-44a3-aa4e-0f25508b02f6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3850bfe1-b249-49d2-afa5-c6291c6b9411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada3cfb5-ac48-4d86-89f3-9e00e7bcf1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957e44b5-48c6-4e5f-9cc6-6e92c269a952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8fa39ca-4aab-46c5-9871-4aea38db5460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f93b14-b460-4ee5-87bf-e7e55e07b02d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad9da5d-786b-4a09-9710-60f1c2f14cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af088948-4655-4da1-8ddb-fc6a70906c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2273c30-95de-4da1-8460-27c58aca5628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6918c138-71c3-4653-90c6-4603ecebad4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ebca04-7f4b-47f5-b803-d7cb77d2d56f",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4fdda69-73c2-423a-acb1-8193a1fd3b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bee3008-15e1-4be5-b77a-61626fa26546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05e766b6-99b7-49f4-afbc-1046fd9108a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc0e2980-7c2e-4925-a041-8c7e5d8e9a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04edf5be-aaac-4931-ac78-48c60d085afa",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853233a3-1420-4025-a8fc-0c99cc955e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f49f5541-e772-4c1c-a05a-18ac86330023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91adba5a-f6db-4a08-92e3-a158ac01be03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f56c1f09-d134-40d5-a6a7-8c2c8c209c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d5aedd-a7b7-4414-86cc-53b24785016d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552915a0-201d-4c49-83f8-ebe3748be430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440628c7-a589-4bcc-afc9-904ef429de2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508c9cda-b9eb-4cbd-bd6d-4ee4cf3e4652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5af9ae1-57cf-463b-8f14-91dac2062b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316a2f73-890d-45be-922e-645732581073",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96b3a52-a14e-4120-9c47-8f920d98b2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8cf456-2c86-470f-87a0-c5c921dad338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0acc3f7e-3c6f-4eeb-ad6c-83bbdf2dc679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "da4ee367-56d8-494b-9ba9-d3cae07383d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9ddabe-1928-4d59-b3fe-f2a0b49bc433",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ff49e7-0383-46e7-9109-5d17f9a2b7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "161eae70-b2fc-4521-bf01-59842d060074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb77cd4-4588-462c-8621-0222a120d3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff876c2b-d331-451b-b615-fd212f853818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f97624-98fe-4dda-8602-c4a63256a11d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272f0f4e-4a66-4d4d-9684-f7ef50fbfd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632bce42-263d-43d7-b898-1994b610587e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec7931a-4918-4c4f-a712-6ba58ddba97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e45623b5-83cf-4a8c-bd9e-3d7d8468f442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8952bd-4141-44ef-816c-06ff6ae38bcd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24efc4d5-f7ec-48c8-b6b6-2b9ba6ef880b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df0d90df-60fa-40eb-99bd-24a609543e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8654270-d9f3-4c32-9848-a953351328cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29979686-784e-4c51-aa62-1dff77e1d045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547a00c1-e7a1-4476-a467-2f1295be087d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf731de-5716-4fc0-abcf-3efffd6ac713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2941bd6-f52a-49b9-8adf-64a3467ae849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d05d46-0644-48b5-b972-b54e124bd207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a35c107-d18b-4314-9cc9-923b9a1ead0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be27f4ac-51cd-4570-92ec-37a9b73bcc40",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa459b5-c457-4aee-8a6d-da8487f352e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c5cf051-2692-4566-9d9a-194b5318c441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cac2668-503a-40a3-889a-8264adac6c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fce2c1c0-ed73-44bf-8415-e79cec57ea6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d8df5e-c6af-4e7b-b4a8-d98f96172ba9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2778d0db-a924-4551-b1cf-daffe171ae0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d8561d-6719-47b1-88d2-442364af87d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235ffa2a-5fcc-4dc6-9e4c-3564c0ef34e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aee9636-7d5e-408a-ab8a-e65b311d3357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0138ed45-763b-48f3-8886-fe74bade849a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "631c5b20-b045-4e87-a727-d0c9d6a0365f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26053918-63b7-434b-8dd7-6586fb5be4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6a8ace-1e56-4f0e-8922-6c06aaf9def1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7765be18-ff48-43b6-b73f-3eb3572f2da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af0ad0b-da11-4ebf-a970-850ab422aa3d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfefaf72-cee6-4da7-918c-411b0c352d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5719270c-cb37-40d8-9e3f-c9ff33a27d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "962a760b-7766-44ae-8ddc-43121ab9f901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f3a24e0-ddb8-4df1-9755-9264edec45f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5fb93a-d9a1-43e7-934f-bfdcb01c34ce",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717d001f-a072-4652-9f3b-3e9c620232d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "475da768-35e6-4077-8fc2-ca68db8b2598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dba53d3-78ef-42e5-8f20-5f940198d2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba00df0-eb01-42b1-a59b-9a3ef507624f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22790b8a-37f7-4647-87ad-ffcac703f7e0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "734fb523-b77d-44b4-891e-89b06172800e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7015604-1a79-4c0f-87c0-f2c54d939715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6279a8ec-aaa9-49b0-bf4f-89cf2fa881a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c44b56d-1944-4438-b215-e6250505a478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ee98a7-02d9-42af-ae30-c38ea5e6500e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1889501-da48-421e-83ca-5be4ad7c1167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e750ab50-6108-440a-ac59-0b611f722020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf48d516-a26a-4782-ad05-38f86191893d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f2ad61-382d-47cd-a837-cd139c789b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47990480-e59b-4352-8621-a94e65a81f61",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a838c5-2750-453b-a52e-61fda5a83b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ba71c5-5c2d-446c-89c4-e70c3aab4713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729f179c-c64e-436d-872b-46037347cdd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d2062ab-a2c2-40b0-a910-b4812c336850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb5048fd-6f97-4568-a47c-72f7239380da",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5115f26f-63b9-44d7-9c5b-8fb2087bb211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b75be4-d7cc-45fc-84c9-3e817c8f60bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37bf402-79bf-45bc-9572-8f52e2bb04a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "19f304b2-40b4-4927-8303-705a87bbd855"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08fe712-dd30-407f-b1ba-e8f6bfd63a2c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077de68c-5c4e-447a-85c1-33c35f8d818e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30886b90-c908-44a4-92f6-4d5ca7a83d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ad8392-c523-4be1-a414-b257c9672a17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf34b459-df6e-453e-b180-e22839034c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf40d2ab-c14a-4f43-b35c-dc8a79bd1944",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee7dfc0-f13f-43fd-b219-a198e38f325e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f27ba7d5-59ae-42c6-bfc1-65561aba413b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc07994-fbb8-496e-9a22-2115fcd2d61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "56e625d9-f087-47f6-9340-2dcf84050afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e77ab5-7b5a-4f05-b886-1afc061d7430",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45897f69-e6f8-42ac-9257-67b48b658010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94314ad7-bdc6-4bf9-ae62-a7088e98261f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8341b43c-92f2-479f-b696-55d21cf95256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9bfa456-0d97-4da3-bdd0-46bda0438f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9d3b8e-a443-42ed-88d5-28022f19917c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf94ff6-4be6-4956-a662-ce49cc4b98df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "841f9624-70be-4f5b-acdd-f760a9499dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de27f2f-034c-4ebd-a68a-e40cd84f5614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c913397f-9adf-4ea1-8747-b7ed4d8e7964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb4852d-e2ad-4e41-9ee3-7d462fa65f9b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42e1cf1-4858-4d9e-b234-e87a0adc25f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1cbbaab6-37d9-4593-a47d-c051d9e299ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21c0eb1-5c5a-45c3-b39d-27ad2533cf6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc7d0e7-ed75-4dc5-8701-90917507a76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf285dd-dcb0-4b1d-8f10-b326131fc0c3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "101cd4ae-86ae-495f-92e2-39048e624afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a404edd-5480-4329-a3cc-70bd68ef78ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5d7492-ad1e-4841-9332-04bbeaefd398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bb938a9-8543-4c21-9b24-dea56de6718e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c94cca-1398-4e7a-b129-5b2073b69e2c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3a736c-d6b2-427f-9c4c-52d05710e0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd22054-50ef-475e-8d5d-94ffaf5ce8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa69137d-a5ca-477f-afcc-5276df859404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "54a1969e-ff0d-43d1-8bb9-7484d935d9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f2f193-546a-4e6d-97f2-76afe84e0335",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b0d7ce-de6b-49c7-a4de-733870cca785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3442da0f-6a6f-45d7-b7ae-a2664a8a6dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756e1832-c77a-4767-8c33-20860123945f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d5218ea-855c-4483-95cd-dd154004e034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b3c895-394d-4431-8289-1476c173813d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b740cf-e306-4cab-9f5d-8f05351977a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b35f0d87-7fbb-43f3-9b58-ce7e3db2ff47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8bbd7d4-7a06-49df-b4ba-7e1c30df1510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "85f4eea7-ec83-420a-b2b0-8aeeb1c8f1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b76bf7-30cf-4ddb-8ac9-cee8c6772bba",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde47b69-078c-484a-baa9-905f83bbd4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6d2932-3c23-4feb-9ce7-f9859ec28929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2887f8bf-fdf4-4b8b-96cd-bd7bb7b3fd84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f810f59-6a62-4b4d-893d-4b84b599c8da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2221095-d810-47df-8add-828b8e3495d0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39926c0-191e-491f-9549-e90b781efda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2951990b-f740-468a-9296-065f964669d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9649f0-1779-4fbe-9a92-f0f934251f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d7b6650e-a1e6-4582-bf4b-78e128e7be01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bafe875-21e9-46f1-873d-19cb8cc71b15",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6061dfd3-c937-40b7-96a4-dc7ea77428d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63424a1a-4e44-4ea4-ad54-dcfd96be0fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb131ce-4822-4549-a49d-8e0446d537a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "91fe7fb9-0a9d-470c-9fec-c4ca572f50b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bee516-f80e-4f26-8391-5f875a4aeece",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c8e665-c118-4fb2-98f5-47d285860fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50051b69-dac9-4b71-80e2-c2723cda10b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3d1103-7b2a-44da-b92a-2d2b57cd95c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9cdf0d4-badd-4bcd-a64c-a623445a182c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8ca002-ac64-493f-8031-1b3eae391f63",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0563c54e-3906-4ff2-bee8-c4c91a544535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d975f1f7-84af-41ee-bbf5-65e27ca3dd2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f46908-9ac0-45c4-950a-a846ce1bc347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdea43a9-9064-4b53-ab6c-863ca2bf0a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9224c7db-493d-45af-9ade-0a6d01da6dc5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "153547dd-7b34-4a7b-8f70-f34c70b8614d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c7cf50-eee4-4c9d-953c-6a5addf9fab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695ffac9-7b22-4211-99cd-7ca1d2ca96f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22e43f21-e113-4896-9036-426306eba74c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d454b23-129c-4721-8696-03303ec9030e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a762d8e-26bf-4ba4-976c-f137ba02ee6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf3d208f-0ebb-4939-91a0-9870d1f706fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30b76e8-d045-4ca5-85fc-1a9861819ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58e25199-8eb6-4d0d-97e2-7c0e2fffde44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540215a9-dc4d-4cc7-93a0-28c403821297",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc94fdfa-c9b4-4111-8851-e656d5c332a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1451e07f-9e96-4f2b-b4ab-3b1a7ad489bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7086c2-ef52-4369-9a89-b9d30ab1853e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18e9bfa5-7a42-4878-9d0e-ea79a1da4a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89f9ca8-ec04-4080-a866-0e3fbad7e0c8",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6739fab8-5f50-42d2-8d93-56f19472adb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc88342-78ba-4faa-9d78-0c35db17c971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f346db-4358-483d-b488-fd71c4257dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a45dfa5-0233-451f-8180-e5de7d03787f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61df8814-5fd5-4179-871d-532c852c52f6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624bc81b-3766-4ad9-851d-13f9d06e450e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a95e9b-0607-4b10-9b58-4477f3281d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9b55dc-b5b0-4a08-9bad-04b033c1e220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e281a5ec-6f5f-4b54-9816-ad77ea102d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28306f73-bb30-468a-a898-ff2a74aa2481",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df0ea137-6b57-4091-89db-146ae758e380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e6f2e1-5db7-4da1-8de4-6366b168f31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34122df8-794b-46c5-89c7-48e8bdfbb446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed9de457-36ac-4f44-b588-afadac12b715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0676c0a4-074e-416c-9a57-384d9866a02e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cd630f-2b85-4bf4-b313-c15375509284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c27251-80f6-4d14-bc67-71a8ee4b288c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04d512e-0ac8-46bc-839a-0f2840866366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb7cdda-fcd9-499f-8098-cc9a6af944d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d93909c-0fd8-4cbd-a390-dc9c6bb19bfd",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f413d1-3fb9-49b4-ae81-05a6f1f71207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "212b112d-b260-4bda-864d-d9dfc63c7a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ba1a24-dcd0-45b8-9eab-0bf41f586e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0dbccbb-8239-4f15-abd6-163385c7989a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981d98f0-aad2-4694-a15e-adad2860b74a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "305ef8f9-c366-4c71-8caa-67b68dc69057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12838546-037d-4913-b5f2-2baf2b95440a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb891f8-24a3-4e93-8638-9b133485042d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9444249a-5fa6-4c6d-b20b-0aef198b7837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f71275-a28a-467a-80a7-82066952ba0b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8a1007-bb93-459c-ae64-27bedf7048a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aefc7f5c-b2d5-480e-b8c8-7a83562e9551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808f3468-1938-43a1-bf1a-a4219f9e908d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "164c2172-70aa-4a69-9a26-49ed16a78608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad8e4d4-6d63-473c-9e09-59d115bde2d9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ab5a58-cb50-4748-8b42-8b0fb94a60bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1105242-fd6a-49a2-928d-f88eaa35b76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ee7a41-4f57-4c86-afbe-b74f8c1c22a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "00cfb090-9022-418d-9be5-c2e64e58c9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c330d48-c46a-4944-b3ac-dfef4fa46200",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151b1621-deee-48bc-9de1-998a43726a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e45d7b69-b185-4a8e-bfd7-38556f18a1a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb46cb01-6a0d-4d5f-9fd5-efc0bd7104cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "484de11d-7560-4d41-99ce-1ec98d3e14c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1722fe25-0c9f-4b6d-aaca-9a23cdeda5f7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fad0fe0-70f9-40af-b176-cbf7d864a0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ca59c7-a4a2-4bc9-902a-e34a5736c7a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfbc60d-b812-45f3-adf7-54c3947a52a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7490985-601d-40b8-843e-5cb1ce233a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb82e0ae-4808-440a-9593-e18a6d6b49c3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e07ace-4267-4241-97e5-b6a082a92476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d0bafc-5fde-45ec-8e06-10fe5873234a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e2eb00-ffb7-4223-accb-b76110e47d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9763b30-6a3c-49f4-a925-6601a229d088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163f3a58-1159-4f49-b131-96f2f2037520",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d23c893-9073-4273-bb71-8e34f391e66f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e35e3d-fe75-483d-acdc-a6f06eeb2c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68843055-12bf-4975-83ae-74bbfc721139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5d64c8-3fde-4e05-b91b-412a40bbae10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3252e3a9-a696-4ee1-ad03-8326548d3800",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca82c2b-3140-4c05-a67a-4617e7daa4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c50c458-59c3-4ecf-b6f8-3edc3782dfbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0b76bb-9c96-4fd3-97de-223f49a59e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5155b8-8496-4004-a3c4-e5eb308b5be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bfc8276-8fb6-4bab-b3cf-4912f04568c7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e38a3a-95d2-43a2-8456-efe35fe503ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd4b616-d1f4-4c79-82cf-1e067ae41d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0de382-3932-405a-95a3-d8330641eacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd82193c-6e23-4911-b5d7-75f55492951a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b90abc-a616-4083-8f19-aa1497830e49",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8083e53a-6c5f-49d7-9882-229fcb2959a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efe0980-30ba-4dd7-915d-4dc384a86546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e1ab41-24e8-44e8-97a9-93e8dd209813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "41da1856-19ce-4a86-bf3b-0b42c9cbf83f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554e1da2-98f6-477b-a8d7-5e3c273257cc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9eb2d8-0a12-43a6-be07-d32840368487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c281b04e-244e-4e71-a63d-a41341e87b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7031e303-fecf-49ec-92b7-18ae7a16e4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8daf7ba5-f612-423a-a6df-dc74607fac84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ceccbe8-ac1c-432c-999e-ba1a46547523",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c363190-c099-4f12-bcd0-e646f975124a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6435d0c4-bba6-4807-8093-a5e44f23724a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107264dd-b5cc-4d12-819d-e90160a539aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b3cb0cb-adbd-425f-9647-333425dd37bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b578145-1efa-4b9e-904f-50cb3aceb754",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc4c579-179c-4788-a2a1-add6623f25a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba961a32-2a61-4459-b19c-4c491608f37b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc411ca-e801-488b-9dfe-3565f6e35b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "835bac27-1cb6-4fd4-aebf-f2ab5d35e506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b2320a-5777-4f10-966f-f75f7ea86fd7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c7ac5c-43e8-4b30-959c-7c4db6db7445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118390ef-1ee1-4041-82d1-947bba92e69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ddc3bb8-10c7-40f5-81df-2148e8d349b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d51d4947-a5e8-4efd-a700-94f33b754b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301b0f65-a933-45ce-b27e-af46199c7202",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9530b749-7ae2-45cf-83e0-01366fbc3ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b6a4f8-1d8c-48c1-82dd-48d22882cdb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18bb1166-4a2a-4e5e-9f68-04a0df13a5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf926ae-ee66-435d-910d-e18c561e4c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b01ffa-29f4-4d18-a924-7f40b1853a11",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2f7b1d-4cc3-49e8-8049-cd0366de2a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "097598ae-b3ba-4b18-9c1f-069503fb50b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c0e475-98bf-490f-aad0-fd7e764f6056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "da562c68-376b-4ec5-960d-f48a7c8b5eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6e27b2-91a8-4f44-be82-bfdd64a28c7b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33011da-ec66-4e7a-8d47-640fc901fdec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f27dc87-e311-425a-b543-26d097ee1a2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007bf54e-070d-4924-af5c-6abef77a9de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f91ca64-2a20-494e-b9b9-8ebae3a4ac88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff91f82-b477-4258-99e2-b12fb8c78644",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f69c96c-6312-42ca-b208-fd5bdd95dd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b88b183-f622-42cd-b98d-a2735d05dd32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c7d013-88cf-4dc5-a587-243e993c6e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1529fe-026f-46fb-8b1d-f4ff3105fbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3642ea5b-16eb-4475-8720-a9dfda7c342d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d55dac-fe19-4ea7-ab53-106f54fa2382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2720de5c-ff64-4f04-a296-b8849a1f8b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a294bfb-67b8-4b23-8e20-c7e0569dd6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0885772e-96c4-46a7-b44c-c4c0818583e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dce8aed-73df-4170-bdb2-980a627d32bd",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34b59fa-b609-4d27-b9cf-1c61d036254b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6effe04-35f7-4ff6-bcf8-acc449dbd483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f35f8f3-cc9b-47e7-8a74-dc8a1bce6a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "373983f4-e206-4f05-ab19-202347aa754c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d52417-90d4-4a24-9416-85e74e5a4794",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75d1cae-2230-4c3e-825f-763d9bdb86ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a54215ff-5d21-4956-a679-998b79c485fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f417b245-151b-4c31-bbfe-09a1e2317779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6407d939-0225-4818-90d2-5e3f7a913ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4470caf-1ef9-4628-a2f7-95358efc3ef4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe65ef7-5912-4db3-b19a-195999f6e0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c74f91-29a9-4c75-a32b-87751bad3f2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1d9628-cdd0-49dd-8abb-015808aa5397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc9be17-61fa-476d-acc9-a2fb5d189dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a93537f-e16c-477b-90b7-c826531b68f3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "326a612c-ff3e-4ab6-9c17-860e19811501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5dc83e-fc64-4e13-ad77-b25b02b9f7ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4c148a-b7f4-4ec5-ae17-6693e2780ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b02cd3d-b95d-48ff-8a28-7379f4df8712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e487e355-b621-47c9-96a2-7eae2bf8f92e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2710495a-b3ca-46dc-b61a-4d3045721c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a5306d1-4694-46af-9fc8-d8e5f2f52b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a358708-a2b2-40bc-a729-350512ac9899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bada482-853e-4ee5-8c7d-e49b8b454535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a605b9e-596c-41b1-b292-6eab9cd7af40",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1d4b6b-d57c-4b9d-991c-b8dda4e92df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e734c1-6964-4c4a-be93-b7893fd9e873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67adac62-1c2e-4eab-b54c-fa1541258f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b0b4617-3c69-4180-82f8-d8e86e5225ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0bf138-6928-410f-9830-e5ae40661b07",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9b9c95-7c81-4196-b657-bd250ae584e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6605385e-b18e-4d69-b0a6-16300b438fba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc5c8a0-1f12-4dac-b28e-d9c7702a7b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "51e6fd95-fa2a-48e8-be33-961107528662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7261f82-c35b-4cc8-a080-3c31ebd0421e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eba3e40-2238-4e26-b0ce-404638fa68e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7de0f1a-9ba7-4de3-98cc-0068e7e435bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e91bd17-582c-4502-8e33-4cc8dc6126cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5f360428-7ec1-401b-a27d-396c2847f43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed089d04-03e9-471a-a344-d9c1ff35613d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c365ccf4-8432-4dac-910f-e0d283570fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd583041-cae3-4f36-81e6-a47fdabc6439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38171a7-7e66-46c4-a808-87a44b4f78e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ecee7bf-7d78-443b-8509-1a91a30d7cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddde2f40-5e3f-428f-b6f7-09c6193ef930",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38baef4-59ce-46f5-b956-08153b647b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ea8792-a18e-4f73-a4d3-066204150324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351ba6d1-5ff8-4c11-a213-bd51c06befde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c707a2ce-34fb-43fe-a375-cf000cfcac9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e6a1c2-d460-448c-b988-7c89317f86ae",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec140ae-3fe0-4331-9c8e-0678699ec5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7787c91-4316-4000-a03b-15a094c03264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cadc649f-de79-4b22-a40d-af67549608b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d758be8-7659-44be-8bc4-251bafb4b0d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34f6420-0c55-4bf9-8a75-9d70a4a58de0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf49696-243c-4c22-a0be-a5da4556c3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c7e565-6e3d-4541-b3cc-39b2c34522b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41608ccf-8b0b-43d9-b708-a7d4801f90c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79578041-bfa4-4dd9-8013-0ceec41196a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729d07ce-4dfb-4515-93bf-ab650d789c6c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00813dae-6d43-42c9-894f-d10b8bcab6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d90fe5-fa16-455c-bc50-fe9912ae50fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b516eee9-b191-4efb-9282-cf2ab0322e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad302381-0d0d-4a99-bd23-229cedc76181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e773c4-7ece-40cc-b176-2dd10a7dda99",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "530ed0b7-5db3-4564-a859-81a859b21830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b1b980e-0317-4b22-a939-d472a2771b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0e705e-c945-488c-a653-62673fde0695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6920727-92d8-44df-8e71-d587f2008eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601718e1-8891-4729-993a-d265717dd8fd",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f856a2f-fa7c-46c6-a9da-84f105dfaef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc3dcfd-c635-4c66-a1d5-d97c4a19976f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d81d43-4eb4-46c1-94b2-6a5b87e63ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2023fb4f-e092-4c0f-81e6-9cab80ae50fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6093e2-4384-4f7a-a7d7-bc03f70c18b2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f886e407-397a-4c1c-b8e6-788e37700ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef70dd3-144a-4d25-b75f-a73410dfb254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424e4652-22e5-4f32-8d4d-d4a162147d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "96729388-31f9-4251-b66c-ff511221e01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702bcd7a-cd39-4201-a9d8-8ef4fa37e78d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca872d3-85ac-42bf-ac97-8e392e6bb35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54a78e9d-e743-48a7-8533-6001abade88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fb3add-ad78-427c-8961-a68411140071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "02a37a79-2089-4e6d-872f-1afa7c6f135a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d30dbf-c5ac-4782-8cd6-d57a82e48418",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aaacc23-03e6-4fd7-af30-9b3e97a83e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f6f05b-f349-4230-8e89-a85a1463cee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af144b9-3a8d-4fcc-bc26-e8ad894830c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea39bd43-dd4b-4beb-a7af-9a72f6353d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485c3445-3a59-413c-915c-b35b6df584ec",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33019eff-c805-4ed1-8ea8-2c1d5b7ffc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e374edb-d16a-4e68-86cc-dc558f3666d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81628cda-effa-49a2-996a-93aef14e8cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2728cc-d20f-41e8-9947-614435f3144a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2305af7b-0ab7-40ca-bc01-5dc62d6b368c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d804fe-dd74-4b41-8b9f-762471e21adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1beb0102-24e3-4f44-827f-83159b644520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1515e0-0102-47ef-a917-0fe2b75a795e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc7d6f1-ba8a-4413-88ea-7e397cb95732"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "05fd3ebf-2ad1-4961-841b-f6d78b316de9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b712abe8-663e-48c9-ac98-70a8df59e2ef",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f909f6-9cb6-4ec8-8cc2-10d97c2bb028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5ea84e7-e739-4b17-874a-724878c59a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad349599-9c7e-42cd-9dbb-fb9c9120f2c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "444403c9-2109-4414-ac2b-9ccdbd1be1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db558e8-b62d-43d3-a7da-fc6f1062c2d8",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b48d94-17ce-49d5-9ddf-731adc388270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5bbaf65-139e-4d1f-94c9-2057e7e94266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5922a73-e866-466a-a740-a214e9b9d66f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a42a65d7-f773-4a14-89cc-94abace2d504"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0d928e5-9170-42c2-9ca0-566f06eb7eb0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cff63a1-6764-4742-9918-204cfb872c44"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70fa4df3-8547-4307-bfaa-f2cb3e231943",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9216bec1-34c1-45b9-b1c1-83878214e6b8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c3feeff5-e6a8-49ce-ae3e-93a905c28428",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "10bd491c-6f4a-4ad6-970f-6953d8def252"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "af8634a7-632d-4486-9453-8859ade1fa4e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ab9261e0-2084-4dcf-ad98-278944ebfac0"
                }
              }
            ]
          },
          {
            "id": "cab1c69a-4480-4e8d-a705-8c9d414cfbc5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "77198cb3-3386-4b74-8d2f-a660af230abb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8758760-6069-44ae-8e14-432d3dc0f1e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdf2de2f-ebb5-4971-babd-de4b6d9d1d78"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14c886c3-5c7e-4047-bdfd-ff3316755ea6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "57297c45-a605-4968-81eb-816f109fa589"
                    }
                  }
                ]
              },
              {
                "id": "6044a23a-d81d-455b-9034-9f36ca9ab8f4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d84d7ac-78b8-4804-a2cc-d1ce1f6a155e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3dfb7898-572f-45df-ac79-4540c1219bea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f3f3ada-35fc-4d01-add2-7526c3003aa4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9e4b0a5b-dd36-4a04-a7f3-3d44fbcac463"
                    }
                  }
                ]
              },
              {
                "id": "a77aa8ad-7488-471d-9d37-940513933e06",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05c88f70-4d28-42b2-80e0-22120d875a81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b5f584c-35d9-42c7-b8d4-01f2d49c37f4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71875267-cb88-4d1f-8e8e-cab768327af7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "48cf6155-bdf2-45eb-b308-65b477e98d8f"
                    }
                  }
                ]
              },
              {
                "id": "60fb7f8a-ff4c-4a9a-9f8d-d366fcfb1c60",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe02645e-4988-4458-93aa-9e2df9904309",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "45426e1b-6bf3-4310-8535-84bfc0cbc031"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62f5d6aa-414f-4f8c-b5ff-c0aad94adfc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "76df4487-dc33-4a58-96fe-1a2ccbb11420"
                    }
                  }
                ]
              },
              {
                "id": "063bcc44-1b46-44ab-9b7c-d057a8b47704",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f62a4b18-ae8b-41e3-9c8c-97cbea9e45be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f7dd7c7-16e2-43c3-995c-ab01d37f2993"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c19015bb-25d4-49b9-b1d8-d00ff769a0db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f6b44cb6-034a-4d85-ab45-c29b96d40638"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "892d8b3a-b058-459e-aebc-b1ef3fe3447d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "27e8e296-56e8-4c05-a5aa-e74c530a9e2c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d596f212-575e-4153-9326-a8d893f935c8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2db8069-396c-438a-bf9f-75d5113278ef"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02163f8b-f4ee-4e71-b70c-70e3a6098d62",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b462fcad-c2bd-4888-8c80-6fa1d42811a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c3e34c5-6810-4462-a09b-8ab60f5384e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f216d1ac-479f-472c-a37f-32d84b64c483"
            }
          }
        ]
      },
      {
        "id": "32434532-ab59-49a5-9220-5a613b04a2e2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1d92824b-5afc-4469-a93f-776204ca648a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "105309f8-d3da-4a79-8132-0399475967a3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "98fdced9-b28e-493f-b608-87cc9d1ad423",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0004bf-971f-4da7-bcee-06b2c890c4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "249ba6fa-772f-4a37-818b-b042d6b225be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8d9a0e-0bac-4836-b588-931c326dab01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c599fbe4-983e-4328-95ee-21bd56ed7a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3af7775-c1f0-40b1-97ec-f052e79714c2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdae1ca-1ce2-40e3-b470-7f73e32e4df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f39ddcf0-672d-4f9d-87d8-585201fad8e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1a5d2e-1f15-486a-8fed-605eea30d2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f4f4575-d600-4802-adf2-be9c5b3f2660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bacf0def-afa0-4f77-a42e-169ecee2455e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d298c07-6dd8-43ee-8ed0-2da8962ac013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc7774f8-1a0b-4d6e-a185-6908228fb6f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4983c483-76c6-448b-beac-75ab9deb8134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87e63e12-7450-43f4-8565-72740b965908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bcd4de8-3c63-4dee-9907-14b8952dd99a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be466b29-25bb-4c0d-9bba-3833ed5765fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0eaebd4-7284-4288-be07-58142d6d8b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3dd0b0d-dd57-48cc-b165-5fa8938c252f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6abb54d3-baba-45b1-8919-53b0e1479390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3c6b9a-c360-460c-b780-3287bae2f7a7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b898101-6535-416d-8d52-406cbccba41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa5a8a2-e243-483d-a228-15ca77ddc811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a496de8-2abd-4849-87ce-571f0507a211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a789782-445b-4375-936d-f172a4e5db18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071543d7-0076-4ed6-a8ca-aa7bf1f7c4ba",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14701165-3e11-4460-8106-a9031cb5a9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146bf7b6-5a7f-44b2-b251-35b5b8814550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53a0c67-f4e4-456c-b5fb-645d4f9d1667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "89dc6dee-84c6-44c2-93d7-001b777fdb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c96a24-dffc-4382-8600-b3f37fe9dd14",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9af127e-0ade-4074-984f-2b605d804b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166a00cd-5647-457e-9568-b49fbd609a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2e107d-3fb6-4578-bdd0-8eefaa72b909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c1d558-8441-46a4-a10a-abb1cedecec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae7f75ca-0697-4bd4-b841-17d1fd896794",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08bb24d-1473-4dc2-ba71-d0fa7d664385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21221ff1-c4bd-4423-83cc-49bbe46a6858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8805183e-b03f-4ca6-a42b-e17b8581fe5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b9d9fe2-7e9f-4a61-9fee-cb206409c0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1416c981-be10-429d-a3f6-d0d007ff115a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e34ba58-aa42-42eb-b848-4311a9a0f4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d62a1a90-1279-4501-af59-903b2058b8c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a18694d-1aaa-48ed-a531-414062045f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe1fc25-49ec-4373-a726-72bfe2b51124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5bbefd-f4ca-4c4b-81b3-87ec1da32a7e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4dba0d8-dffa-4ca4-8322-a8df3ab43b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5f1356e-a89e-45ec-9a2a-00145e02dd28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc046da-5177-482a-9553-2457fb04586c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "411aa202-4c5c-4e35-b10e-5399d8ffd1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfcdf3c4-f07e-494c-83c1-0cb375b41e3f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db43ed0a-4b3f-4ce9-a7e4-c2747d087866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d76e56dd-c4b3-4fac-b0da-88ab6d40e968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2837382c-7be0-4843-9256-987bf4ea8711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1bbec650-2c89-43f5-8622-616c9c38afb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fe6d1e-9218-4a15-b79f-d06d2769dc87",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2374111b-6bc9-4e46-98a5-53538cbe351e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e514afe-0674-4906-8afa-6bd83ce41b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e14c300-6e0e-47f1-ae48-010111842387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a993d0db-27c7-497e-bec6-de16f61719cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5dc91fa-db6d-44d1-ae6a-e11f5701cb49",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee4f0c2-0fb6-424e-baf0-7fb9aa38a219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "396b5910-6c51-4adf-9b5c-59b97dd717a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54592c2e-0826-44d2-9f7a-fa88eace6f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d25f5524-0635-45bc-81f2-042733d6f5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ba08ad-4c7e-4392-b7c2-266e980800aa",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eca9baa-0d38-4549-8c8f-022f70555ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4b73578-a225-411f-8b5e-281d81c019fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3645c66-7a6d-45bb-bb4d-6831b4d8b847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "28fda388-f61c-477c-997c-e58aef358172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90dd82f6-a12c-4a4c-8a10-222ef3851484",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6e231e-b12b-4321-9353-d390c24c8459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0152a028-f684-46cd-9c63-f237205dbf37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55db9fbc-4710-4de1-8204-10e0d0369c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "53041015-c54a-497e-a2ed-cb38f2843cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c207273c-6552-4b19-bf82-c52733fbc3ea",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ccec6a-638d-41b1-b8c9-3a76923b275f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb80b033-a279-4d9c-b277-b1d0152816f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2f878e-c583-4af6-a333-18be52ab8947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "342b1cbf-d159-4428-966b-1e817cb8159e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0586637f-0023-4367-a9f1-a60f90c50cc0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93dab3e2-19a1-484e-b41e-426030e4dbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571cc480-ba50-4d28-9e40-01f8b4d73079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40348c19-215e-47c4-b830-f742c23e9076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "13a5f96d-96d8-428e-b502-80cc8a3fe4ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9400528d-6f37-4c5b-afbd-afe21d42498f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4149e5d-a1bf-49cd-88e9-fdb25a59225b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8474ed11-b2c7-4594-b2f6-3a1ab6c4c13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45bcb10-af1c-4edb-8ec3-63de8ae70117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fcb3f4b-188e-47b0-a87d-093c7df7b1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03a3ec8-a101-4c62-a92a-416072946f0b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36a6ce4-485b-4ed1-b907-9ce2e14a1b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd85735-5ba5-47c1-865d-6f0b8c482f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae4506a-89d0-41be-80ca-d9e0e4db9a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13403c68-39cf-42e3-85a1-b7c67610a69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cd4d7d-7025-4528-bddc-0323dc96233a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c20b13b-9d70-41d6-ab96-1084cbaa827c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7883adab-41c1-442c-bf07-13eb20ca15a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00c2f44-c5c7-4a1a-8492-6af14f242641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f16bc07-a0af-40e7-854c-866726e3b29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb5b38b-84c3-4111-8cef-b5d90e9b613f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c837f335-c6e0-4620-b047-0a832a643f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4fe1f8f-d325-4403-b3d5-5077e588b2f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851961bf-ba10-4f76-af7e-8c208cfdba7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "285ed5a7-3220-4b76-a7c8-e96779435496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b686a01f-37d9-4cc9-92ae-657deac3a93f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51bf8136-edb9-4f14-93a5-5cb878864cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ebcc165-851f-45f6-a74f-c23f588717e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd56f33-3fb7-45fe-9eb3-725aa5506ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "778202d0-acdd-4034-9d3b-64bf07b19e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fba9b4d-5b68-4bbc-8843-a0ed00f9135e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73929d3a-3e00-42d0-b011-f1130fb32c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea9311b9-16e8-41cb-9598-8b13191ad87f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00eb9eb5-2e16-4d77-b7b2-dbf6e58bead1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1609e99d-7384-4a7a-83e3-db591eb10382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d28dc9c-49aa-4124-ae20-eb1843f72e88",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06bc5a13-d90f-411e-aead-6b7c4087b6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2bb26e-ca3d-4758-b5f2-1b56a50eb554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5b3c22-b222-4e40-8253-635cfa94e634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4523e48-7fc7-40bd-be6e-ac7fb923cbc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0898f115-1443-496b-88df-d96be9acb67a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d369eb2c-1399-47a7-97f2-e46aebbe5d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f0da10-6b02-4e84-9afb-540d798dccaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7c531d-3d3e-4b10-a79a-12af88b5f952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89f40a8a-3767-4917-a43b-8d32237d0a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a86eee5-8dbd-4eba-9658-377804accc79",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4976dba-549f-49da-ac9d-fcbd5cb6ac57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52ec8bef-4034-4838-9ff6-8c01969f312e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d4c373-d523-4da1-b89f-35728b4aab82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "301bac18-503f-4def-bc2e-11c425357dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58eb9003-c0a0-4133-89eb-955555a80452",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2eb520-8b1a-44e4-9ea9-f816aafaae9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f43c660d-479d-4eb7-b91c-a867f719020b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef29d4ee-585e-4b9e-af0d-2c08cdc91d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5d9cd37-c45c-484a-a82f-05c02c52bb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc741f8e-939d-4552-998e-72119cada098",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19dce8c5-25b8-4eef-aa56-ccf5b8f80ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d195a520-df18-413c-a7f0-90e3dd3beefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8809b6db-e53d-43fe-ba9f-94e690f10ab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d378eea-2f81-458c-8409-e20d0e788ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dadddb76-0410-4b45-8e7c-c68dfbd2bb34",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f14e11-4986-4cc2-9eee-6062c422a8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01aa3f7a-e969-4492-be21-0b68d450d49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3d82f2-ee3d-4b1a-bc9b-df96a31160ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f36437-a8bb-443a-954c-a6bf44ba3a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5d8535-81cb-477e-b817-b361852ff769",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8664ece7-3f63-4a5f-a6ce-d2a25b01a2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e6e0d97-3967-4693-8707-a183590cbac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f2d690-a708-4f5f-8c2b-ca2357c27266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adb17efc-e7bd-4c0a-ac8c-de31487990ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cb26d9-885c-4322-a028-300fb37a13ce",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5a448e-f52d-41a0-a189-43bc1ba1cfe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb4409e2-ed0f-4632-a7ce-3d1a3429a9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87dc4c66-318c-41c1-b2ae-e612a23bb9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8464c582-2b6d-4adc-a12c-66aac3ee7c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc2010b-fff0-4136-9129-504bbbbd07cd",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "709f205f-39c0-47cc-a0a7-b94f4deb6a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "222ed19c-f08f-46ac-8568-adfa377af8fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ce38f9-7a67-4817-ac80-b4a8ef06904d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac1e16c-3a55-4b7d-ba3b-1e14cd63e2fb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f39401d4-219a-4490-bdd5-d856e01a80d4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c091a14-a782-46d0-8862-f736de0fd0ec",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88693a8c-26cd-4253-bf8a-c1a9bd1cf243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ce37f0-1ad2-4c4b-9db0-fa703b85ad30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8fceb6-57ac-4764-bc1a-9828356a6f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4913c76e-b231-411e-a4b6-4c5a182d14af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f996af38-60ab-4310-b940-ac59f1392138",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31f03ea-61d4-4708-a8c0-ea3b1c079362",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2740cc1f-2460-4e76-84c9-24fcf4ee7977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd45bc1-899f-4e54-9263-dba6860b0d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fb23e81-ef7b-41d1-a8e9-73d678731068"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a07ebc0f-aead-454c-8833-fd2c0534f359",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af207413-46eb-4926-b1c3-a8465b8426dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22eaf9b9-e06d-49a6-b2a0-b18eb10c76d2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5552fdd0-f3f2-4d85-b68b-c5e629dbfc24"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6cce5a43-f45e-45d0-bfaf-c3da930557aa",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8696c733-4692-40e6-b316-5e862affbd95"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c01ebed-0e6a-46e1-8f32-003c75fc55a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22fb4bc9-d19f-4e03-9af9-9490c30eded1"
            }
          }
        ]
      },
      {
        "id": "92b31dea-b781-4f39-9a6c-70ef304b3107",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "30b306a7-a1a6-40ec-ad2a-850d475ca061",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98562a2e-a09e-46d4-b3aa-e7443a69f227",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "44f69e49-82b2-4579-83ff-9486c905feae",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2adf180d-5941-47f8-a1b7-a17b17e5466b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a267401-6be0-4935-92c3-cba14859fda3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19064061-9345-41ee-9a2d-a2d839f7ffe4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b1e68b-e454-4db5-ad6e-d4e48e16329d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f070d7f8-bba5-4ca5-9f07-f79f65a02691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b955e27f-2d4b-42c6-98ed-38c9ebdc5e4c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a14867f-533e-4321-919a-c34af18d5f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148accf9-7670-49e4-8acc-2858f58f282c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba7583b5-0e76-4996-8ffb-5b9d84bb0527",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1af0d9-d887-434d-98e2-c1c62dc58356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced39775-9cff-418c-9ef9-350eecab0108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64ec426-6e65-4818-ad25-e213960874b7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2417f81-ce1f-4d79-81f6-8bbf176efb94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ea61cc-ecb5-43a0-a7e6-7935e9e0129b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006a8c99-ba9e-46d2-9d38-9458fc0e42d5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d932543c-6ce5-4e16-a3e6-eef25f7ec97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eca198d-0449-466e-8699-e11416458c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6048ea9e-4fc1-45d9-80d3-f16c64dfbcae",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e20ab6-6935-40b3-9741-db0969abfde0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4afcce7c-eba3-4b64-b739-9aea422e56e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "822a8dce-fc80-469e-ae64-ca4c921db68c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca22fc12-252f-48c9-878e-b73727de7284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64716ae-a96f-41be-b09b-5b54670ce583",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43aaedfa-dfab-42cd-b8ca-92131bb624ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d9b55b8-509e-45da-87f7-2b54e103023e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd297342-6434-4a31-a9be-06a93f43e1fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df475a24-c141-46f6-9419-a70ce852cba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14daa826-f103-4631-8ff9-5273f82b808d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d80d6f-6f90-44fe-8ffb-cee5d9f30101",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd97fbec-3bde-4266-a926-fce26c0d11f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2bed86-09a9-47be-b76c-36f5642c31c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4f2fce-0ca9-4a00-a25a-5ec1f1bb0605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79c05b6-b7ac-407b-b707-1af50ab6532b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74faf617-08f4-4d1c-ae47-bdc4635ccf4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce2fe25c-a21a-4e3c-8283-a9d46dc8b071"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39f1018-7eba-48db-9b44-340ef850ca4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcda3c56-9f47-4f66-b680-f438146e19a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cd507e-2351-4d29-ac14-af5f1ab79dc2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7952e8d5-d347-4142-bef0-21fde8286387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f8d8160-6052-4f85-8835-d1f1afca3f0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f674b07-00b7-45b1-b12d-0ab2698f9734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c6aabb9-3250-493b-8d49-6b366bb5cd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab37dd25-1c6e-48b3-89c2-86b3a41e3eb7",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79911928-5911-4a4e-b259-08765090b4cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e43ec5a-f78a-41f8-a51d-08e676929bfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08706690-dc6a-4a0d-9c51-b433d7c36377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0498ac-5e59-4af8-9153-3c8bdde3b283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a25ee8-821c-4847-af7e-411b0a01185f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8a6648-155d-4291-836a-e47eac8532e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b053a952-fa9d-4dc8-921b-fb6d1b9db0a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d86a729-99f4-487a-8010-b2b4c1a44da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bd459c-13c8-437a-b65d-4ce1c56e4a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a3692a-717d-4675-b710-489a6c3b03f0",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bffbce-3302-4215-9668-f7b468f760ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "280bbd94-4794-46e7-aaae-5c3d8383941a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c130a1a8-1933-43ad-98d4-65aaf857fc1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71c50d27-a359-4b93-817d-fbf7bb8f141c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361e2fc0-b688-437a-8b02-941194e3cd1a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef2475e-60cf-4a42-9f6c-025c9d12e91d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b6ad718-738e-4cb4-97b6-fc9639dd4e8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8426ecf5-805e-47f6-b6fa-9792d8eac0ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "280370bc-2a62-4a8e-a475-2fa44f658c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f83d46e-b31f-468c-b48a-c5de5c4e5534",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e643b48-ecc8-45b4-b9e6-213c261ee7c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24ef595d-d575-4fdd-8db5-640734477b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3138d3df-be4a-4694-8fdd-eeca9aea2148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02cb1697-4738-4783-afdd-2adcc06ccdb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5486c187-2daa-4313-bc3c-6f89be472544",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d48b4d-9d03-424a-8a7d-b4c02ac7b7f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4b7ffb2-3d34-4fc5-9ebc-a439c684250d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48aec762-2841-4339-913b-3755f6518a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702c9475-6150-4edd-924c-46dbc05f26d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "984e87c3-eae1-40b6-a45c-8422def8c538",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a781a9d6-ac78-43e3-8123-43b558b88d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7647a987-afbe-434b-b3e9-4df92c5b228a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bd201d-f8ca-422c-81fd-e24b122fa7e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5934ef-7482-4f06-936a-963bb1dbf22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3eb04c9-9082-44a3-939e-9d844acc8259",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5403a962-a4b1-4176-881f-9f1754df10b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c080b3-5f11-4927-a24b-05c6d2190817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8bc0b7-5bac-448e-8239-ea22a2f28767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16aefe74-7e6c-4d7f-b391-03163825a27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f65254d-2302-4b39-ae1f-505a512a2b79",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47a2d97-0e13-4de6-be6b-c5cb9884a36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a29812c-d559-4af2-9f85-b9e22ec97858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2a33cd-2914-4351-8823-e3b83d30892c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc45fa1-176f-45d9-9498-e8d3959eccb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c7ade7-48e2-42a1-85f8-439820cd2bef",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d256459a-7414-4f2f-87d7-09e72066958a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4bc0eda-44a4-4276-883a-77e1dd9348e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "499e3bb7-e3f4-4dbc-a189-b2b4cbf54949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe41467-b8fc-4283-aaeb-2c77d080cd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d55a782-4c40-4202-bf5a-2aea99b94ca9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff080e5e-ee53-4d8a-b73c-dd97b52a4597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a917b86-d51c-4009-8fda-1e5405ad0741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8f58d4-d7c4-46c5-9484-2928a390dc3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3779a05-d678-4618-a0a9-4d87af19b5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f016e1f-ddb7-43b2-bbb1-5e08c04776c7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9cb636-7397-4979-bc88-e2b25706d39a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "539160eb-fde7-4d15-8cbc-26a9f7733ae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43186780-6d32-4c79-acac-f906d3fc102f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deab022b-f456-4d54-b5d5-cb4257a91ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97d75b1-6add-49a0-93e9-6a21a89e9f9b",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe1d870-7857-4f90-a404-cbb971154daf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a63e80-c958-4742-b6aa-a6ebc0de0400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76980159-3ad4-4c43-be97-c03de033fab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d29e1c3-858e-41b3-8b63-b8bde00108fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16cec26-4d4d-4961-9fb4-7e83ed9455d2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350edefa-683c-4506-be47-3b09c0b9a212",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f2e39ed-1edd-469d-bbc7-9889b142917e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b027685d-4389-4b52-92de-c0fd06e126ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af44cee2-acf0-41d7-8685-0854e6bdda7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77268d5e-4d70-473a-b0cb-67b22f78176e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7f4d2e-441f-4d2e-8e60-7f332f3bfbbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d66bce95-3533-41c4-bed5-515d7e541153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "986f8d3a-312a-4fa1-b11f-fa5717adbc90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba9b0ebf-d8f8-44c1-a404-e024cc086d77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccef96dc-003a-4ae4-b67f-77a113b4e87f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d320b3d-fc20-4d1a-8bd6-03e0b25a0ee7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e72786e-2fd8-4954-84c1-61e530f3ddb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ab115c-7c1c-4ce8-93f8-e26ddfa44f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc8c169-e96b-4e71-b51b-ad19b544abe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b9619f-fa89-48ea-b862-35a1b6693f27",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d961c7-5703-4ac2-a498-4062bc24d005",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a75f6f6-44bb-4ffc-879f-930f85d1b08e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f695032b-e0ab-40e4-8445-33a129fb3b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "361bef8d-a151-4200-9764-c72b235b03c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a52352e-c1bd-4beb-a67e-eeafc41cf62b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a507f5de-73e8-4178-a347-98f9ad7b9807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66db08b1-2c7d-4ad2-8dda-ece814f0353c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9525e7-699f-4cec-8341-5572e827b6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3540387-4a32-44d6-815d-3c7ea29c0d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2b3234-2390-494e-babc-61d3f05ff347",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f2ff38-74b9-4e87-a119-0a5971efc029",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e8a0064-b9b8-4d1e-b7eb-65faa2e9f2ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1700d77-feeb-42e9-a53a-0226cfc93e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc8167e4-d62d-4bbf-9be1-161b2f9cb1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88dae719-e674-4324-8315-d8f5e8116fe5",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ba7f3f-15f5-4f95-a548-b5fac9343250",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "504483f2-3e79-49f8-a0a2-de1053db23ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a133b1-cc8b-44bf-a9d0-f83f32c52482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "688b1026-3ea1-4bdb-a5e7-079d8c95bf7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbae92bc-0e36-4550-be29-d2475f74b5cb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e169b3e1-7706-4a84-a3f4-896dbbf67e4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "745edc1f-e412-4685-8365-f1929599931b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "421d2ae3-3e17-48c9-8388-d792fd44ed3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee8002c7-47f2-442e-a73d-ee308218ddb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e22aed-7fc3-4730-b148-a642b44f1031",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73747fc0-c852-44f5-8a96-91657a4cdd3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e814eac-4c02-43e5-a713-e5186746489f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ec5e89-ae7e-4b7e-82a4-53529e8d42f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6939da34-ddeb-4a29-8656-835c8cae6067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628d1589-83c5-45f6-936b-3b988a1673f0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f2ac20-d133-41c8-a2af-8f182dfa1ba0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da93ea27-9548-4efb-ae69-ef44d2b81798"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05f20ab-c452-4751-b2bd-488931bddc7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee4450d-9af8-458d-98ff-f1a2a3e897e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2d66c4-869f-447a-83a0-c2c5fa20067b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211d2445-8967-4e29-97ec-39585a19c172",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92d9e6f9-aaf6-454e-a332-f0e726ee7a6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d08346-6f1c-4d61-ab5f-bac7376065be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c78bdb5-b650-49e6-b508-12d1da4ceec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0e25aa-8837-4219-9465-ea3905cbac10",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe23ed8a-765b-4487-a324-01a400c20ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a684d5f5-67d0-41f4-991b-7f66656b4a62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7818201d-7708-4020-acf3-1e4f55d0cb9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0390981-0b82-48af-9a34-e1f227183865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cace23c1-97d4-4683-8c08-0fcbf78b5d10",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c830ab-5808-412e-8742-ccca3be407a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2fbd3e-8c8b-45f6-a607-61c3a4743f03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b3a1cc-95e3-4fdc-99b6-b6f4364f283e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91b450d7-aa6c-4b73-9f32-3cea3593a861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4d45a3-db35-448b-910d-7d5c2d1ddc4e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd46e125-5545-4a78-8255-04f0303af03e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e46a0f-39a3-4174-81c0-aa12cae4fac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f88acb-f6c8-4c83-bc16-92bcbb37d30c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83cc584d-7656-41d9-ba48-952a156bbfac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e2c955-6a00-43c1-a453-caaba9e339af",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d047a8-8786-4ea2-986e-5b646dc2c1f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8523d86-d1e9-4d31-bd47-eb58ba93ae9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d04258d-1b2e-46f7-8dc2-161a0dcc9297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87d44494-a4cc-4ae1-a284-177daa7180a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0bafe7-6ed5-4b9d-9841-541504736efa",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a361bc30-cac8-48ef-ae81-bbcba067254c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb055379-1d5c-46a5-9ea1-0e2529b21abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6baeb2f1-8623-4db5-a052-55d8279a8234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7095e44f-f180-4655-a669-2e9728c55d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5129c41c-12b5-408c-b270-dc85692feb63",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce2cf7b-a1fd-4275-b1fe-8be71158922c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ff473a-7072-41f7-ac1f-8bd6e48d32f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8731cab9-f6db-4770-9e82-1c70ec5d1f67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1cffa2c-1a27-4716-861e-8e49bc9cd244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94f5bb0-6ecb-4770-989b-d34d86467e67",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ab18d5-e658-4999-a7db-7c66d33c8f3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a8dd41-99fd-4eaf-a0e8-c301b15f0fc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1a8159-3e1f-4298-b001-88e1a3f3d2f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39d46754-bbe8-4d72-b9b6-2ed71b482df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee6a1243-5de6-4947-b6e1-eba64a65950c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f653aab-1936-4e76-937e-1544b6eddd31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d283ec84-854e-4a03-9764-a1ec9919630c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4aab77b-4dd6-4856-aee7-39bbc0b7b878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c56571-0c48-4291-ab48-2df099197a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b536d3f-c4d5-4d20-9ee9-fe757552ea88",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2922ca05-4871-4639-b353-be9fe893d540",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce33e684-bff7-4f5a-99b9-fcc9b712d713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "593c1fd0-e773-4b8c-9740-f6decd9e925f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca12b759-f50e-42e8-90c2-768048a7415b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da838295-e151-4379-8814-7241bfad6535",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19c3d6b-da16-4d12-925c-c7a40ddfa130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e65229-ab0b-4ce5-b263-e79e4c866b30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40047566-ab6d-4a63-89f2-f1c28e8ab642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44bbe716-4df1-4aaf-9388-fc474bc3e349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba4c48b-050f-4918-9dc8-76862d6297f9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a2f679-aa2f-429d-985d-bc364bcdc94b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36180dc5-612f-470b-a091-3ebcafe5aae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53bdc9a-4c11-487d-bff3-fdfceb431bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e4fec61-30bf-4bb6-b05d-6a5c7afea672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d246ed-25b1-44a7-83ef-a0270019d71d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97959438-05dc-499a-b9aa-1adb559f8cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf97357-e538-4664-a2d5-4029ec7ccf62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "261b9964-6118-4730-a476-5243be7c73f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec0eb434-d16a-43a0-883f-0db41644deaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "363f88ea-4aeb-47ce-b6f8-4420c1bb250c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446a1e24-a585-479c-aa24-df5faef2d512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5de0ba2e-18dc-4cdf-9359-6068dfe1a1d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d7150d-aacf-450f-9584-25576d1ae8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59b7222-53fd-4614-971b-82d6c7efd390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8293993-f10a-4334-80a4-dc62602dd3ad",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1eeb2d3-2123-4b2a-b980-87bf105fcee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2dab43-9fc7-4011-b0f7-c714a19a453a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8f33ca-0d96-4686-a5f7-4c43278ca8bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9232625-3327-411b-aeb4-b74a74561df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5713d20f-3949-43f2-970e-1ddd2c63af98",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620b32ea-9262-45d0-b910-72cce454aacf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d4bfba-22dd-4e27-a0c1-20f155132ceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33dadd5-7d14-4665-98bb-0774201ef1dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "220f2632-379c-44e4-9566-26eaec641c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ee66cc5-823d-4554-ab0e-e76ffd11b0b4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12ca000-f683-4f2c-b8a4-d81d485a829b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ed9b0b-9b90-42bd-aeda-a50d0459280e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dabd3170-44f0-441c-a4e2-e86cc940e3e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ddc7ddf-b820-4749-9f8e-e8a583f1bd49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdcfe07-eb46-47dc-b7d6-57e82cff3d8c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e741e4-1c92-4d55-8203-41a5f3f7beeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c44505-6d8e-4677-b102-2464d9b08d63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e6d317-8673-4654-9164-d861e99545de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a8f86c-b14b-485f-8ab4-1db9e49eabbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923aed20-a71a-41dd-b770-e8eb531c02ec",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c879f2dc-f5c0-4b32-aa72-c1f73fe53751",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "222391cf-b004-4ab9-92bc-8578f2c438f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14319783-5449-4d1b-80b0-1b1bd754b319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c99df73-a4b3-4815-a62b-df07547231f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8060665c-026b-4e21-8eb2-823aaac5f31d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a262d2-34ae-41b8-ab18-9bab9ae0a995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb45903b-38b4-4ea0-bdeb-09e15eacce75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9379b583-ad0d-48b0-a5ac-9fade2b37d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2079212-6def-4b6b-b6e0-45bd1b10a5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe228322-5eb8-48a4-ac1b-f6ecccad8e58",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f039dfca-113e-4afa-8043-29bcb2c58ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10de4d8d-65ed-4849-b22c-1b948418a022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a274a9-38b1-4348-828e-308636d19768",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a48a649c-49a9-4c70-b583-29fd7e24bdad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95cd48b2-4d71-4d11-aa7a-1ede872db613",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbccf49-ec07-4c02-8ce7-6949bbd2ae85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cafb9f3d-89ed-4361-b3d9-9c67d6e3da86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65d0bdb-e94f-4996-a498-6fedd4a81ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18f4f6a-5d6a-46e1-8942-e2f93f2cf42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa60e59a-fde2-4c3b-b6fa-20a67cb0efe7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0b7dc0-d140-4761-9195-31035f7d9e1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc404f8c-b1b9-4d0e-b39c-1db83695cb6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9931e41c-2f11-46b0-ad71-287b346cbe2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2d11c5-a0bc-4245-94b7-78ed53c3c2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32919838-a7b8-4c3b-90a0-702cda7b9838",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6eb45f4-1d5a-4d72-aa10-57bb4b89214c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6f679f0-195d-42ed-a64b-3ee9cb5796d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "101f681f-a5c6-43d2-b12d-693b409be98a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f2c8fd-5a14-440e-8cd4-25ab45ed5ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e9078a-2ed2-4a2c-a752-3c301b98b6ff",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8002f8e9-d32c-4af5-9da4-7c6f78a278fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec5ee4f7-3291-4593-a5cb-1e5e9d6423ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ea8c23-75b1-499f-b072-1fd48553e456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a577701-8bda-4f22-8099-a2c7546b83bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb59a7a6-119e-4955-b755-11f681d50359",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91c1701-987b-4934-85e1-bcda3fabb1c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74672630-f94f-4f1d-968f-a090efaaaf7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cec6af4-7061-4108-9fe0-146a9638a297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f535434-e70a-4612-800b-b150d1ed2b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbeeff3-5d83-4dde-b107-090b01e781e0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad54af78-558d-41c7-ac16-dbc017be53f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908e94b5-c359-40e0-b284-db829cd751c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d997d5-11f8-484b-9992-ed21a750267c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd798b8-d86d-46f8-ab53-dbbfe33ba093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899c8610-4775-4125-8eec-784f55484aee",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6af218e-b694-4501-80ab-8c30bfc6567b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2447b701-06e0-41dc-b0d7-2eab914f32ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b80f4e-9549-474c-ad8b-7bb5e428b7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca3c383-ab9e-4d55-a2f5-9389d633a3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9487b25-0d6f-419b-9c26-11328264d451",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5ef33c-f498-48b7-9d73-93e70364c955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f750a87-5173-413c-bdb9-0b8a633ec8ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e226e4db-a0d6-4499-8687-ed7b55d5d79b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b19268-8d4d-42b5-a0d6-2fc316c2e197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948c6055-399c-4d55-93b5-5bcce6c510bb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a03612-ec2f-4477-a943-5aa2244ecd01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ff647b-520f-45bd-96ef-d722211ef8c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49606449-3569-4406-a113-773afcb7e5bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b539145-e424-40db-be01-40b216d4f094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b93135c-0b6d-4e9e-882d-c03a85397480",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f431e0-7ea4-4a1d-8cae-d37e65e01add",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5d7e3c7-b6a6-4214-8980-ce9a3cc408bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf65353-c10c-4b16-99bb-adee693bcaa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd2f58c3-9289-4ace-81d5-56e684b03a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7661113-775f-4178-aea9-806be9ac5b84",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631f7224-898b-478e-96c2-cbf2ddde981b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "477bddb0-078d-4227-938b-14e364c5ab52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8c732e-769d-4291-b643-39f078292edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6db37fc-b014-4288-873a-8fe2539ac7fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b026bd55-920f-4cd3-8296-e63a024d59de",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cfa20b-b457-40dd-8709-650da3237b3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aff5311-2ba6-4cd2-82f5-e60e1ac0a343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71ab904-b64f-4c7f-879b-01aebffc2c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e29384-c889-4a79-bd8b-78f2eec4081c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de19c4ca-0ba6-4c9b-9554-36e5e1c7c85b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77013fac-34c5-4dd8-afd9-835d77d6c88a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea8bfac2-d008-4c86-8432-8e697f0c3e18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c605d4-6388-4489-9a5e-d8f7f8669576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c615f6b-3196-4bc2-aab5-8ab18bfa54c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6527a681-1fb4-4e32-b240-03e80305d972",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670b76df-e9b0-42b2-8c61-9ebdcf6bc9ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a55e5e74-0afa-43e6-8754-3b02d38a5817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642d42f1-a2a4-42be-84ee-425690d929ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c4f0ac-5184-4be5-bf8b-388dfe7c7038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45d51a2-054d-4da2-9ef7-00c5e2c25039",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb48486-12df-41f5-8155-fcd410b11fc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2afefc16-ccee-430f-9819-d524e4fd5529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd5723b-878f-44a0-bae8-d35e7a7e781f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb2ae791-9efa-4af2-918c-b24015f6e904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc9b54b-c51b-4ac0-bbf0-e99dcd76e10f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f612da-1d86-426f-a12e-4554061d26ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ae32663-bb6d-4afd-9be0-fd9d4fdcb10b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "585d4591-2e49-44ba-b2f2-944f1c637adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70dc88c9-2f3e-43f7-8a90-458a3f915291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a368de4-2b45-44f6-91e6-e78bc3542c28",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e057f6d-f6f2-4cdc-8bb0-0f73ab7df7a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2b8cc2f-c1b0-404f-9363-f70711416308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "553263ff-6410-4b63-9d88-7694e457f417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efa325db-b2ae-4f9d-af15-0820c735266a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3ac536-4b20-4e8c-b000-1d1965ff4818",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72700da-a657-483a-b98e-89d88738f33e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7707ef3-b5bc-40fb-a619-37531c39d1f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "118ae234-da31-4836-be02-9518b0b9984a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed4e690-04c6-485b-a52f-6318d73ddec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8efa2d3-368d-487e-8c7e-8e7eee463368",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0207c5b8-b628-4a43-922a-db1759784ae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef9c52d9-32a2-485a-984d-d48a46cd2602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a8ee03-9a2f-425c-91c9-4908c5fece9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42e9073-bb02-4532-9f47-66259a90181a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c86ffb-0e17-4556-b667-dfc89821e662",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2061bb44-4ea1-4d00-923a-b2731a9f6ac4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f51454a8-12e5-498c-bbb2-11d183d6b5f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8bfdb02-de42-440e-a040-f9f22518eeea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d455ae7-a3bd-4091-8e8d-a443bbf1a4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef23534-f906-48ff-afd3-cb0555802ff2",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4397eb6a-107d-41a4-9a22-e0793cd283b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76875966-67ea-415b-9fcc-6f8cb3e5c03d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2cd994c-3ad6-4b01-b589-8780a9f68b02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ec6552-de39-4603-be21-53a526bc237a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6df54a-fa7a-4a65-9a0f-ebe78f46e5dd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91939bb6-52c9-4daf-9e5e-5c7f9f664bfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec6c6f8a-625b-47de-b057-94df6f6069b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0306049d-afd0-49ef-8f3b-2c940f613ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19efc8ab-77de-4240-bc90-6ad6424b233e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5ea067-30eb-4cf3-81de-b100e1ac0341",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e085ca58-662a-4d02-b436-43ceb1c3dfb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53071ebb-d1ce-40aa-a7c1-f51cd5562f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec3549d-2a7c-4c59-a0b2-a1baffa72154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8efc9c35-123b-4f5c-8e17-3927cfabbf92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3f97b5-a6fd-4b3d-b8ca-f8f0482abd58",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2355322-c4d2-4ec2-8dc3-01e0b45e92c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bafc21b4-e2aa-447e-b189-ce6bd99a6f75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee675e7-fa97-4ee2-94b8-94f9bc7b406f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4407e29b-53b8-4e71-8ed9-268fa9b6b430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52ab984-96f2-4d35-824e-50605ead0cf2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63403255-6ed7-4bf2-9f58-aa3322e1ff91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4400faff-6cdb-48d9-8dd1-fbd4c68f6336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5ebdea-c04f-4b2b-a213-e855afc47c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8dc85e2-9665-4991-9e2e-827038b14262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4d372f-2f4d-4ba9-a511-be1bff82ce83",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a01d072-e8aa-424a-87dc-e83d1d966d00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13fbab0a-d64a-4fde-919a-8b8f11be1926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa40b32-d532-4d6e-b297-1bab2e2e1b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63b61787-e451-4f8a-8f7d-ef852c7d74ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0840e913-d966-4fd2-8718-bdbacb73541e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946ea1e5-7d08-4584-91e3-5fb3f201c039",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a42bd6ea-517e-441d-8a1c-a106ea13420e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "496162d0-fc6d-470a-9230-4853cd0abfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a711fd6d-bedb-4c5b-b31f-f77d4f3bd764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b3491e-41b1-4bed-9d10-49a615be5e75",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb7bfd9-1852-4013-8033-9c605cc60e42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a00998f-8aef-4977-91f1-ade324172e98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf82f5f-ea26-44c5-8d2e-cfc6123d9f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a261f3-a197-4f12-8ca4-35dd7475d2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41185e1c-b893-4278-b885-915cd279b017",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f4570e8-04e6-4bd7-b20c-c8ccf3332b52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7c8157d-2444-47b3-bf65-1c69b16f489f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd35890-9c79-417f-8873-9e0feadc91e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55687bd6-ecff-43e6-8bff-da3bad87d94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da2b64e-4b3a-4c00-9723-549a41a8fc7d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988e4836-04b5-4026-8b2a-16b7fb1afe27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97617ee2-f9bb-4716-b963-ddbccbf0d5bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "085727b8-6189-49b6-985f-772178ea633d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ba26b4-2b64-48c6-91a5-e4917fb1d19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f266f15-43b2-44ef-96fb-79b5b8dcb762",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2539e48e-b709-4455-9084-72c9c7873e81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c37c9dc9-672a-43e2-9332-b02914bd3031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb6bd10-0e90-4b20-96b0-db334b69ee7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c9d329-70b5-48dc-8d00-5b59f015393b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5951eee-91eb-4ecd-866f-726137ea8d53",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276dbdf6-9568-4318-9371-a4a75a813b70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a3f9062-20c5-453f-b384-23b4d3fb6692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6b8fef-1844-4b43-befb-b6e838ae216b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94824f89-b19f-4acb-8054-0c720dba4d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1faaac9f-a715-4db6-8717-7651b03f84b3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a67602-7e7f-4cdb-943e-98c4878f6b27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3754c265-6479-4efb-b8f0-8732d2816878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f040b6-9383-4875-967b-ac7e6fd3fdc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd2dce15-d5ea-418d-9e1d-19755fb6c094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb38a60-d015-441d-b619-12234a456abc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b69154-ea9f-4f80-9411-16544a0059c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29974081-cbee-49d6-9cbf-82e79cb32679"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c468ad72-79a0-479c-8eaf-1bdcdeb111c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750a8781-b0ca-4fbc-9040-c4438eccbbc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f03b31-c9d0-4f82-b664-0586f89801e0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9fea8b5-0164-4e14-a953-07aa9b198018",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "180842c3-69c6-428e-aaaa-13aac41c297e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc283a8f-ffaf-4ba3-8971-c72ee7b173e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce274c4-cde6-4025-807e-942bb5547659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e903939c-5efb-46f4-9b69-8562ba11cb05",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41bc5b5a-6631-438b-b10f-11b2288a5a6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75516e53-2f95-4bf7-b321-dcbc11f275e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f699dba-2cc2-410a-b113-c166eeb35db0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bdc296b-b8ce-4a5d-8eda-e509e0736c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c738cb1-f9c9-4cc3-a3f6-113840438dce",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd889f4-c948-4fe5-828a-76295d5cbf54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd8a1192-261a-4123-b4f9-2633d9404c04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bcf54b-f27c-4e55-94eb-cf2c85b1c100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29adeddf-a56f-47c4-b0a5-0a3e81b155b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2fafebe-7c15-48df-a4fa-787e39ccd941",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906d53b8-4bfd-44e2-b961-5677a86709eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8910cb66-ad91-41c0-9114-9593265b00d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b420b9c8-b219-415f-8f75-d1a16ed724dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8241e178-9fac-454a-b4c4-273f41e62de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3820e67b-1b45-4090-b5a6-efe124809009",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349de227-8b28-4256-acdb-e26546d0c29e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "476af01d-a64b-4743-806d-40a5c45ca960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c33b3f-8d5a-4e3f-8553-bd844c49f2a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "180a4259-f953-47c0-8538-e623a2039d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36791631-2c2d-479f-8993-b2fcbae065d9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe8479a-7b26-4ed1-9fa0-574b750d36fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52cae935-4a19-4624-8f7f-469a4bb0522b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73394621-cc73-412e-9960-9b72d1bfae32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe35b71-9757-42ae-b771-99c49a60812d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b49aef-f29d-4db7-999b-6994e938188e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e88ba31-892b-458a-aa1a-ab64cdcd2a90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "384658d1-b690-48d3-8750-1e61300eb533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb64d8b-e2aa-414c-81e8-de96193be2de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e69ee2a-4889-4a1a-8df2-876f61dfb546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4af9c1-11db-486c-a58c-16de7b5fabfa",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cb67bb-686f-41a2-877b-4522a49efff4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "135e9c19-c9fc-4b3a-a1aa-d3a8fbbc8f57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "996fd55d-8fc5-47d3-920b-5e4be0cf356b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15efae1e-1cdc-4380-8d38-aa8a77815549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c4752b-64bc-4201-a831-fea00557f531",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e6cbb4-8641-4bc2-8f0b-1ac13cb30444",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa884d7e-73ad-4d6e-8e69-579f4792f541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1b8066-3b8f-4808-ae8b-b1a0629148f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e93655d-8ee1-44bf-a0ca-68e10d4b428b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff3d75ff-707b-410f-b4f3-45fac34fc686",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2b05adf-ee62-4d86-bfc6-7ff041540e48"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf3c853b-a496-4d05-9955-3130a874fc46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f4b1c89f-5c94-40d4-b9b5-56cd5f150724"
                    }
                  }
                ]
              },
              {
                "id": "adc95ec3-1dbb-4807-a86d-c4e4b0e6b431",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a9033a3f-d34d-4ff8-8aef-0c85b63c9280",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d72c04-4b36-4e3c-bc61-778a624cd411",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e6ae83f0-ad63-4c86-8f45-0bd6299ec128"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "877c519a-617a-4818-adc3-212d23447d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2090a849-b54f-4d98-a323-25c2d33361ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2146dd-af43-4d66-a0e1-5597148760d3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9275b7-2c9a-4ca1-a412-6a8a9ba03e18",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2ae447eb-9d74-4751-8f47-a5f7d3d2c478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80556a1-2e37-4db0-a2ae-089eb17be0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39649af9-0ede-406a-93cd-02e34148467a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5013f315-3120-4279-a775-103bc06f7670",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "31d4ff31-6812-4503-8aee-0822010d18b9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "26f87f8c-108e-4866-820c-61406add9998",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d436d04-71da-4624-9ab9-b7a33c1b08a5"
                    }
                  }
                ]
              },
              {
                "id": "5986fa10-9a6f-4e7d-955e-8114c9132168",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0acfe5b7-580b-4780-9379-83d5c07ad5ad",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41376740-d2e8-427a-b258-a7589fb4a7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "73630bf4-259b-4a2f-8108-2d03ea03eaa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df01de9-a1f4-4bd0-9aa2-fa50622b26e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573cfa0a-4075-432f-a0c6-dfea6a83d5a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "70a6598a-5425-4f57-b440-cedf00555f73",
            "name": "Positive Testing",
            "item": [
              {
                "id": "20171af3-c077-4731-b39a-87b173501176",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb1db16a-e9f8-4d88-ae0d-16be231d9959",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d3c1f82b-3f5d-40ef-b87d-b4d037c338e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a6e664c-c507-490f-9201-0b4e5edabbcd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df60783b-341a-409e-831f-c6c975f872e2"
                    }
                  }
                ]
              },
              {
                "id": "628f326c-26f6-401a-87af-79b2936387ff",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "abaf17e4-8688-4bdb-85aa-f85fb517b388",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b5d134f1-9612-4c0d-995a-f873279ca020"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "facde1bf-d0f0-4c6c-879d-bd5733edc939",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c277416-9821-486e-bc32-f08f8fadb1d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a9567c64-62c8-4beb-871f-e469fae2fd80",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4bb96c61-048f-471b-8550-cf3119197e85"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "249bef4f-41fe-4843-ab34-df94568cfe5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce05e233-f0f7-4287-b041-22c08cda37ac"
            }
          }
        ]
      },
      {
        "id": "903aca51-b231-4faf-9787-4169b457da0a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "bd9b5b78-2cff-46e9-9d4e-eb48d3eb67b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d71d0a5c-d384-4552-8f46-6160e414e7ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "499a743d-f5a8-4b2e-a989-64ca6f4a7ea3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a004661b-b398-4752-80e5-dd1939fa32e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fce8affc-21c0-42ad-b336-f53ac1a0d4ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1412bb4a-4a14-4d0f-849a-53dccb5ad714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "19b88e94-3631-4ed4-9847-a03531e541fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7294f74f-f5d1-4d40-8cb2-515db50811cb",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298d5a5d-5f16-43a8-8eb5-a2b6e310305c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f6f85c82-c984-48aa-91bf-424ae509fb74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20b6f91-182c-4465-bb6d-25282f453b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0076e36c-beba-4c95-9350-13e73c89b4ac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d450835e-80f9-418d-9dc5-82a5f6fc05f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab5dae06-c028-4c54-a449-73d0ad92bd38"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "294e7355-fab1-4be3-8b78-950a159f87df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cefa8925-7b76-4fef-ae2a-51b88eaa3128"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a60f5802-3fe6-4ec9-b1d6-e8634834c44b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "983e01be-8269-4e5d-837b-2e36d3551518"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5911dd25-7c8e-4090-8bd9-1c6263c9f5bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38beeb7a-e613-4fd2-aa18-916662295775"
            }
          }
        ]
      },
      {
        "id": "a9387bc0-6343-4e8f-abab-57825f9bedd6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "95a2bf71-3db3-4d72-9889-778c8758c8b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0226886d-4c0d-4b5f-baf7-e42843bfcaa8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fa0b300-6720-4ecc-8986-cdffa3878239",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff6ddf9-f48c-4bcf-8134-ebe263f0380c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4af8a47e-dcde-46b4-8363-3aca0f170a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0db73d0-d7b8-4fe0-9a22-4d8614e222eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88014f43-9cc1-4978-bbc0-7fea4a2bc1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130e139a-a813-4559-be9a-5a37ea34a264",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cca1b46-542e-4072-8f09-a9c22fbf97ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "de51f0ba-29cd-4710-8286-728e8cb42432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43515533-cea9-4dca-856f-0607f7a40f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0a3276a-b4b5-4c0d-b4e0-d78373cc2258"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f28824e2-2bed-47f9-94a7-1170348be708",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a97aecb6-6b38-4118-aa19-f6ee8ec3a12a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7fb1da0-4674-4a85-ba98-a34186599bc0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "035e73eb-894d-45ef-b406-e1c11cb8a62f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e68d0729-4eb3-4344-bb96-872b1626e057",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "00358ae7-ebd0-43c3-9d2c-71274b88fb10"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3c02317-9ef3-4e70-9b2c-8530ab15ba88",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1165c238-0ae3-4826-b284-745147d381c2"
            }
          }
        ]
      },
      {
        "id": "b32bab22-28f6-4da3-843b-bc93c6543b21",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b7b3b434-2512-45fb-8f54-98dbadee925f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "84443244-7066-49e3-bf78-b86ffaae4d16",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f181cefe-46f7-4bb8-b737-f57fbb813f3e",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489b48cb-cf2e-41a3-9339-08dea23a6d2b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "42eac73a-94ef-412d-9699-36270b2a54fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9429568-f648-4e0e-ae87-89e02ee58697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30e0a913-daed-4a62-b5be-1ec673cc4287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41aad2a-f332-49f5-88a4-ec621ab14110",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5e67c8-9191-4438-9c0e-4905f7f788d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0fd95685-89eb-4f0d-971d-9b713852c00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07460989-6899-4ffe-84e5-ea097591fed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5e52443-abdc-4d81-b4e6-4c49f5aa15f3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c8cce7f-af33-4379-b669-c17bf179a127",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ea3b989-3cdd-4fc9-9683-98c3df4f04ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "efe23aee-603a-4762-bd21-71edc1f35c9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "658c4595-af9f-4870-94ed-285c3558716e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a289b41a-f5e9-4a28-ad16-e0d386c95d94",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dc19c22e-fd3f-4f8b-a925-5406dff44f82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88e3380a-0802-4e64-8b2b-ebc8cbee3e91",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f093594-88a9-448b-a668-061209d0165b"
            }
          }
        ]
      },
      {
        "id": "745259ef-f217-4b85-a38f-a47bd9e85ed1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53552816-2662-4585-a8de-7e77a8f893a3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae5014ff-0536-4a0e-b549-cc8ec005d676",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5caeae57-490c-4bd9-a8db-0af2c1c69e5d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "392d0a83-3ac5-48e4-978a-4a28d1c54df2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6726dfc8-7772-4932-a612-283863294cec",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 151.92366412213747,
      "responseMin": 7,
      "responseMax": 1120,
      "responseSd": 173.5425731835993,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674175221735,
      "completed": 1674175276113
    },
    "executions": [
      {
        "id": "b3dc9edf-e8bd-4de6-a581-146da2fb1880",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6c28d3e0-8278-4499-abe9-d12dd962f29c",
          "httpRequestId": "232b57de-da48-4b49-9ac9-ccd0bd91c69e"
        },
        "item": {
          "id": "b3dc9edf-e8bd-4de6-a581-146da2fb1880",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "61e85721-4c45-423d-8066-4654c26dc588",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "4cf25555-a7c6-4101-bd20-7276b7d0498a",
        "cursor": {
          "ref": "2b294f8a-50ff-47f9-8404-6724b5de6746",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "49fdc1e1-cc2e-40d9-bea3-dcea81b8d03e"
        },
        "item": {
          "id": "4cf25555-a7c6-4101-bd20-7276b7d0498a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "527f4205-85cd-4e64-8847-85d2ee5b4bc3",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "5b8226ec-2ce2-4871-a689-04fa85a9b0e3",
        "cursor": {
          "ref": "fe54b17e-5626-497f-ad7b-ed45584df394",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cf262fc2-c34e-48bf-9a1f-e8a3ad43e940"
        },
        "item": {
          "id": "5b8226ec-2ce2-4871-a689-04fa85a9b0e3",
          "name": "did_json"
        },
        "response": {
          "id": "0db19550-48e5-403b-980d-fe6296d664d7",
          "status": "OK",
          "code": 200,
          "responseTime": 228,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df6ad1e-0e88-4178-90be-f81704958951",
        "cursor": {
          "ref": "b5ca2722-b27a-46e1-8226-34725b57b30e",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a5039bf4-dd6b-410a-b7e0-87f9b3c79726"
        },
        "item": {
          "id": "4df6ad1e-0e88-4178-90be-f81704958951",
          "name": "did:invalid"
        },
        "response": {
          "id": "cdbac866-e7ec-4e85-b8b1-bb3a24cc2695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4df6ad1e-0e88-4178-90be-f81704958951",
        "cursor": {
          "ref": "b5ca2722-b27a-46e1-8226-34725b57b30e",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a5039bf4-dd6b-410a-b7e0-87f9b3c79726"
        },
        "item": {
          "id": "4df6ad1e-0e88-4178-90be-f81704958951",
          "name": "did:invalid"
        },
        "response": {
          "id": "cdbac866-e7ec-4e85-b8b1-bb3a24cc2695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6584d253-db60-4d64-860c-2c60c1e3c477",
        "cursor": {
          "ref": "8c5a21d1-3c33-4bbe-8bb0-043e0792b025",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "aa30cc26-dee0-4f14-b644-706641756161"
        },
        "item": {
          "id": "6584d253-db60-4d64-860c-2c60c1e3c477",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "26a57b65-8186-4851-b7b6-ec2eaff2515b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 172,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a5ee55-768f-48d4-8aa4-d153f3f5f6a6",
        "cursor": {
          "ref": "ad05e61d-f654-461b-a02e-e7d24b2df4e0",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1aa72b88-089c-480a-9d39-b6c22823d578"
        },
        "item": {
          "id": "70a5ee55-768f-48d4-8aa4-d153f3f5f6a6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "959e74e0-ab09-4208-81e0-3c5ee95aabc6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 71,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234a3212-213c-4154-9a55-50209133a9eb",
        "cursor": {
          "ref": "91744c67-d306-48b9-9215-6967c4c5cb83",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fd16d43e-c1be-49d6-b5de-5e833c52923f"
        },
        "item": {
          "id": "234a3212-213c-4154-9a55-50209133a9eb",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "513c0f90-f59f-42bc-a7cf-0001fb9a659d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9bb57c-b78b-4abe-8d50-ab7bcd5e9dd9",
        "cursor": {
          "ref": "e5c42b24-6a42-4111-a01f-8498c7a501a1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f739719d-ed07-4cf6-8522-3d499948259a"
        },
        "item": {
          "id": "5e9bb57c-b78b-4abe-8d50-ab7bcd5e9dd9",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5324f35e-83a1-417b-a3ec-d96774d5d97b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 70,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9bb57c-b78b-4abe-8d50-ab7bcd5e9dd9",
        "cursor": {
          "ref": "e5c42b24-6a42-4111-a01f-8498c7a501a1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f739719d-ed07-4cf6-8522-3d499948259a"
        },
        "item": {
          "id": "5e9bb57c-b78b-4abe-8d50-ab7bcd5e9dd9",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5324f35e-83a1-417b-a3ec-d96774d5d97b",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 70,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8685620-c2aa-42ad-b6af-f2f0f79af812",
        "cursor": {
          "ref": "5fc8a742-b75d-4216-9253-45dde683a2cf",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8ba0c246-5e72-43cd-92e7-799b47ea09c0"
        },
        "item": {
          "id": "e8685620-c2aa-42ad-b6af-f2f0f79af812",
          "name": "identifiers"
        },
        "response": {
          "id": "3471cf63-cfed-4828-bdb0-1fe929fb4be9",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd340ea-b5b1-4b6b-ae8d-2ecc8eef92a6",
        "cursor": {
          "ref": "53d14423-f764-43ef-a6da-300b298109f0",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1678ceb2-766e-4ebd-99cc-b84eefed6080"
        },
        "item": {
          "id": "8dd340ea-b5b1-4b6b-ae8d-2ecc8eef92a6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6c31cd48-f4e6-408c-b150-1d2d364919c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd340ea-b5b1-4b6b-ae8d-2ecc8eef92a6",
        "cursor": {
          "ref": "53d14423-f764-43ef-a6da-300b298109f0",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1678ceb2-766e-4ebd-99cc-b84eefed6080"
        },
        "item": {
          "id": "8dd340ea-b5b1-4b6b-ae8d-2ecc8eef92a6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6c31cd48-f4e6-408c-b150-1d2d364919c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b806d519-8b6b-4fcc-a024-5c045532ff06",
        "cursor": {
          "ref": "8ba51b57-8e09-47c2-a501-200146402430",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e8b2f949-eebb-4404-9b20-22c3932a6726"
        },
        "item": {
          "id": "b806d519-8b6b-4fcc-a024-5c045532ff06",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c9caece4-41c8-4795-8f51-1396e3032a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9f93b0-189b-4000-ace5-35e811f42772",
        "cursor": {
          "ref": "4c77cc0f-c413-4fe5-95e0-925c2a025b11",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "49fe7e5c-e6b5-409c-81cb-1eff849d504c"
        },
        "item": {
          "id": "5d9f93b0-189b-4000-ace5-35e811f42772",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "e4365084-64b9-45b1-8cf0-662577deb5c0",
          "status": "Created",
          "code": 201,
          "responseTime": 730,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "a4e61755-8994-4a67-8ba3-41bd36a8656f",
        "cursor": {
          "ref": "8ab845f9-94fe-43ac-b7b6-3109a7b1a377",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "21fd3a16-b2e5-46a0-a8b6-f3f2d3b0d648"
        },
        "item": {
          "id": "a4e61755-8994-4a67-8ba3-41bd36a8656f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9a0dd30d-6e09-4cff-8dd5-e1792f8069e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd12bb11-8fda-4b44-aab1-94f488ee7c9d",
        "cursor": {
          "ref": "5c7a60e5-49ec-4cd4-b758-e274e04b784f",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "532a8f36-1a9e-4349-b36b-e3fd22ab6b2f"
        },
        "item": {
          "id": "cd12bb11-8fda-4b44-aab1-94f488ee7c9d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "42290d91-ae1e-4f3f-9066-cf55c2894029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e061f895-4644-444f-952f-4a530ba2d87f",
        "cursor": {
          "ref": "138f1cc9-f23f-4ed6-afd4-229ba9afd16c",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "282f6a99-a805-4e17-9b45-dd74f3bfe74e"
        },
        "item": {
          "id": "e061f895-4644-444f-952f-4a530ba2d87f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ab012a32-0599-4bd5-aa26-6d06044b5a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca265d0-752b-4250-bc06-874688a6e5f0",
        "cursor": {
          "ref": "f6c10eff-4453-4844-8085-ffa9c6ff8110",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "55ece478-fa7c-4bc1-a5c1-e05a4062eb61"
        },
        "item": {
          "id": "2ca265d0-752b-4250-bc06-874688a6e5f0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "6ae180a1-d8c5-4d87-8ca0-afe6f4a151b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d77dd6f7-2c69-4d16-afa3-2541bb6b3107",
        "cursor": {
          "ref": "8f8eb2a8-4940-4d89-8282-195f8c015d07",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "89a3a430-9e3d-4c5e-85ea-b4c652aa36bb"
        },
        "item": {
          "id": "d77dd6f7-2c69-4d16-afa3-2541bb6b3107",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f110fd6f-90b7-4377-88b5-34a284895b4b",
          "status": "Created",
          "code": 201,
          "responseTime": 592,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "169aacfb-ee25-46fe-9ca3-a5d679754071",
        "cursor": {
          "ref": "579be2dc-2027-48f4-a71f-ba3f1d0ac817",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "caf6b2e5-fdae-4d4b-aa5d-da25ee91fc06"
        },
        "item": {
          "id": "169aacfb-ee25-46fe-9ca3-a5d679754071",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "63392f63-b2a9-4999-8acf-8a57e750385b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101dfd06-c230-4901-8d47-e5ae3a86f2e7",
        "cursor": {
          "ref": "b71ba061-48cc-4798-91f1-d989e16ab9a7",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ca769771-7998-468a-bebd-e803ec8b58eb"
        },
        "item": {
          "id": "101dfd06-c230-4901-8d47-e5ae3a86f2e7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a5bd74c1-091e-4143-a11b-52b6d4dec0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a68aa6c-72ed-41a6-91a1-9936f548122a",
        "cursor": {
          "ref": "6338b8ea-c614-4576-b654-6eee81aa08ca",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "63ec173f-9dc0-47ae-9d4a-434a7ab697f8"
        },
        "item": {
          "id": "7a68aa6c-72ed-41a6-91a1-9936f548122a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8d3d2d0b-f0d6-469d-997b-f15a3c3dfda6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be591e6b-a1d2-44ee-8a94-7d2cd7cecf17",
        "cursor": {
          "ref": "8c2cb5e8-5949-4f88-ae70-c36dba5a27a7",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bf5e0113-0b17-4891-b3ad-96f1d2154c6a"
        },
        "item": {
          "id": "be591e6b-a1d2-44ee-8a94-7d2cd7cecf17",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2f3e560a-9af3-4c54-96d2-ac766aedc094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c4cbac-a051-4fa8-8be3-2f72a1cc6fd4",
        "cursor": {
          "ref": "14af7994-f429-4e49-afbe-ab42ed77e280",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7ee93666-c42a-4f78-9e67-f24a530292f7"
        },
        "item": {
          "id": "20c4cbac-a051-4fa8-8be3-2f72a1cc6fd4",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "71a0d244-eb80-40eb-b46c-763d29660ae9",
          "status": "Created",
          "code": 201,
          "responseTime": 620,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "01a52ff0-2003-49be-ac10-0fe802985596",
        "cursor": {
          "ref": "53161a1b-42b2-486c-a2a1-0fe2b62fc4b2",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ba4f0f14-132f-4718-b7c5-047a034aec41"
        },
        "item": {
          "id": "01a52ff0-2003-49be-ac10-0fe802985596",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "9093d0df-3d7b-4ecd-be90-a5ff0d2eb8fc",
          "status": "Created",
          "code": 201,
          "responseTime": 1120,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "206be5a3-0ac9-44a3-aa4e-0f25508b02f6",
        "cursor": {
          "ref": "147a9725-5a53-4c40-97b1-6eeabc4e731c",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8016cb96-378f-4cff-ad7f-27f78472a433"
        },
        "item": {
          "id": "206be5a3-0ac9-44a3-aa4e-0f25508b02f6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "fe2e4488-8dfc-433f-93f9-1b784589157a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f93b14-b460-4ee5-87bf-e7e55e07b02d",
        "cursor": {
          "ref": "9e7a4e5c-fcf9-4aa2-b7e9-df36d4989c59",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5ddd90a8-efd6-4b33-8ba8-b47b401dacff"
        },
        "item": {
          "id": "d1f93b14-b460-4ee5-87bf-e7e55e07b02d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7bf911c8-ddee-49b0-b8c4-f37853faabb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ebca04-7f4b-47f5-b803-d7cb77d2d56f",
        "cursor": {
          "ref": "d03b1f91-325a-4642-9529-c55b234ef6dd",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c9ab5851-edda-45c5-ab70-7e9f0cf05d20"
        },
        "item": {
          "id": "06ebca04-7f4b-47f5-b803-d7cb77d2d56f",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "23e551cd-0559-42db-8fe0-f0111885ea36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04edf5be-aaac-4931-ac78-48c60d085afa",
        "cursor": {
          "ref": "3e11dc29-13c9-47f5-8698-fdcfe5cc9ae9",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bbab0586-21e7-4695-af23-5be4a82b780a"
        },
        "item": {
          "id": "04edf5be-aaac-4931-ac78-48c60d085afa",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "5095b095-4469-4712-8bc2-c347ccd930b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d5aedd-a7b7-4414-86cc-53b24785016d",
        "cursor": {
          "ref": "d98cea02-2a9f-470c-b31c-ceb5217afcd9",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0a5761ad-e58a-453e-b247-f4ca838b8490"
        },
        "item": {
          "id": "80d5aedd-a7b7-4414-86cc-53b24785016d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "fc61cbc5-9134-440f-b230-2c0c565eb034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316a2f73-890d-45be-922e-645732581073",
        "cursor": {
          "ref": "13624dd2-60ae-4b18-a5a4-a8ecc86dc9d5",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "13962e16-abea-42fb-add0-8c9dfefcb32f"
        },
        "item": {
          "id": "316a2f73-890d-45be-922e-645732581073",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ec29420e-c7bf-484a-88f2-745b5dd31a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9ddabe-1928-4d59-b3fe-f2a0b49bc433",
        "cursor": {
          "ref": "09f39da6-70e0-402c-ba14-ea9653f80d41",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "73540442-f175-49c9-9d11-b3a83a5b98f6"
        },
        "item": {
          "id": "1e9ddabe-1928-4d59-b3fe-f2a0b49bc433",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fff5902d-2f73-4ff5-97be-52b8afae7940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f97624-98fe-4dda-8602-c4a63256a11d",
        "cursor": {
          "ref": "51e5c1a2-8120-48e7-af12-aeea17bc1ba4",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0516afa4-fd18-48b8-b2da-d908f581ca0f"
        },
        "item": {
          "id": "52f97624-98fe-4dda-8602-c4a63256a11d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8f1cdae8-aff5-4785-a4cc-a7482dc0ae3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8952bd-4141-44ef-816c-06ff6ae38bcd",
        "cursor": {
          "ref": "fd028b9b-7583-41fc-bb74-85b011e34758",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4ecbe2ff-0bfe-4483-859a-eb0d46654d83"
        },
        "item": {
          "id": "3e8952bd-4141-44ef-816c-06ff6ae38bcd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "df138381-ede9-4e06-aa8d-fed06874e8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547a00c1-e7a1-4476-a467-2f1295be087d",
        "cursor": {
          "ref": "c1c9eb69-0509-4cfc-88db-ae2df4a9f818",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1a216ae5-2768-47fe-a30c-59782195be06"
        },
        "item": {
          "id": "547a00c1-e7a1-4476-a467-2f1295be087d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "7eaec709-0dcf-44d1-9ee5-0b47757e5bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be27f4ac-51cd-4570-92ec-37a9b73bcc40",
        "cursor": {
          "ref": "10621bad-e5d0-4b81-b591-a07cfc411766",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c1c1c2f7-1fcb-4c91-8213-25caaff043fd"
        },
        "item": {
          "id": "be27f4ac-51cd-4570-92ec-37a9b73bcc40",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "03e41156-a430-41e9-9857-9883c638f272",
          "status": "Created",
          "code": 201,
          "responseTime": 737,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "52d8df5e-c6af-4e7b-b4a8-d98f96172ba9",
        "cursor": {
          "ref": "fef3e210-110c-4e4a-8a68-025f377d77a1",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fe45ab07-3aff-4c84-b3dc-340b4f9ab871"
        },
        "item": {
          "id": "52d8df5e-c6af-4e7b-b4a8-d98f96172ba9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "006e6419-df24-4b64-9ab4-59ff3f3b2855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0138ed45-763b-48f3-8886-fe74bade849a",
        "cursor": {
          "ref": "69fd2a0c-3cff-43de-94df-daae8266dacb",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ab22042d-f87a-49fb-83e9-85b7894736dc"
        },
        "item": {
          "id": "0138ed45-763b-48f3-8886-fe74bade849a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "73275481-9768-472c-b933-e601ece3840f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af0ad0b-da11-4ebf-a970-850ab422aa3d",
        "cursor": {
          "ref": "55a7fd12-8b90-4b52-ab78-f5d5b0d5451b",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e098b391-0aa6-4377-b966-870fab0ae033"
        },
        "item": {
          "id": "7af0ad0b-da11-4ebf-a970-850ab422aa3d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7b11ea9c-7533-47d1-aaae-e039ce34df95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5fb93a-d9a1-43e7-934f-bfdcb01c34ce",
        "cursor": {
          "ref": "74403855-72bc-46b9-82c8-233b18a29fca",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ae9da4f4-73a9-4f36-8bb8-980b847949f2"
        },
        "item": {
          "id": "8e5fb93a-d9a1-43e7-934f-bfdcb01c34ce",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "02bf651b-cc03-4a40-a7a3-933c0c087ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22790b8a-37f7-4647-87ad-ffcac703f7e0",
        "cursor": {
          "ref": "14e2f46c-e7aa-4f37-aaaf-d45353bfb5f0",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "172b695f-448d-4bf3-b485-7df5b4ac76c2"
        },
        "item": {
          "id": "22790b8a-37f7-4647-87ad-ffcac703f7e0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c332ddda-aff9-4653-9da9-d84b4e39a2d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ee98a7-02d9-42af-ae30-c38ea5e6500e",
        "cursor": {
          "ref": "e7ae161b-83e1-409e-875b-d8628ee3bb83",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "20008106-6054-4835-91ec-ccf59910c655"
        },
        "item": {
          "id": "59ee98a7-02d9-42af-ae30-c38ea5e6500e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c255a243-9cac-405a-bcfd-7afdb6a27a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47990480-e59b-4352-8621-a94e65a81f61",
        "cursor": {
          "ref": "dafa4faa-0b34-4631-82bb-17a930d0452e",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0b53cdf7-4bbb-4f1b-bf96-0cc418ad3074"
        },
        "item": {
          "id": "47990480-e59b-4352-8621-a94e65a81f61",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9962b587-6676-42d8-a38c-41981783fc50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb5048fd-6f97-4568-a47c-72f7239380da",
        "cursor": {
          "ref": "b52a521e-59b9-4de7-807b-52607dc8e631",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e2593c45-e52d-4c89-97d9-ddcb69b9a44b"
        },
        "item": {
          "id": "bb5048fd-6f97-4568-a47c-72f7239380da",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "af7fd6a9-211c-4800-a721-25377d041810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08fe712-dd30-407f-b1ba-e8f6bfd63a2c",
        "cursor": {
          "ref": "07bd93d9-b899-46ec-9dcb-de1296d68245",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1e8ff243-e508-4323-b7bb-6e9c15aa4bed"
        },
        "item": {
          "id": "b08fe712-dd30-407f-b1ba-e8f6bfd63a2c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a94f458b-723b-465e-9d8a-c9364318d786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf40d2ab-c14a-4f43-b35c-dc8a79bd1944",
        "cursor": {
          "ref": "063d40f2-f388-44c5-8e47-2f45930f0ae0",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f969147b-cd37-4756-9f24-a34f4869a7f8"
        },
        "item": {
          "id": "cf40d2ab-c14a-4f43-b35c-dc8a79bd1944",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fcef282f-a2aa-4b31-a3fb-5c2794dc92d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e77ab5-7b5a-4f05-b886-1afc061d7430",
        "cursor": {
          "ref": "1595d2cb-988b-4b28-901a-92c3ab2a0c9e",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ec83a1e1-2ad3-4a1f-8bc7-f741bd2ee327"
        },
        "item": {
          "id": "93e77ab5-7b5a-4f05-b886-1afc061d7430",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c8b885a2-8c51-46c3-a640-b5d2ba211bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9d3b8e-a443-42ed-88d5-28022f19917c",
        "cursor": {
          "ref": "1053c8c2-c6a4-4004-85b5-4c1257baf18e",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7bef83a1-20a7-4d2c-b696-9037337c9707"
        },
        "item": {
          "id": "5c9d3b8e-a443-42ed-88d5-28022f19917c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "97c5a6e4-a26f-47fc-8cbd-1abd29924ce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb4852d-e2ad-4e41-9ee3-7d462fa65f9b",
        "cursor": {
          "ref": "fb856ba8-ea40-4e39-91ca-2d1d3def4b9f",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f81e952d-1f5a-4b53-b1fb-8ca3f417d2c6"
        },
        "item": {
          "id": "fcb4852d-e2ad-4e41-9ee3-7d462fa65f9b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ee8a797a-52cf-4ac1-bd7f-ebdf7e9464a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 391,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7bf285dd-dcb0-4b1d-8f10-b326131fc0c3",
        "cursor": {
          "ref": "f54a8612-1f68-4ac0-b4b7-7c702675e71e",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "dca749b0-b79a-4592-876f-cb02938d01ac"
        },
        "item": {
          "id": "7bf285dd-dcb0-4b1d-8f10-b326131fc0c3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a32c806b-37b4-400c-916c-06ebdcf7cc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c94cca-1398-4e7a-b129-5b2073b69e2c",
        "cursor": {
          "ref": "05333212-0d4a-44c4-a86c-38ba7ba4501b",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cfe8bb91-2c83-4e00-8f3a-0fe3151cdc42"
        },
        "item": {
          "id": "d6c94cca-1398-4e7a-b129-5b2073b69e2c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e3a2b560-832a-4c5d-b6f8-cbbc4e53a55a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f2f193-546a-4e6d-97f2-76afe84e0335",
        "cursor": {
          "ref": "b78909c9-2906-4563-ab4a-f4d76226e942",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "35d7c80e-6cd1-4cdd-a712-9b0834b08ef7"
        },
        "item": {
          "id": "92f2f193-546a-4e6d-97f2-76afe84e0335",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "419012ec-caef-48f1-8856-463c45c90d52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b3c895-394d-4431-8289-1476c173813d",
        "cursor": {
          "ref": "2bdc3815-e3dd-405a-bfe2-25bbcf73fbd6",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "801b494b-65c9-4242-b165-cbbc8d40bac7"
        },
        "item": {
          "id": "28b3c895-394d-4431-8289-1476c173813d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "38859576-a564-49e6-98fa-9a8b96ff710d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b76bf7-30cf-4ddb-8ac9-cee8c6772bba",
        "cursor": {
          "ref": "019e9913-8d6a-4926-9632-e91b5651bce7",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "435869fd-ab2f-45ed-831c-1e329728448a"
        },
        "item": {
          "id": "36b76bf7-30cf-4ddb-8ac9-cee8c6772bba",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e620baf7-19c0-47d6-968e-71d32eda7c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2221095-d810-47df-8add-828b8e3495d0",
        "cursor": {
          "ref": "24097f4c-e6ab-4aae-bc6f-225f57a9bed1",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "94b48581-5c90-4e6b-820f-ae8de5e1a90e"
        },
        "item": {
          "id": "d2221095-d810-47df-8add-828b8e3495d0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f6de20c6-e2e4-4cae-993d-5e742f2ff774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bafe875-21e9-46f1-873d-19cb8cc71b15",
        "cursor": {
          "ref": "cb2ab7e6-3d53-4df2-ae0f-2230c831e048",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "931077ec-f56d-4321-98e5-e2a764997b02"
        },
        "item": {
          "id": "0bafe875-21e9-46f1-873d-19cb8cc71b15",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "95bc8353-6b1b-4c43-9b8a-1f84edbb2d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 387,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "48bee516-f80e-4f26-8391-5f875a4aeece",
        "cursor": {
          "ref": "ef754b44-2337-40b5-8f61-c8740e0c990b",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d8a79033-9df5-4888-a30e-0f625c4c269c"
        },
        "item": {
          "id": "48bee516-f80e-4f26-8391-5f875a4aeece",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8f5fd49d-f331-423e-9543-1595d9928297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8ca002-ac64-493f-8031-1b3eae391f63",
        "cursor": {
          "ref": "fc79680e-2e57-439f-9040-fa46092fa5fe",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3e88178b-35d4-4f31-8445-7af3682a437e"
        },
        "item": {
          "id": "cd8ca002-ac64-493f-8031-1b3eae391f63",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0fdcd37c-0f19-4300-a724-73b977c724a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9224c7db-493d-45af-9ade-0a6d01da6dc5",
        "cursor": {
          "ref": "c416d181-7392-40e3-a704-23ae25476769",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a8ab9aa4-a654-49d5-95fc-338842ac7c18"
        },
        "item": {
          "id": "9224c7db-493d-45af-9ade-0a6d01da6dc5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "dd268c03-6e50-431f-a4e9-44bc7e0da08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d454b23-129c-4721-8696-03303ec9030e",
        "cursor": {
          "ref": "4c663c2f-2bad-49d7-9576-4a5315b2b154",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3d32fda0-a2ea-4b05-abb8-dc7eec396f6b"
        },
        "item": {
          "id": "9d454b23-129c-4721-8696-03303ec9030e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e6dae40c-687e-411b-b512-73195f9b341b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540215a9-dc4d-4cc7-93a0-28c403821297",
        "cursor": {
          "ref": "be63dd7a-8a65-49cf-b622-ed87961faeaf",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "eddaf56c-1755-4188-8bab-32600d9e86b7"
        },
        "item": {
          "id": "540215a9-dc4d-4cc7-93a0-28c403821297",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b52b8ad5-60f2-437e-9d9b-cbbf886ed7aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89f9ca8-ec04-4080-a866-0e3fbad7e0c8",
        "cursor": {
          "ref": "a7b6b1e1-682a-4424-b974-02c30df3df5b",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3b310342-2a3c-4dbf-93e0-785919b68082"
        },
        "item": {
          "id": "a89f9ca8-ec04-4080-a866-0e3fbad7e0c8",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0f125dbf-a3e9-48b0-9f79-b25afa85eb8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61df8814-5fd5-4179-871d-532c852c52f6",
        "cursor": {
          "ref": "d2b16ae6-4c44-4067-bc0a-7bd01550ff39",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e877a33d-c631-4431-b8dc-dcd8e4312a70"
        },
        "item": {
          "id": "61df8814-5fd5-4179-871d-532c852c52f6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "2b47fa64-38cb-4980-b45e-43af498bce9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28306f73-bb30-468a-a898-ff2a74aa2481",
        "cursor": {
          "ref": "d64ec586-645f-4a28-bf02-d129b1dc06d5",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9c27509c-5d8d-42a2-a548-edce078c38d4"
        },
        "item": {
          "id": "28306f73-bb30-468a-a898-ff2a74aa2481",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "11baaa21-d779-4672-af3f-d68a30f738e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0676c0a4-074e-416c-9a57-384d9866a02e",
        "cursor": {
          "ref": "192b1c8c-50cd-4255-92f6-ffcf893d3a16",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "423f2075-e503-42df-9db8-fb1d522f7542"
        },
        "item": {
          "id": "0676c0a4-074e-416c-9a57-384d9866a02e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ad31f8b1-81f1-40ad-8cab-47b41b91f77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d93909c-0fd8-4cbd-a390-dc9c6bb19bfd",
        "cursor": {
          "ref": "7551c4f3-6e8d-42a6-86f9-bf254e5620f1",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4c765959-b5f8-405d-ac20-1b9e54071bc5"
        },
        "item": {
          "id": "4d93909c-0fd8-4cbd-a390-dc9c6bb19bfd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "49e687d2-9143-487b-aa72-2b20551d2e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981d98f0-aad2-4694-a15e-adad2860b74a",
        "cursor": {
          "ref": "cc4f5ca0-178f-46cc-bb60-53848fc4c36d",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5780d514-06d0-4365-baa4-9472a363ad34"
        },
        "item": {
          "id": "981d98f0-aad2-4694-a15e-adad2860b74a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ca17f0f7-e427-4079-9cdc-d6bf24cf80b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f71275-a28a-467a-80a7-82066952ba0b",
        "cursor": {
          "ref": "0be5f341-1060-431b-9d4c-2a7b68e81853",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f227d434-50fb-4fc7-84d6-5574e4228e23"
        },
        "item": {
          "id": "18f71275-a28a-467a-80a7-82066952ba0b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7a894c0b-6cfe-461e-86cc-0a7f5e19a842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad8e4d4-6d63-473c-9e09-59d115bde2d9",
        "cursor": {
          "ref": "58c30b34-09c9-40f9-854b-849443b1d436",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1647ab3a-1271-4ed6-a81d-e17407460d6e"
        },
        "item": {
          "id": "5ad8e4d4-6d63-473c-9e09-59d115bde2d9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4ade17b6-e776-447e-9b60-a91c707fe2d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c330d48-c46a-4944-b3ac-dfef4fa46200",
        "cursor": {
          "ref": "846cbaa8-dde4-4695-82e7-c62da636db33",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2c532734-6dfe-41e8-aeec-2d2cb1b1cc13"
        },
        "item": {
          "id": "8c330d48-c46a-4944-b3ac-dfef4fa46200",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "408ae88b-8b4c-4f21-9525-229b2946fadc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1722fe25-0c9f-4b6d-aaca-9a23cdeda5f7",
        "cursor": {
          "ref": "0c07a282-702d-4049-957d-acaec4877348",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "14cae9f5-9b11-4b02-a8f6-3dc0c3480e03"
        },
        "item": {
          "id": "1722fe25-0c9f-4b6d-aaca-9a23cdeda5f7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "103cbbbb-b587-442b-b58d-1eb2d7cb5a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb82e0ae-4808-440a-9593-e18a6d6b49c3",
        "cursor": {
          "ref": "2a5c1d88-425c-4790-9cb9-069fed36c805",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "855aa724-a5dd-4971-8216-e92b25f79c4d"
        },
        "item": {
          "id": "eb82e0ae-4808-440a-9593-e18a6d6b49c3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1a8020d2-6345-4702-a978-a0c473887f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163f3a58-1159-4f49-b131-96f2f2037520",
        "cursor": {
          "ref": "914bb36f-d954-41e7-b411-f60f2782d8c1",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "70d3ea04-ff35-4f34-829a-81d8ee295e8f"
        },
        "item": {
          "id": "163f3a58-1159-4f49-b131-96f2f2037520",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "946f9c9e-7f9d-406f-bd2d-046de52a4923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 230,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3252e3a9-a696-4ee1-ad03-8326548d3800",
        "cursor": {
          "ref": "6b026809-0ce4-4846-8c6c-c0916a08a8cd",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6b393d81-bedd-40ba-999a-b401d1482c2b"
        },
        "item": {
          "id": "3252e3a9-a696-4ee1-ad03-8326548d3800",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2d9ed31b-4e1c-4a65-9f60-c3b8f4b660de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bfc8276-8fb6-4bab-b3cf-4912f04568c7",
        "cursor": {
          "ref": "ee193cb2-845f-4bff-87f8-74e86c8378d5",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "74a0f220-d1e0-4953-a392-92dffe614072"
        },
        "item": {
          "id": "1bfc8276-8fb6-4bab-b3cf-4912f04568c7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4ea4e282-e938-4e61-b3d8-2f200f12913f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b90abc-a616-4083-8f19-aa1497830e49",
        "cursor": {
          "ref": "5ff96d85-0dbf-48db-837a-55a4791dccfe",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1b2a2edb-46a0-40e5-8b38-1539540d4ad8"
        },
        "item": {
          "id": "63b90abc-a616-4083-8f19-aa1497830e49",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e1fef899-aa8b-4857-8ca4-caf8346f46ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554e1da2-98f6-477b-a8d7-5e3c273257cc",
        "cursor": {
          "ref": "24b70544-dbd1-4bdb-a897-eed3d189e3c4",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "73df72d9-0cd7-42ab-9706-8e4ac16859ae"
        },
        "item": {
          "id": "554e1da2-98f6-477b-a8d7-5e3c273257cc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "222f25f4-db98-439e-955e-cb826f26c1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ceccbe8-ac1c-432c-999e-ba1a46547523",
        "cursor": {
          "ref": "be5a9942-bbd0-4097-b6ef-896e1ca025eb",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b8088331-887f-45d6-96a4-9ad698260944"
        },
        "item": {
          "id": "5ceccbe8-ac1c-432c-999e-ba1a46547523",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3328a2ad-e659-41b6-9275-9aafc4e31445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b578145-1efa-4b9e-904f-50cb3aceb754",
        "cursor": {
          "ref": "6cdcf597-5751-475c-8808-26f78e944fc9",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9292c9a3-f3c8-4e9b-b642-4a05c3c76ba5"
        },
        "item": {
          "id": "1b578145-1efa-4b9e-904f-50cb3aceb754",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "da794510-149b-4397-b4bf-5dedbd9011a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b2320a-5777-4f10-966f-f75f7ea86fd7",
        "cursor": {
          "ref": "e204ee8c-e0a1-45b5-94e5-57e6552cbc28",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "52a26330-165f-49af-b6c8-a6cc8d65ca9b"
        },
        "item": {
          "id": "64b2320a-5777-4f10-966f-f75f7ea86fd7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "24b7720a-4e5f-40bd-9af8-f9c0bdbbc2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301b0f65-a933-45ce-b27e-af46199c7202",
        "cursor": {
          "ref": "d804f204-3789-40a1-8857-20dba1de773b",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0fc9833c-1a52-4802-9871-4d8895fbad9e"
        },
        "item": {
          "id": "301b0f65-a933-45ce-b27e-af46199c7202",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "bbec41b8-3e4e-476f-99c7-ab42553e23be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b01ffa-29f4-4d18-a924-7f40b1853a11",
        "cursor": {
          "ref": "2c947f41-0f93-4381-835d-d471f084bff3",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "790c9c85-4414-41a5-9d8b-7216b70e4574"
        },
        "item": {
          "id": "d7b01ffa-29f4-4d18-a924-7f40b1853a11",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "333f081d-54cc-4e3d-889d-dc5f0be2ed26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6e27b2-91a8-4f44-be82-bfdd64a28c7b",
        "cursor": {
          "ref": "b08a3d14-1023-4a85-8b0e-c0dbc5c57341",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f2924cbb-1621-438b-b544-696f4577c313"
        },
        "item": {
          "id": "9e6e27b2-91a8-4f44-be82-bfdd64a28c7b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1bc6f83d-b508-4138-b63c-b9fb7ae91b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff91f82-b477-4258-99e2-b12fb8c78644",
        "cursor": {
          "ref": "5028e212-345a-42c9-910b-c91ca6a57850",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "dbd8d761-ecb2-43cb-a859-f855dece7b42"
        },
        "item": {
          "id": "9ff91f82-b477-4258-99e2-b12fb8c78644",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0fb516e2-26d4-4618-8701-9a25b19516ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3642ea5b-16eb-4475-8720-a9dfda7c342d",
        "cursor": {
          "ref": "8928f639-334c-43fd-9131-d7e9b6a38342",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b7fd1e9f-6186-4c26-9c61-f094b2ecbc1d"
        },
        "item": {
          "id": "3642ea5b-16eb-4475-8720-a9dfda7c342d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5166f12f-95c9-4183-a446-a38fad81c165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dce8aed-73df-4170-bdb2-980a627d32bd",
        "cursor": {
          "ref": "aab730fb-056b-4941-ae1d-f6e19303c140",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5f54d6bb-e784-4488-bfdb-bae2c719c6c3"
        },
        "item": {
          "id": "1dce8aed-73df-4170-bdb2-980a627d32bd",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "fd3004ac-0b6e-4df8-a9f7-bbab617bfb6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d52417-90d4-4a24-9416-85e74e5a4794",
        "cursor": {
          "ref": "dbf51bf4-5055-4812-97af-9aa6a0670641",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "07935c19-04d9-484e-ba44-f70d0e641aad"
        },
        "item": {
          "id": "e7d52417-90d4-4a24-9416-85e74e5a4794",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5f42fd59-289a-4a4e-967e-d2cdf072865f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 385,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4470caf-1ef9-4628-a2f7-95358efc3ef4",
        "cursor": {
          "ref": "7c737a1e-5d59-464f-9278-b2397891b572",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "82cef68b-aabc-4cb2-9bd7-4a5ebedde573"
        },
        "item": {
          "id": "a4470caf-1ef9-4628-a2f7-95358efc3ef4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "486e6cf0-0b45-456a-83b2-02153c56ef10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a93537f-e16c-477b-90b7-c826531b68f3",
        "cursor": {
          "ref": "67254861-2f6c-475c-a618-1a3020a8d2b9",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "864fcdd1-25f0-403e-bb65-c784f955ac6f"
        },
        "item": {
          "id": "7a93537f-e16c-477b-90b7-c826531b68f3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "500d8a6e-6fc3-4a1a-8b17-78fdf6fd882d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e487e355-b621-47c9-96a2-7eae2bf8f92e",
        "cursor": {
          "ref": "04e92d1e-1e9b-466f-adad-5f0856e4485c",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d88f66d2-7272-4c21-b3fe-6ec4efd8dc4a"
        },
        "item": {
          "id": "e487e355-b621-47c9-96a2-7eae2bf8f92e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0794c7b2-1df9-4fb1-beb8-2e37ca9910fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a605b9e-596c-41b1-b292-6eab9cd7af40",
        "cursor": {
          "ref": "5b01efac-8c6b-415f-b924-095c1c3f244f",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "67eab10d-e7ce-4e67-9bb5-c15fd6fc7cb1"
        },
        "item": {
          "id": "1a605b9e-596c-41b1-b292-6eab9cd7af40",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0216fc05-3f8d-4e34-b0a4-a35e6105824e",
          "status": "Created",
          "code": 201,
          "responseTime": 699,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "da0bf138-6928-410f-9830-e5ae40661b07",
        "cursor": {
          "ref": "15f024c0-b674-4c06-a143-974034f36433",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e6688bc6-5cd4-4423-8a2c-e7b801f62910"
        },
        "item": {
          "id": "da0bf138-6928-410f-9830-e5ae40661b07",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6c5cea67-f973-4af5-b499-52fbea604e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7261f82-c35b-4cc8-a080-3c31ebd0421e",
        "cursor": {
          "ref": "d21e82b9-d89d-449b-bab0-98bbd5ffa045",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "10bc13b1-fddf-4278-84d1-8c9b3e8c9d18"
        },
        "item": {
          "id": "d7261f82-c35b-4cc8-a080-3c31ebd0421e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "66154458-ba1d-4a9b-bd6e-38deeeab80e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed089d04-03e9-471a-a344-d9c1ff35613d",
        "cursor": {
          "ref": "bc925ce5-3b0f-4b65-b24e-39eb539c8a57",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d8092a6b-6f38-4399-a702-241ebe351ac9"
        },
        "item": {
          "id": "ed089d04-03e9-471a-a344-d9c1ff35613d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7d0a47d0-6fda-4e89-b311-2a3270bb2bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddde2f40-5e3f-428f-b6f7-09c6193ef930",
        "cursor": {
          "ref": "ca0c872a-de6b-49a9-b781-0dbf753beb30",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6f8e8e43-c26b-432f-aba0-ab541e72e647"
        },
        "item": {
          "id": "ddde2f40-5e3f-428f-b6f7-09c6193ef930",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b9cd7c35-4062-4260-8baa-c69e0c63b428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e6a1c2-d460-448c-b988-7c89317f86ae",
        "cursor": {
          "ref": "201fd16b-38bd-4c6a-a5e4-54587e39f3ba",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "31218f0d-612a-4ce0-94af-88dd25177efe"
        },
        "item": {
          "id": "44e6a1c2-d460-448c-b988-7c89317f86ae",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "36d70e6c-b0dc-4671-84ae-ea8eabbbd7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b34f6420-0c55-4bf9-8a75-9d70a4a58de0",
        "cursor": {
          "ref": "3153f77d-439f-401e-b4db-ada63def514f",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b5fa9677-3765-4a3e-ac9f-f63933a67e47"
        },
        "item": {
          "id": "b34f6420-0c55-4bf9-8a75-9d70a4a58de0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6b7f39fd-5307-4334-8753-e095065c6373",
          "status": "Created",
          "code": 201,
          "responseTime": 723,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "729d07ce-4dfb-4515-93bf-ab650d789c6c",
        "cursor": {
          "ref": "7976b4da-58a8-48f4-96ea-add2fdcee229",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6e7475f3-c2dc-498f-895f-a0af041c4098"
        },
        "item": {
          "id": "729d07ce-4dfb-4515-93bf-ab650d789c6c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1481409a-9575-423d-91e0-df94dfe14f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e773c4-7ece-40cc-b176-2dd10a7dda99",
        "cursor": {
          "ref": "68daab4a-f592-4e9c-a313-a9944ab25de2",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6412e919-1ce1-4e1c-a36c-1160468ddde8"
        },
        "item": {
          "id": "f2e773c4-7ece-40cc-b176-2dd10a7dda99",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a767715e-0480-4ebe-a0b3-9c5dc18ed5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "601718e1-8891-4729-993a-d265717dd8fd",
        "cursor": {
          "ref": "78eef821-0c4c-416f-a394-5c557bac0cfd",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e82306d3-99b8-48cc-bc4d-c541f0936dd4"
        },
        "item": {
          "id": "601718e1-8891-4729-993a-d265717dd8fd",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "14175d2c-f565-467c-92fc-88cfad2c640c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6093e2-4384-4f7a-a7d7-bc03f70c18b2",
        "cursor": {
          "ref": "e4cc6019-df59-47a9-9285-34dea94fe426",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "acbec5d2-a92b-48af-8837-e121ceb1fcf2"
        },
        "item": {
          "id": "1f6093e2-4384-4f7a-a7d7-bc03f70c18b2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0249aee0-cddd-4012-ab28-6d6fe0762385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702bcd7a-cd39-4201-a9d8-8ef4fa37e78d",
        "cursor": {
          "ref": "45971836-7b34-4cac-9238-978c4512f275",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "79bb3eaa-300c-415c-ae27-60a934e4c922"
        },
        "item": {
          "id": "702bcd7a-cd39-4201-a9d8-8ef4fa37e78d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e0ccd5f1-17a9-4622-b57e-ab7f72f0f7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d30dbf-c5ac-4782-8cd6-d57a82e48418",
        "cursor": {
          "ref": "f5059884-0c32-4eec-b125-b4ccd3f3de1a",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "082fd11f-6d7b-4f53-bd6c-cbde46ccf035"
        },
        "item": {
          "id": "63d30dbf-c5ac-4782-8cd6-d57a82e48418",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e072efa1-2563-4138-ad4e-72d0f08b2fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485c3445-3a59-413c-915c-b35b6df584ec",
        "cursor": {
          "ref": "77f0260b-5fc4-4ac2-8d07-d21de1d1a282",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c68d94b4-c186-488b-8016-8fb5f6429b6a"
        },
        "item": {
          "id": "485c3445-3a59-413c-915c-b35b6df584ec",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2cb3a90f-44ca-4b86-90c5-c8ae5b68f404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2305af7b-0ab7-40ca-bc01-5dc62d6b368c",
        "cursor": {
          "ref": "c85126de-3037-4c29-a5f7-1d35dbe63413",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cde0bddd-ebd7-4c25-a931-81204d79baaf"
        },
        "item": {
          "id": "2305af7b-0ab7-40ca-bc01-5dc62d6b368c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "03fe2664-9d9d-45eb-9720-69b890246edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b712abe8-663e-48c9-ac98-70a8df59e2ef",
        "cursor": {
          "ref": "3e312428-a61b-49e2-86d2-15bf31af76a0",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bf84e4f3-de9f-4557-9cc4-dc34fe2a858e"
        },
        "item": {
          "id": "b712abe8-663e-48c9-ac98-70a8df59e2ef",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cf231aae-06cb-4528-ac69-8fbfdfe2f403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "7db558e8-b62d-43d3-a7da-fc6f1062c2d8",
        "cursor": {
          "ref": "dad7f05f-2b8c-4a59-bcb7-be1ddf9b9e2c",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7bad5a04-6eca-4553-a64f-ebc025fc658f"
        },
        "item": {
          "id": "7db558e8-b62d-43d3-a7da-fc6f1062c2d8",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "732ee167-210b-4e5b-bc5c-abb4a3ca7e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "77198cb3-3386-4b74-8d2f-a660af230abb",
        "cursor": {
          "ref": "07a93faf-df4a-43d2-a721-e842046d8d41",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8e9cf11a-9b5a-4c7a-825d-309a0e9c9475"
        },
        "item": {
          "id": "77198cb3-3386-4b74-8d2f-a660af230abb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ac62b678-290e-49fb-9a60-c8e7263ae93d",
          "status": "Created",
          "code": 201,
          "responseTime": 712,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6044a23a-d81d-455b-9034-9f36ca9ab8f4",
        "cursor": {
          "ref": "4f73f82a-ec72-4a65-afb0-383083b2734d",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8d3b6e4c-d465-4bb8-9b95-9c159f2d67c8"
        },
        "item": {
          "id": "6044a23a-d81d-455b-9034-9f36ca9ab8f4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a40432f1-6ce1-4016-ac3f-b4c2c0c3b2b0",
          "status": "Created",
          "code": 201,
          "responseTime": 719,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77aa8ad-7488-471d-9d37-940513933e06",
        "cursor": {
          "ref": "8b62dd55-b99e-46e5-a09a-35f2957989ad",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6160556f-ede3-442b-8852-2856f8165fc2"
        },
        "item": {
          "id": "a77aa8ad-7488-471d-9d37-940513933e06",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a4438b87-f4f9-4ac7-8bad-a2b126dd2174",
          "status": "Created",
          "code": 201,
          "responseTime": 719,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "60fb7f8a-ff4c-4a9a-9f8d-d366fcfb1c60",
        "cursor": {
          "ref": "7260a0ef-be39-40b0-a5d1-4f54d7805459",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "693c5ccb-8668-404e-9531-2b8209995357"
        },
        "item": {
          "id": "60fb7f8a-ff4c-4a9a-9f8d-d366fcfb1c60",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "0a38e050-cc44-44d3-83aa-84c15d230029",
          "status": "Created",
          "code": 201,
          "responseTime": 715,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "063bcc44-1b46-44ab-9b7c-d057a8b47704",
        "cursor": {
          "ref": "69fc703d-ce08-4f05-b023-091233fd9a9e",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f86f3a0a-0468-4721-9ebd-554aac6e1138"
        },
        "item": {
          "id": "063bcc44-1b46-44ab-9b7c-d057a8b47704",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5f85ced5-b7d7-4a48-aa03-5ae7a93d9180",
          "status": "Created",
          "code": 201,
          "responseTime": 709,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fdced9-b28e-493f-b608-87cc9d1ad423",
        "cursor": {
          "ref": "47f95a33-8ded-48d5-83f6-67c3d8bc5301",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0598f533-c913-4131-b060-02bbb15fc5b1"
        },
        "item": {
          "id": "98fdced9-b28e-493f-b608-87cc9d1ad423",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "690cd29a-ef29-4a37-9936-65e377e282f7",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "98fdced9-b28e-493f-b608-87cc9d1ad423",
        "cursor": {
          "ref": "47f95a33-8ded-48d5-83f6-67c3d8bc5301",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0598f533-c913-4131-b060-02bbb15fc5b1"
        },
        "item": {
          "id": "98fdced9-b28e-493f-b608-87cc9d1ad423",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "690cd29a-ef29-4a37-9936-65e377e282f7",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "b3af7775-c1f0-40b1-97ec-f052e79714c2",
        "cursor": {
          "ref": "d2916669-bd52-4162-8e16-495f24467779",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "94aaff45-e954-4014-9dfa-f2ad02183120"
        },
        "item": {
          "id": "b3af7775-c1f0-40b1-97ec-f052e79714c2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a790c73d-7564-4327-be2a-c782bd651498",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "bacf0def-afa0-4f77-a42e-169ecee2455e",
        "cursor": {
          "ref": "d83a475a-90b2-4e42-9572-e0ee552842e2",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "461a5460-a26a-4078-8eeb-f0cfdd2800aa"
        },
        "item": {
          "id": "bacf0def-afa0-4f77-a42e-169ecee2455e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9b27ac98-ac12-4c42-b023-7c36ef59ff18",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "6bcd4de8-3c63-4dee-9907-14b8952dd99a",
        "cursor": {
          "ref": "15d78fa8-65fc-4286-9063-fea7b26e3449",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a859bde6-35c5-45e1-b8e1-0d2258558642"
        },
        "item": {
          "id": "6bcd4de8-3c63-4dee-9907-14b8952dd99a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "59d905b0-5b1c-4143-85de-e7163f0afd12",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "0e3c6b9a-c360-460c-b780-3287bae2f7a7",
        "cursor": {
          "ref": "d6e4fedb-3ebe-4197-8d33-4861a1bef2c1",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "bdfa9771-a958-422f-97fb-7baf60786e39"
        },
        "item": {
          "id": "0e3c6b9a-c360-460c-b780-3287bae2f7a7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f3146ffd-1ab5-49c1-a8ab-fb7622d75b0b",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "071543d7-0076-4ed6-a8ca-aa7bf1f7c4ba",
        "cursor": {
          "ref": "6b746172-4257-4eab-a327-558c16a2628d",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "24cb5668-bbd5-4d34-8727-ef6295db434e"
        },
        "item": {
          "id": "071543d7-0076-4ed6-a8ca-aa7bf1f7c4ba",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0886f526-03d2-4080-a6bc-9e11bd5370de",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "d7c96a24-dffc-4382-8600-b3f37fe9dd14",
        "cursor": {
          "ref": "845982d3-e59d-48bd-9ba2-6239630848ae",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3c8b5902-08af-4f6b-a178-34e5ed9c1afe"
        },
        "item": {
          "id": "d7c96a24-dffc-4382-8600-b3f37fe9dd14",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "03859d54-feff-4d0d-a7cb-1144219a24f3",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "ae7f75ca-0697-4bd4-b841-17d1fd896794",
        "cursor": {
          "ref": "3b54f1da-9f15-4465-abeb-3984b7afc21c",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "09b8dd67-6738-492f-8156-fc0a71fe76f5"
        },
        "item": {
          "id": "ae7f75ca-0697-4bd4-b841-17d1fd896794",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "be368565-e36c-487e-b83f-c67bf8e054b0",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "1416c981-be10-429d-a3f6-d0d007ff115a",
        "cursor": {
          "ref": "d3ba63f4-06c1-413d-bf8b-16b58757ca89",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bc528b33-c756-48b8-a4d8-913d6bfd2c08"
        },
        "item": {
          "id": "1416c981-be10-429d-a3f6-d0d007ff115a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "73d4f28a-eb88-4392-b783-6f917182f067",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "7a5bbefd-f4ca-4c4b-81b3-87ec1da32a7e",
        "cursor": {
          "ref": "60339f6d-054a-490e-b0d9-b3e89059a731",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9dbd4977-2a18-4186-8137-56fa457b272a"
        },
        "item": {
          "id": "7a5bbefd-f4ca-4c4b-81b3-87ec1da32a7e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6e88acc3-c216-4250-ac67-7aeef91fe8eb",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "bfcdf3c4-f07e-494c-83c1-0cb375b41e3f",
        "cursor": {
          "ref": "56385bdd-a872-4990-b285-0dc05c420000",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0e0c9437-577a-47f8-8718-273ba130c6c3"
        },
        "item": {
          "id": "bfcdf3c4-f07e-494c-83c1-0cb375b41e3f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bb788add-37af-4d1f-8a12-9bea016d5d7f",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "d3fe6d1e-9218-4a15-b79f-d06d2769dc87",
        "cursor": {
          "ref": "9747934a-c0db-4faf-959a-89070971ca00",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6882b8ac-0bc3-40d3-91ea-9ab315f9804c"
        },
        "item": {
          "id": "d3fe6d1e-9218-4a15-b79f-d06d2769dc87",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e13ef0d0-a734-4ff3-af95-3ba01755702b",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "c5dc91fa-db6d-44d1-ae6a-e11f5701cb49",
        "cursor": {
          "ref": "4e1f8915-c621-4ba6-b481-650c6a02fa13",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b75466f4-56e1-42d6-b883-fb7f5768bb73"
        },
        "item": {
          "id": "c5dc91fa-db6d-44d1-ae6a-e11f5701cb49",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0d312435-9c02-4e60-8ecd-63b47056d71b",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "61ba08ad-4c7e-4392-b7c2-266e980800aa",
        "cursor": {
          "ref": "a55c9745-1d70-4641-878f-9fe0fa2c91fd",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "58d31f03-2296-480b-908f-55ec7c1e169d"
        },
        "item": {
          "id": "61ba08ad-4c7e-4392-b7c2-266e980800aa",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7556e724-34e8-4df3-baec-17d918fcec08",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "90dd82f6-a12c-4a4c-8a10-222ef3851484",
        "cursor": {
          "ref": "d93bcbea-ba45-4410-ae83-1266f0ce51bb",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cd155e26-43e7-48ff-953e-13cc0c54552f"
        },
        "item": {
          "id": "90dd82f6-a12c-4a4c-8a10-222ef3851484",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "07aeeba1-0a0e-46ce-a570-8bfe9131e29a",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c207273c-6552-4b19-bf82-c52733fbc3ea",
        "cursor": {
          "ref": "d91c3cf4-a69c-4249-a35a-1e609dd45c2c",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "15f136ef-bead-4775-b7cc-b47bbc899c8c"
        },
        "item": {
          "id": "c207273c-6552-4b19-bf82-c52733fbc3ea",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d456d62a-af55-4e73-8c9a-b4281dedf183",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "0586637f-0023-4367-a9f1-a60f90c50cc0",
        "cursor": {
          "ref": "f35906c9-8c1e-4246-b13f-2cb97b7fd2d7",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9d891118-f233-4610-9b70-0aac2e5151d3"
        },
        "item": {
          "id": "0586637f-0023-4367-a9f1-a60f90c50cc0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3fb16393-fd96-4b96-a15a-fbfa05a4870d",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "9400528d-6f37-4c5b-afbd-afe21d42498f",
        "cursor": {
          "ref": "8fc69452-281f-4f67-a738-378aebd1641b",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "73e09d7e-81fa-4f1a-b088-032c01141204"
        },
        "item": {
          "id": "9400528d-6f37-4c5b-afbd-afe21d42498f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5663c8dd-fbb0-4709-abb1-83a09bce6abe",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "b03a3ec8-a101-4c62-a92a-416072946f0b",
        "cursor": {
          "ref": "e5874a81-5bee-48b9-8c28-5d767ebae912",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f9b1e6c2-daf7-4ab3-84a0-171d120db33f"
        },
        "item": {
          "id": "b03a3ec8-a101-4c62-a92a-416072946f0b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "386e6f70-74d1-4e9d-8191-eb83cdaed953",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "59cd4d7d-7025-4528-bddc-0323dc96233a",
        "cursor": {
          "ref": "af2d7b39-3742-415d-8ebc-a47c19749042",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "46d0b05a-ee1a-411b-9d74-7c930f153c47"
        },
        "item": {
          "id": "59cd4d7d-7025-4528-bddc-0323dc96233a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9a10183b-4b86-41b1-ba25-a0cc9868e670",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "6cb5b38b-84c3-4111-8cef-b5d90e9b613f",
        "cursor": {
          "ref": "37489457-c202-46ab-9df3-b9fb98342b87",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "65a5797f-1902-48e3-ba44-3b5bc6dee68c"
        },
        "item": {
          "id": "6cb5b38b-84c3-4111-8cef-b5d90e9b613f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "126f7088-6fd9-4616-9263-d8767e6d0efb",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "b686a01f-37d9-4cc9-92ae-657deac3a93f",
        "cursor": {
          "ref": "a985b971-e191-4fb9-80d0-945f5ea69249",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "09264077-a111-4a52-9238-c3fe3cda9c6f"
        },
        "item": {
          "id": "b686a01f-37d9-4cc9-92ae-657deac3a93f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e93ce57c-3f5c-4067-a654-f6e88d71a4a7",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "7fba9b4d-5b68-4bbc-8843-a0ed00f9135e",
        "cursor": {
          "ref": "3f1b1a42-5207-4b92-b10e-5b9ec24dcfd8",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e9b52ab5-20e1-43b5-b1a1-85a3f6c29093"
        },
        "item": {
          "id": "7fba9b4d-5b68-4bbc-8843-a0ed00f9135e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2b0d1ee5-ad71-4c52-8151-385659324006",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "8d28dc9c-49aa-4124-ae20-eb1843f72e88",
        "cursor": {
          "ref": "dfacfecd-4508-4fdc-b7dc-f9b7c8500179",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5d4e8ad4-8204-4a46-8f69-d5f366c75382"
        },
        "item": {
          "id": "8d28dc9c-49aa-4124-ae20-eb1843f72e88",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2c9849aa-faf7-4278-bcd0-9e51dd3cd887",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "0898f115-1443-496b-88df-d96be9acb67a",
        "cursor": {
          "ref": "d8fd4c6f-6d97-4123-8ff0-5ec7add0ef47",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c842ac83-d8a7-4877-ae2a-b9580e5ec08b"
        },
        "item": {
          "id": "0898f115-1443-496b-88df-d96be9acb67a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0ecaeb23-8c19-41af-85de-01016df03b8f",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "2a86eee5-8dbd-4eba-9658-377804accc79",
        "cursor": {
          "ref": "624bf60f-4929-4d21-8dcd-65ace489c22d",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "29a0888e-9cd4-4ed9-8a01-120734fd82d9"
        },
        "item": {
          "id": "2a86eee5-8dbd-4eba-9658-377804accc79",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "62b93085-ff14-4d5d-88fa-e1adeef81736",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "58eb9003-c0a0-4133-89eb-955555a80452",
        "cursor": {
          "ref": "c63a58e3-3471-4c35-b022-ba957c66bb58",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1f587143-4066-4402-ba0e-1274e42d8a48"
        },
        "item": {
          "id": "58eb9003-c0a0-4133-89eb-955555a80452",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a82b73f0-cb5d-4f7f-a998-fe626ab7a102",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "fc741f8e-939d-4552-998e-72119cada098",
        "cursor": {
          "ref": "04c561ef-ba9a-4cc4-be4e-cbeddb6cf898",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e73c5ef0-4243-4c88-938c-b24f07c04d49"
        },
        "item": {
          "id": "fc741f8e-939d-4552-998e-72119cada098",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "52dae1a4-4a11-4180-a426-600d6d441ef5",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "dadddb76-0410-4b45-8e7c-c68dfbd2bb34",
        "cursor": {
          "ref": "02052cfb-8001-4554-85d8-a2169278c335",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "df529c98-2737-4d1a-9f7e-12ecc4816ca0"
        },
        "item": {
          "id": "dadddb76-0410-4b45-8e7c-c68dfbd2bb34",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b6d97def-32d6-409a-81fa-6a8078851bde",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "da5d8535-81cb-477e-b817-b361852ff769",
        "cursor": {
          "ref": "e8a2c394-9191-4102-92fd-d4a8aa5da684",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f88c969b-d397-4290-b0e3-b10652e743ce"
        },
        "item": {
          "id": "da5d8535-81cb-477e-b817-b361852ff769",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f8619757-2397-469a-a271-11d3e14d2e2e",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "48cb26d9-885c-4322-a028-300fb37a13ce",
        "cursor": {
          "ref": "860fcc77-92c1-4f62-b9f0-66797b18b3ff",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "98ce47fe-9737-426a-8930-13bf70a022de"
        },
        "item": {
          "id": "48cb26d9-885c-4322-a028-300fb37a13ce",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "655bb258-688e-47a6-bdad-5add78aafa97",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "ecc2010b-fff0-4136-9129-504bbbbd07cd",
        "cursor": {
          "ref": "21f14eb5-2d74-4848-8e42-9ed5f596cff7",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e21ea3f2-2f1a-48a5-b2ce-3ef00009f7b3"
        },
        "item": {
          "id": "ecc2010b-fff0-4136-9129-504bbbbd07cd",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f1c32816-182b-49b8-b78c-66e1a6ea43d9",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "8c091a14-a782-46d0-8862-f736de0fd0ec",
        "cursor": {
          "ref": "9c84d02a-a44e-4eda-b586-a7dc3254d775",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fc9363f7-cf3e-4202-ac67-ebc20a5b29b1"
        },
        "item": {
          "id": "8c091a14-a782-46d0-8862-f736de0fd0ec",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b29db9f7-f6a3-47f5-bb52-af3005908b58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f996af38-60ab-4310-b940-ac59f1392138",
        "cursor": {
          "ref": "78538b73-2cf6-4673-bc1b-a6bba2b182b0",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c0bc9787-76d5-4d67-9d90-db4bed95f7a9"
        },
        "item": {
          "id": "f996af38-60ab-4310-b940-ac59f1392138",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "fab9a01a-4e82-412b-9554-90a87286b0d2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 79,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f69e49-82b2-4579-83ff-9486c905feae",
        "cursor": {
          "ref": "50b8c60d-3089-4f67-88fe-5b5ec0b70575",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d45aa303-39ad-4639-81b5-da641d0ceeb4"
        },
        "item": {
          "id": "44f69e49-82b2-4579-83ff-9486c905feae",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6da1856d-7e2a-4bf0-acdb-29288157e8f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f69e49-82b2-4579-83ff-9486c905feae",
        "cursor": {
          "ref": "50b8c60d-3089-4f67-88fe-5b5ec0b70575",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d45aa303-39ad-4639-81b5-da641d0ceeb4"
        },
        "item": {
          "id": "44f69e49-82b2-4579-83ff-9486c905feae",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6da1856d-7e2a-4bf0-acdb-29288157e8f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19064061-9345-41ee-9a2d-a2d839f7ffe4",
        "cursor": {
          "ref": "f2965b69-cac8-4fb0-a17b-d7a0e496ff2e",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "45289299-9345-4097-b4fb-574373f3442b"
        },
        "item": {
          "id": "19064061-9345-41ee-9a2d-a2d839f7ffe4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c684e3d5-55cf-49df-bad3-477eb448d1ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b955e27f-2d4b-42c6-98ed-38c9ebdc5e4c",
        "cursor": {
          "ref": "2de0a214-a305-4242-a625-848e748800dc",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "64d884e6-7188-439b-bc25-ffda25648c29"
        },
        "item": {
          "id": "b955e27f-2d4b-42c6-98ed-38c9ebdc5e4c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "19c24fe0-1e5f-41c8-b043-82c1eab161d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba7583b5-0e76-4996-8ffb-5b9d84bb0527",
        "cursor": {
          "ref": "f1379c13-9f7c-435b-9e74-1349185e45ef",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "27c32d97-5617-494e-bf85-a790893a4059"
        },
        "item": {
          "id": "ba7583b5-0e76-4996-8ffb-5b9d84bb0527",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5af6a9a4-2395-48cf-a894-7403aea8c01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64ec426-6e65-4818-ad25-e213960874b7",
        "cursor": {
          "ref": "c672bddc-e5da-4e45-9962-da7a052055b6",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "deb971fa-ce68-4371-83e1-e99dc1876662"
        },
        "item": {
          "id": "e64ec426-6e65-4818-ad25-e213960874b7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "30ebf2f3-d3c2-4ccc-aaf1-2587bb4ed976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006a8c99-ba9e-46d2-9d38-9458fc0e42d5",
        "cursor": {
          "ref": "95563432-0146-4a5c-a90e-1a469e1c909b",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1ef804d0-6ce2-449a-b720-a41c3c07c0ae"
        },
        "item": {
          "id": "006a8c99-ba9e-46d2-9d38-9458fc0e42d5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6d74b751-6335-4834-90b4-25199ec51a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6048ea9e-4fc1-45d9-80d3-f16c64dfbcae",
        "cursor": {
          "ref": "8bf04e2e-645c-41d7-903f-5cb3830b4cae",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "900ed4e8-ef44-48e6-9a66-b7610e60e8d1"
        },
        "item": {
          "id": "6048ea9e-4fc1-45d9-80d3-f16c64dfbcae",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9e2b38ce-483c-4bad-bde0-9c661c5725bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 266,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64716ae-a96f-41be-b09b-5b54670ce583",
        "cursor": {
          "ref": "70a3adb1-f07e-44ea-ac79-1aadee28da35",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "dafb2d20-a19e-4ff9-a9e5-52a710c4e530"
        },
        "item": {
          "id": "c64716ae-a96f-41be-b09b-5b54670ce583",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b7ca8c07-8a50-4924-8305-24310975c080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14daa826-f103-4631-8ff9-5273f82b808d",
        "cursor": {
          "ref": "3ddd7f0d-c563-44f8-87fe-6e41e144cd99",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ed417edb-1dad-4cc4-8bca-be7dc2c4520c"
        },
        "item": {
          "id": "14daa826-f103-4631-8ff9-5273f82b808d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f2e2efc1-b07f-4498-94fc-eb99631d5c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79c05b6-b7ac-407b-b707-1af50ab6532b",
        "cursor": {
          "ref": "b8952424-616b-4832-93d3-28c2b2b22510",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f70570a1-3465-4ea1-b59b-258cd0a88485"
        },
        "item": {
          "id": "b79c05b6-b7ac-407b-b707-1af50ab6532b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ce4d87a3-7e1a-43a0-9039-5750753c7f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cd507e-2351-4d29-ac14-af5f1ab79dc2",
        "cursor": {
          "ref": "ac22c1ae-4067-4ff3-a7df-a3edb5ffd719",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6f29ecbb-5c67-417b-bcf5-fa68886d8c24"
        },
        "item": {
          "id": "c2cd507e-2351-4d29-ac14-af5f1ab79dc2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "002ff614-190e-467d-ac62-309c8c8a9786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab37dd25-1c6e-48b3-89c2-86b3a41e3eb7",
        "cursor": {
          "ref": "42e1c8e7-2bf9-4c57-961e-bd72fa96aa7a",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4d4dcd78-760a-4a85-a9d0-fc333d566f1b"
        },
        "item": {
          "id": "ab37dd25-1c6e-48b3-89c2-86b3a41e3eb7",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e57b6ad5-c146-4f00-9fa8-8236f89a73e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a25ee8-821c-4847-af7e-411b0a01185f",
        "cursor": {
          "ref": "42bf45ea-e39a-407f-adde-37250e3cdefd",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6053fa30-5676-45b5-bfb9-1da4f787332a"
        },
        "item": {
          "id": "31a25ee8-821c-4847-af7e-411b0a01185f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "79fa2ef7-1701-4db1-97ef-8aea56c6c897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a3692a-717d-4675-b710-489a6c3b03f0",
        "cursor": {
          "ref": "9a2e02fb-f064-4fd4-9924-2ca8f7882f19",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8e49b584-ac89-41c3-932e-cc7cf509fe2a"
        },
        "item": {
          "id": "29a3692a-717d-4675-b710-489a6c3b03f0",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a3a49586-eea8-4ccf-afcf-5beb703e75a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361e2fc0-b688-437a-8b02-941194e3cd1a",
        "cursor": {
          "ref": "2bd68581-1a65-4522-81d5-61bac4ddef7e",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "858a14b0-f8f9-4236-9518-818196858fe8"
        },
        "item": {
          "id": "361e2fc0-b688-437a-8b02-941194e3cd1a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0e457b17-7408-48d8-82a6-2e414de0809d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f83d46e-b31f-468c-b48a-c5de5c4e5534",
        "cursor": {
          "ref": "e7043d03-a8bd-41c0-af2f-e1f66481d87c",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7b65f71e-d7b8-45ea-a373-3ab46ffa3e04"
        },
        "item": {
          "id": "3f83d46e-b31f-468c-b48a-c5de5c4e5534",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a12b6b80-ed14-44d0-8fe4-fd781dd038c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5486c187-2daa-4313-bc3c-6f89be472544",
        "cursor": {
          "ref": "c3442e8e-8395-4055-acdd-611efbe24671",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5a5fff68-5e53-4c91-ae11-8450cd35770b"
        },
        "item": {
          "id": "5486c187-2daa-4313-bc3c-6f89be472544",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8a20b517-7956-4947-ad32-b5b91d1e44aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "984e87c3-eae1-40b6-a45c-8422def8c538",
        "cursor": {
          "ref": "3a5ec8f2-e919-483b-8f7a-a09dc14db37b",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f2572757-99eb-4951-8ba3-1415504c4502"
        },
        "item": {
          "id": "984e87c3-eae1-40b6-a45c-8422def8c538",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "20bba4a1-5540-4b61-a6a8-a752c1c96e97",
          "status": "OK",
          "code": 200,
          "responseTime": 662,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "b3eb04c9-9082-44a3-939e-9d844acc8259",
        "cursor": {
          "ref": "34b0cd4b-bd32-41df-a0ae-0a9c2f1b7893",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "065a9a8f-09c4-4e5e-a6d7-d3ea087b5150"
        },
        "item": {
          "id": "b3eb04c9-9082-44a3-939e-9d844acc8259",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bad208bb-5866-4edc-96f5-84b6f911fd38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 343,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f65254d-2302-4b39-ae1f-505a512a2b79",
        "cursor": {
          "ref": "adaa26d8-273d-40aa-b58a-5cfacd78aaf0",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "242bc6cf-f043-4f5a-8a4c-b4731044abd0"
        },
        "item": {
          "id": "7f65254d-2302-4b39-ae1f-505a512a2b79",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "20f4756d-242f-45da-bfc1-7de3e6470fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 344,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c7ade7-48e2-42a1-85f8-439820cd2bef",
        "cursor": {
          "ref": "888d95b4-cd3e-4c80-ada3-0500b6f0d698",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "64595c44-0d14-4450-baa5-d5d859a5500f"
        },
        "item": {
          "id": "95c7ade7-48e2-42a1-85f8-439820cd2bef",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a2cbea50-57ba-435c-8e9b-98b738e24bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 340,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d55a782-4c40-4202-bf5a-2aea99b94ca9",
        "cursor": {
          "ref": "cec49c1b-fcf2-4530-9efd-34185aa052d5",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "bffeedaa-c339-48d7-96c9-b7c16cd80641"
        },
        "item": {
          "id": "0d55a782-4c40-4202-bf5a-2aea99b94ca9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d3400866-42cf-4064-b4a8-7ae9967ad82b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f016e1f-ddb7-43b2-bbb1-5e08c04776c7",
        "cursor": {
          "ref": "63700e00-a4db-4019-bb9d-e0d8e9b3753e",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "003ed4d3-cf24-4eb2-9ac0-53e9cf791e6c"
        },
        "item": {
          "id": "7f016e1f-ddb7-43b2-bbb1-5e08c04776c7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "27373f12-47b1-41c6-80ab-ef8eb0d0a8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 359,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97d75b1-6add-49a0-93e9-6a21a89e9f9b",
        "cursor": {
          "ref": "6cc9dccc-f8d0-48d0-9189-6b65be840eef",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "31cb7402-09c8-421e-a3f4-a26662eab6ac"
        },
        "item": {
          "id": "d97d75b1-6add-49a0-93e9-6a21a89e9f9b",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "574d4fe7-2e9f-4504-bb28-767f56072225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 334,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16cec26-4d4d-4961-9fb4-7e83ed9455d2",
        "cursor": {
          "ref": "86a56279-b358-44d5-9150-0255080cad91",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2cbc88c8-41e8-4723-8eab-452e7d53d98b"
        },
        "item": {
          "id": "b16cec26-4d4d-4961-9fb4-7e83ed9455d2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "190ca01a-d52d-4f5c-85f2-7ad2e2978bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77268d5e-4d70-473a-b0cb-67b22f78176e",
        "cursor": {
          "ref": "4af072ff-8ec7-43c3-82d1-1b255ad9164b",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "61b2b399-c589-49df-9c0e-3dcb6bd7b928"
        },
        "item": {
          "id": "77268d5e-4d70-473a-b0cb-67b22f78176e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1e1cc5ad-e7dd-4694-8bb5-a3b37feb5754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccef96dc-003a-4ae4-b67f-77a113b4e87f",
        "cursor": {
          "ref": "2046dfbe-1bd3-47fc-a096-8768c9268d10",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c2a8a3b4-305b-4c33-95b6-e66e56734988"
        },
        "item": {
          "id": "ccef96dc-003a-4ae4-b67f-77a113b4e87f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "67e0df00-b00e-4d0e-b286-047c66260517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 291,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b9619f-fa89-48ea-b862-35a1b6693f27",
        "cursor": {
          "ref": "0badf68d-50be-416a-bf22-2a518432cedc",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "80422b77-eca9-4d96-9197-b7e5836d537a"
        },
        "item": {
          "id": "86b9619f-fa89-48ea-b862-35a1b6693f27",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "55db8c90-37c9-47c9-9ebd-8bf41eae4950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a52352e-c1bd-4beb-a67e-eeafc41cf62b",
        "cursor": {
          "ref": "93718849-efac-4fb2-a44a-d48186d16a78",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9b758297-6408-4b4f-9542-96db7a484b80"
        },
        "item": {
          "id": "7a52352e-c1bd-4beb-a67e-eeafc41cf62b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "cc8a7216-b3fc-4ae5-96d2-3b212ae89c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2b3234-2390-494e-babc-61d3f05ff347",
        "cursor": {
          "ref": "c5573ffb-6a8f-4419-8de7-fc9ebfdb0ff6",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1eadaee9-36c2-48b6-a038-26f4b36e4356"
        },
        "item": {
          "id": "5f2b3234-2390-494e-babc-61d3f05ff347",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "67b73381-d9b2-4b4c-8298-13d164e0d653",
          "status": "OK",
          "code": 200,
          "responseTime": 288,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "88dae719-e674-4324-8315-d8f5e8116fe5",
        "cursor": {
          "ref": "5c425ea7-1b27-4799-9921-a43bdc29238c",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e2ca641c-e359-45d2-96f4-5d174a2fe59a"
        },
        "item": {
          "id": "88dae719-e674-4324-8315-d8f5e8116fe5",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7a3a7448-c677-4dc8-8fd1-356ef6ca91cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbae92bc-0e36-4550-be29-d2475f74b5cb",
        "cursor": {
          "ref": "df4b9680-0581-4004-88d6-92d4b8d28894",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f2dc613f-efcf-4dad-ade0-6c329da2a3de"
        },
        "item": {
          "id": "bbae92bc-0e36-4550-be29-d2475f74b5cb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "81947fda-811a-45c5-897d-a01e97f3f5af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e22aed-7fc3-4730-b148-a642b44f1031",
        "cursor": {
          "ref": "7899c9e8-16d4-433c-8fa6-7b904c697846",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fb30419c-c4c1-4a71-918e-2279062b179b"
        },
        "item": {
          "id": "b4e22aed-7fc3-4730-b148-a642b44f1031",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3366249a-bbb6-47a7-b43b-9d3587ead1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628d1589-83c5-45f6-936b-3b988a1673f0",
        "cursor": {
          "ref": "9ba589f9-9530-4fcc-b180-a2223e3bf9ab",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cda5f79a-a62e-4e65-a22f-935a31257358"
        },
        "item": {
          "id": "628d1589-83c5-45f6-936b-3b988a1673f0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "fb1f7c42-7ae8-4f17-ab9c-012b03815c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 290,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2d66c4-869f-447a-83a0-c2c5fa20067b",
        "cursor": {
          "ref": "67e00f88-529d-4f94-b159-3cce8eab57fe",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c3455463-e8dd-49de-8577-ebfa13f2aeeb"
        },
        "item": {
          "id": "6e2d66c4-869f-447a-83a0-c2c5fa20067b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "686f5537-5ac3-43ef-a567-ed6949e469d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0e25aa-8837-4219-9465-ea3905cbac10",
        "cursor": {
          "ref": "4c42dbc7-ae54-4610-89ac-e97130c1023b",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "92f34be3-091e-4c76-8969-374f676c6783"
        },
        "item": {
          "id": "2d0e25aa-8837-4219-9465-ea3905cbac10",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f613bb35-27aa-4ccf-8e77-b38a693c590f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 334,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cace23c1-97d4-4683-8c08-0fcbf78b5d10",
        "cursor": {
          "ref": "7999ff76-8326-4636-a71c-eb4cc6b0c395",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d60332fe-934d-412a-896f-8c2abc6a2eca"
        },
        "item": {
          "id": "cace23c1-97d4-4683-8c08-0fcbf78b5d10",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3af22985-d8fd-489b-8dea-52333f627a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 360,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4d45a3-db35-448b-910d-7d5c2d1ddc4e",
        "cursor": {
          "ref": "1bcb29b4-3ead-41fe-8ebc-e3b08fd68df0",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4daa9ae3-199b-45ae-a713-34bee139f67c"
        },
        "item": {
          "id": "ff4d45a3-db35-448b-910d-7d5c2d1ddc4e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "94925e54-c6c4-4a0a-957b-7f4f4e7c215c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e2c955-6a00-43c1-a453-caaba9e339af",
        "cursor": {
          "ref": "6f74df16-ed34-4f50-9fc7-89f2f1b99359",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e28336f3-8a15-4f3a-9dec-e574a660b28a"
        },
        "item": {
          "id": "80e2c955-6a00-43c1-a453-caaba9e339af",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "cd4cb371-a4e7-4f94-9b0c-e88f329fefb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b0bafe7-6ed5-4b9d-9841-541504736efa",
        "cursor": {
          "ref": "7bc71da0-3440-4162-a6e2-200342bf5d53",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9aab7449-2b19-4559-baa1-8fe7d64db051"
        },
        "item": {
          "id": "7b0bafe7-6ed5-4b9d-9841-541504736efa",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "1be9f4df-046b-4bc5-b46d-e64075170d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5129c41c-12b5-408c-b270-dc85692feb63",
        "cursor": {
          "ref": "7358bb88-9898-4e85-9d94-d51e894a3651",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "90bc97ee-5705-4c98-9ba0-6a554240d23b"
        },
        "item": {
          "id": "5129c41c-12b5-408c-b270-dc85692feb63",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c45f98ec-c8e3-4605-98e2-513573d68f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 336,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94f5bb0-6ecb-4770-989b-d34d86467e67",
        "cursor": {
          "ref": "74ae2e7f-0b45-4272-b1fe-d8512b09bed6",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ceea973d-1502-44c6-a25b-bac6fd5d869a"
        },
        "item": {
          "id": "c94f5bb0-6ecb-4770-989b-d34d86467e67",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f0cec8cc-7678-4d3a-88d0-08b60ecd1490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee6a1243-5de6-4947-b6e1-eba64a65950c",
        "cursor": {
          "ref": "d90b0ff3-7c24-4c46-b084-4ded75122fc4",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cf36b381-c2fd-4007-8563-7e34a1f2433f"
        },
        "item": {
          "id": "ee6a1243-5de6-4947-b6e1-eba64a65950c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4e9f7527-9e55-4e58-b3c7-fd7c1d2590a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b536d3f-c4d5-4d20-9ee9-fe757552ea88",
        "cursor": {
          "ref": "1b6504a1-29e7-4aa5-9e13-4590e71767e8",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "565441de-214f-4220-a9ef-ea15398a1455"
        },
        "item": {
          "id": "8b536d3f-c4d5-4d20-9ee9-fe757552ea88",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "05cdab68-aff1-4867-a757-515dcb7e981f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 339,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da838295-e151-4379-8814-7241bfad6535",
        "cursor": {
          "ref": "0fa1a552-6ad2-40bb-85fd-d3b558ba0d21",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a31d570e-d1b0-4df1-88a2-a7b4e9df97a6"
        },
        "item": {
          "id": "da838295-e151-4379-8814-7241bfad6535",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e4d699a3-478c-49ef-9546-1c525f7fce53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 332,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba4c48b-050f-4918-9dc8-76862d6297f9",
        "cursor": {
          "ref": "86198a6c-7bab-48c1-8682-9c0c46fe38de",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e15e89c3-75d4-4d59-8431-028b1d7e0bc5"
        },
        "item": {
          "id": "1ba4c48b-050f-4918-9dc8-76862d6297f9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "bf74192e-a8e9-4e7d-95b3-142bf72e6f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 371,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d246ed-25b1-44a7-83ef-a0270019d71d",
        "cursor": {
          "ref": "bcab907e-6332-4c4f-a817-d31d0cde277b",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ab1fdb28-8542-443e-80fd-984da8c2abb9"
        },
        "item": {
          "id": "c3d246ed-25b1-44a7-83ef-a0270019d71d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a3ab45c8-ed45-4e6d-8b0b-b83f0d1d2a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 366,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363f88ea-4aeb-47ce-b6f8-4420c1bb250c",
        "cursor": {
          "ref": "e43f7501-79d0-45ec-9e29-382eca043999",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7bef942f-d43f-43f9-816c-08c61731da22"
        },
        "item": {
          "id": "363f88ea-4aeb-47ce-b6f8-4420c1bb250c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5e0728ad-0c65-4de9-9104-43f92e233493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 349,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8293993-f10a-4334-80a4-dc62602dd3ad",
        "cursor": {
          "ref": "d160bee9-b870-4e63-88eb-8a51e4747e23",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5b680d6b-beee-48ac-bcca-7c765a3cecf8"
        },
        "item": {
          "id": "b8293993-f10a-4334-80a4-dc62602dd3ad",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2a9a877a-f2b6-4ae6-a3c9-4319013fd725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 378,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5713d20f-3949-43f2-970e-1ddd2c63af98",
        "cursor": {
          "ref": "88317578-06c3-47d5-bd46-995818d674f7",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ccb227d3-e851-4bf4-835b-9df81c196bb8"
        },
        "item": {
          "id": "5713d20f-3949-43f2-970e-1ddd2c63af98",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c9cc6803-1780-410c-a3f7-4671394fc6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 746,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ee66cc5-823d-4554-ab0e-e76ffd11b0b4",
        "cursor": {
          "ref": "6d80c2a9-2567-4bfd-acf5-69ae3a4c516f",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6533f32b-38cd-44c6-a672-2d4f62afbe12"
        },
        "item": {
          "id": "8ee66cc5-823d-4554-ab0e-e76ffd11b0b4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2d18358d-410a-4a64-a1da-44071db9fa5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdcfe07-eb46-47dc-b7d6-57e82cff3d8c",
        "cursor": {
          "ref": "a5e556d5-afa6-4560-ab1f-cb496118af8e",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "958ca6d2-ea39-4f03-a7db-ef23cdeed2f3"
        },
        "item": {
          "id": "8cdcfe07-eb46-47dc-b7d6-57e82cff3d8c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f8809dd6-e928-4556-9a26-7d2931166fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923aed20-a71a-41dd-b770-e8eb531c02ec",
        "cursor": {
          "ref": "491ccf60-73e6-48bd-a8dd-cbeeafbe2dbb",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "89c5db0c-4c69-4211-b723-9f6e2db017e9"
        },
        "item": {
          "id": "923aed20-a71a-41dd-b770-e8eb531c02ec",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "13b07e59-dfcb-4eb7-b2b6-c38410e8386b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 349,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8060665c-026b-4e21-8eb2-823aaac5f31d",
        "cursor": {
          "ref": "c0a84f3a-2bc8-4298-980b-19e49425da30",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e2af3256-37a7-4845-b436-381ffbf69b47"
        },
        "item": {
          "id": "8060665c-026b-4e21-8eb2-823aaac5f31d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2c0a66d1-f678-456a-8f8f-715c7153797e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe228322-5eb8-48a4-ac1b-f6ecccad8e58",
        "cursor": {
          "ref": "e01a02f5-c15b-438c-9199-24d14f386fd5",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "36ad3120-eaf7-4328-90c7-c0eecacc33be"
        },
        "item": {
          "id": "fe228322-5eb8-48a4-ac1b-f6ecccad8e58",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "23191c81-2d9a-41cf-b727-9b214645d357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95cd48b2-4d71-4d11-aa7a-1ede872db613",
        "cursor": {
          "ref": "4c4bb7b8-4869-4c07-a56d-c2c01af5f65e",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ea0196a4-e2d7-41ae-9594-f3417b17e959"
        },
        "item": {
          "id": "95cd48b2-4d71-4d11-aa7a-1ede872db613",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b0d757f2-8be3-4f53-87c3-a3596fd0f156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa60e59a-fde2-4c3b-b6fa-20a67cb0efe7",
        "cursor": {
          "ref": "5e37d4b0-9752-4262-afbb-8fa6f91da6eb",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "672684a5-f164-4752-8ed3-e98fc20d363e"
        },
        "item": {
          "id": "aa60e59a-fde2-4c3b-b6fa-20a67cb0efe7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f6a41d83-68a1-4606-974c-412022967b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32919838-a7b8-4c3b-90a0-702cda7b9838",
        "cursor": {
          "ref": "52f51e86-3bfa-464f-99f8-7b417411e2be",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "21c01a8f-b1ff-4b3e-b75d-f2b3a5f3ee34"
        },
        "item": {
          "id": "32919838-a7b8-4c3b-90a0-702cda7b9838",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2bd3aee9-8f65-451e-9b1a-9bd4179176ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 324,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e9078a-2ed2-4a2c-a752-3c301b98b6ff",
        "cursor": {
          "ref": "114dab85-c217-4bcd-b532-2d40275d45ed",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a176b221-1a97-497e-bff3-5e45f5e5101e"
        },
        "item": {
          "id": "16e9078a-2ed2-4a2c-a752-3c301b98b6ff",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b7b6782c-ecbf-45ce-b261-53f786cb8a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 219,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb59a7a6-119e-4955-b755-11f681d50359",
        "cursor": {
          "ref": "2cbc9971-a0c3-4b24-96bf-470570253b0c",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "37e600e7-b095-457d-8588-e7059d08f63a"
        },
        "item": {
          "id": "cb59a7a6-119e-4955-b755-11f681d50359",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "aec2f937-cb42-4874-9d26-e1ee31bf13fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbeeff3-5d83-4dde-b107-090b01e781e0",
        "cursor": {
          "ref": "f7b75d83-afe5-46a5-bee5-279f21c686f1",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "cedd7dfe-8e47-43bf-ba91-6150e5d81f60"
        },
        "item": {
          "id": "8bbeeff3-5d83-4dde-b107-090b01e781e0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "589d3dbb-864a-45cd-a81a-0d68f7418efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899c8610-4775-4125-8eec-784f55484aee",
        "cursor": {
          "ref": "bcbe973e-d196-4f9c-83cd-845f391e059c",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "725bced3-43e4-42a1-bc79-9b13467ba2df"
        },
        "item": {
          "id": "899c8610-4775-4125-8eec-784f55484aee",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a89225cc-9c64-42a3-933b-f3fdafff48ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9487b25-0d6f-419b-9c26-11328264d451",
        "cursor": {
          "ref": "d195f1a8-abf8-4834-bf6b-052232f923b6",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7869ba7f-4f6b-427c-af8d-8a91e296c5d8"
        },
        "item": {
          "id": "e9487b25-0d6f-419b-9c26-11328264d451",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f5b51cd9-594e-42d9-a2e4-8f7b0aa74093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 320,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948c6055-399c-4d55-93b5-5bcce6c510bb",
        "cursor": {
          "ref": "0fcbc31c-0d2e-4840-b662-3db23cd5fab7",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4860b173-5a8c-48a2-bb65-8888ec07795a"
        },
        "item": {
          "id": "948c6055-399c-4d55-93b5-5bcce6c510bb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a9b9b7f9-a609-46a4-aac2-13924aa5853e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b93135c-0b6d-4e9e-882d-c03a85397480",
        "cursor": {
          "ref": "3587bfc9-31c0-4085-b329-3ee4a567ffeb",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ff78e465-a5e3-49ca-99a8-be6d095b12ac"
        },
        "item": {
          "id": "1b93135c-0b6d-4e9e-882d-c03a85397480",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e5d53d9e-7e35-43a6-9272-6f60bd41bc42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7661113-775f-4178-aea9-806be9ac5b84",
        "cursor": {
          "ref": "5cc71647-46d2-47c7-af73-2adcee6a6e29",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7d87fe08-934d-458a-8ebb-64c5fdbe30ba"
        },
        "item": {
          "id": "f7661113-775f-4178-aea9-806be9ac5b84",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0b3efa5e-915c-443e-b349-3d864db60049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b026bd55-920f-4cd3-8296-e63a024d59de",
        "cursor": {
          "ref": "ebd687b9-bc63-4228-bfc1-debc0f32f59b",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "204f5718-dd75-40f8-817d-85efa9aa82f8"
        },
        "item": {
          "id": "b026bd55-920f-4cd3-8296-e63a024d59de",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "13ff7754-3596-48ab-a997-efb813251edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de19c4ca-0ba6-4c9b-9554-36e5e1c7c85b",
        "cursor": {
          "ref": "c42e085c-85b3-40c9-8d6d-c8b712108a49",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "918f14ef-26c8-4a19-8220-c28814ae49df"
        },
        "item": {
          "id": "de19c4ca-0ba6-4c9b-9554-36e5e1c7c85b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0262c573-08f8-4feb-8aed-7d86c5e5cc24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6527a681-1fb4-4e32-b240-03e80305d972",
        "cursor": {
          "ref": "2e983c11-ea59-4683-919f-891684d57648",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5a0e0f93-21b0-4178-9514-3691d5666c08"
        },
        "item": {
          "id": "6527a681-1fb4-4e32-b240-03e80305d972",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "59f4e03a-fee9-4c33-ad98-8476600ea1d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45d51a2-054d-4da2-9ef7-00c5e2c25039",
        "cursor": {
          "ref": "0e2edbf1-cb98-41a6-8f64-795bdcbc5a22",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0ad3614a-75fe-480e-9def-d6e267b9e5b7"
        },
        "item": {
          "id": "b45d51a2-054d-4da2-9ef7-00c5e2c25039",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "eeb31731-03ad-4061-a07a-bfdf79c70bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc9b54b-c51b-4ac0-bbf0-e99dcd76e10f",
        "cursor": {
          "ref": "20923342-4046-4d4d-8284-f1bbbdae7662",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "7059705c-f1ac-45f6-8cc1-186681473505"
        },
        "item": {
          "id": "6bc9b54b-c51b-4ac0-bbf0-e99dcd76e10f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7369555a-7c32-433e-88dd-f2d5a75d356e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a368de4-2b45-44f6-91e6-e78bc3542c28",
        "cursor": {
          "ref": "5f694106-674a-415e-a226-b445e970319a",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "daf91412-53ea-4c9a-87f2-7888ff740085"
        },
        "item": {
          "id": "4a368de4-2b45-44f6-91e6-e78bc3542c28",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "586c4654-1bdd-4a13-8dd8-fd38788a083d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3ac536-4b20-4e8c-b000-1d1965ff4818",
        "cursor": {
          "ref": "ee139cca-d191-43cb-a7a4-cf0d9aaf71af",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ba421d64-6ecd-4273-8e96-da30dd6826d2"
        },
        "item": {
          "id": "ac3ac536-4b20-4e8c-b000-1d1965ff4818",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ef0855b8-de85-4015-846c-e7e7522b9cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8efa2d3-368d-487e-8c7e-8e7eee463368",
        "cursor": {
          "ref": "d71ec8c6-3293-4241-a6f6-dbfb5a3045b4",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "58339f56-80c5-45f4-8280-181efb8c6140"
        },
        "item": {
          "id": "f8efa2d3-368d-487e-8c7e-8e7eee463368",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1af503ab-5855-4bfa-bea6-294cb42b4faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c86ffb-0e17-4556-b667-dfc89821e662",
        "cursor": {
          "ref": "4f2fa5fd-a692-48f2-a033-27ebd95e50f7",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "96fb4a5f-d7b1-46f0-8b59-10eb960b68cf"
        },
        "item": {
          "id": "36c86ffb-0e17-4556-b667-dfc89821e662",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c41f8698-b221-4527-8531-d7de7bee5175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef23534-f906-48ff-afd3-cb0555802ff2",
        "cursor": {
          "ref": "3c8c4b1c-0882-45ed-a68e-f0ae586a716d",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e8474d8c-b9fc-49ce-99b2-1dd9ee0f5734"
        },
        "item": {
          "id": "5ef23534-f906-48ff-afd3-cb0555802ff2",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9a1fb8ec-1f6f-4241-b14b-66a417a4d40c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6df54a-fa7a-4a65-9a0f-ebe78f46e5dd",
        "cursor": {
          "ref": "ca5d4bbc-28fb-40e1-9051-474bde6389ff",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f4a98d36-397d-445e-a238-5c4fb8c697f2"
        },
        "item": {
          "id": "4e6df54a-fa7a-4a65-9a0f-ebe78f46e5dd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "28850d14-5062-4940-8299-3e12693e6eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5ea067-30eb-4cf3-81de-b100e1ac0341",
        "cursor": {
          "ref": "7fc66bd7-5e4e-43c3-b989-7c657cbc375d",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c7f56692-576f-443b-8d75-0e0c290cec72"
        },
        "item": {
          "id": "7a5ea067-30eb-4cf3-81de-b100e1ac0341",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "dc556f93-2183-42af-b523-613b24062ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3f97b5-a6fd-4b3d-b8ca-f8f0482abd58",
        "cursor": {
          "ref": "4ee6daeb-e7b1-43a1-973c-d4ba46459557",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "bad39c72-8b8d-4f80-aca7-010b4e2bbcea"
        },
        "item": {
          "id": "9d3f97b5-a6fd-4b3d-b8ca-f8f0482abd58",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "04a3f471-d60a-4ec2-9c85-f35d55c70714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f52ab984-96f2-4d35-824e-50605ead0cf2",
        "cursor": {
          "ref": "da8eebae-0061-4000-bbd7-934bec586374",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ea8840a8-43e0-4da8-8ade-3acea8a661f3"
        },
        "item": {
          "id": "f52ab984-96f2-4d35-824e-50605ead0cf2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9bbe160c-928c-44b9-9d92-cfb02195388f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4d372f-2f4d-4ba9-a511-be1bff82ce83",
        "cursor": {
          "ref": "922b3c44-05bd-4bce-badb-20b7df6cc5b4",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3f34a1e0-c7d7-4166-aac9-d11a97d63d37"
        },
        "item": {
          "id": "0e4d372f-2f4d-4ba9-a511-be1bff82ce83",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "30698b47-186c-4839-ac25-e08d802c0542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0840e913-d966-4fd2-8718-bdbacb73541e",
        "cursor": {
          "ref": "13e4b236-27e3-4eda-8c06-29787f498e6a",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8a2fe491-056a-48c7-a033-3fa0e4d03826"
        },
        "item": {
          "id": "0840e913-d966-4fd2-8718-bdbacb73541e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "920c7390-f0f5-4b06-aa2a-e09808a11a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b3491e-41b1-4bed-9d10-49a615be5e75",
        "cursor": {
          "ref": "c44a8279-cbd2-4953-b2e5-cd325c0e61fa",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3587ed87-008a-4fd6-a38d-cb8e968387df"
        },
        "item": {
          "id": "11b3491e-41b1-4bed-9d10-49a615be5e75",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ae4d0c1f-cbcb-4bbd-bd16-5e91a3eb4fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41185e1c-b893-4278-b885-915cd279b017",
        "cursor": {
          "ref": "bb0d48e5-20e3-45f0-819f-429d0422360d",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d6b609a9-b74a-4be5-8cd7-a159299bddd6"
        },
        "item": {
          "id": "41185e1c-b893-4278-b885-915cd279b017",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b47d785d-065d-4ec8-8077-279a0a12786d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da2b64e-4b3a-4c00-9723-549a41a8fc7d",
        "cursor": {
          "ref": "b22c2922-3b17-4edc-a540-6d734c645af0",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9132e00c-e909-4b55-96b3-f9a8e767f37d"
        },
        "item": {
          "id": "3da2b64e-4b3a-4c00-9723-549a41a8fc7d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "dd019598-ec5d-434a-b253-f7c58038115f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f266f15-43b2-44ef-96fb-79b5b8dcb762",
        "cursor": {
          "ref": "e89581f7-73b3-4b5b-b411-7bee39063aa3",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "184279ed-0365-4c85-9fb3-96a1430be395"
        },
        "item": {
          "id": "2f266f15-43b2-44ef-96fb-79b5b8dcb762",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3ae3c1ad-8549-482b-b0f8-09e2a1975117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5951eee-91eb-4ecd-866f-726137ea8d53",
        "cursor": {
          "ref": "24b79764-4807-46b5-b9b0-133e8d8ac19e",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0e1be984-2e33-44f6-90ac-9e492b12c3a5"
        },
        "item": {
          "id": "e5951eee-91eb-4ecd-866f-726137ea8d53",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b609c8ec-c532-4329-b351-33f497f91b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1faaac9f-a715-4db6-8717-7651b03f84b3",
        "cursor": {
          "ref": "ef8624bc-f03d-468f-880b-00a685a2a3be",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b1423cf5-0a14-4e17-8f41-803dc0f6c4a4"
        },
        "item": {
          "id": "1faaac9f-a715-4db6-8717-7651b03f84b3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c0a41f02-2777-467b-ac77-6a0f2920c90d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb38a60-d015-441d-b619-12234a456abc",
        "cursor": {
          "ref": "87e188c0-4052-4510-b9fa-c7cbaf3e219e",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ac866b7d-4c66-4205-8de0-e0fee9cd95c5"
        },
        "item": {
          "id": "2fb38a60-d015-441d-b619-12234a456abc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8c36a998-f1a0-4955-86ff-389239418cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f03b31-c9d0-4f82-b664-0586f89801e0",
        "cursor": {
          "ref": "4f948149-102a-4d9b-9000-3fd7960e26bc",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f4f13327-9bdf-4bd8-9205-7c7d98d7696a"
        },
        "item": {
          "id": "f2f03b31-c9d0-4f82-b664-0586f89801e0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d256bd46-9a8c-487b-94d0-1a1d2353ced8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e903939c-5efb-46f4-9b69-8562ba11cb05",
        "cursor": {
          "ref": "10e0179c-bc18-4e24-9582-e52d1ce0a369",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "470289d9-23d3-4da1-bbaf-18bb54cd5c57"
        },
        "item": {
          "id": "e903939c-5efb-46f4-9b69-8562ba11cb05",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fd5c5cab-c1a5-42db-80b6-119ab3774c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c738cb1-f9c9-4cc3-a3f6-113840438dce",
        "cursor": {
          "ref": "b17df841-a570-407c-a413-50cfb6b62fe9",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "56aef2a2-da27-4629-a42f-98034cdbf943"
        },
        "item": {
          "id": "2c738cb1-f9c9-4cc3-a3f6-113840438dce",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "8f2b6701-5c7d-46c7-9fd9-100bc7b75a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2fafebe-7c15-48df-a4fa-787e39ccd941",
        "cursor": {
          "ref": "e1ae8cb9-3ad5-4c52-be9f-0c5d281ea3a3",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e5fc80f0-c6d5-480f-92c4-2b47ddde611d"
        },
        "item": {
          "id": "c2fafebe-7c15-48df-a4fa-787e39ccd941",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "85c9e866-460d-4029-b703-ef46affc8177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3820e67b-1b45-4090-b5a6-efe124809009",
        "cursor": {
          "ref": "66c3e9dd-1a2b-426e-a833-0c3bb1b8a9cd",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "07abad7e-9cbf-4535-920f-b9fa4f4320e8"
        },
        "item": {
          "id": "3820e67b-1b45-4090-b5a6-efe124809009",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8ca28218-b5d5-4119-ada3-fe10ad93af43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36791631-2c2d-479f-8993-b2fcbae065d9",
        "cursor": {
          "ref": "3c11a713-5ceb-44cf-98f5-e77e6db4a080",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b05a2614-1102-40d3-9ba8-aecc97989afb"
        },
        "item": {
          "id": "36791631-2c2d-479f-8993-b2fcbae065d9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "09e5049e-077b-4927-9a5d-84ab5274d990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b49aef-f29d-4db7-999b-6994e938188e",
        "cursor": {
          "ref": "f3b312fb-f763-4488-8649-7e4e4741e490",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9494a10a-162d-4967-9016-2f9326e19f5c"
        },
        "item": {
          "id": "96b49aef-f29d-4db7-999b-6994e938188e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "82b3f1bc-4b0f-46db-86a4-5fe061fc65b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4af9c1-11db-486c-a58c-16de7b5fabfa",
        "cursor": {
          "ref": "a9dba0e4-df51-4f08-b44e-e63ecb7c8dfe",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cf89ea5c-631b-4f30-90f8-2992879440f8"
        },
        "item": {
          "id": "bc4af9c1-11db-486c-a58c-16de7b5fabfa",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "59566f88-337e-4ccb-a4ac-942b7f94054b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c4752b-64bc-4201-a831-fea00557f531",
        "cursor": {
          "ref": "a3caddcb-dbe8-45ae-8959-7a4b0ff4f52f",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9cff67b1-e816-4647-a330-8342986f4dfa"
        },
        "item": {
          "id": "55c4752b-64bc-4201-a831-fea00557f531",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f950fc76-ddd7-4581-b939-576a248dd431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9033a3f-d34d-4ff8-8aef-0c85b63c9280",
        "cursor": {
          "ref": "05628532-3500-43fc-a58d-bc549445aa2b",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "89254867-6a0b-4524-899c-491d6683358c"
        },
        "item": {
          "id": "a9033a3f-d34d-4ff8-8aef-0c85b63c9280",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "768bcbb8-9f3a-4afe-a275-39328dde6011",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2146dd-af43-4d66-a0e1-5597148760d3",
        "cursor": {
          "ref": "487cb1bd-35f8-4b64-9605-65a072bc0037",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9bb05341-8682-4519-8dbe-c881fe4228f2"
        },
        "item": {
          "id": "5b2146dd-af43-4d66-a0e1-5597148760d3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "795d45d3-0943-42c7-9408-20a2d6b55f4e",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acfe5b7-580b-4780-9379-83d5c07ad5ad",
        "cursor": {
          "ref": "e41f9ed1-6e15-43b8-acb2-4c0b1e51efe3",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "939c215f-3708-46da-9c57-f8364248cccc"
        },
        "item": {
          "id": "0acfe5b7-580b-4780-9379-83d5c07ad5ad",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a7413859-47da-41c5-95b3-e94302a31863",
          "status": "OK",
          "code": 200,
          "responseTime": 278,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "20171af3-c077-4731-b39a-87b173501176",
        "cursor": {
          "ref": "8d042014-8d4b-4c43-8890-fab056514058",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a4848e44-d335-4a43-8a67-bf16af256549"
        },
        "item": {
          "id": "20171af3-c077-4731-b39a-87b173501176",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6ca60c4e-f590-495b-9236-85ca2cc53e15",
          "status": "OK",
          "code": 200,
          "responseTime": 637,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "628f326c-26f6-401a-87af-79b2936387ff",
        "cursor": {
          "ref": "1f16d734-fa8f-4d37-9da2-601792685b03",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "82f6878d-cd5d-46ba-ad84-eb0df65a4fce"
        },
        "item": {
          "id": "628f326c-26f6-401a-87af-79b2936387ff",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f1ac5138-2d65-4ca3-a003-7aa1061fae74",
          "status": "OK",
          "code": 200,
          "responseTime": 631,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "499a743d-f5a8-4b2e-a989-64ca6f4a7ea3",
        "cursor": {
          "ref": "062f5c60-ac2b-4d86-bc7d-6181087f6387",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "24a04884-792f-4f27-9f4b-0f6785466761"
        },
        "item": {
          "id": "499a743d-f5a8-4b2e-a989-64ca6f4a7ea3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6afe3d4d-2f47-4a0b-9ad7-9ac7a6a78455",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499a743d-f5a8-4b2e-a989-64ca6f4a7ea3",
        "cursor": {
          "ref": "062f5c60-ac2b-4d86-bc7d-6181087f6387",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "24a04884-792f-4f27-9f4b-0f6785466761"
        },
        "item": {
          "id": "499a743d-f5a8-4b2e-a989-64ca6f4a7ea3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6afe3d4d-2f47-4a0b-9ad7-9ac7a6a78455",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499a743d-f5a8-4b2e-a989-64ca6f4a7ea3",
        "cursor": {
          "ref": "062f5c60-ac2b-4d86-bc7d-6181087f6387",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "24a04884-792f-4f27-9f4b-0f6785466761"
        },
        "item": {
          "id": "499a743d-f5a8-4b2e-a989-64ca6f4a7ea3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6afe3d4d-2f47-4a0b-9ad7-9ac7a6a78455",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7294f74f-f5d1-4d40-8cb2-515db50811cb",
        "cursor": {
          "ref": "3edea60e-f949-4178-bded-ec5b98b27f07",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e6d14c67-24cd-4d9f-bc77-35e7039b40f2"
        },
        "item": {
          "id": "7294f74f-f5d1-4d40-8cb2-515db50811cb",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "3730d8c6-27ab-45ba-af26-d3ff7cb683bc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 64,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa0b300-6720-4ecc-8986-cdffa3878239",
        "cursor": {
          "ref": "14ead8f7-a533-4345-a77b-a63347067ec9",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5213386b-e060-461e-be07-b6ae72467a80"
        },
        "item": {
          "id": "9fa0b300-6720-4ecc-8986-cdffa3878239",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f54d19e9-bfd6-438a-82a0-b45daf149f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9fa0b300-6720-4ecc-8986-cdffa3878239",
        "cursor": {
          "ref": "14ead8f7-a533-4345-a77b-a63347067ec9",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5213386b-e060-461e-be07-b6ae72467a80"
        },
        "item": {
          "id": "9fa0b300-6720-4ecc-8986-cdffa3878239",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f54d19e9-bfd6-438a-82a0-b45daf149f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "130e139a-a813-4559-be9a-5a37ea34a264",
        "cursor": {
          "ref": "7d219cb8-9e0f-43b5-8f74-dccbf72862c6",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f07203c3-eac8-4a89-abbf-7c281d29d26c"
        },
        "item": {
          "id": "130e139a-a813-4559-be9a-5a37ea34a264",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "b5affda4-f816-419c-aded-dbd72360b228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "f181cefe-46f7-4bb8-b737-f57fbb813f3e",
        "cursor": {
          "ref": "cee3bca2-06f3-44d1-ad73-65d21938f4f3",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ff495b37-9292-47b0-91cc-6696508f6f8d"
        },
        "item": {
          "id": "f181cefe-46f7-4bb8-b737-f57fbb813f3e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0174f2df-8243-42f5-a71a-84c15f5b791d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "f181cefe-46f7-4bb8-b737-f57fbb813f3e",
        "cursor": {
          "ref": "cee3bca2-06f3-44d1-ad73-65d21938f4f3",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ff495b37-9292-47b0-91cc-6696508f6f8d"
        },
        "item": {
          "id": "f181cefe-46f7-4bb8-b737-f57fbb813f3e",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0174f2df-8243-42f5-a71a-84c15f5b791d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "d41aad2a-f332-49f5-88a4-ec621ab14110",
        "cursor": {
          "ref": "728abdef-ec68-4a0d-a81c-9b768fde580a",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2e3d3ad7-0167-4603-a2f1-73f8b8eef83b"
        },
        "item": {
          "id": "d41aad2a-f332-49f5-88a4-ec621ab14110",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "af28a8e4-1f9f-4400-9ecb-ab12279d786c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}